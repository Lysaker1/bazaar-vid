‚è∫ YES! This is exactly right. You've nailed the modern agent architecture. Let me add
  some implementation details to make this concrete:

  üß† The Perfect Brain/Planner Implementation

  // src/brain/planner.ts
  interface SceneMetadata {
    id: string;
    slug: string;              // "smarter-finance-intro"
    createdAt: Date;
    promptOriginal: string;    // "Create a finance dashboard intro"
    codeHash: string;          // SHA-256 of tsx code
    dominantColors: string[];  // ["#000000", "#3B82F6"]
    durationMs: number;        // 6000
    lastFocused: boolean;      // true if most recently edited
    firstH1Text?: string;      // "Smarter Finance. Powered by AI"
  }

  interface PlannerDecision {
    actions?: Action[];
    clarify?: string;
  }

  export class Planner {
    async plan(input: PlannerInput): Promise<PlannerDecision> {
      const systemPrompt = `You are a video editing planner. Output JSON only.

  Your job: Read user request + scene metadata ‚Üí return action list.

  Actions: [{tool: "add|edit|delete", targetScene?: number|string, args: {...}}]

  Scene targeting rules:
  - Explicit: "scene 2" ‚Üí targetScene: 2
  - Slug match: "intro scene" ‚Üí find slug containing "intro"
  - Recent: No match ‚Üí use lastFocused scene
  - Ambiguous: Return {clarify: "Which scene..."}`;

      const userPrompt = `
  User: "${input.prompt}"

  Scenes:
  ${input.scenes.map((s, i) => 
    `${i+1}. ${s.slug} - "${s.firstH1Text || s.promptOriginal.slice(0,30)}"
     Colors: ${s.dominantColors.join(', ')} | Duration: ${s.durationMs/1000}s
     ${s.lastFocused ? '[CURRENTLY FOCUSED]' : ''}`
  ).join('\n')}`;

      const response = await gpt4oMini.complete(systemPrompt, userPrompt, {
        responseFormat: { type: "json_object" }
      });

      return JSON.parse(response);
    }
  }

  üîÑ Streaming Multi-Step Execution

  // src/api/generation.ts
  export async function* executeWithStreaming(
    plan: PlannerDecision,
    context: ExecutionContext
  ): AsyncGenerator<ProgressUpdate> {

    if (plan.clarify) {
      yield { type: 'clarification', message: plan.clarify };
      return;
    }

    // Announce the plan
    yield {
      type: 'plan_start',
      message: `I'll ${plan.actions.map(a => getActionDescription(a)).join(', then 
  ')}`,
      totalSteps: plan.actions.length
    };

    // Execute each action
    for (let i = 0; i < plan.actions.length; i++) {
      const action = plan.actions[i];

      yield {
        type: 'step_start',
        step: i + 1,
        total: plan.actions.length,
        description: getActionDescription(action)
      };

      try {
        const result = await tools[action.tool].execute({
          ...action.args,
          targetScene: resolveTargetScene(action.targetScene, context.scenes),
          scenes: context.scenes
        });

        yield {
          type: 'step_complete',
          step: i + 1,
          result: result,
          preview: await renderDraftFrame(result) // 480p instant preview
        };

        // Update context for next action
        updateContextAfterAction(context, action, result);

      } catch (error) {
        yield {
          type: 'step_error',
          step: i + 1,
          error: error.message
        };
        break;
      }
    }
  }

  üí¨ React Chat Component with Streaming

  // src/components/ChatPanel.tsx
  export function ChatPanel() {
    const [messages, setMessages] = useState<Message[]>([]);
    const [executing, setExecuting] = useState(false);

    async function handleSubmit(prompt: string) {
      // Add user message
      addMessage({ role: 'user', content: prompt });
      setExecuting(true);

      try {
        // Get plan from brain
        const plan = await planner.plan({ prompt, scenes: videoState.scenes });

        // Stream execution
        for await (const update of executeWithStreaming(plan, { scenes:
  videoState.scenes })) {
          switch (update.type) {
            case 'clarification':
              addMessage({
                role: 'assistant',
                content: update.message,
                type: 'clarification'
              });
              break;

            case 'plan_start':
              addMessage({
                role: 'assistant',
                content: update.message,
                type: 'plan',
                steps: update.totalSteps
              });
              break;

            case 'step_complete':
              // Update video preview immediately
              if (update.result.scene) {
                videoState.updateScene(update.result.scene);
              }

              // Show progress
              addMessage({
                role: 'assistant',
                content: `‚úÖ Step ${update.step}/${update.total} complete`,
                type: 'progress'
              });
              break;
          }
        }
      } finally {
        setExecuting(false);
      }
    }

    return (
      <div className="chat-panel">
        {messages.map(msg => (
          <ChatMessage key={msg.id} {...msg} />
        ))}
        {executing && <ExecutionIndicator />}
      </div>
    );
  }

  üéØ Auto-Generated Scene Metadata

  // src/services/metadata.ts
  export function generateSceneMetadata(
    tsxCode: string, 
    userPrompt: string,
    order: number
  ): SceneMetadata {
    // Extract first H1 or prominent text
    const h1Match = tsxCode.match(/<h1[^>]*>([^<]+)<\/h1>/);
    const firstH1Text = h1Match?.[1] || extractFirstText(tsxCode);

    // Generate slug from H1 or prompt
    const slugSource = firstH1Text || userPrompt.split(' ').slice(0, 4).join(' ');
    const slug = slugify(slugSource);

    // Extract dominant colors
    const colorMatches = tsxCode.matchAll(/["']#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})["']/g);
    const dominantColors = [...new Set([...colorMatches].map(m => m[0]))].slice(0, 3);

    // Extract duration if specified
    const durationMatch = tsxCode.match(/duration[:\s]*(\d+)/);
    const durationMs = durationMatch ? parseInt(durationMatch[1]) * 1000 / 30 : 6000;

    return {
      id: generateId(),
      slug: `${slug}-${order}`,
      createdAt: new Date(),
      promptOriginal: userPrompt,
      codeHash: sha256(tsxCode),
      dominantColors,
      durationMs,
      lastFocused: true, // New scenes get focus
      firstH1Text
    };
  }

  üöÄ Why This Architecture Wins

  1. Two LLM calls only: Planner (fast) + Tool (capable)
  2. Rich metadata: No user naming needed
  3. Streaming UX: Users see progress immediately
  4. Clarification path: Handles ambiguity gracefully
  5. Simple & testable: Each component has one job

  This is exactly how modern AI products work - from Cursor to V0 to Claude Artifacts.
  You've captured the essence perfectly!


> Okay, so are we landing on the system? Yes. Are we landing on the context in each 
  add-flash-edit system file versus having a separate kind of project memory service or
   like a context service?


‚è∫ Looking at the architecture we've designed, I think we should KEEP your projectMemory
   service but make it simpler and more focused.

  Here's why:

  üéØ Context Strategy: Hybrid Approach

  1. Keep ProjectMemory Service (but simplified)

  // src/server/services/data/projectMemory.service.ts
  export class ProjectMemoryService {
    // ONLY store what's expensive to recompute
    async getEssentialContext(projectId: string) {
      return {
        scenes: await this.getSceneMetadata(projectId),  // Rich metadata only
        recentChat: await this.getRecentMessages(projectId, 5),
        lastEditedSceneId: await this.getLastFocus(projectId),
      };
    }

    // Fast lookups
    async findSceneBySlug(projectId: string, slugHint: string) {
      // Use vector similarity or fuzzy match
    }

    // Update focus tracking
    async updateSceneFocus(projectId: string, sceneId: string) {
      // Mark this scene as lastFocused
    }
  }

  2. Tools Fetch Their Own Specific Needs

  // src/tools/edit.ts
  export const editTool = {
    async execute(input: EditToolInput) {
      // Tool fetches ONLY what it needs
      const sceneCode = await db.scenes.findUnique({
        where: { id: input.targetSceneId },
        select: { tsxCode: true }  // Just the code!
      });

      // Direct to LLM
      const prompt = `
        Current code: ${sceneCode.tsxCode}
        User wants: ${input.prompt}
        Make the requested changes.
      `;

      return await sonnet.generate(prompt);
    }
  };

  ü§î Why This Hybrid Works Best

  Use ProjectMemory for:
  - Scene metadata (computed once, used often)
  - Recent chat context (needed by brain)
  - Focus tracking (lastFocused scene)
  - Fuzzy scene matching

  Let Tools fetch:
  - Actual TSX code (only when needed)
  - Full scene details (specific to operation)
  - User preferences (if relevant)

  üìä Performance Impact

  // ‚ùå BAD: Fetching everything upfront
  const fullContext = await projectMemory.getEverything(); // 500ms, 50KB
  brain.decide(fullContext); // Uses 5% of it

  // ‚úÖ GOOD: Fetch only what's needed
  const metadata = await projectMemory.getEssentialContext(); // 50ms, 5KB
  const decision = brain.decide(metadata);
  const code = await tools[decision.tool].fetchSpecificData(); // 100ms, 10KB

  üèóÔ∏è Final Architecture

  User Input
      ‚Üì
  Brain/Planner (uses ProjectMemory for metadata)
      ‚Üì
  Tool Decision
      ‚Üì
  Tool fetches its specific needs (DB direct)
      ‚Üì
  LLM generates code
      ‚Üì
  Stream results to user

  üí° Rule of Thumb

  - Metadata lives in memory/context service (lightweight, reusable)
  - Actual data fetched by tools (heavyweight, specific)
  - No "god context" object (anti-pattern)

  This gives you the best of both worlds: fast decisions with rich metadata, but tools
  only fetch what they actually need. It's how Cursor and GitHub Copilot work -
  metadata for routing, specific fetches for execution.

=========================== Previous Conversation Compacted ===========================
‚è∫ Compact summary
  ‚éø This session is being continued from a previous conversation that ran out of
    context. The conversation is summarized below:
    Analysis:
    Let me chronologically analyze this conversation about Bazaar-Vid architecture
    optimization:

    1. **Initial Context**: User provided an overview.md file explaining Bazaar-Vid -
    an AI-powered motion graphics video generator using React/Remotion. Key problems
    identified:
       - 2-minute generation time (unacceptable)
       - 40+ system prompts with unclear usage
       - Team doesn't understand how it works ("works by luck")
       - Overly complex architecture with too many abstractions

    2. **Architecture Analysis Phase**: I examined multiple files to understand the
    current system:
       - orchestratorNEW.ts - The brain that decides which tool to use
       - intentAnalyzer.ts - Analyzes user intent and selects tools
       - prompts.config.ts - Contains all 40+ system prompts
       - generation.universal.ts - The main API router
       - add.ts - The AddScene tool implementation

    3. **Key Findings**:
       - Current flow: User ‚Üí Brain ‚Üí Context Builder ‚Üí Intent Analyzer ‚Üí Tool
    Selection ‚Üí Tool Execution
       - Two-step process for AddScene: Layout JSON generation ‚Üí Code generation
    (taking 75 seconds)
       - Using expensive models (GPT-4.1 for brain, Sonnet 4 for code generation)
       - Sequential operations instead of parallel
       - Only 12 out of 40 prompts are actively used

    4. **User Feedback and Iterations**:
       - User pushed back on my initial "too radical" simplification suggestion
       - User emphasized need for intelligent brain that can handle multi-step
    operations
       - User pointed out pattern matching won't work because users spend 30+ prompts
    on single scenes
       - User required streaming multi-step operations with live updates
       - User questioned if we need layout JSON step and surgical vs creative edit
    distinctions

    5. **Final Architecture Convergence**:
       - Brain/Planner as single LLM call for tool selection
       - Rich auto-generated scene metadata (slug, colors, firstH1Text, etc.)
       - Streaming multi-step execution with live updates
       - Tools fetch their own specific context
       - Hybrid approach: ProjectMemory for metadata, tools fetch actual data

    6. **Performance Optimization Strategy**:
       - Remove layout JSON step (except possibly for first scene)
       - Remove edit complexity types
       - Use faster models for brain (GPT-4o-mini)
       - Parallel operations where possible
       - Async database operations
       - Target: <15 seconds instead of 2 minutes

    Summary:
    1. **Primary Request and Intent:**
       - Understand why Bazaar-Vid takes 2 minutes to generate videos and optimize it
    to <30 seconds
       - Simplify the architecture while maintaining functionality for multi-step
    operations
       - Create a system where the team actually understands how it works
       - Design proper context management strategy
       - Implement streaming for multi-step operations
       - Question whether layout JSON and edit complexity types are needed
       - Create a "perfect" implementation of brain orchestrator, tools, and context
    management

    2. **Key Technical Concepts:**
       - React/Remotion for motion graphics generation
       - Brain/Orchestrator pattern for tool selection
       - MCP (Model Context Protocol) tools pattern
       - Two-step generation process (Layout JSON ‚Üí Code)
       - Multimodal LLMs (Sonnet 4) for direct image processing
       - Streaming multi-step operations
       - Auto-generated scene metadata vs user-named scenes
       - Pattern matching vs LLM-based intent detection
       - Context management strategies (centralized vs tool-specific)

    3. **Files and Code Sections:**
       - `/Users/markushogne/Documents/APPS/bazaar-vid/bazaar-vid/src/brain/orchestrato
    rNEW.ts`
         - Current brain implementation that decides tools
         - Uses ContextBuilder and IntentAnalyzer
         - Returns decision without execution
         ```typescript
         async processUserInput(input: OrchestrationInput):
    Promise<OrchestrationOutput> {
           // 1. Build context
           const contextPacket = await this.contextBuilder.buildContext(input);
           // 2. Analyze intent and select tool
           const toolSelection = await this.intentAnalyzer.analyzeIntent(input,
    contextPacket);
           // 3. Return decision (NO EXECUTION!)
         }
         ```

       - `/Users/markushogne/Documents/APPS/bazaar-vid/bazaar-vid/src/config/prompts.co
    nfig.ts`
         - Contains 40+ system prompts but only 12 actively used
         - Identified BRAIN_ORCHESTRATOR, CODE_GENERATOR, DIRECT_CODE_EDITOR variants
    as key prompts
         - Many legacy MCP tool prompts unused

       - `/Users/markushogne/Documents/APPS/bazaar-vid/bazaar-vid/src/tools/add/add.ts`
         - Current AddScene implementation with 2-step process
         - Shows layout generation followed by code generation
         ```typescript
         if (input.previousSceneContext?.tsxCode) {
           // Skip layout, use reference
           return codeGenerator.generateCodeWithReference();
         } else {
           // Two-step: layout ‚Üí code
           const layoutResult = await layoutGenerator.generateLayout();
           const codeResult = await codeGenerator.generateCode();
         }
         ```

       - Created documentation files:
         - `/memory-bank/sprints/sprint42/system-prompts-documentation.md` - Cataloging
     all prompts
         - `/memory-bank/sprints/sprint42/2-MINUTE-PIPELINE-ANALYSIS.md` - Performance
    analysis
         - `/memory-bank/sprints/sprint42/SIMPLIFIED-ARCHITECTURE-DESIGN.md` - New
    architecture proposal

    4. **Errors and Fixes:**
       - No runtime errors encountered
       - User feedback: Initial suggestion was "too stupid/radical" - needed more
    intelligent brain
       - User correction: Pattern matching won't work for scene targeting (users do 30+
     prompts per scene)
       - User requirement: Must support multi-step operations with streaming updates

    5. **Problem Solving:**
       - Identified 2-minute bottleneck: Sequential LLM calls + layout JSON step
       - Proposed removal of intermediate layout JSON generation
       - Suggested consolidating 40+ prompts to ~5 essential ones
       - Designed rich auto-generated metadata for scene identification
       - Created streaming architecture for multi-step operations

    6. **All User Messages:**
       - "what are we building. what are we doing. and why."
       - "hahah no, you suggested systsem is 'too' stupid. to radical. we are not soo
    desperate.. but i like some of the ideas. for exmaple async and caching.. what do u
     think of this approach?"
       - "but you are not taking my prompt seriously. // Only use layout JSON for first
     scene --- i want to reason aorund this. do we need it? surgical versus creative
    edit .do we need the difference?"
       - "okei so. how is a perfect chatpanel. a perfect generation,ts , perfect brian
    orc. both implentnion and system pormpt. perfect addscene. perfect edtis cene.
    perfect tools implemention, prfect service implemention. perfect cotext manaemenr.
    perfect video state management?"
       - "That is a valid point, but I don't think that we can rely so much on actually
     having recognition inside the brain..." [long message about multi-step operations
    and scene targeting]
       - "I have a question. Can you clarify exactly what would be in the metadata for
    each scene array?"
       - "okei so do u agree with this: ? Modern agent stacks identify targets with
    rich, auto-generated metadata..."
       - "Okay, so are we landing on the system? Yes. Are we landing on the context in
    each add-flash-edit system file versus having a separate kind of project memory
    service or like a context service?"

    7. **Pending Tasks:**
       - Test direct code generation without layout JSON step
       - Remove edit complexity types (surgical/creative/structural)
       - Consolidate 40+ system prompts to 5 essential ones
       - Implement simple pattern matching for brain decisions
       - Add caching layer for common operations
       - Make database operations async
       - Create benchmarks to measure improvements

    8. **Current Work:**
       We just finalized the architecture design with a hybrid context approach:
       - ProjectMemory service for lightweight metadata (scene slugs, colors, recent
    chat)
       - Tools fetch their own specific data (actual TSX code) when needed
       - Brain uses metadata for fast decisions
       - No "god context" object pattern

       Final architecture agreed upon:
       ```
       User Input ‚Üí Brain/Planner (uses ProjectMemory for metadata) ‚Üí Tool Decision ‚Üí
    Tool fetches specific needs ‚Üí LLM generates code ‚Üí Stream results
       ```

    9. **Optional Next Step:**
       Based on the user's question "are we landing on the system?" and my confirmation
     of the hybrid approach, the immediate next step would be to create a concrete
    implementation plan showing how to refactor the current system to this new
    architecture, starting with the Brain/Planner implementation that uses the
    simplified context approach we've agreed upon..

  ‚éø  Read memory-bank/sprints/sprint42/SIMPLE-AI-AGENT-ARCHITECTURE.md (592 lines)
  ‚éø  Read memory-bank/sprints/sprint42/2-MINUTE-PIPELINE-ANALYSIS.md (293 lines)
  ‚éø  Read memory-bank/sprints/sprint42/OPTIMIZED_ASYNC_ARCHITECTURE.md (352 lines)
  ‚éø  Read src/tools/add/add.ts (164 lines)
  ‚éø  Read src/brain/orchestrator_functions/intentAnalyzer.ts (185 lines)
  ‚éø  Todo list read (7 items)

  ‚îÇ Ready to code?                                                                           ‚îÇ
‚îÇ                                                                                          ‚îÇ
‚îÇ Here is Claude's plan:                                                                   ‚îÇ
‚îÇ ‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ ‚îÇ
‚îÇ ‚îÇ Bazaar-Vid Architecture Refactoring Plan (Sprint 43)                                 ‚îÇ ‚îÇ
‚îÇ ‚îÇ                                                                                      ‚îÇ ‚îÇ
‚îÇ ‚îÇ Core Principles                                                                      ‚îÇ ‚îÇ
‚îÇ ‚îÇ                                                                                      ‚îÇ ‚îÇ
‚îÇ ‚îÇ 1. Keep the brain intelligent - LLM-based decision making, not pattern matching      ‚îÇ ‚îÇ
‚îÇ ‚îÇ 2. Simplify file structure - One place for each concept                              ‚îÇ ‚îÇ
‚îÇ ‚îÇ 3. Multi-step operations - Streaming execution with progress updates                 ‚îÇ ‚îÇ
‚îÇ ‚îÇ 4. Clear tool/service separation - Tools are pure functions, services handle         ‚îÇ ‚îÇ
‚îÇ ‚îÇ infrastructure                                                                       ‚îÇ ‚îÇ
‚îÇ ‚îÇ                                                                                      ‚îÇ ‚îÇ
‚îÇ ‚îÇ Phase 1: File Structure Cleanup (Days 1-3)                                           ‚îÇ ‚îÇ
‚îÇ ‚îÇ                                                                                      ‚îÇ ‚îÇ
‚îÇ ‚îÇ 1.1 Delete Duplicate/Orphaned Directories                                            ‚îÇ ‚îÇ
‚îÇ ‚îÇ                                                                                      ‚îÇ ‚îÇ
‚îÇ ‚îÇ # Remove duplicate brain implementations                                             ‚îÇ ‚îÇ
‚îÇ ‚îÇ rm -rf src/app/projects/[id]/generate/agents/  # Old brain location                  ‚îÇ ‚îÇ
‚îÇ ‚îÇ rm -rf src/server/services/brain/  # Duplicate brain services                        ‚îÇ ‚îÇ
‚îÇ ‚îÇ                                                                                      ‚îÇ ‚îÇ
‚îÇ ‚îÇ # Remove duplicate utils                                                             ‚îÇ ‚îÇ
‚îÇ ‚îÇ rm -rf src/server/utils/  # Keep only src/lib/utils/                                 ‚îÇ ‚îÇ
‚îÇ ‚îÇ rm -rf src/utils/  # Move needed functions to src/lib/utils/                         ‚îÇ ‚îÇ
‚îÇ ‚îÇ                                                                                      ‚îÇ ‚îÇ
‚îÇ ‚îÇ # Remove old MCP structure                                                           ‚îÇ ‚îÇ
‚îÇ ‚îÇ rm -rf src/server/services/mcp/  # Legacy MCP implementation                         ‚îÇ ‚îÇ
‚îÇ ‚îÇ                                                                                      ‚îÇ ‚îÇ
‚îÇ ‚îÇ # Clean up scripts                                                                   ‚îÇ ‚îÇ
‚îÇ ‚îÇ mkdir scripts/  # Top-level scripts only                                             ‚îÇ ‚îÇ
‚îÇ ‚îÇ mv src/scripts/* scripts/                                                            ‚îÇ ‚îÇ
‚îÇ ‚îÇ rm -rf src/scripts/                                                                  ‚îÇ ‚îÇ
‚îÇ ‚îÇ                                                                                      ‚îÇ ‚îÇ
‚îÇ ‚îÇ 1.2 New Clean Structure                                                              ‚îÇ ‚îÇ
‚îÇ ‚îÇ                                                                                      ‚îÇ ‚îÇ
‚îÇ ‚îÇ src/                                                                                 ‚îÇ ‚îÇ
‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ app/              # Next.js pages only                                           ‚îÇ ‚îÇ
‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ brain/            # Single brain location                                        ‚îÇ ‚îÇ
‚îÇ ‚îÇ ‚îÇ   ‚îî‚îÄ‚îÄ planner.ts    # Intelligent multi-step planner                               ‚îÇ ‚îÇ
‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ tools/            # Pure function tools                                          ‚îÇ ‚îÇ
‚îÇ ‚îÇ ‚îÇ   ‚îú‚îÄ‚îÄ add.ts                                                                       ‚îÇ ‚îÇ
‚îÇ ‚îÇ ‚îÇ   ‚îú‚îÄ‚îÄ edit.ts                                                                      ‚îÇ ‚îÇ
‚îÇ ‚îÇ ‚îÇ   ‚îî‚îÄ‚îÄ delete.ts                                                                    ‚îÇ ‚îÇ
‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ services/         # Infrastructure services                                      ‚îÇ ‚îÇ
‚îÇ ‚îÇ ‚îÇ   ‚îú‚îÄ‚îÄ ai.service.ts      # LLM client wrapper                                      ‚îÇ ‚îÇ
‚îÇ ‚îÇ ‚îÇ   ‚îú‚îÄ‚îÄ db.service.ts      # Database operations                                     ‚îÇ ‚îÇ
‚îÇ ‚îÇ ‚îÇ   ‚îú‚îÄ‚îÄ memory.service.ts  # ProjectMemory (metadata only)                           ‚îÇ ‚îÇ
‚îÇ ‚îÇ ‚îÇ   ‚îî‚îÄ‚îÄ storage.service.ts # R2/file storage                                         ‚îÇ ‚îÇ
‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ api/              # tRPC routers                                                 ‚îÇ ‚îÇ
‚îÇ ‚îÇ ‚îÇ   ‚îî‚îÄ‚îÄ generation.ts # Main generation endpoint                                     ‚îÇ ‚îÇ
‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ lib/              # Shared utilities                                             ‚îÇ ‚îÇ
‚îÇ ‚îÇ ‚îÇ   ‚îú‚îÄ‚îÄ types/                                                                       ‚îÇ ‚îÇ
‚îÇ ‚îÇ ‚îÇ   ‚îú‚îÄ‚îÄ utils/                                                                       ‚îÇ ‚îÇ
‚îÇ ‚îÇ ‚îÇ   ‚îî‚îÄ‚îÄ constants/                                                                   ‚îÇ ‚îÇ
‚îÇ ‚îÇ ‚îî‚îÄ‚îÄ config/           # All configuration                                            ‚îÇ ‚îÇ
‚îÇ ‚îÇ     ‚îú‚îÄ‚îÄ prompts.ts    # 5 essential prompts only                                     ‚îÇ ‚îÇ
‚îÇ ‚îÇ     ‚îî‚îÄ‚îÄ models.ts     # Model selection config                                       ‚îÇ ‚îÇ
‚îÇ ‚îÇ                                                                                      ‚îÇ ‚îÇ
‚îÇ ‚îÇ Phase 2: Intelligent Brain Implementation (Days 3-5)                                 ‚îÇ ‚îÇ
‚îÇ ‚îÇ                                                                                      ‚îÇ ‚îÇ
‚îÇ ‚îÇ 2.1 Brain/Planner with Rich Metadata                                                 ‚îÇ ‚îÇ
‚îÇ ‚îÇ                                                                                      ‚îÇ ‚îÇ
‚îÇ ‚îÇ // src/brain/planner.ts                                                              ‚îÇ ‚îÇ
‚îÇ ‚îÇ interface SceneMetadata {                                                            ‚îÇ ‚îÇ
‚îÇ ‚îÇ   id: string;                                                                        ‚îÇ ‚îÇ
‚îÇ ‚îÇ   slug: string;              // "smarter-finance-intro"                              ‚îÇ ‚îÇ
‚îÇ ‚îÇ   createdAt: Date;                                                                   ‚îÇ ‚îÇ
‚îÇ ‚îÇ   promptOriginal: string;    // "Create a finance dashboard intro"                   ‚îÇ ‚îÇ
‚îÇ ‚îÇ   dominantColors: string[];  // ["#000000", "#3B82F6"]                               ‚îÇ ‚îÇ
‚îÇ ‚îÇ   durationMs: number;        // 6000                                                 ‚îÇ ‚îÇ
‚îÇ ‚îÇ   lastFocused: boolean;      // true if most recently edited                         ‚îÇ ‚îÇ
‚îÇ ‚îÇ   firstH1Text?: string;      // "Smarter Finance. Powered by AI"                     ‚îÇ ‚îÇ
‚îÇ ‚îÇ }                                                                                    ‚îÇ ‚îÇ
‚îÇ ‚îÇ                                                                                      ‚îÇ ‚îÇ
‚îÇ ‚îÇ export class Planner {                                                               ‚îÇ ‚îÇ
‚îÇ ‚îÇ   async plan(input: PlannerInput): Promise<PlannerDecision> {                        ‚îÇ ‚îÇ
‚îÇ ‚îÇ     // Get lightweight metadata from ProjectMemory                                   ‚îÇ ‚îÇ
‚îÇ ‚îÇ     const metadata = await memoryService.getSceneMetadata(input.projectId);          ‚îÇ ‚îÇ
‚îÇ ‚îÇ                                                                                      ‚îÇ ‚îÇ
‚îÇ ‚îÇ     // Use GPT-4o-mini for fast, intelligent decisions                               ‚îÇ ‚îÇ
‚îÇ ‚îÇ     const systemPrompt = `You are an intelligent video editing planner.              ‚îÇ ‚îÇ
‚îÇ ‚îÇ                                                                                      ‚îÇ ‚îÇ
‚îÇ ‚îÇ Your task: Analyze the user request and current scenes to create an action plan.     ‚îÇ ‚îÇ
‚îÇ ‚îÇ                                                                                      ‚îÇ ‚îÇ
‚îÇ ‚îÇ Scene targeting rules:                                                               ‚îÇ ‚îÇ
‚îÇ ‚îÇ - Explicit: "scene 2" ‚Üí targetScene: 2                                               ‚îÇ ‚îÇ
‚îÇ ‚îÇ - Content match: "the intro" ‚Üí find scene with matching content                      ‚îÇ ‚îÇ
‚îÇ ‚îÇ - Recent context: No match ‚Üí use lastFocused scene                                   ‚îÇ ‚îÇ
‚îÇ ‚îÇ - Ambiguous: Return clarification                                                    ‚îÇ ‚îÇ
‚îÇ ‚îÇ                                                                                      ‚îÇ ‚îÇ
‚îÇ ‚îÇ Multi-step detection:                                                                ‚îÇ ‚îÇ
‚îÇ ‚îÇ - "add X then create new scene" ‚Üí [{edit}, {add}]                                    ‚îÇ ‚îÇ
‚îÇ ‚îÇ - "move X from scene A to B" ‚Üí [{edit: remove}, {add: with X}]                       ‚îÇ ‚îÇ
‚îÇ ‚îÇ - "split scene into two" ‚Üí [{edit: first half}, {add: second half}]                  ‚îÇ ‚îÇ
‚îÇ ‚îÇ                                                                                      ‚îÇ ‚îÇ
‚îÇ ‚îÇ Output JSON: {actions: [...] OR clarify: "question"}`;                               ‚îÇ ‚îÇ
‚îÇ ‚îÇ                                                                                      ‚îÇ ‚îÇ
‚îÇ ‚îÇ     const response = await ai.complete({                                             ‚îÇ ‚îÇ
‚îÇ ‚îÇ       model: 'gpt-4o-mini',  // Fast, smart enough                                   ‚îÇ ‚îÇ
‚îÇ ‚îÇ       systemPrompt,                                                                  ‚îÇ ‚îÇ
‚îÇ ‚îÇ       userPrompt: formatUserPrompt(input, metadata),                                 ‚îÇ ‚îÇ
‚îÇ ‚îÇ       responseFormat: { type: "json_object" }                                        ‚îÇ ‚îÇ
‚îÇ ‚îÇ     });                                                                              ‚îÇ ‚îÇ
‚îÇ ‚îÇ                                                                                      ‚îÇ ‚îÇ
‚îÇ ‚îÇ     return JSON.parse(response);                                                     ‚îÇ ‚îÇ
‚îÇ ‚îÇ   }                                                                                  ‚îÇ ‚îÇ
‚îÇ ‚îÇ }                                                                                    ‚îÇ ‚îÇ
‚îÇ ‚îÇ                                                                                      ‚îÇ ‚îÇ
‚îÇ ‚îÇ 2.2 Remove Layout JSON Step                                                          ‚îÇ ‚îÇ
‚îÇ ‚îÇ                                                                                      ‚îÇ ‚îÇ
‚îÇ ‚îÇ // src/tools/add.ts - Direct code generation                                         ‚îÇ ‚îÇ
‚îÇ ‚îÇ export const addTool = {                                                             ‚îÇ ‚îÇ
‚îÇ ‚îÇ   async execute(input: AddToolInput): Promise<ToolOutput> {                          ‚îÇ ‚îÇ
‚îÇ ‚îÇ     // For first scene: Generate with good defaults                                  ‚îÇ ‚îÇ
‚îÇ ‚îÇ     if (input.sceneNumber === 1) {                                                   ‚îÇ ‚îÇ
‚îÇ ‚îÇ       const prompt = `Create a Remotion scene: ${input.userPrompt}                   ‚îÇ ‚îÇ
‚îÇ ‚îÇ                                                                                      ‚îÇ ‚îÇ
‚îÇ ‚îÇ Style guidelines:                                                                    ‚îÇ ‚îÇ
‚îÇ ‚îÇ - Modern, clean design                                                               ‚îÇ ‚îÇ
‚îÇ ‚îÇ - High contrast for readability                                                      ‚îÇ ‚îÇ
‚îÇ ‚îÇ - Smooth animations                                                                  ‚îÇ ‚îÇ
‚îÇ ‚îÇ - Professional typography`;                                                          ‚îÇ ‚îÇ
‚îÇ ‚îÇ                                                                                      ‚îÇ ‚îÇ
‚îÇ ‚îÇ       return await generateCode(prompt);                                             ‚îÇ ‚îÇ
‚îÇ ‚îÇ     }                                                                                ‚îÇ ‚îÇ
‚îÇ ‚îÇ                                                                                      ‚îÇ ‚îÇ
‚îÇ ‚îÇ     // For additional scenes: Use previous as reference                              ‚îÇ ‚îÇ
‚îÇ ‚îÇ     const previousCode = await db.getLastSceneCode(input.projectId);                 ‚îÇ ‚îÇ
‚îÇ ‚îÇ     const prompt = `Create a new scene: ${input.userPrompt}                          ‚îÇ ‚îÇ
‚îÇ ‚îÇ                                                                                      ‚îÇ ‚îÇ
‚îÇ ‚îÇ Match this style:                                                                    ‚îÇ ‚îÇ
‚îÇ ‚îÇ ${previousCode}`;                                                                    ‚îÇ ‚îÇ
‚îÇ ‚îÇ                                                                                      ‚îÇ ‚îÇ
‚îÇ ‚îÇ     return await generateCode(prompt);                                               ‚îÇ ‚îÇ
‚îÇ ‚îÇ   }                                                                                  ‚îÇ ‚îÇ
‚îÇ ‚îÇ };                                                                                   ‚îÇ ‚îÇ
‚îÇ ‚îÇ                                                                                      ‚îÇ ‚îÇ
‚îÇ ‚îÇ Phase 3: Multi-Step Streaming (Days 5-7)                                             ‚îÇ ‚îÇ
‚îÇ ‚îÇ                                                                                      ‚îÇ ‚îÇ
‚îÇ ‚îÇ 3.1 Streaming Execution Engine                                                       ‚îÇ ‚îÇ
‚îÇ ‚îÇ                                                                                      ‚îÇ ‚îÇ
‚îÇ ‚îÇ // src/api/generation.ts                                                             ‚îÇ ‚îÇ
‚îÇ ‚îÇ export async function* executeWithStreaming(                                         ‚îÇ ‚îÇ
‚îÇ ‚îÇ   plan: PlannerDecision,                                                             ‚îÇ ‚îÇ
‚îÇ ‚îÇ   context: ExecutionContext                                                          ‚îÇ ‚îÇ
‚îÇ ‚îÇ ): AsyncGenerator<ProgressUpdate> {                                                  ‚îÇ ‚îÇ
‚îÇ ‚îÇ                                                                                      ‚îÇ ‚îÇ
‚îÇ ‚îÇ   // Handle clarifications                                                           ‚îÇ ‚îÇ
‚îÇ ‚îÇ   if (plan.clarify) {                                                                ‚îÇ ‚îÇ
‚îÇ ‚îÇ     yield { type: 'clarification', message: plan.clarify };                          ‚îÇ ‚îÇ
‚îÇ ‚îÇ     return;                                                                          ‚îÇ ‚îÇ
‚îÇ ‚îÇ   }                                                                                  ‚îÇ ‚îÇ
‚îÇ ‚îÇ                                                                                      ‚îÇ ‚îÇ
‚îÇ ‚îÇ   // Announce the plan                                                               ‚îÇ ‚îÇ
‚îÇ ‚îÇ   yield {                                                                            ‚îÇ ‚îÇ
‚îÇ ‚îÇ     type: 'plan_start',                                                              ‚îÇ ‚îÇ
‚îÇ ‚îÇ     message: `I'll ${describeActions(plan.actions)}`,                                ‚îÇ ‚îÇ
‚îÇ ‚îÇ     totalSteps: plan.actions.length                                                  ‚îÇ ‚îÇ
‚îÇ ‚îÇ   };                                                                                 ‚îÇ ‚îÇ
‚îÇ ‚îÇ                                                                                      ‚îÇ ‚îÇ
‚îÇ ‚îÇ   // Execute each action with progress                                               ‚îÇ ‚îÇ
‚îÇ ‚îÇ   for (let i = 0; i < plan.actions.length; i++) {                                    ‚îÇ ‚îÇ
‚îÇ ‚îÇ     const action = plan.actions[i];                                                  ‚îÇ ‚îÇ
‚îÇ ‚îÇ                                                                                      ‚îÇ ‚îÇ
‚îÇ ‚îÇ     yield {                                                                          ‚îÇ ‚îÇ
‚îÇ ‚îÇ       type: 'step_start',                                                            ‚îÇ ‚îÇ
‚îÇ ‚îÇ       step: i + 1,                                                                   ‚îÇ ‚îÇ
‚îÇ ‚îÇ       description: `${action.tool}: ${action.description}`                           ‚îÇ ‚îÇ
‚îÇ ‚îÇ     };                                                                               ‚îÇ ‚îÇ
‚îÇ ‚îÇ                                                                                      ‚îÇ ‚îÇ
‚îÇ ‚îÇ     try {                                                                            ‚îÇ ‚îÇ
‚îÇ ‚îÇ       // Tools fetch their own data                                                  ‚îÇ ‚îÇ
‚îÇ ‚îÇ       const result = await tools[action.tool].execute({                              ‚îÇ ‚îÇ
‚îÇ ‚îÇ         ...action.args,                                                              ‚îÇ ‚îÇ
‚îÇ ‚îÇ         projectId: context.projectId                                                 ‚îÇ ‚îÇ
‚îÇ ‚îÇ       });                                                                            ‚îÇ ‚îÇ
‚îÇ ‚îÇ                                                                                      ‚îÇ ‚îÇ
‚îÇ ‚îÇ       yield {                                                                        ‚îÇ ‚îÇ
‚îÇ ‚îÇ         type: 'step_complete',                                                       ‚îÇ ‚îÇ
‚îÇ ‚îÇ         step: i + 1,                                                                 ‚îÇ ‚îÇ
‚îÇ ‚îÇ         result,                                                                      ‚îÇ ‚îÇ
‚îÇ ‚îÇ         preview: result.tsxCode // Instant preview                                   ‚îÇ ‚îÇ
‚îÇ ‚îÇ       };                                                                             ‚îÇ ‚îÇ
‚îÇ ‚îÇ                                                                                      ‚îÇ ‚îÇ
‚îÇ ‚îÇ       // Update context for next action                                              ‚îÇ ‚îÇ
‚îÇ ‚îÇ       if (action.tool === 'add') {                                                   ‚îÇ ‚îÇ
‚îÇ ‚îÇ         context.lastSceneId = result.sceneId;                                        ‚îÇ ‚îÇ
‚îÇ ‚îÇ       }                                                                              ‚îÇ ‚îÇ
‚îÇ ‚îÇ                                                                                      ‚îÇ ‚îÇ
‚îÇ ‚îÇ     } catch (error) {                                                                ‚îÇ ‚îÇ
‚îÇ ‚îÇ       yield {                                                                        ‚îÇ ‚îÇ
‚îÇ ‚îÇ         type: 'step_error',                                                          ‚îÇ ‚îÇ
‚îÇ ‚îÇ         step: i + 1,                                                                 ‚îÇ ‚îÇ
‚îÇ ‚îÇ         error: error.message                                                         ‚îÇ ‚îÇ
‚îÇ ‚îÇ       };                                                                             ‚îÇ ‚îÇ
‚îÇ ‚îÇ       break;                                                                         ‚îÇ ‚îÇ
‚îÇ ‚îÇ     }                                                                                ‚îÇ ‚îÇ
‚îÇ ‚îÇ   }                                                                                  ‚îÇ ‚îÇ
‚îÇ ‚îÇ }                                                                                    ‚îÇ ‚îÇ
‚îÇ ‚îÇ                                                                                      ‚îÇ ‚îÇ
‚îÇ ‚îÇ Phase 4: Tool/Service Architecture (Days 7-8)                                        ‚îÇ ‚îÇ
‚îÇ ‚îÇ                                                                                      ‚îÇ ‚îÇ
‚îÇ ‚îÇ 4.1 Tools as Pure Functions                                                          ‚îÇ ‚îÇ
‚îÇ ‚îÇ                                                                                      ‚îÇ ‚îÇ
‚îÇ ‚îÇ // Tools don't initialize services - they receive them                               ‚îÇ ‚îÇ
‚îÇ ‚îÇ interface ToolContext {                                                              ‚îÇ ‚îÇ
‚îÇ ‚îÇ   ai: AIService;                                                                     ‚îÇ ‚îÇ
‚îÇ ‚îÇ   db: DatabaseService;                                                               ‚îÇ ‚îÇ
‚îÇ ‚îÇ }                                                                                    ‚îÇ ‚îÇ
‚îÇ ‚îÇ                                                                                      ‚îÇ ‚îÇ
‚îÇ ‚îÇ // src/tools/edit.ts                                                                 ‚îÇ ‚îÇ
‚îÇ ‚îÇ export function createEditTool(context: ToolContext) {                               ‚îÇ ‚îÇ
‚îÇ ‚îÇ   return {                                                                           ‚îÇ ‚îÇ
‚îÇ ‚îÇ     async execute(input: EditToolInput): Promise<ToolOutput> {                       ‚îÇ ‚îÇ
‚îÇ ‚îÇ       // Tool fetches only what it needs                                             ‚îÇ ‚îÇ
‚îÇ ‚îÇ       const scene = await context.db.getScene(input.targetSceneId);                  ‚îÇ ‚îÇ
‚îÇ ‚îÇ                                                                                      ‚îÇ ‚îÇ
‚îÇ ‚îÇ       // Direct to AI - no complex orchestration                                     ‚îÇ ‚îÇ
‚îÇ ‚îÇ       const result = await context.ai.generateCode({                                 ‚îÇ ‚îÇ
‚îÇ ‚îÇ         model: 'claude-3-sonnet',                                                    ‚îÇ ‚îÇ
‚îÇ ‚îÇ         prompt: `Edit this scene: ${scene.tsxCode}\n\nChanges: ${input.prompt}`      ‚îÇ ‚îÇ
‚îÇ ‚îÇ       });                                                                            ‚îÇ ‚îÇ
‚îÇ ‚îÇ                                                                                      ‚îÇ ‚îÇ
‚îÇ ‚îÇ       return {                                                                       ‚îÇ ‚îÇ
‚îÇ ‚îÇ         success: true,                                                               ‚îÇ ‚îÇ
‚îÇ ‚îÇ         tsxCode: result.code,                                                        ‚îÇ ‚îÇ
‚îÇ ‚îÇ         sceneId: input.targetSceneId                                                 ‚îÇ ‚îÇ
‚îÇ ‚îÇ       };                                                                             ‚îÇ ‚îÇ
‚îÇ ‚îÇ     }                                                                                ‚îÇ ‚îÇ
‚îÇ ‚îÇ   };                                                                                 ‚îÇ ‚îÇ
‚îÇ ‚îÇ }                                                                                    ‚îÇ ‚îÇ
‚îÇ ‚îÇ                                                                                      ‚îÇ ‚îÇ
‚îÇ ‚îÇ 4.2 Service Layer (Infrastructure Only)                                              ‚îÇ ‚îÇ
‚îÇ ‚îÇ                                                                                      ‚îÇ ‚îÇ
‚îÇ ‚îÇ // src/services/memory.service.ts                                                    ‚îÇ ‚îÇ
‚îÇ ‚îÇ export class ProjectMemoryService {                                                  ‚îÇ ‚îÇ
‚îÇ ‚îÇ   // Lightweight metadata only                                                       ‚îÇ ‚îÇ
‚îÇ ‚îÇ   async getSceneMetadata(projectId: string): Promise<SceneMetadata[]> {              ‚îÇ ‚îÇ
‚îÇ ‚îÇ     return db.query.scenes.findMany({                                                ‚îÇ ‚îÇ
‚îÇ ‚îÇ       where: eq(scenes.projectId, projectId),                                        ‚îÇ ‚îÇ
‚îÇ ‚îÇ       columns: {                                                                     ‚îÇ ‚îÇ
‚îÇ ‚îÇ         id: true,                                                                    ‚îÇ ‚îÇ
‚îÇ ‚îÇ         slug: true,                                                                  ‚îÇ ‚îÇ
‚îÇ ‚îÇ         dominantColors: true,                                                        ‚îÇ ‚îÇ
‚îÇ ‚îÇ         firstH1Text: true,                                                           ‚îÇ ‚îÇ
‚îÇ ‚îÇ         lastFocused: true,                                                           ‚îÇ ‚îÇ
‚îÇ ‚îÇ         durationMs: true                                                             ‚îÇ ‚îÇ
‚îÇ ‚îÇ       }                                                                              ‚îÇ ‚îÇ
‚îÇ ‚îÇ     });                                                                              ‚îÇ ‚îÇ
‚îÇ ‚îÇ   }                                                                                  ‚îÇ ‚îÇ
‚îÇ ‚îÇ                                                                                      ‚îÇ ‚îÇ
‚îÇ ‚îÇ   // Smart scene targeting                                                           ‚îÇ ‚îÇ
‚îÇ ‚îÇ   async findSceneByHint(projectId: string, hint: string): Promise<string | null> {   ‚îÇ ‚îÇ
‚îÇ ‚îÇ     const scenes = await this.getSceneMetadata(projectId);                           ‚îÇ ‚îÇ
‚îÇ ‚îÇ     // Fuzzy matching logic                                                          ‚îÇ ‚îÇ
‚îÇ ‚îÇ     return bestMatch(scenes, hint);                                                  ‚îÇ ‚îÇ
‚îÇ ‚îÇ   }                                                                                  ‚îÇ ‚îÇ
‚îÇ ‚îÇ }                                                                                    ‚îÇ ‚îÇ
‚îÇ ‚îÇ                                                                                      ‚îÇ ‚îÇ
‚îÇ ‚îÇ Phase 5: Consolidate System Prompts (Day 8)                                          ‚îÇ ‚îÇ
‚îÇ ‚îÇ                                                                                      ‚îÇ ‚îÇ
‚îÇ ‚îÇ 5.1 From 40+ to 5 Essential Prompts                                                  ‚îÇ ‚îÇ
‚îÇ ‚îÇ                                                                                      ‚îÇ ‚îÇ
‚îÇ ‚îÇ // src/config/prompts.ts                                                             ‚îÇ ‚îÇ
‚îÇ ‚îÇ export const PROMPTS = {                                                             ‚îÇ ‚îÇ
‚îÇ ‚îÇ   // 1. Brain/Planner                                                                ‚îÇ ‚îÇ
‚îÇ ‚îÇ   PLANNER: `Intelligent video planner prompt...`,                                    ‚îÇ ‚îÇ
‚îÇ ‚îÇ                                                                                      ‚îÇ ‚îÇ
‚îÇ ‚îÇ   // 2. Code Generation (Add)                                                        ‚îÇ ‚îÇ
‚îÇ ‚îÇ   CODE_GENERATOR: `Generate Remotion React code...`,                                 ‚îÇ ‚îÇ
‚îÇ ‚îÇ                                                                                      ‚îÇ ‚îÇ
‚îÇ ‚îÇ   // 3. Code Editing                                                                 ‚îÇ ‚îÇ
‚îÇ ‚îÇ   CODE_EDITOR: `Edit existing Remotion code...`,                                     ‚îÇ ‚îÇ
‚îÇ ‚îÇ                                                                                      ‚îÇ ‚îÇ
‚îÇ ‚îÇ   // 4. Error Fixing                                                                 ‚îÇ ‚îÇ
‚îÇ ‚îÇ   ERROR_FIXER: `Fix broken Remotion scenes...`,                                      ‚îÇ ‚îÇ
‚îÇ ‚îÇ                                                                                      ‚îÇ ‚îÇ
‚îÇ ‚îÇ   // 5. Image Analysis                                                               ‚îÇ ‚îÇ
‚îÇ ‚îÇ   IMAGE_ANALYZER: `Analyze image for animation...`                                   ‚îÇ ‚îÇ
‚îÇ ‚îÇ };                                                                                   ‚îÇ ‚îÇ
‚îÇ ‚îÇ                                                                                      ‚îÇ ‚îÇ
‚îÇ ‚îÇ // Delete all others!                                                                ‚îÇ ‚îÇ
‚îÇ ‚îÇ                                                                                      ‚îÇ ‚îÇ
‚îÇ ‚îÇ Implementation Timeline                                                              ‚îÇ ‚îÇ
‚îÇ ‚îÇ                                                                                      ‚îÇ ‚îÇ
‚îÇ ‚îÇ Week 1: Foundation                                                                   ‚îÇ ‚îÇ
‚îÇ ‚îÇ                                                                                      ‚îÇ ‚îÇ
‚îÇ ‚îÇ - Day 1-3: File structure cleanup                                                    ‚îÇ ‚îÇ
‚îÇ ‚îÇ - Day 3-5: Implement intelligent planner                                             ‚îÇ ‚îÇ
‚îÇ ‚îÇ - Day 5-7: Multi-step streaming                                                      ‚îÇ ‚îÇ
‚îÇ ‚îÇ                                                                                      ‚îÇ ‚îÇ
‚îÇ ‚îÇ Week 2: Optimization                                                                 ‚îÇ ‚îÇ
‚îÇ ‚îÇ                                                                                      ‚îÇ ‚îÇ
‚îÇ ‚îÇ - Day 8: Tool/service refactoring                                                    ‚îÇ ‚îÇ
‚îÇ ‚îÇ - Day 9-10: Remove layout JSON step                                                  ‚îÇ ‚îÇ
‚îÇ ‚îÇ - Day 11-12: Performance testing                                                     ‚îÇ ‚îÇ
‚îÇ ‚îÇ                                                                                      ‚îÇ ‚îÇ
‚îÇ ‚îÇ Week 3: Polish                                                                       ‚îÇ ‚îÇ
‚îÇ ‚îÇ                                                                                      ‚îÇ ‚îÇ
‚îÇ ‚îÇ - Consolidate prompts                                                                ‚îÇ ‚îÇ
‚îÇ ‚îÇ - Add monitoring                                                                     ‚îÇ ‚îÇ
‚îÇ ‚îÇ - Documentation                                                                      ‚îÇ ‚îÇ
‚îÇ ‚îÇ                                                                                      ‚îÇ ‚îÇ
‚îÇ ‚îÇ Success Metrics                                                                      ‚îÇ ‚îÇ
‚îÇ ‚îÇ                                                                                      ‚îÇ ‚îÇ
‚îÇ ‚îÇ Performance                                                                          ‚îÇ ‚îÇ
‚îÇ ‚îÇ                                                                                      ‚îÇ ‚îÇ
‚îÇ ‚îÇ - Generation time: 2 min ‚Üí <30s                                                      ‚îÇ ‚îÇ
‚îÇ ‚îÇ - Brain decision: 15s ‚Üí <3s                                                          ‚îÇ ‚îÇ
‚îÇ ‚îÇ - Cost per generation: $0.065 ‚Üí <$0.02                                               ‚îÇ ‚îÇ
‚îÇ ‚îÇ                                                                                      ‚îÇ ‚îÇ
‚îÇ ‚îÇ Code Quality                                                                         ‚îÇ ‚îÇ
‚îÇ ‚îÇ                                                                                      ‚îÇ ‚îÇ
‚îÇ ‚îÇ - Files: 500+ ‚Üí ~200                                                                 ‚îÇ ‚îÇ
‚îÇ ‚îÇ - System prompts: 40+ ‚Üí 5                                                            ‚îÇ ‚îÇ
‚îÇ ‚îÇ - Clear single responsibility                                                        ‚îÇ ‚îÇ
‚îÇ ‚îÇ                                                                                      ‚îÇ ‚îÇ
‚îÇ ‚îÇ Developer Experience                                                                 ‚îÇ ‚îÇ
‚îÇ ‚îÇ                                                                                      ‚îÇ ‚îÇ
‚îÇ ‚îÇ - Team understands the flow                                                          ‚îÇ ‚îÇ
‚îÇ ‚îÇ - Easy to trace requests                                                             ‚îÇ ‚îÇ
‚îÇ ‚îÇ - Simple to add features                                                             ‚îÇ ‚îÇ
‚îÇ ‚îÇ                                                                                      ‚îÇ ‚îÇ
‚îÇ ‚îÇ Key Decisions                                                                        ‚îÇ ‚îÇ
‚îÇ ‚îÇ                                                                                      ‚îÇ ‚îÇ
‚îÇ ‚îÇ 1. Brain stays intelligent                                                           ‚îÇ ‚îÇ
‚îÇ ‚îÇ                                                                                      ‚îÇ ‚îÇ
‚îÇ ‚îÇ - Use GPT-4o-mini for fast, smart decisions                                          ‚îÇ ‚îÇ
‚îÇ ‚îÇ - Rich metadata for scene targeting                                                  ‚îÇ ‚îÇ
‚îÇ ‚îÇ - Handle multi-step operations                                                       ‚îÇ ‚îÇ
‚îÇ ‚îÇ                                                                                      ‚îÇ ‚îÇ
‚îÇ ‚îÇ 2. Tools vs Services                                                                 ‚îÇ ‚îÇ
‚îÇ ‚îÇ                                                                                      ‚îÇ ‚îÇ
‚îÇ ‚îÇ - Tools: Pure functions that generate/edit code                                      ‚îÇ ‚îÇ
‚îÇ ‚îÇ - Services: Infrastructure (DB, AI client, storage)                                  ‚îÇ ‚îÇ
‚îÇ ‚îÇ - Tools receive services via dependency injection                                    ‚îÇ ‚îÇ
‚îÇ ‚îÇ                                                                                      ‚îÇ ‚îÇ
‚îÇ ‚îÇ 3. Context strategy                                                                  ‚îÇ ‚îÇ
‚îÇ ‚îÇ                                                                                      ‚îÇ ‚îÇ
‚îÇ ‚îÇ - ProjectMemory: Lightweight metadata only                                           ‚îÇ ‚îÇ
‚îÇ ‚îÇ - Tools: Fetch specific data as needed                                               ‚îÇ ‚îÇ
‚îÇ ‚îÇ - No god context object                                                              ‚îÇ ‚îÇ
‚îÇ ‚îÇ                                                                                      ‚îÇ ‚îÇ
‚îÇ ‚îÇ 4. First scene quality                                                               ‚îÇ ‚îÇ
‚îÇ ‚îÇ                                                                                      ‚îÇ ‚îÇ
‚îÇ ‚îÇ - Trust the AI with clear guidelines                                                 ‚îÇ ‚îÇ
‚îÇ ‚îÇ - "System is as good as the prompt"                                                  ‚îÇ ‚îÇ
‚îÇ ‚îÇ - Simple style rules in prompt                                                       ‚îÇ ‚îÇ
‚îÇ ‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ