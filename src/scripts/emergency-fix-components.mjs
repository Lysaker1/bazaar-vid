// src/scripts/emergency-fix-components.mjs

/**
 * EMERGENCY FIX SCRIPT 
 * This script directly modifies database to fix component syntax errors
 */

import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';
import { execSync } from 'child_process';

// Load environment variables
dotenv.config();

// Get Supabase credentials from environment
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('Missing Supabase credentials in environment variables');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function emergencyFixComponents() {
  try {
    console.log('ðŸš¨ EMERGENCY COMPONENT FIX ðŸš¨');
    
    // Component IDs to fix (can add more if needed)
    const componentsToFix = [
      '2489eaf2-68e0-49e6-a583-960ee995aed7',
      // Add more IDs here if needed
    ];

    console.log(`Starting to fix ${componentsToFix.length} components...`);
    
    for (const componentId of componentsToFix) {
      console.log(`\nFixing component: ${componentId}`);
      
      // Get component details from Supabase
      const { data: component, error } = await supabase
        .from('custom_component_jobs')
        .select('*')
        .eq('id', componentId)
        .single();
      
      if (error || !component) {
        console.log(`Component ${componentId} not found or error: ${error?.message || 'Unknown error'}`);
        continue;
      }
      
      console.log(`Found component: ${component.effect || 'Unnamed'}`);
      
      // Create fixed version with componentId and effect for tracing
      const componentName = component.effect || 'BouncingBall';
      const fixedTsxCode = generateFixedComponent(componentName, component.metadata);
      
      // Update the component
      const { data: updated, error: updateError } = await supabase
        .from('custom_component_jobs')
        .update({
          tsx_code: fixedTsxCode,
          status: 'pending', // Reset to pending so it gets rebuilt
          output_url: null, // Clear output URL to force rebuild
          updated_at: new Date().toISOString()
        })
        .eq('id', componentId);
      
      if (updateError) {
        console.error(`Failed to update component: ${updateError.message}`);
      } else {
        console.log(`âœ“ Component ${componentId} updated successfully with fixed code.`);
        console.log('  Component will be rebuilt automatically');
      }
    }
    
  } catch (error) {
    console.error('Emergency fix failed:', error);
  }
}

/**
 * Generate guaranteed-working component code
 */
function generateFixedComponent(componentName, metadata) {
  // Parse metadata to extract properties (fallback to defaults if parsing fails)
  let props = { color: '#00ff00', size: 200 };
  try {
    if (metadata && typeof metadata === 'string') {
      const parsed = JSON.parse(metadata);
      if (parsed && parsed.properties) {
        props = { ...props, ...parsed.properties };
      }
    } else if (metadata && metadata.properties) {
      props = { ...props, ...metadata.properties };
    }
  } catch (e) {
    console.log('Could not parse metadata, using defaults');
  }
  
  return `// FIXED COMPONENT - ${componentName}
// Guaranteed working version

import React from 'react';
import { AbsoluteFill, useCurrentFrame, interpolate } from 'remotion';

/**
 * ${componentName} - Fixed component that will render properly
 * Auto-generated by emergency fix script
 */
const ${componentName} = ({ data }) => {
  // Get frame for animation
  const frame = useCurrentFrame();
  
  // Get color from data or use default
  const color = typeof data?.color === 'string' ? data.color : ${JSON.stringify(props.color)};
  const size = typeof data?.size === 'number' ? data.size : ${props.size || 200};
  
  // Simple bounce animation
  const bounceProgress = interpolate(
    frame % 60,
    [0, 30, 60],
    [0, 1, 0],
    {
      extrapolateRight: 'clamp',
      extrapolateLeft: 'clamp',
    }
  );
  
  const translateY = interpolate(
    bounceProgress,
    [0, 1],
    [0, -100]
  );
  
  return (
    <AbsoluteFill style={{ backgroundColor: 'transparent' }}>
      <div style={{ 
        display: 'flex',
        justifyContent: 'center',
        alignItems: 'center',
        height: '100%',
      }}>
        <div
          style={{
            width: size,
            height: size,
            borderRadius: '50%',
            backgroundColor: color,
            transform: \`translateY(\${translateY}px)\`,
          }}
        />
      </div>
    </AbsoluteFill>
  );
};

// Make component available to Remotion - CRITICAL FIX!
export default ${componentName};
window.__REMOTION_COMPONENT = ${componentName};
`;
}

// Run the fix
emergencyFixComponents().then(() => {
  console.log('\nðŸŽ‰ EMERGENCY FIX COMPLETED ðŸŽ‰');
  console.log('Refresh your browser to see the fixed components.');
}).catch(console.error);
