// @ts-nocheck
// src/scripts/emergency-fix-components.js

/**
 * EMERGENCY FIX SCRIPT
 * This script fixes test components directly in the database
 * It does NOT use imports that require the dist folder to be built
 */

const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function emergencyFixComponents() {
  try {
    console.log('ðŸš¨ EMERGENCY COMPONENT FIX ðŸš¨');
    
    // Component IDs to fix (can add more if needed)
    const componentsToFix = [
      '2489eaf2-68e0-49e6-a583-960ee995aed7',
      // Add more IDs here if needed
    ];

    console.log(`Starting to fix ${componentsToFix.length} components...`);
    
    for (const componentId of componentsToFix) {
      console.log(`\nFixing component: ${componentId}`);
      
      // Get component details
      const component = await prisma.customComponentJob.findUnique({
        where: { id: componentId }
      });
      
      if (!component) {
        console.log(`Component ${componentId} not found!`);
        continue;
      }
      
      console.log(`Found component: ${component.effect || 'Unnamed'}`);
      
      // Create fixed version with componentId and effect for tracing
      const componentName = component.effect || 'BouncingBall';
      const fixedTsxCode = generateFixedComponent(componentName, component.metadata);
      
      // Update the component
      const updated = await prisma.customComponentJob.update({
        where: { id: componentId },
        data: {
          tsxCode: fixedTsxCode,
          status: 'pending', // Reset to pending so it gets rebuilt
          outputUrl: null, // Clear output URL to force rebuild
          updatedAt: new Date()
        }
      });
      
      console.log(`âœ“ Component ${componentId} updated successfully with fixed code.`);
      console.log(`  Component will be rebuilt automatically with status: ${updated.status}`);
    }
    
  } catch (error) {
    console.error('Emergency fix failed:', error);
  } finally {
    await prisma.$disconnect();
  }
}

/**
 * Generate guaranteed-working component code
 */
function generateFixedComponent(componentName, metadata) {
  // Parse metadata to extract properties (fallback to defaults if parsing fails)
  let props = { color: '#00ff00', size: 200 };
  try {
    if (metadata && typeof metadata === 'string') {
      const parsed = JSON.parse(metadata);
      if (parsed && parsed.properties) {
        props = { ...props, ...parsed.properties };
      }
    } else if (metadata && metadata.properties) {
      props = { ...props, ...metadata.properties };
    }
  } catch (e) {
    console.log('Could not parse metadata, using defaults');
  }
  
  return `// FIXED COMPONENT - ${componentName}
// Guaranteed working version

import React from 'react';
import { AbsoluteFill, useCurrentFrame, interpolate } from 'remotion';

/**
 * ${componentName} - Fixed component that will render properly
 * Auto-generated by emergency fix script
 */
const ${componentName} = ({ data }) => {
  // Get frame for animation
  const frame = useCurrentFrame();
  
  // Get color from data or use default
  const color = typeof data?.color === 'string' ? data.color : ${JSON.stringify(props.color)};
  const size = typeof data?.size === 'number' ? data.size : ${props.size || 200};
  
  // Simple bounce animation
  const bounceProgress = interpolate(
    frame % 60,
    [0, 30, 60],
    [0, 1, 0],
    {
      extrapolateRight: 'clamp',
      extrapolateLeft: 'clamp',
    }
  );
  
  const translateY = interpolate(
    bounceProgress,
    [0, 1],
    [0, -100]
  );
  
  return (
    <AbsoluteFill style={{ backgroundColor: 'transparent' }}>
      <div style={{ 
        display: 'flex',
        justifyContent: 'center',
        alignItems: 'center',
        height: '100%',
      }}>
        <div
          style={{
            width: size,
            height: size,
            borderRadius: '50%',
            backgroundColor: color,
            transform: \`translateY(\${translateY}px)\`,
          }}
        />
      </div>
    </AbsoluteFill>
  );
};

// Make component available to Remotion - CRITICAL FIX!
export default ${componentName};
window.__REMOTION_COMPONENT = ${componentName};
`;
}

// Run the fix
emergencyFixComponents().then(() => {
  console.log('\nðŸŽ‰ EMERGENCY FIX COMPLETED ðŸŽ‰');
  console.log('Refresh your browser to see the fixed components.');
}).catch(console.error);
