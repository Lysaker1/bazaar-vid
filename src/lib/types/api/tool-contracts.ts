// src/lib/types/api/tool-contracts.ts
// Legacy tool contracts - being replaced by simplified architecture
// See tool-contracts.simplified.ts for new 3-tool architecture

import type { SceneData } from '../shared/scene.types';

/**
 * Base tool input that all tools receive
 */
export interface BaseToolInput {
  projectId: string;
  userPrompt?: string;
}

/**
 * Base tool output that all tools return
 */
export interface BaseToolOutput {
  reasoning: string;
  chatResponse?: string;   // Optional, generated by orchestrator if missing
  debug?: any;
}

// ============= SCENE CREATION TOOLS =============

/**
 * AddScene tool input
 */
export interface AddSceneToolInput extends BaseToolInput {
  userPrompt: string;
  sceneNumber?: number;
  storyboardSoFar?: any[];
  replaceWelcomeScene?: boolean;
  visionAnalysis?: any;
}

/**
 * AddScene tool output (current)
 */
export interface AddSceneToolOutput extends BaseToolOutput {
  sceneCode: string;
  sceneName: string;
  duration: number;
  layoutJson?: string;    // Stringified JSON
  replacedWelcomeScene?: boolean;
}

/**
 * CreateSceneFromImage tool input
 */
export interface CreateSceneFromImageToolInput extends BaseToolInput {
  imageUrls: string[];
  userPrompt: string;
  sceneNumber?: number;
  visionAnalysis?: any;
}

/**
 * CreateSceneFromImage tool output (current)
 */
export interface CreateSceneFromImageToolOutput extends BaseToolOutput {
  sceneCode: string;
  sceneName: string;
  duration: number;
}

// ============= SCENE EDITING TOOLS =============

/**
 * EditScene tool input
 */
export interface EditSceneToolInput extends BaseToolInput {
  userPrompt: string;
  existingCode: string;
  existingName: string;
  existingDuration: number;
  sceneId?: string;
  storyboardSoFar?: any[];
  chatHistory?: Array<{role: string; content: string}>;
  editComplexity?: 'surgical' | 'creative' | 'structural';
  visionAnalysis?: any;
}

/**
 * EditScene tool output (current)
 */
export interface EditSceneToolOutput extends BaseToolOutput {
  sceneCode: string;
  sceneName: string;
  duration: number;
  changes: string[];
  preserved: string[];
}

/**
 * EditSceneWithImage tool input
 */
export interface EditSceneWithImageToolInput extends BaseToolInput {
  imageUrls: string[];
  userPrompt: string;
  existingCode: string;
  existingName: string;
  existingDuration: number;
  sceneId?: string;
}

/**
 * EditSceneWithImage tool output (current)
 */
export interface EditSceneWithImageToolOutput extends EditSceneToolOutput {
  // Inherits all fields from EditSceneToolOutput
}

/**
 * FixBrokenScene tool input
 */
export interface FixBrokenSceneToolInput extends BaseToolInput {
  brokenCode: string;
  errorMessage: string;
  sceneId: string;
  sceneName: string;
}

/**
 * FixBrokenScene tool output (current) - DIFFERENT FIELD NAMES!
 */
export interface FixBrokenSceneToolOutput extends BaseToolOutput {
  fixedCode: string;      // Note: Not sceneCode!
  sceneName: string;
  sceneId: string;
  duration: number;
  changesApplied: string[]; // Note: Not changes!
}

// ============= OTHER TOOLS =============

/**
 * DeleteScene tool input
 */
export interface DeleteSceneToolInput extends BaseToolInput {
  sceneId: string;
  sceneName: string;
  remainingScenes?: Array<{id: string; name: string}>;
}

/**
 * DeleteScene tool output (current)
 */
export interface DeleteSceneToolOutput extends BaseToolOutput {
  success: boolean;
  deletedSceneId: string;
  deletedSceneName: string;
}

/**
 * ChangeDuration tool input
 */
export interface ChangeDurationToolInput extends BaseToolInput {
  sceneId: string;
  durationSeconds: number;
}

/**
 * ChangeDuration tool output (current)
 */
export interface ChangeDurationToolOutput extends BaseToolOutput {
  success: boolean;
  oldDurationFrames: number;
  newDurationFrames: number;
  oldDurationSeconds: number;
  newDurationSeconds: number;
}

/**
 * AnalyzeImage tool input
 */
export interface AnalyzeImageToolInput extends BaseToolInput {
  imageUrls: string[];
}

/**
 * AnalyzeImage tool output (current)
 */
export interface AnalyzeImageToolOutput extends BaseToolOutput {
  analysis: any;
  imageCount: number;
  projectId: string;
}

// ============= STANDARDIZED TOOL INTERFACES (FUTURE) =============

/**
 * Standardized scene creation tool output
 * What tools SHOULD return in the future
 */
export interface StandardSceneToolOutput extends BaseToolOutput {
  scene: SceneData;  // Complete scene data matching DB schema
}

/**
 * Standardized scene edit tool output
 */
export interface StandardSceneEditToolOutput extends StandardSceneToolOutput {
  changes: string[];
  preserved: string[];
}

/**
 * Standardized scene deletion tool output
 */
export interface StandardSceneDeleteToolOutput extends BaseToolOutput {
  success: boolean;
  deletedScene: SceneData;
}

/**
 * Type mapping for current tool outputs (for type safety)
 */
export type ToolOutputMap = {
  addScene: AddSceneToolOutput;
  editScene: EditSceneToolOutput;
  deleteScene: DeleteSceneToolOutput;
  fixBrokenScene: FixBrokenSceneToolOutput;
  analyzeImage: AnalyzeImageToolOutput;
  createSceneFromImage: CreateSceneFromImageToolOutput;
  editSceneWithImage: EditSceneWithImageToolOutput;
  changeDuration: ChangeDurationToolOutput;
};