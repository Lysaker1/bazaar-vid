// src/server/workers/componentTemplate.ts
/**
 * Standard template for all Remotion components generated by the LLM
 * This ensures consistent structure, imports, and exports
 */

export const COMPONENT_TEMPLATE = `
// src/remotion/components/scenes/{{COMPONENT_NAME}}.tsx
// Component generated with Bazaar template

import React from 'react';
import { AbsoluteFill, useCurrentFrame, useVideoConfig, Sequence, interpolate, Easing } from 'remotion';

// TypeScript interfaces for props
interface {{COMPONENT_NAME}}Props {
  data: Record<string, unknown>;
}

/**
 * {{COMPONENT_NAME}} - Custom Remotion component
 */
const {{COMPONENT_NAME}}: React.FC<{{COMPONENT_NAME}}Props> = ({ data }) => {
  // These hooks are imported above - DO NOT DECLARE THEM AGAIN
  const frame = useCurrentFrame();
  const { width, height, fps, durationInFrames } = useVideoConfig();
  
  // Parse data with safe type casting
  // {{COMPONENT_IMPLEMENTATION}}
  
  return (
    <AbsoluteFill style={{ backgroundColor: 'transparent' }}>
      {{COMPONENT_RENDER}}
    </AbsoluteFill>
  );
};

// Export the component as default for ESM compatibility
export default {{COMPONENT_NAME}};

`;

/**
 * Apply the template to component implementation details
 * 
 * @param componentName Validated component name (CamelCase)
 * @param implementation Component implementation logic
 * @param render JSX render content
 * @returns Complete component code using the template
 */
export function applyComponentTemplate(
  componentName: string,
  implementation: string = '',
  render: string = '<div>Empty component</div>'
): string {
  console.log(`Applying template for component: ${componentName}`);
  
  // Sanitize implementation to catch common errors
  let sanitizedImplementation = implementation;
  
  // 1. Remove any duplicate frame declarations (common LLM mistake)
  sanitizedImplementation = sanitizedImplementation.replace(
    /const\s+frame\s*=\s*useCurrentFrame\(\);/g, 
    '/* Hook already declared above */ '
  );
  
  // 2. Remove any duplicate videoConfig declarations
  sanitizedImplementation = sanitizedImplementation.replace(
    /const\s+(?:videoConfig|config|\{\s*width,\s*height.*?\})\s*=\s*useVideoConfig\(\);/g,
    '/* Hook already declared above */ '
  );
  
  // Now apply the template with sanitized implementation
  const result = COMPONENT_TEMPLATE
    .replace(/{{COMPONENT_NAME}}/g, componentName)
    .replace('{{COMPONENT_IMPLEMENTATION}}', sanitizedImplementation)
    .replace('{{COMPONENT_RENDER}}', render);
  
  // Verify the result contains the critical default export
  if (!result.includes('export default')) {
    console.error('Warning: Template application did not include the default export');
  }

  return result;
}

/**
 * Validate that generated component code follows the expected template
 */
export function validateComponentTemplate(code: string): boolean {
  // Must contain a default export
  if (!code.includes('export default')) {
    console.error('Component missing default export');
    return false;
  }

  // Require basic React and Remotion imports
  const hasReact = /import\s+React\s+from\s+["']react["']/.test(code);
  const hasRemotion = /from\s+["']remotion["']/.test(code);
  if (!hasReact || !hasRemotion) {
    console.error('Component missing required imports');
    return false;
  }

  // Should not reference old global registration
  if (code.includes('window.__REMOTION_COMPONENT')) {
    console.error('Component should not use window.__REMOTION_COMPONENT');
    return false;
  }

  return true;
}
