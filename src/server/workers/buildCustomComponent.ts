// src/server/workers/buildCustomComponent.ts
import { db } from "~/server/db";
import { customComponentJobs } from "~/server/db/schema";
import { eq } from "drizzle-orm";
import { S3Client, PutObjectCommand } from "@aws-sdk/client-s3";
import * as esbuild from "esbuild";

// R2 configuration from environment variables
const s3 = new S3Client({
  region: "auto",
  endpoint: process.env.R2_ENDPOINT,
  credentials: {
    accessKeyId: process.env.R2_ACCESS_KEY_ID!,
    secretAccessKey: process.env.R2_SECRET_ACCESS_KEY!,
  },
});

const R2_BUCKET_NAME = process.env.R2_BUCKET_NAME!;
const R2_PUBLIC_URL = process.env.R2_PUBLIC_URL!;

/**
 * Process pending custom component jobs
 * 
 * 1. Find pending jobs
 * 2. Update status to "building"
 * 3. Compile TSX using esbuild
 * 4. Upload JS to R2
 * 5. Update job status to "success" or "error"
 */
export async function processPendingJobs() {
  console.log("Processing pending custom component jobs...");
  
  try {
    // Find pending jobs
    const pendingJobs = await db.query.customComponentJobs.findMany({
      where: eq(customComponentJobs.status, "pending"),
      limit: 5, // Process 5 at a time
    });

    console.log(`Found ${pendingJobs.length} pending jobs`);

    for (const job of pendingJobs) {
      console.log(`Processing job ${job.id}...`);
      
      try {
        // Update status to building
        await db.update(customComponentJobs)
          .set({
            status: "building",
            updatedAt: new Date(),
          })
          .where(eq(customComponentJobs.id, job.id));

        // Check if tsxCode is available (it could be null after schema change)
        if (!job.tsxCode) {
          throw new Error("TSX code is missing for this job");
        }
        
        // Sanitize TSX code (remove unsafe imports, etc.)
        const sanitizedTsx = sanitizeTsx(job.tsxCode);
        
        console.log("Compiling TSX code with esbuild...");
        
        // Compile with esbuild
        const result = await esbuild.build({
          stdin: {
            contents: sanitizedTsx,
            loader: "tsx",
            resolveDir: "",
          },
          bundle: true,
          format: "esm",
          target: ["es2020"],
          platform: "browser",
          external: ["react", "remotion", "@remotion/transitions", "@remotion/media-utils"], // Only allow these imports
          write: false,
          minify: true,
        });

        // Make sure output files exist and get the first one
        if (!result.outputFiles || result.outputFiles.length === 0) {
          throw new Error("No output files generated by esbuild");
        }
        // TypeScript needs explicit reassurance that outputFiles exists and has elements
        const outputFiles = result.outputFiles;
        
        // Additional check to ensure first element exists before accessing its properties
        if (!outputFiles[0]) {
          throw new Error("First output file missing from esbuild result");
        }
        
        const jsCode = outputFiles[0].text;
        
        console.log("Uploading to R2...");

        // Upload to R2
        const key = `custom-components/${job.id}.js`;
        await s3.send(
          new PutObjectCommand({
            Bucket: R2_BUCKET_NAME,
            Key: key,
            Body: jsCode,
            ContentType: "application/javascript",
          })
        );

        // Update job with success
        const outputUrl = `${R2_PUBLIC_URL}/${key}`;
        await db.update(customComponentJobs)
          .set({
            status: "success",
            outputUrl,
            updatedAt: new Date(),
          })
          .where(eq(customComponentJobs.id, job.id));
          
        console.log(`Job ${job.id} completed successfully, available at ${outputUrl}`);

      } catch (error) {
        console.error(`Error processing job ${job.id}:`, error);
        
        // Update job with error
        await db.update(customComponentJobs)
          .set({
            status: "error",
            errorMessage: error instanceof Error ? error.message : String(error),
            retryCount: job.retryCount + 1,
            updatedAt: new Date(),
          })
          .where(eq(customComponentJobs.id, job.id));
      }
    }
  } catch (error) {
    console.error("Error processing jobs:", error);
  }
}

/**
 * Sanitize TSX code by removing unsafe imports
 * 
 * Only allow imports from:
 * - react
 * - remotion
 * - @remotion/* packages
 */
function sanitizeTsx(tsxCode: string): string {
  // Only allow imports from React and Remotion
  const safeImportRegex = /^import\s+.*\s+from\s+['"](?:react|remotion|@remotion\/.*)['"]/gm;
  
  // Split by lines, filter only safe imports
  const lines = tsxCode.split('\n');
  const safeLines = lines.filter(line => {
    const trimmedLine = line.trim();
    const isImport = trimmedLine.startsWith('import ');
    return !isImport || safeImportRegex.test(line);
  });
  
  return safeLines.join('\n');
}
