//bazaar-vid/next.config.js
/**
 * Run `build` or `dev` with `SKIP_ENV_VALIDATION` to skip env validation.
 * This is especially useful for Docker builds.
 */
import "./src/env.js";

/** @type {import('next').NextConfig} */
const config = {
  // Image optimization
  images: {
    domains: [
      'pub-80969e2c6b73496db98ed52f98a48681.r2.dev', // R2 bucket
      'bazaar.it',
      'localhost',
    ],
    formats: ['image/avif', 'image/webp'],
    deviceSizes: [640, 750, 828, 1080, 1200, 1920, 2048, 3840],
    imageSizes: [16, 32, 48, 64, 96, 128, 256, 384],
    minimumCacheTTL: 60 * 60 * 24 * 30, // 30 days
    dangerouslyAllowSVG: true,
    contentSecurityPolicy: "default-src 'self'; script-src 'none'; sandbox;",
  },

  // Enable React's experimental features
  experimental: {
    optimizeCss: true,
    scrollRestoration: true,
    optimizePackageImports: ['lucide-react'],
    serverComponentsExternalPackages: ['@tremor/react'],
  },

  // Performance optimizations
  compress: true,
  productionBrowserSourceMaps: false,
  optimizeFonts: true,

  // TypeScript and build optimizations
  typescript: {
    ignoreBuildErrors: true, // Keep this in development, but consider removing in CI/CD
  },

  // Static generation optimizations
  output: 'standalone',

  // ESLint configuration
  eslint: {
    ignoreDuringBuilds: true,
  },

  // Suppress deprecation warnings in development
  reactStrictMode: true,

  // Security headers
  async headers() {
    return [
      {
        source: '/(.*)',
        headers: [
          {
            key: 'X-Content-Type-Options',
            value: 'nosniff',
          },
          {
            key: 'X-Frame-Options',
            value: 'SAMEORIGIN',
          },
          {
            key: 'X-XSS-Protection',
            value: '1; mode=block',
          },
        ],
      },
    ];
  },

  // Transpile Remotion library
  transpilePackages: [
    "@remotion/cli",
    "@remotion/player",
    // Add other remotion packages if needed
  ],

  // Webpack configuration
  webpack: (config, { isServer, dev }) => {
    // Ensure config.resolve exists
    if (!config.resolve) config.resolve = {};
    if (!config.resolve.alias) config.resolve.alias = {};

    // Add aliases for ~ to point to src directory
    config.resolve.alias['~'] = new URL('./src', import.meta.url).pathname;

    // Add support for importing SVG as React components
    config.module.rules.push({
      test: /\.svg$/,
      use: ['@svgr/webpack'],
    });

    // Ignore all .d.ts files
    config.module.rules.push({
      test: /\.d\.ts$/,
      use: 'null-loader',
    });

    // Add loader for .woff and .woff2 fonts
    config.module.rules.push({
      test: /\.(woff|woff2)$/,
      type: 'asset/resource',
    });

    // Handle Node.js built-in modules in client-side code
    if (!isServer) {
      if (!config.resolve.fallback) config.resolve.fallback = {};
      
      Object.assign(config.resolve.fallback, {
        fs: false,
        path: false,
        os: false,
        crypto: false,
        stream: false,
        buffer: false,
        util: false,
        zlib: false,
        http: false,
        https: false,
        child_process: false,
      });
    }

    // Mark esbuild as external to prevent bundling issues
    if (isServer) {
      if (!config.externals) config.externals = [];
      config.externals.push('esbuild');
    }

    // Configure webpack to ignore logs directory for file watching
    if (dev) {
      const ignoredPatterns = [
        // Directories to ignore
        '**/node_modules/**',
        '**/.next/**',
        '**/logs/**',
        '**/tmp/**',
        '**/temp/**',
        '**/a2a-logs/**',
        '**/combined-logs/**',
        '**/error-logs/**',
        '**/.git/**',
        '**/dist/**',
        '**/build/**',
        
        // A2A specific directories
        '**/src/server/services/a2a/**',
        '**/src/server/agents/**',
        '**/src/server/workers/**',
        
        // File patterns to ignore
        '**/*.log',
      ];
      
      config.watchOptions = {
        ...config.watchOptions,
        ignored: ignoredPatterns,
      };
    }

    return config;
  },
};

// Export the config object
export default config;
