Error Type: Syntax error
Component ID: 6ecd9e02-6b92-4759-9d01-5d98d9fd1951
Effect: 3dModelsSpinScene
Created: Sat May 10 2025 21:03:06 GMT+0700 (Indochina Time)

ERROR MESSAGE:
Build error: Build failed with 1 error:
../../../../../../private/var/folders/6n/l8_rdhx56gx3qk8vk9_s_54h0000gn/T/bazaar-components-6ecd9e02-6b92-4759-9d01-5d98d9fd1951/component.tsx:74:14: ERROR: Syntax error "d"

CODE SAMPLE:
"use client";

// src/remotion/components/scenes/3dModelsSpinScene.tsx
import React from 'react';
import {
  AbsoluteFill,
  useCurrentFrame,
  useVideoConfig,
  interpolate,
  Easing,
  Audio,
} from 'remotion';
import { AnimationDesignBrief } from '~/lib/schemas/animationDesignBrief.schema';

interface SpinningModelProps {
  left: number;
  top: number;
  size: number;
}

const SpinningModel: React.FC<SpinningModelProps> = ({ left, top, size }) => {
  const frame = useCurrentFrame();
  const { fps } = useVideoConfig();

  // Fade In (0-30)
  const fadeInOpacity = interpolate(
    frame,
    [0, 30],
    [0, 1],
    { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }
  );

  // Slide Up (0-30)
  const slideY = interpolate(
    frame,
    [0, 30],
    [top + 50, top],
    { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutQuint }
  );

  // Rotation (0-180)
  const rotation = interpolate(
    frame,
    [0, 180],
    [0, 360],
    { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.linear }
  );

  // Fade Out (0-60)
  const fadeOut = interpolate(
    frame,
    [0, 60],
    [1, 0],
    { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInCubic }
  );

  const opacity = frame <= 60 ? fadeOut : fadeInOpacity;

  const style: React.CSSProperties = {
    position: 'absolute',
    left,
    top: slideY,
    width: size,
    height: size,
    opacity,
    transform: `rotate(${rotation}deg) scale(1)`,
    backgroundColor: '#00B5FF',
    borderRadius: '16px',
  };

  return <div style={style} />;
};

export const 3dModelsSpinScene: React.FC<{ brief: AnimationDesignBrief }> = ({ brief }) => {
  const frame = useCurrentFrame();
  const { fps, width, height } = useVideoConfig();

  // Background
  const backgroundStyle: React.CSSProperties = {
    position: 'absolute',
    left: 0,
    top: 0,
    width: width,
    height: height,
    opacity: 1,
    transform: 'rotate(0deg) scale(1)',
    backgroundColor: '#111111',
  };

  // Bottom overlay
  const bottomOverlayStyle: React.CSSProperties = {
    position: 'absolute',
    left: 0,
    top: 700,
    width: width,
    height: 380,
    opacity: 0.8,
    transform: 'rotate(0deg) scale(1)',
    backgroundColor: '#222222',
  };

  // Left stripe animations (Element 3)
  const stripeFadeIn1 = interpolate(
    frame,
    [0, 60],
    [0, 0.2],
    { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }
  );
  const stripeFadeCustom1 = interpolate(
    frame,
    [0, 60],
    [0.2, 0.05],
    { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInOutSine }
  );
  const leftStripeOpacity = stripeFadeCustom1;

  const leftStripeStyle: React.CSSProperties = {
    position: 'absolute',
    left: 250,
    top: 0,
    width: 100,
    height: height,
    opacity: leftStripeOpacity,
    transform: 'rotate(-15deg) scale(1)',
    backgroundColor: '#FFFFFF',
  };

  // Right stripe animations (Element 4)
  const stripeFadeIn2 = interpolate(
    frame,
    [0, 60],
    [0, 0.15],
    { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }
  );
  const stripeFadeCustom2 = interpolate(
    frame,
    [0, 60],
    [0.15, 0.05],
    { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInOutSine }
  );
  const rightStripeOpacity = stripeFadeCustom2;

  const rightStripeStyle: React.CSSProperties = {
    position: 'absolute',
    left: 1570,
    top: 0,
    width: 100,
    height: height,
    opacity: rightStripeOpacity,
    transform: 'rotate(15deg) scale(1)',
    backgroundColor: '#FFFFFF',
  };

  // Title text animations (Element 8)
  const titleOpacityIn = interpolate(
    frame,
    [0, 30],
    [0, 1],
    { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }
  );
  const titleY = interpolate(
    frame,
    [0, 30],
    [50, 100],
    { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutQuint }
  );
  const titleOpacityOut = interpolate(
    frame,
    [0, 30],
    [1, 0],
    { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInCubic }
  );
  const titleOpacity = titleOpacityOut;

  const titleStyle: React.CSSProperties = {
    position: 'absolute',
    left: 960 - 400,
    top: titleY,
    width: 800,
    height: 80,
    opacity: titleOpacity,
    transform: 'rotate(0deg) scale(1)',
    color: '#FFFFFF',
    fontFamily: 'Roboto, sans-serif',
    fontSize: 48,
    textAlign: 'center',
  };

  return (
    <AbsoluteFill>
      {/* Background and overlays */}
      <div style={backgroundStyle} />
      <div style={bottomOverlayStyle} />

      {/* Decorative stripes */}
      <div style={leftStripeStyle} />
      <div style={rightStripeStyle} />

      {/* Spinning placeholder boxes */}
      <SpinningModel left={640} top={540} size={300} />
      <SpinningModel left={960} top={540} size={300} />
      <SpinningModel left={1280} top={540} size={300} />

      {/* Title Text */}
      <h1 style={titleStyle}>Modern Gallery Showcase</h1>

      {/* Ambient Audio */}
      <Audio src={"ambient_gallery.mp3"} startFrom={0} volume={0.6} />
    </AbsoluteFill>
  );
};
