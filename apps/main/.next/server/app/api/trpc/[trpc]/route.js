/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/trpc/[trpc]/route";
exports.ids = ["app/api/trpc/[trpc]/route"];
exports.modules = {

/***/ "(rsc)/../../node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Ftrpc%2F%5Btrpc%5D%2Froute&page=%2Fapi%2Ftrpc%2F%5Btrpc%5D%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Ftrpc%2F%5Btrpc%5D%2Froute.ts&appDir=%2FUsers%2Fmarkushogne%2FDocuments%2FAPPS%2Fbazaar-vid%2Fbazaar-vid%2Fapps%2Fmain%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fmarkushogne%2FDocuments%2FAPPS%2Fbazaar-vid%2Fbazaar-vid%2Fapps%2Fmain&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D!":
/*!***************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Ftrpc%2F%5Btrpc%5D%2Froute&page=%2Fapi%2Ftrpc%2F%5Btrpc%5D%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Ftrpc%2F%5Btrpc%5D%2Froute.ts&appDir=%2FUsers%2Fmarkushogne%2FDocuments%2FAPPS%2Fbazaar-vid%2Fbazaar-vid%2Fapps%2Fmain%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fmarkushogne%2FDocuments%2FAPPS%2Fbazaar-vid%2Fbazaar-vid%2Fapps%2Fmain&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   workAsyncStorage: () => (/* binding */ workAsyncStorage),\n/* harmony export */   workUnitAsyncStorage: () => (/* binding */ workUnitAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/route-modules/app-route/module.compiled */ \"(rsc)/../../node_modules/next/dist/server/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(rsc)/../../node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/../../node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _Users_markushogne_Documents_APPS_bazaar_vid_bazaar_vid_apps_main_src_app_api_trpc_trpc_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./src/app/api/trpc/[trpc]/route.ts */ \"(rsc)/./src/app/api/trpc/[trpc]/route.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_Users_markushogne_Documents_APPS_bazaar_vid_bazaar_vid_apps_main_src_app_api_trpc_trpc_route_ts__WEBPACK_IMPORTED_MODULE_3__]);\n_Users_markushogne_Documents_APPS_bazaar_vid_bazaar_vid_apps_main_src_app_api_trpc_trpc_route_ts__WEBPACK_IMPORTED_MODULE_3__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"standalone\"\nconst routeModule = new next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/trpc/[trpc]/route\",\n        pathname: \"/api/trpc/[trpc]\",\n        filename: \"route\",\n        bundlePath: \"app/api/trpc/[trpc]/route\"\n    },\n    resolvedPagePath: \"/Users/markushogne/Documents/APPS/bazaar-vid/bazaar-vid/apps/main/src/app/api/trpc/[trpc]/route.ts\",\n    nextConfigOutput,\n    userland: _Users_markushogne_Documents_APPS_bazaar_vid_bazaar_vid_apps_main_src_app_api_trpc_trpc_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule;\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        workAsyncStorage,\n        workUnitAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9idWlsZC93ZWJwYWNrL2xvYWRlcnMvbmV4dC1hcHAtbG9hZGVyL2luZGV4LmpzP25hbWU9YXBwJTJGYXBpJTJGdHJwYyUyRiU1QnRycGMlNUQlMkZyb3V0ZSZwYWdlPSUyRmFwaSUyRnRycGMlMkYlNUJ0cnBjJTVEJTJGcm91dGUmYXBwUGF0aHM9JnBhZ2VQYXRoPXByaXZhdGUtbmV4dC1hcHAtZGlyJTJGYXBpJTJGdHJwYyUyRiU1QnRycGMlNUQlMkZyb3V0ZS50cyZhcHBEaXI9JTJGVXNlcnMlMkZtYXJrdXNob2duZSUyRkRvY3VtZW50cyUyRkFQUFMlMkZiYXphYXItdmlkJTJGYmF6YWFyLXZpZCUyRmFwcHMlMkZtYWluJTJGc3JjJTJGYXBwJnBhZ2VFeHRlbnNpb25zPXRzeCZwYWdlRXh0ZW5zaW9ucz10cyZwYWdlRXh0ZW5zaW9ucz1qc3gmcGFnZUV4dGVuc2lvbnM9anMmcm9vdERpcj0lMkZVc2VycyUyRm1hcmt1c2hvZ25lJTJGRG9jdW1lbnRzJTJGQVBQUyUyRmJhemFhci12aWQlMkZiYXphYXItdmlkJTJGYXBwcyUyRm1haW4maXNEZXY9dHJ1ZSZ0c2NvbmZpZ1BhdGg9dHNjb25maWcuanNvbiZiYXNlUGF0aD0mYXNzZXRQcmVmaXg9Jm5leHRDb25maWdPdXRwdXQ9c3RhbmRhbG9uZSZwcmVmZXJyZWRSZWdpb249Jm1pZGRsZXdhcmVDb25maWc9ZTMwJTNEISIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUErRjtBQUN2QztBQUNxQjtBQUNrRDtBQUMvSDtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IseUdBQW1CO0FBQzNDO0FBQ0EsY0FBYyxrRUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsWUFBWTtBQUNaLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRLHNEQUFzRDtBQUM5RDtBQUNBLFdBQVcsNEVBQVc7QUFDdEI7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUMwRjs7QUFFMUYscUMiLCJzb3VyY2VzIjpbIiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcHBSb3V0ZVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvcm91dGUtbW9kdWxlcy9hcHAtcm91dGUvbW9kdWxlLmNvbXBpbGVkXCI7XG5pbXBvcnQgeyBSb3V0ZUtpbmQgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9yb3V0ZS1raW5kXCI7XG5pbXBvcnQgeyBwYXRjaEZldGNoIGFzIF9wYXRjaEZldGNoIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvbGliL3BhdGNoLWZldGNoXCI7XG5pbXBvcnQgKiBhcyB1c2VybGFuZCBmcm9tIFwiL1VzZXJzL21hcmt1c2hvZ25lL0RvY3VtZW50cy9BUFBTL2JhemFhci12aWQvYmF6YWFyLXZpZC9hcHBzL21haW4vc3JjL2FwcC9hcGkvdHJwYy9bdHJwY10vcm91dGUudHNcIjtcbi8vIFdlIGluamVjdCB0aGUgbmV4dENvbmZpZ091dHB1dCBoZXJlIHNvIHRoYXQgd2UgY2FuIHVzZSB0aGVtIGluIHRoZSByb3V0ZVxuLy8gbW9kdWxlLlxuY29uc3QgbmV4dENvbmZpZ091dHB1dCA9IFwic3RhbmRhbG9uZVwiXG5jb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBBcHBSb3V0ZVJvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5BUFBfUk9VVEUsXG4gICAgICAgIHBhZ2U6IFwiL2FwaS90cnBjL1t0cnBjXS9yb3V0ZVwiLFxuICAgICAgICBwYXRobmFtZTogXCIvYXBpL3RycGMvW3RycGNdXCIsXG4gICAgICAgIGZpbGVuYW1lOiBcInJvdXRlXCIsXG4gICAgICAgIGJ1bmRsZVBhdGg6IFwiYXBwL2FwaS90cnBjL1t0cnBjXS9yb3V0ZVwiXG4gICAgfSxcbiAgICByZXNvbHZlZFBhZ2VQYXRoOiBcIi9Vc2Vycy9tYXJrdXNob2duZS9Eb2N1bWVudHMvQVBQUy9iYXphYXItdmlkL2JhemFhci12aWQvYXBwcy9tYWluL3NyYy9hcHAvYXBpL3RycGMvW3RycGNdL3JvdXRlLnRzXCIsXG4gICAgbmV4dENvbmZpZ091dHB1dCxcbiAgICB1c2VybGFuZFxufSk7XG4vLyBQdWxsIG91dCB0aGUgZXhwb3J0cyB0aGF0IHdlIG5lZWQgdG8gZXhwb3NlIGZyb20gdGhlIG1vZHVsZS4gVGhpcyBzaG91bGRcbi8vIGJlIGVsaW1pbmF0ZWQgd2hlbiB3ZSd2ZSBtb3ZlZCB0aGUgb3RoZXIgcm91dGVzIHRvIHRoZSBuZXcgZm9ybWF0LiBUaGVzZVxuLy8gYXJlIHVzZWQgdG8gaG9vayBpbnRvIHRoZSByb3V0ZS5cbmNvbnN0IHsgd29ya0FzeW5jU3RvcmFnZSwgd29ya1VuaXRBc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzIH0gPSByb3V0ZU1vZHVsZTtcbmZ1bmN0aW9uIHBhdGNoRmV0Y2goKSB7XG4gICAgcmV0dXJuIF9wYXRjaEZldGNoKHtcbiAgICAgICAgd29ya0FzeW5jU3RvcmFnZSxcbiAgICAgICAgd29ya1VuaXRBc3luY1N0b3JhZ2VcbiAgICB9KTtcbn1cbmV4cG9ydCB7IHJvdXRlTW9kdWxlLCB3b3JrQXN5bmNTdG9yYWdlLCB3b3JrVW5pdEFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MsIHBhdGNoRmV0Y2gsICB9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcHAtcm91dGUuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Ftrpc%2F%5Btrpc%5D%2Froute&page=%2Fapi%2Ftrpc%2F%5Btrpc%5D%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Ftrpc%2F%5Btrpc%5D%2Froute.ts&appDir=%2FUsers%2Fmarkushogne%2FDocuments%2FAPPS%2Fbazaar-vid%2Fbazaar-vid%2Fapps%2Fmain%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fmarkushogne%2FDocuments%2FAPPS%2Fbazaar-vid%2Fbazaar-vid%2Fapps%2Fmain&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/../../node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!**********************************************************************************************************!*\
  !*** ../../node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \**********************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "(rsc)/../../packages/auth/config.ts":
/*!*************************************!*\
  !*** ../../packages/auth/config.ts ***!
  \*************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   authConfig: () => (/* binding */ authConfig)\n/* harmony export */ });\n/* harmony import */ var _auth_drizzle_adapter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @auth/drizzle-adapter */ \"(rsc)/../../node_modules/@auth/drizzle-adapter/index.js\");\n/* harmony import */ var next_auth_providers_github__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next-auth/providers/github */ \"(rsc)/../../node_modules/next-auth/providers/github.js\");\n/* harmony import */ var next_auth_providers_google__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next-auth/providers/google */ \"(rsc)/../../node_modules/next-auth/providers/google.js\");\n/* harmony import */ var _bazaar_database__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @bazaar/database */ \"(rsc)/../../packages/database/index.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_auth_drizzle_adapter__WEBPACK_IMPORTED_MODULE_0__, _bazaar_database__WEBPACK_IMPORTED_MODULE_3__]);\n([_auth_drizzle_adapter__WEBPACK_IMPORTED_MODULE_0__, _bazaar_database__WEBPACK_IMPORTED_MODULE_3__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n// src/server/auth/config.ts\n\n\n\n// Use validated env import if you set it up in env.js/mjs\n// import { env } from \"~/env\";\n\n/**\n * Options for NextAuth.js used to configure adapters, providers, callbacks, etc.\n *\n * @see https://next-auth.js.org/configuration/options\n */ const authConfig = {\n    debug: \"development\" === \"development\",\n    adapter: (0,_auth_drizzle_adapter__WEBPACK_IMPORTED_MODULE_0__.DrizzleAdapter)(_bazaar_database__WEBPACK_IMPORTED_MODULE_3__.db, {\n        usersTable: _bazaar_database__WEBPACK_IMPORTED_MODULE_3__.users,\n        accountsTable: _bazaar_database__WEBPACK_IMPORTED_MODULE_3__.accounts,\n        verificationTokensTable: _bazaar_database__WEBPACK_IMPORTED_MODULE_3__.verificationTokens\n    }),\n    providers: [\n        (0,next_auth_providers_github__WEBPACK_IMPORTED_MODULE_1__[\"default\"])({\n            clientId: process.env.AUTH_GITHUB_ID || \"\",\n            clientSecret: process.env.AUTH_GITHUB_SECRET || \"\",\n            allowDangerousEmailAccountLinking: true\n        }),\n        (0,next_auth_providers_google__WEBPACK_IMPORTED_MODULE_2__[\"default\"])({\n            clientId: process.env.GOOGLE_CLIENT_ID || \"\",\n            clientSecret: process.env.GOOGLE_CLIENT_SECRET || \"\",\n            allowDangerousEmailAccountLinking: true\n        })\n    ],\n    session: {\n        strategy: \"jwt\"\n    },\n    callbacks: {\n        // Add the JWT callback needed for JWT strategy\n        jwt ({ token, user }) {\n            if (user) {\n                token.id = user.id;\n            }\n            return token;\n        },\n        // Session callback reads from the token\n        session: ({ session, token })=>({\n                ...session,\n                user: {\n                    ...session.user,\n                    id: token.id\n                }\n            }),\n        // Handle account linking for OAuth providers\n        async signIn ({ user, account, profile, email, credentials }) {\n            // Allow all OAuth sign-ins\n            if (account?.provider === \"google\" || account?.provider === \"github\") {\n                return true;\n            }\n            return true;\n        },\n        // Your authorized callback can likely stay here too\n        authorized ({ auth, request: { nextUrl } }) {\n            const isLoggedIn = !!auth?.user;\n            const isProtectedRoute = nextUrl.pathname.startsWith('/projects');\n            // Consider if API should be protected differently (e.g., allow unauthed access to specific tRPC routes?)\n            const isApiRoute = nextUrl.pathname.startsWith('/api/');\n            if (isProtectedRoute || isApiRoute && !nextUrl.pathname.startsWith('/api/auth')) {\n                if (isLoggedIn) return true;\n                return false; // Redirect for protected routes\n            }\n            return true; // Allow public routes\n        }\n    },\n    // secret: env.AUTH_SECRET, // Implicitly uses AUTH_SECRET env var in v5\n    pages: {\n        signIn: \"/login\"\n    }\n};\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vcGFja2FnZXMvYXV0aC9jb25maWcudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQSw0QkFBNEI7QUFDMkI7QUFFQztBQUNBO0FBQ3hELDBEQUEwRDtBQUMxRCwrQkFBK0I7QUFDNEM7QUF1QjNFOzs7O0NBSUMsR0FDTSxNQUFNTyxhQUFhO0lBQ3hCQyxPQUFPQyxrQkFBeUI7SUFDaENDLFNBQVNWLHFFQUFjQSxDQUFDRyxnREFBRUEsRUFBRTtRQUMxQlEsWUFBWU4sbURBQUtBO1FBQ2pCTyxlQUFlUixzREFBUUE7UUFDdkJTLHlCQUF5QlAsZ0VBQWtCQTtJQUU3QztJQUNBUSxXQUFXO1FBQ1RiLHNFQUFjQSxDQUFDO1lBQ2JjLFVBQVVOLFFBQVFPLEdBQUcsQ0FBQ0MsY0FBYyxJQUFJO1lBQ3hDQyxjQUFjVCxRQUFRTyxHQUFHLENBQUNHLGtCQUFrQixJQUFJO1lBQ2hEQyxtQ0FBbUM7UUFDckM7UUFDQWxCLHNFQUFjQSxDQUFDO1lBQ2JhLFVBQVVOLFFBQVFPLEdBQUcsQ0FBQ0ssZ0JBQWdCLElBQUk7WUFDMUNILGNBQWNULFFBQVFPLEdBQUcsQ0FBQ00sb0JBQW9CLElBQUk7WUFDbERGLG1DQUFtQztRQUNyQztLQUNEO0lBQ0RHLFNBQVM7UUFDUEMsVUFBVTtJQUNaO0lBQ0FDLFdBQVc7UUFDVCwrQ0FBK0M7UUFDL0NDLEtBQUksRUFBRUMsS0FBSyxFQUFFQyxJQUFJLEVBQUU7WUFDakIsSUFBSUEsTUFBTTtnQkFDUkQsTUFBTUUsRUFBRSxHQUFHRCxLQUFLQyxFQUFFO1lBQ3BCO1lBQ0EsT0FBT0Y7UUFDVDtRQUNBLHdDQUF3QztRQUN4Q0osU0FBUyxDQUFDLEVBQUVBLE9BQU8sRUFBRUksS0FBSyxFQUFFLEdBQU07Z0JBQ2hDLEdBQUdKLE9BQU87Z0JBQ1ZLLE1BQU07b0JBQ0osR0FBR0wsUUFBUUssSUFBSTtvQkFDZkMsSUFBSUYsTUFBTUUsRUFBRTtnQkFDZDtZQUNGO1FBQ0EsNkNBQTZDO1FBQzdDLE1BQU1DLFFBQU8sRUFBRUYsSUFBSSxFQUFFRyxPQUFPLEVBQUVDLE9BQU8sRUFBRUMsS0FBSyxFQUFFQyxXQUFXLEVBQUU7WUFDekQsMkJBQTJCO1lBQzNCLElBQUlILFNBQVNJLGFBQWEsWUFBWUosU0FBU0ksYUFBYSxVQUFVO2dCQUNwRSxPQUFPO1lBQ1Q7WUFDQSxPQUFPO1FBQ1Q7UUFDQSxvREFBb0Q7UUFDcERDLFlBQVcsRUFBRUMsSUFBSSxFQUFFQyxTQUFTLEVBQUVDLE9BQU8sRUFBRSxFQUFFO1lBQ3ZDLE1BQU1DLGFBQWEsQ0FBQyxDQUFDSCxNQUFNVDtZQUMzQixNQUFNYSxtQkFBbUJGLFFBQVFHLFFBQVEsQ0FBQ0MsVUFBVSxDQUFDO1lBQ3JELHlHQUF5RztZQUN6RyxNQUFNQyxhQUFhTCxRQUFRRyxRQUFRLENBQUNDLFVBQVUsQ0FBQztZQUMvQyxJQUFJRixvQkFBcUJHLGNBQWMsQ0FBQ0wsUUFBUUcsUUFBUSxDQUFDQyxVQUFVLENBQUMsY0FBZTtnQkFDakYsSUFBSUgsWUFBWSxPQUFPO2dCQUN2QixPQUFPLE9BQU8sZ0NBQWdDO1lBQ2hEO1lBQ0EsT0FBTyxNQUFNLHNCQUFzQjtRQUNyQztJQUNGO0lBQ0Esd0VBQXdFO0lBQ3hFSyxPQUFPO1FBQUVmLFFBQVE7SUFBUztBQUM1QixFQUEyQiIsInNvdXJjZXMiOlsiL1VzZXJzL21hcmt1c2hvZ25lL0RvY3VtZW50cy9BUFBTL2JhemFhci12aWQvYmF6YWFyLXZpZC9wYWNrYWdlcy9hdXRoL2NvbmZpZy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBzcmMvc2VydmVyL2F1dGgvY29uZmlnLnRzXG5pbXBvcnQgeyBEcml6emxlQWRhcHRlciB9IGZyb20gXCJAYXV0aC9kcml6emxlLWFkYXB0ZXJcIjtcbmltcG9ydCB7IHR5cGUgRGVmYXVsdFNlc3Npb24sIHR5cGUgTmV4dEF1dGhDb25maWcgfSBmcm9tIFwibmV4dC1hdXRoXCI7XG5pbXBvcnQgR2l0SHViUHJvdmlkZXIgZnJvbSBcIm5leHQtYXV0aC9wcm92aWRlcnMvZ2l0aHViXCI7XG5pbXBvcnQgR29vZ2xlUHJvdmlkZXIgZnJvbSBcIm5leHQtYXV0aC9wcm92aWRlcnMvZ29vZ2xlXCI7XG4vLyBVc2UgdmFsaWRhdGVkIGVudiBpbXBvcnQgaWYgeW91IHNldCBpdCB1cCBpbiBlbnYuanMvbWpzXG4vLyBpbXBvcnQgeyBlbnYgfSBmcm9tIFwifi9lbnZcIjtcbmltcG9ydCB7IGRiLCBhY2NvdW50cywgdXNlcnMsIHZlcmlmaWNhdGlvblRva2VucyB9IGZyb20gXCJAYmF6YWFyL2RhdGFiYXNlXCI7XG5cbi8qKlxuICogTW9kdWxlIGF1Z21lbnRhdGlvbiBmb3IgYG5leHQtYXV0aGAgdHlwZXMuIEFsbG93cyB1cyB0byBhZGQgY3VzdG9tIHByb3BlcnRpZXMgdG8gdGhlIGBzZXNzaW9uYFxuICogb2JqZWN0IGFuZCBrZWVwIHR5cGUgc2FmZXR5LlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9uZXh0LWF1dGguanMub3JnL2dldHRpbmctc3RhcnRlZC90eXBlc2NyaXB0I21vZHVsZS1hdWdtZW50YXRpb25cbiAqL1xuZGVjbGFyZSBtb2R1bGUgXCJuZXh0LWF1dGhcIiB7XG4gIGludGVyZmFjZSBTZXNzaW9uIGV4dGVuZHMgRGVmYXVsdFNlc3Npb24ge1xuICAgIHVzZXI6IHtcbiAgICAgIGlkOiBzdHJpbmc7XG4gICAgICAvLyAuLi5vdGhlciBwcm9wZXJ0aWVzXG4gICAgICAvLyByb2xlOiBVc2VyUm9sZTtcbiAgICB9ICYgRGVmYXVsdFNlc3Npb25bXCJ1c2VyXCJdO1xuICB9XG5cbiAgLy8gaW50ZXJmYWNlIFVzZXIge1xuICAvLyAgIC8vIC4uLm90aGVyIHByb3BlcnRpZXNcbiAgLy8gICAvLyByb2xlOiBVc2VyUm9sZTtcbiAgLy8gfVxufVxuXG4vKipcbiAqIE9wdGlvbnMgZm9yIE5leHRBdXRoLmpzIHVzZWQgdG8gY29uZmlndXJlIGFkYXB0ZXJzLCBwcm92aWRlcnMsIGNhbGxiYWNrcywgZXRjLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9uZXh0LWF1dGguanMub3JnL2NvbmZpZ3VyYXRpb24vb3B0aW9uc1xuICovXG5leHBvcnQgY29uc3QgYXV0aENvbmZpZyA9IHtcbiAgZGVidWc6IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcImRldmVsb3BtZW50XCIsXG4gIGFkYXB0ZXI6IERyaXp6bGVBZGFwdGVyKGRiLCB7XG4gICAgdXNlcnNUYWJsZTogdXNlcnMsXG4gICAgYWNjb3VudHNUYWJsZTogYWNjb3VudHMsXG4gICAgdmVyaWZpY2F0aW9uVG9rZW5zVGFibGU6IHZlcmlmaWNhdGlvblRva2VucyxcbiAgICAvLyBETyBOT1QgYWRkIHNlc3Npb25zVGFibGUgaGVyZVxuICB9KSxcbiAgcHJvdmlkZXJzOiBbXG4gICAgR2l0SHViUHJvdmlkZXIoe1xuICAgICAgY2xpZW50SWQ6IHByb2Nlc3MuZW52LkFVVEhfR0lUSFVCX0lEIHx8IFwiXCIsXG4gICAgICBjbGllbnRTZWNyZXQ6IHByb2Nlc3MuZW52LkFVVEhfR0lUSFVCX1NFQ1JFVCB8fCBcIlwiLFxuICAgICAgYWxsb3dEYW5nZXJvdXNFbWFpbEFjY291bnRMaW5raW5nOiB0cnVlLFxuICAgIH0pLFxuICAgIEdvb2dsZVByb3ZpZGVyKHtcbiAgICAgIGNsaWVudElkOiBwcm9jZXNzLmVudi5HT09HTEVfQ0xJRU5UX0lEIHx8IFwiXCIsXG4gICAgICBjbGllbnRTZWNyZXQ6IHByb2Nlc3MuZW52LkdPT0dMRV9DTElFTlRfU0VDUkVUIHx8IFwiXCIsXG4gICAgICBhbGxvd0Rhbmdlcm91c0VtYWlsQWNjb3VudExpbmtpbmc6IHRydWUsXG4gICAgfSksXG4gIF0sXG4gIHNlc3Npb246IHtcbiAgICBzdHJhdGVneTogXCJqd3RcIixcbiAgfSxcbiAgY2FsbGJhY2tzOiB7XG4gICAgLy8gQWRkIHRoZSBKV1QgY2FsbGJhY2sgbmVlZGVkIGZvciBKV1Qgc3RyYXRlZ3lcbiAgICBqd3QoeyB0b2tlbiwgdXNlciB9KSB7XG4gICAgICBpZiAodXNlcikge1xuICAgICAgICB0b2tlbi5pZCA9IHVzZXIuaWQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gdG9rZW47XG4gICAgfSxcbiAgICAvLyBTZXNzaW9uIGNhbGxiYWNrIHJlYWRzIGZyb20gdGhlIHRva2VuXG4gICAgc2Vzc2lvbjogKHsgc2Vzc2lvbiwgdG9rZW4gfSkgPT4gKHtcbiAgICAgIC4uLnNlc3Npb24sXG4gICAgICB1c2VyOiB7XG4gICAgICAgIC4uLnNlc3Npb24udXNlcixcbiAgICAgICAgaWQ6IHRva2VuLmlkIGFzIHN0cmluZywgLy8gRW5zdXJlIElEIGZyb20gdG9rZW4gaXMgcHV0IGludG8gc2Vzc2lvbiB1c2VyXG4gICAgICB9LFxuICAgIH0pLFxuICAgIC8vIEhhbmRsZSBhY2NvdW50IGxpbmtpbmcgZm9yIE9BdXRoIHByb3ZpZGVyc1xuICAgIGFzeW5jIHNpZ25Jbih7IHVzZXIsIGFjY291bnQsIHByb2ZpbGUsIGVtYWlsLCBjcmVkZW50aWFscyB9KSB7XG4gICAgICAvLyBBbGxvdyBhbGwgT0F1dGggc2lnbi1pbnNcbiAgICAgIGlmIChhY2NvdW50Py5wcm92aWRlciA9PT0gXCJnb29nbGVcIiB8fCBhY2NvdW50Py5wcm92aWRlciA9PT0gXCJnaXRodWJcIikge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0sXG4gICAgLy8gWW91ciBhdXRob3JpemVkIGNhbGxiYWNrIGNhbiBsaWtlbHkgc3RheSBoZXJlIHRvb1xuICAgIGF1dGhvcml6ZWQoeyBhdXRoLCByZXF1ZXN0OiB7IG5leHRVcmwgfSB9KSB7XG4gICAgICBjb25zdCBpc0xvZ2dlZEluID0gISFhdXRoPy51c2VyO1xuICAgICAgY29uc3QgaXNQcm90ZWN0ZWRSb3V0ZSA9IG5leHRVcmwucGF0aG5hbWUuc3RhcnRzV2l0aCgnL3Byb2plY3RzJyk7XG4gICAgICAvLyBDb25zaWRlciBpZiBBUEkgc2hvdWxkIGJlIHByb3RlY3RlZCBkaWZmZXJlbnRseSAoZS5nLiwgYWxsb3cgdW5hdXRoZWQgYWNjZXNzIHRvIHNwZWNpZmljIHRSUEMgcm91dGVzPylcbiAgICAgIGNvbnN0IGlzQXBpUm91dGUgPSBuZXh0VXJsLnBhdGhuYW1lLnN0YXJ0c1dpdGgoJy9hcGkvJyk7XG4gICAgICBpZiAoaXNQcm90ZWN0ZWRSb3V0ZSB8fCAoaXNBcGlSb3V0ZSAmJiAhbmV4dFVybC5wYXRobmFtZS5zdGFydHNXaXRoKCcvYXBpL2F1dGgnKSkpIHsgLy8gRXhhbXBsZTogUHJvdGVjdCBBUEkgZXhjZXB0IGF1dGggcm91dGVzXG4gICAgICAgIGlmIChpc0xvZ2dlZEluKSByZXR1cm4gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIGZhbHNlOyAvLyBSZWRpcmVjdCBmb3IgcHJvdGVjdGVkIHJvdXRlc1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7IC8vIEFsbG93IHB1YmxpYyByb3V0ZXNcbiAgICB9LFxuICB9LFxuICAvLyBzZWNyZXQ6IGVudi5BVVRIX1NFQ1JFVCwgLy8gSW1wbGljaXRseSB1c2VzIEFVVEhfU0VDUkVUIGVudiB2YXIgaW4gdjVcbiAgcGFnZXM6IHsgc2lnbkluOiBcIi9sb2dpblwiIH0sIC8vIEN1c3RvbSBsb2dpbiBwYWdlXG59IHNhdGlzZmllcyBOZXh0QXV0aENvbmZpZztcbiJdLCJuYW1lcyI6WyJEcml6emxlQWRhcHRlciIsIkdpdEh1YlByb3ZpZGVyIiwiR29vZ2xlUHJvdmlkZXIiLCJkYiIsImFjY291bnRzIiwidXNlcnMiLCJ2ZXJpZmljYXRpb25Ub2tlbnMiLCJhdXRoQ29uZmlnIiwiZGVidWciLCJwcm9jZXNzIiwiYWRhcHRlciIsInVzZXJzVGFibGUiLCJhY2NvdW50c1RhYmxlIiwidmVyaWZpY2F0aW9uVG9rZW5zVGFibGUiLCJwcm92aWRlcnMiLCJjbGllbnRJZCIsImVudiIsIkFVVEhfR0lUSFVCX0lEIiwiY2xpZW50U2VjcmV0IiwiQVVUSF9HSVRIVUJfU0VDUkVUIiwiYWxsb3dEYW5nZXJvdXNFbWFpbEFjY291bnRMaW5raW5nIiwiR09PR0xFX0NMSUVOVF9JRCIsIkdPT0dMRV9DTElFTlRfU0VDUkVUIiwic2Vzc2lvbiIsInN0cmF0ZWd5IiwiY2FsbGJhY2tzIiwiand0IiwidG9rZW4iLCJ1c2VyIiwiaWQiLCJzaWduSW4iLCJhY2NvdW50IiwicHJvZmlsZSIsImVtYWlsIiwiY3JlZGVudGlhbHMiLCJwcm92aWRlciIsImF1dGhvcml6ZWQiLCJhdXRoIiwicmVxdWVzdCIsIm5leHRVcmwiLCJpc0xvZ2dlZEluIiwiaXNQcm90ZWN0ZWRSb3V0ZSIsInBhdGhuYW1lIiwic3RhcnRzV2l0aCIsImlzQXBpUm91dGUiLCJwYWdlcyJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../packages/auth/config.ts\n");

/***/ }),

/***/ "(rsc)/../../packages/auth/index.ts":
/*!************************************!*\
  !*** ../../packages/auth/index.ts ***!
  \************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   auth: () => (/* binding */ auth),\n/* harmony export */   handlers: () => (/* binding */ handlers),\n/* harmony export */   signIn: () => (/* binding */ signIn),\n/* harmony export */   signOut: () => (/* binding */ signOut)\n/* harmony export */ });\n/* harmony import */ var next_auth__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next-auth */ \"(rsc)/../../node_modules/next-auth/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(rsc)/../../node_modules/next/dist/server/route-modules/app-page/vendored/rsc/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./config */ \"(rsc)/../../packages/auth/config.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_config__WEBPACK_IMPORTED_MODULE_2__]);\n_config__WEBPACK_IMPORTED_MODULE_2__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n// src/server/auth/index.ts\n\n\n\nconst { auth: uncachedAuth, handlers, signIn, signOut } = (0,next_auth__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(_config__WEBPACK_IMPORTED_MODULE_2__.authConfig);\nconst auth = (0,react__WEBPACK_IMPORTED_MODULE_1__.cache)(uncachedAuth);\n\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vcGFja2FnZXMvYXV0aC9pbmRleC50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUFBLDJCQUEyQjtBQUNNO0FBQ0g7QUFFUTtBQUV0QyxNQUFNLEVBQUVHLE1BQU1DLFlBQVksRUFBRUMsUUFBUSxFQUFFQyxNQUFNLEVBQUVDLE9BQU8sRUFBRSxHQUFHUCxxREFBUUEsQ0FBQ0UsK0NBQVVBO0FBRTdFLE1BQU1DLE9BQU9GLDRDQUFLQSxDQUFDRztBQUV3QiIsInNvdXJjZXMiOlsiL1VzZXJzL21hcmt1c2hvZ25lL0RvY3VtZW50cy9BUFBTL2JhemFhci12aWQvYmF6YWFyLXZpZC9wYWNrYWdlcy9hdXRoL2luZGV4LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHNyYy9zZXJ2ZXIvYXV0aC9pbmRleC50c1xuaW1wb3J0IE5leHRBdXRoIGZyb20gXCJuZXh0LWF1dGhcIjtcbmltcG9ydCB7IGNhY2hlIH0gZnJvbSBcInJlYWN0XCI7XG5cbmltcG9ydCB7IGF1dGhDb25maWcgfSBmcm9tIFwiLi9jb25maWdcIjtcblxuY29uc3QgeyBhdXRoOiB1bmNhY2hlZEF1dGgsIGhhbmRsZXJzLCBzaWduSW4sIHNpZ25PdXQgfSA9IE5leHRBdXRoKGF1dGhDb25maWcpO1xuXG5jb25zdCBhdXRoID0gY2FjaGUodW5jYWNoZWRBdXRoKTtcblxuZXhwb3J0IHsgYXV0aCwgaGFuZGxlcnMsIHNpZ25Jbiwgc2lnbk91dCB9O1xuIl0sIm5hbWVzIjpbIk5leHRBdXRoIiwiY2FjaGUiLCJhdXRoQ29uZmlnIiwiYXV0aCIsInVuY2FjaGVkQXV0aCIsImhhbmRsZXJzIiwic2lnbkluIiwic2lnbk91dCJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../packages/auth/index.ts\n");

/***/ }),

/***/ "(rsc)/../../packages/database/index.ts":
/*!****************************************!*\
  !*** ../../packages/database/index.ts ***!
  \****************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MEMORY_TYPES: () => (/* reexport safe */ _schema__WEBPACK_IMPORTED_MODULE_2__.MEMORY_TYPES),\n/* harmony export */   accounts: () => (/* reexport safe */ _schema__WEBPACK_IMPORTED_MODULE_2__.accounts),\n/* harmony export */   accountsRelations: () => (/* reexport safe */ _schema__WEBPACK_IMPORTED_MODULE_2__.accountsRelations),\n/* harmony export */   agentMessages: () => (/* reexport safe */ _schema__WEBPACK_IMPORTED_MODULE_2__.agentMessages),\n/* harmony export */   agentMessagesIndexes: () => (/* reexport safe */ _schema__WEBPACK_IMPORTED_MODULE_2__.agentMessagesIndexes),\n/* harmony export */   animationDesignBriefs: () => (/* reexport safe */ _schema__WEBPACK_IMPORTED_MODULE_2__.animationDesignBriefs),\n/* harmony export */   animationDesignBriefsRelations: () => (/* reexport safe */ _schema__WEBPACK_IMPORTED_MODULE_2__.animationDesignBriefsRelations),\n/* harmony export */   componentErrors: () => (/* reexport safe */ _schema__WEBPACK_IMPORTED_MODULE_2__.componentErrors),\n/* harmony export */   componentErrorsRelations: () => (/* reexport safe */ _schema__WEBPACK_IMPORTED_MODULE_2__.componentErrorsRelations),\n/* harmony export */   componentEvaluationMetrics: () => (/* reexport safe */ _schema__WEBPACK_IMPORTED_MODULE_2__.componentEvaluationMetrics),\n/* harmony export */   componentEvaluationMetricsRelations: () => (/* reexport safe */ _schema__WEBPACK_IMPORTED_MODULE_2__.componentEvaluationMetricsRelations),\n/* harmony export */   componentTestCases: () => (/* reexport safe */ _schema__WEBPACK_IMPORTED_MODULE_2__.componentTestCases),\n/* harmony export */   createTable: () => (/* reexport safe */ _schema__WEBPACK_IMPORTED_MODULE_2__.createTable),\n/* harmony export */   customComponentJobs: () => (/* reexport safe */ _schema__WEBPACK_IMPORTED_MODULE_2__.customComponentJobs),\n/* harmony export */   customComponentJobsRecoveryUpdate: () => (/* reexport safe */ _schema__WEBPACK_IMPORTED_MODULE_2__.customComponentJobsRecoveryUpdate),\n/* harmony export */   customComponentJobsRelations: () => (/* reexport safe */ _schema__WEBPACK_IMPORTED_MODULE_2__.customComponentJobsRelations),\n/* harmony export */   customComponentJobsUpdate: () => (/* reexport safe */ _schema__WEBPACK_IMPORTED_MODULE_2__.customComponentJobsUpdate),\n/* harmony export */   db: () => (/* binding */ db),\n/* harmony export */   emailSubscribers: () => (/* reexport safe */ _schema__WEBPACK_IMPORTED_MODULE_2__.emailSubscribers),\n/* harmony export */   emailSubscribersRelations: () => (/* reexport safe */ _schema__WEBPACK_IMPORTED_MODULE_2__.emailSubscribersRelations),\n/* harmony export */   executeWithRetry: () => (/* binding */ executeWithRetry),\n/* harmony export */   feedback: () => (/* reexport safe */ _schema__WEBPACK_IMPORTED_MODULE_2__.feedback),\n/* harmony export */   feedbackRelations: () => (/* reexport safe */ _schema__WEBPACK_IMPORTED_MODULE_2__.feedbackRelations),\n/* harmony export */   imageAnalysis: () => (/* reexport safe */ _schema__WEBPACK_IMPORTED_MODULE_2__.imageAnalysis),\n/* harmony export */   imageAnalysisRelations: () => (/* reexport safe */ _schema__WEBPACK_IMPORTED_MODULE_2__.imageAnalysisRelations),\n/* harmony export */   messages: () => (/* reexport safe */ _schema__WEBPACK_IMPORTED_MODULE_2__.messages),\n/* harmony export */   messagesRelations: () => (/* reexport safe */ _schema__WEBPACK_IMPORTED_MODULE_2__.messagesRelations),\n/* harmony export */   metrics: () => (/* reexport safe */ _schema__WEBPACK_IMPORTED_MODULE_2__.metrics),\n/* harmony export */   patches: () => (/* reexport safe */ _schema__WEBPACK_IMPORTED_MODULE_2__.patches),\n/* harmony export */   patchesRelations: () => (/* reexport safe */ _schema__WEBPACK_IMPORTED_MODULE_2__.patchesRelations),\n/* harmony export */   projectMemory: () => (/* reexport safe */ _schema__WEBPACK_IMPORTED_MODULE_2__.projectMemory),\n/* harmony export */   projectMemoryRelations: () => (/* reexport safe */ _schema__WEBPACK_IMPORTED_MODULE_2__.projectMemoryRelations),\n/* harmony export */   projects: () => (/* reexport safe */ _schema__WEBPACK_IMPORTED_MODULE_2__.projects),\n/* harmony export */   projectsRelations: () => (/* reexport safe */ _schema__WEBPACK_IMPORTED_MODULE_2__.projectsRelations),\n/* harmony export */   sceneIterations: () => (/* reexport safe */ _schema__WEBPACK_IMPORTED_MODULE_2__.sceneIterations),\n/* harmony export */   sceneIterationsRelations: () => (/* reexport safe */ _schema__WEBPACK_IMPORTED_MODULE_2__.sceneIterationsRelations),\n/* harmony export */   scenePlans: () => (/* reexport safe */ _schema__WEBPACK_IMPORTED_MODULE_2__.scenePlans),\n/* harmony export */   scenePlansRelations: () => (/* reexport safe */ _schema__WEBPACK_IMPORTED_MODULE_2__.scenePlansRelations),\n/* harmony export */   sceneSpecs: () => (/* reexport safe */ _schema__WEBPACK_IMPORTED_MODULE_2__.sceneSpecs),\n/* harmony export */   sceneSpecsRelations: () => (/* reexport safe */ _schema__WEBPACK_IMPORTED_MODULE_2__.sceneSpecsRelations),\n/* harmony export */   scenes: () => (/* reexport safe */ _schema__WEBPACK_IMPORTED_MODULE_2__.scenes),\n/* harmony export */   scenesRelations: () => (/* reexport safe */ _schema__WEBPACK_IMPORTED_MODULE_2__.scenesRelations),\n/* harmony export */   sharedVideos: () => (/* reexport safe */ _schema__WEBPACK_IMPORTED_MODULE_2__.sharedVideos),\n/* harmony export */   sharedVideosRelations: () => (/* reexport safe */ _schema__WEBPACK_IMPORTED_MODULE_2__.sharedVideosRelations),\n/* harmony export */   users: () => (/* reexport safe */ _schema__WEBPACK_IMPORTED_MODULE_2__.users),\n/* harmony export */   usersRelations: () => (/* reexport safe */ _schema__WEBPACK_IMPORTED_MODULE_2__.usersRelations),\n/* harmony export */   verificationTokens: () => (/* reexport safe */ _schema__WEBPACK_IMPORTED_MODULE_2__.verificationTokens)\n/* harmony export */ });\n/* harmony import */ var drizzle_orm_neon_http__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! drizzle-orm/neon-http */ \"drizzle-orm/neon-http\");\n/* harmony import */ var _neondatabase_serverless__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @neondatabase/serverless */ \"(rsc)/../../node_modules/@neondatabase/serverless/index.mjs\");\n/* harmony import */ var _schema__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./schema */ \"(rsc)/../../packages/database/schema.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([drizzle_orm_neon_http__WEBPACK_IMPORTED_MODULE_0__, _schema__WEBPACK_IMPORTED_MODULE_2__]);\n([drizzle_orm_neon_http__WEBPACK_IMPORTED_MODULE_0__, _schema__WEBPACK_IMPORTED_MODULE_2__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n// src/server/db/index.ts\n\n\n\n// Recommended by Neon for Drizzle to cache connection details.\n_neondatabase_serverless__WEBPACK_IMPORTED_MODULE_1__.neonConfig.fetchConnectionCache = true;\nconst createDbConnection = ()=>{\n    // console.log(\"Creating new Neon database connection instance\"); \n    const sql = (0,_neondatabase_serverless__WEBPACK_IMPORTED_MODULE_1__.neon)(process.env.DATABASE_URL, {\n        fetchOptions: {\n            keepalive: true,\n            timeout: 30000\n        }\n    });\n    return (0,drizzle_orm_neon_http__WEBPACK_IMPORTED_MODULE_0__.drizzle)(sql, {\n        schema: _schema__WEBPACK_IMPORTED_MODULE_2__\n    });\n};\nconst createDummyDbConnection = ()=>{\n    // console.warn(\"Falling back to dummy Neon database connection instance\"); \n    const dummySql = (0,_neondatabase_serverless__WEBPACK_IMPORTED_MODULE_1__.neon)(\"postgresql://user:password@localhost:5432/dummy\");\n    return (0,drizzle_orm_neon_http__WEBPACK_IMPORTED_MODULE_0__.drizzle)(dummySql, {\n        schema: _schema__WEBPACK_IMPORTED_MODULE_2__\n    });\n};\nlet dbConnectionInstance;\nif (false) {} else {\n    // Development: cache the connection on the global object to reuse across HMR reloads.\n    if (!global.__drizzleNeonClient__) {\n        console.log(\"Initializing Neon database connection for DEVELOPMENT (new global instance)\");\n        try {\n            global.__drizzleNeonClient__ = createDbConnection();\n        } catch (error) {\n            console.error(\"Failed to initialize globally cached database connection for DEVELOPMENT:\", error);\n            global.__drizzleNeonClient__ = createDummyDbConnection();\n        }\n    } else {\n        console.log(\"Reusing existing Neon database connection for DEVELOPMENT from global cache\");\n    }\n    dbConnectionInstance = global.__drizzleNeonClient__;\n}\nconst db = dbConnectionInstance;\n/**\n * Execute a database operation with retry logic for transient connection issues\n * @param operation Function that performs the database operation\n * @param maxRetries Maximum number of retry attempts\n * @param initialDelay Initial delay between retries in ms\n * @returns Result of the database operation\n */ async function executeWithRetry(operation, maxRetries = 3, initialDelay = 200) {\n    let lastError;\n    let delay = initialDelay;\n    for(let attempt = 0; attempt <= maxRetries; attempt++){\n        try {\n            return await operation();\n        } catch (error) {\n            lastError = error;\n            // Check if this is a connection-related error that might be transient\n            const isTransientError = error instanceof Error && // Common network errors\n            (error.message.includes('ECONNRESET') || error.message.includes('socket hang up') || error.message.includes('connection timeout') || error.message.includes('network error') || error.message.includes('fetch failed') || error.message.includes('Connect Timeout Error') || error.message.includes('UND_ERR_CONNECT_TIMEOUT') || // Neon specific errors\n            error.message.includes('Error connecting to database') || error.message.includes('Connection terminated unexpectedly') || error.message.includes('NeonDbError') || error.message.includes('ConnectTimeoutError'));\n            if (!isTransientError || attempt === maxRetries) {\n                // Not a transient error or we've exhausted our retries\n                throw error;\n            }\n            console.warn(`Database operation failed (attempt ${attempt + 1}/${maxRetries + 1}), retrying in ${delay}ms:`, error instanceof Error ? error.message : String(error));\n            // Exponential backoff with jitter\n            await new Promise((resolve)=>setTimeout(resolve, delay + Math.random() * 100));\n            delay = Math.min(delay * 2, 5000); // Exponential backoff with max 5s delay\n        }\n    }\n    // This should never be reached due to the throw in the loop, but TypeScript needs it\n    throw lastError;\n}\n// Export schema for use in other files\n\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../packages/database/index.ts\n");

/***/ }),

/***/ "(rsc)/../../packages/database/schema.ts":
/*!*****************************************!*\
  !*** ../../packages/database/schema.ts ***!
  \*****************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MEMORY_TYPES: () => (/* binding */ MEMORY_TYPES),\n/* harmony export */   accounts: () => (/* binding */ accounts),\n/* harmony export */   accountsRelations: () => (/* binding */ accountsRelations),\n/* harmony export */   agentMessages: () => (/* binding */ agentMessages),\n/* harmony export */   agentMessagesIndexes: () => (/* binding */ agentMessagesIndexes),\n/* harmony export */   animationDesignBriefs: () => (/* binding */ animationDesignBriefs),\n/* harmony export */   animationDesignBriefsRelations: () => (/* binding */ animationDesignBriefsRelations),\n/* harmony export */   componentErrors: () => (/* binding */ componentErrors),\n/* harmony export */   componentErrorsRelations: () => (/* binding */ componentErrorsRelations),\n/* harmony export */   componentEvaluationMetrics: () => (/* binding */ componentEvaluationMetrics),\n/* harmony export */   componentEvaluationMetricsRelations: () => (/* binding */ componentEvaluationMetricsRelations),\n/* harmony export */   componentTestCases: () => (/* binding */ componentTestCases),\n/* harmony export */   createTable: () => (/* binding */ createTable),\n/* harmony export */   customComponentJobs: () => (/* binding */ customComponentJobs),\n/* harmony export */   customComponentJobsRecoveryUpdate: () => (/* binding */ customComponentJobsRecoveryUpdate),\n/* harmony export */   customComponentJobsRelations: () => (/* binding */ customComponentJobsRelations),\n/* harmony export */   customComponentJobsUpdate: () => (/* binding */ customComponentJobsUpdate),\n/* harmony export */   emailSubscribers: () => (/* binding */ emailSubscribers),\n/* harmony export */   emailSubscribersRelations: () => (/* binding */ emailSubscribersRelations),\n/* harmony export */   feedback: () => (/* binding */ feedback),\n/* harmony export */   feedbackRelations: () => (/* binding */ feedbackRelations),\n/* harmony export */   imageAnalysis: () => (/* binding */ imageAnalysis),\n/* harmony export */   imageAnalysisRelations: () => (/* binding */ imageAnalysisRelations),\n/* harmony export */   messages: () => (/* binding */ messages),\n/* harmony export */   messagesRelations: () => (/* binding */ messagesRelations),\n/* harmony export */   metrics: () => (/* binding */ metrics),\n/* harmony export */   patches: () => (/* binding */ patches),\n/* harmony export */   patchesRelations: () => (/* binding */ patchesRelations),\n/* harmony export */   projectMemory: () => (/* binding */ projectMemory),\n/* harmony export */   projectMemoryRelations: () => (/* binding */ projectMemoryRelations),\n/* harmony export */   projects: () => (/* binding */ projects),\n/* harmony export */   projectsRelations: () => (/* binding */ projectsRelations),\n/* harmony export */   sceneIterations: () => (/* binding */ sceneIterations),\n/* harmony export */   sceneIterationsRelations: () => (/* binding */ sceneIterationsRelations),\n/* harmony export */   scenePlans: () => (/* binding */ scenePlans),\n/* harmony export */   scenePlansRelations: () => (/* binding */ scenePlansRelations),\n/* harmony export */   sceneSpecs: () => (/* binding */ sceneSpecs),\n/* harmony export */   sceneSpecsRelations: () => (/* binding */ sceneSpecsRelations),\n/* harmony export */   scenes: () => (/* binding */ scenes),\n/* harmony export */   scenesRelations: () => (/* binding */ scenesRelations),\n/* harmony export */   sharedVideos: () => (/* binding */ sharedVideos),\n/* harmony export */   sharedVideosRelations: () => (/* binding */ sharedVideosRelations),\n/* harmony export */   users: () => (/* binding */ users),\n/* harmony export */   usersRelations: () => (/* binding */ usersRelations),\n/* harmony export */   verificationTokens: () => (/* binding */ verificationTokens)\n/* harmony export */ });\n/* harmony import */ var drizzle_orm__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! drizzle-orm */ \"drizzle-orm\");\n/* harmony import */ var drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! drizzle-orm/pg-core */ \"drizzle-orm/pg-core\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([drizzle_orm__WEBPACK_IMPORTED_MODULE_0__, drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_1__]);\n([drizzle_orm__WEBPACK_IMPORTED_MODULE_0__, drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_1__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n// src/server/db/schema.ts\n\n\n\n// Import the InputProps type for the projects table\n/**\n * This is an example of how to use the multi-project schema feature of Drizzle ORM. Use the same\n * database instance for multiple projects.\n *\n * @see https://orm.drizzle.team/docs/goodies#multi-project-schema\n */ const createTable = (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_1__.pgTableCreator)((name)=>`bazaar-vid_${name}`);\nconst users = createTable(\"user\", (d)=>({\n        id: d.varchar({\n            length: 255\n        }).notNull().primaryKey(),\n        name: d.varchar({\n            length: 255\n        }),\n        email: d.varchar({\n            length: 255\n        }).notNull(),\n        emailVerified: d.timestamp({\n            mode: \"date\",\n            withTimezone: true\n        }),\n        image: d.text(),\n        isAdmin: d.boolean().default(false).notNull(),\n        createdAt: d.timestamp({\n            withTimezone: true\n        }).default((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_0__.sql)`CURRENT_TIMESTAMP`).notNull(),\n        updatedAt: d.timestamp({\n            withTimezone: true\n        }).default((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_0__.sql)`CURRENT_TIMESTAMP`)\n    }));\nconst usersRelations = (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_0__.relations)(users, ({ many })=>({\n        accounts: many(accounts),\n        sharedVideos: many(sharedVideos)\n    }));\nconst accounts = createTable(\"account\", (d)=>({\n        userId: d.varchar({\n            length: 255\n        }).notNull().references(()=>users.id),\n        type: d.varchar({\n            length: 255\n        }).$type().notNull(),\n        provider: d.varchar({\n            length: 255\n        }).notNull(),\n        providerAccountId: d.varchar({\n            length: 255\n        }).notNull(),\n        refresh_token: d.text(),\n        access_token: d.text(),\n        expires_at: d.integer(),\n        token_type: d.varchar({\n            length: 255\n        }),\n        scope: d.varchar({\n            length: 255\n        }),\n        id_token: d.text(),\n        session_state: d.varchar({\n            length: 255\n        })\n    }), (t)=>[\n        (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_1__.primaryKey)({\n            columns: [\n                t.provider,\n                t.providerAccountId\n            ]\n        }),\n        (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_1__.index)(\"account_user_id_idx\").on(t.userId)\n    ]);\nconst accountsRelations = (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_0__.relations)(accounts, ({ one })=>({\n        user: one(users, {\n            fields: [\n                accounts.userId\n            ],\n            references: [\n                users.id\n            ]\n        })\n    }));\nconst verificationTokens = createTable(\"verificationToken\", (d)=>({\n        identifier: d.varchar({\n            length: 255\n        }).notNull(),\n        token: d.varchar({\n            length: 255\n        }).notNull(),\n        expires: d.timestamp({\n            mode: \"date\",\n            withTimezone: true\n        }).notNull()\n    }), (t)=>[\n        (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_1__.primaryKey)({\n            columns: [\n                t.identifier,\n                t.token\n            ]\n        })\n    ]);\n// --- Projects table ---\n// Stores Remotion player state per user.\n// The `props` column stores the full canonical state as JSON.\nconst projects = createTable(\"project\", (d)=>({\n        id: d.uuid().primaryKey().defaultRandom(),\n        userId: d.varchar({\n            length: 255\n        }).notNull().references(()=>users.id),\n        title: d.varchar({\n            length: 255\n        }).notNull(),\n        props: d.jsonb().$type().notNull(),\n        isWelcome: d.boolean().default(true).notNull(),\n        createdAt: d.timestamp({\n            withTimezone: true\n        }).default((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_0__.sql)`CURRENT_TIMESTAMP`).notNull(),\n        updatedAt: d.timestamp({\n            withTimezone: true\n        }).default((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_0__.sql)`CURRENT_TIMESTAMP`).$onUpdate(()=>new Date())\n    }), (t)=>[\n        (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_1__.index)(\"project_user_idx\").on(t.userId),\n        (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_1__.index)(\"project_title_idx\").on(t.title),\n        (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_1__.uniqueIndex)(\"project_unique_name\").on(t.userId, t.title)\n    ]);\nconst projectsRelations = (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_0__.relations)(projects, ({ many })=>({\n        patches: many(patches),\n        messages: many(messages),\n        scenes: many(scenes),\n        sharedVideos: many(sharedVideos)\n    }));\n// --- Patches table ---\n// Stores JSON patches for projects, referencing the project by ID.\nconst patches = createTable(\"patch\", (d)=>({\n        id: d.uuid().primaryKey().defaultRandom(),\n        projectId: d.uuid().notNull().references(()=>projects.id, {\n            onDelete: \"cascade\"\n        }),\n        patch: d.jsonb().$type().notNull(),\n        createdAt: d.timestamp({\n            withTimezone: true\n        }).default((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_0__.sql)`CURRENT_TIMESTAMP`).notNull()\n    }), (t)=>[\n        (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_1__.index)(\"patch_project_idx\").on(t.projectId)\n    ]);\nconst patchesRelations = (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_0__.relations)(patches, ({ one })=>({\n        project: one(projects, {\n            fields: [\n                patches.projectId\n            ],\n            references: [\n                projects.id\n            ]\n        })\n    }));\n// --- Messages table ---\n// Stores chat messages for projects\nconst messages = createTable(\"message\", (d)=>({\n        id: d.uuid().primaryKey().defaultRandom(),\n        projectId: d.uuid().notNull().references(()=>projects.id, {\n            onDelete: \"cascade\"\n        }),\n        content: d.text().notNull(),\n        role: d.varchar({\n            length: 50\n        }).notNull(),\n        kind: d.varchar({\n            length: 50\n        }).default(\"message\").notNull(),\n        status: d.varchar({\n            length: 50\n        }),\n        imageUrls: d.jsonb(\"image_urls\").$type(),\n        sequence: d.integer().notNull().default(0),\n        createdAt: d.timestamp({\n            withTimezone: true\n        }).default((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_0__.sql)`CURRENT_TIMESTAMP`).notNull(),\n        updatedAt: d.timestamp({\n            withTimezone: true\n        }).default((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_0__.sql)`CURRENT_TIMESTAMP`).$onUpdate(()=>new Date()),\n        originalTsxCode: d.text(),\n        lastFixAttempt: d.timestamp({\n            withTimezone: true\n        }),\n        fixIssues: d.text()\n    }), (t)=>[\n        (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_1__.index)(\"message_project_idx\").on(t.projectId),\n        (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_1__.index)(\"message_status_idx\").on(t.status),\n        (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_1__.index)(\"message_project_sequence_idx\").on(t.projectId, t.sequence)\n    ]);\nconst messagesRelations = (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_0__.relations)(messages, ({ one })=>({\n        project: one(projects, {\n            fields: [\n                messages.projectId\n            ],\n            references: [\n                projects.id\n            ]\n        })\n    }));\n// --- Scenes table ---\n// Stores individual scene code and props for projects\nconst scenes = createTable(\"scene\", (d)=>({\n        id: d.uuid().primaryKey().defaultRandom(),\n        projectId: d.uuid().notNull().references(()=>projects.id, {\n            onDelete: \"cascade\"\n        }),\n        order: d.integer().notNull().default(0),\n        name: d.varchar({\n            length: 255\n        }).default(\"Scene\").notNull(),\n        tsxCode: d.text().notNull(),\n        props: d.jsonb(),\n        duration: d.integer().default(150).notNull(),\n        // Publishing columns for BAZAAR-303\n        publishedUrl: d.text(),\n        publishedHash: d.text(),\n        publishedAt: d.timestamp({\n            withTimezone: true\n        }),\n        createdAt: d.timestamp({\n            withTimezone: true\n        }).default((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_0__.sql)`CURRENT_TIMESTAMP`).notNull(),\n        updatedAt: d.timestamp({\n            withTimezone: true\n        }).default((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_0__.sql)`CURRENT_TIMESTAMP`).$onUpdate(()=>new Date()),\n        layoutJson: d.text(\"layout_json\"),\n        // Metadata for better scene targeting\n        slug: d.varchar({\n            length: 255\n        }),\n        dominantColors: d.jsonb(),\n        firstH1Text: d.text(),\n        lastFocused: d.boolean().default(false)\n    }), (t)=>[\n        (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_1__.index)(\"scene_project_idx\").on(t.projectId),\n        (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_1__.index)(\"scene_order_idx\").on(t.projectId, t.order),\n        // Index for published scenes lookup\n        (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_1__.index)(\"scene_publish_idx\").on(t.projectId, t.publishedHash)\n    ]);\nconst scenesRelations = (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_0__.relations)(scenes, ({ one })=>({\n        project: one(projects, {\n            fields: [\n                scenes.projectId\n            ],\n            references: [\n                projects.id\n            ]\n        })\n    }));\n// ✅ NEW: Scene Iterations Tracking Table - Track every LLM operation for continuous improvement\nconst sceneIterations = createTable(\"scene_iteration\", (d)=>({\n        id: d.uuid().primaryKey().defaultRandom(),\n        sceneId: d.uuid(\"scene_id\").notNull().references(()=>scenes.id, {\n            onDelete: \"cascade\"\n        }),\n        projectId: d.uuid(\"project_id\").notNull().references(()=>projects.id, {\n            onDelete: \"cascade\"\n        }),\n        // LLM Decision Data\n        operationType: d.varchar(\"operation_type\", {\n            length: 50\n        }).notNull(),\n        editComplexity: d.varchar(\"edit_complexity\", {\n            length: 20\n        }),\n        userPrompt: d.text(\"user_prompt\").notNull(),\n        brainReasoning: d.text(\"brain_reasoning\"),\n        toolReasoning: d.text(\"tool_reasoning\"),\n        // Code Changes\n        codeBefore: d.text(\"code_before\"),\n        codeAfter: d.text(\"code_after\"),\n        changesApplied: d.jsonb(\"changes_applied\"),\n        changesPreserved: d.jsonb(\"changes_preserved\"),\n        // Performance Metrics\n        generationTimeMs: d.integer(\"generation_time_ms\"),\n        modelUsed: d.varchar(\"model_used\", {\n            length: 50\n        }),\n        temperature: d.real(\"temperature\"),\n        tokensUsed: d.integer(\"tokens_used\"),\n        // User Satisfaction Indicators\n        userEditedAgain: d.boolean(\"user_edited_again\").default(false),\n        userSatisfactionScore: d.integer(\"user_satisfaction_score\"),\n        sessionId: d.varchar(\"session_id\", {\n            length: 255\n        }),\n        // Link to message that triggered this iteration\n        messageId: d.uuid(\"message_id\").references(()=>messages.id, {\n            onDelete: \"set null\"\n        }),\n        createdAt: d.timestamp(\"created_at\", {\n            withTimezone: true\n        }).default((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_0__.sql)`CURRENT_TIMESTAMP`).notNull()\n    }), (t)=>[\n        (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_1__.index)(\"scene_iteration_scene_idx\").on(t.sceneId),\n        (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_1__.index)(\"scene_iteration_project_idx\").on(t.projectId),\n        (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_1__.index)(\"scene_iteration_operation_idx\").on(t.operationType, t.editComplexity),\n        (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_1__.index)(\"scene_iteration_satisfaction_idx\").on(t.userEditedAgain, t.createdAt),\n        (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_1__.index)(\"scene_iteration_message_idx\").on(t.messageId)\n    ]);\nconst sceneIterationsRelations = (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_0__.relations)(sceneIterations, ({ one })=>({\n        scene: one(scenes, {\n            fields: [\n                sceneIterations.sceneId\n            ],\n            references: [\n                scenes.id\n            ]\n        }),\n        project: one(projects, {\n            fields: [\n                sceneIterations.projectId\n            ],\n            references: [\n                projects.id\n            ]\n        }),\n        message: one(messages, {\n            fields: [\n                sceneIterations.messageId\n            ],\n            references: [\n                messages.id\n            ]\n        })\n    }));\n// --- Scene Specs table ---\n// Stores SceneSpec JSON for MCP architecture\nconst sceneSpecs = createTable(\"scene_specs\", (d)=>({\n        id: d.uuid().primaryKey().defaultRandom(),\n        projectId: d.uuid().notNull().references(()=>projects.id, {\n            onDelete: \"cascade\"\n        }),\n        sceneId: d.varchar({\n            length: 255\n        }).notNull(),\n        name: d.varchar({\n            length: 255\n        }),\n        spec: d.jsonb().notNull(),\n        version: d.varchar({\n            length: 10\n        }).default(\"1.0\").notNull(),\n        createdAt: d.timestamp({\n            withTimezone: true\n        }).default((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_0__.sql)`CURRENT_TIMESTAMP`).notNull(),\n        updatedAt: d.timestamp({\n            withTimezone: true\n        }).default((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_0__.sql)`CURRENT_TIMESTAMP`).$onUpdate(()=>new Date()),\n        createdBy: d.varchar({\n            length: 255\n        }).references(()=>users.id)\n    }), (t)=>[\n        (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_1__.index)(\"scene_spec_project_idx\").on(t.projectId),\n        (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_1__.index)(\"scene_spec_created_at_idx\").on(t.createdAt),\n        (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_1__.index)(\"scene_spec_scene_id_idx\").on(t.sceneId),\n        // Ensure unique scene_id per project\n        (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_1__.uniqueIndex)(\"scene_spec_unique_scene_id\").on(t.projectId, t.sceneId),\n        // Added missing GIN index for JSONB spec column\n        (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_1__.index)(\"scene_spec_spec_gin_idx\").using(\"gin\", t.spec)\n    ]);\nconst sceneSpecsRelations = (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_0__.relations)(sceneSpecs, ({ one })=>({\n        project: one(projects, {\n            fields: [\n                sceneSpecs.projectId\n            ],\n            references: [\n                projects.id\n            ]\n        }),\n        createdByUser: one(users, {\n            fields: [\n                sceneSpecs.createdBy\n            ],\n            references: [\n                users.id\n            ]\n        })\n    }));\n// --- Custom Component Jobs table ---\n// Stores jobs for generating and compiling custom Remotion components\nconst customComponentJobs = createTable(\"custom_component_job\", (d)=>({\n        id: d.uuid().primaryKey().defaultRandom(),\n        projectId: d.uuid().notNull().references(()=>projects.id, {\n            onDelete: \"cascade\"\n        }),\n        effect: d.text().notNull(),\n        tsxCode: d.text(),\n        metadata: d.jsonb(),\n        statusMessageId: d.uuid().references(()=>messages.id),\n        status: d.varchar({\n            length: 50\n        }).default(\"pending\").notNull(),\n        outputUrl: d.text(),\n        errorMessage: d.text(),\n        retryCount: d.integer().default(0).notNull(),\n        lastSuccessfulStep: d.varchar('last_successful_step', {\n            length: 50\n        }),\n        nextRetryAt: d.timestamp('next_retry_at', {\n            withTimezone: true\n        }),\n        errorContext: d.jsonb('error_context'),\n        checkpointData: d.jsonb('checkpoint_data'),\n        lastStep: d.varchar('last_step', {\n            length: 50\n        }),\n        // A2A protocol support fields\n        taskId: d.text('task_id'),\n        internalStatus: d.varchar('internal_status', {\n            length: 50\n        }),\n        requiresInput: d.boolean('requires_input').default(false),\n        inputType: d.text('input_type'),\n        taskState: d.jsonb('task_state'),\n        artifacts: d.jsonb('artifacts'),\n        history: d.jsonb('history'),\n        sseEnabled: d.boolean('sse_enabled').default(false),\n        // Timestamps\n        createdAt: d.timestamp({\n            withTimezone: true\n        }).default((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_0__.sql)`CURRENT_TIMESTAMP`).notNull(),\n        updatedAt: d.timestamp({\n            withTimezone: true\n        }).default((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_0__.sql)`CURRENT_TIMESTAMP`).$onUpdate(()=>new Date()),\n        // KEEP BOTH VERSIONS OF COLUMNS (camelCase and snake_case)\n        // CamelCase original columns - need to preserve these\n        originalTsxCode: d.text(),\n        lastFixAttempt: d.timestamp({\n            withTimezone: true\n        }),\n        fixIssues: d.text(),\n        // Snake_case new columns\n        original_tsx_code: d.text('original_tsx_code'),\n        last_fix_attempt: d.timestamp('last_fix_attempt', {\n            withTimezone: true\n        }),\n        fix_issues: d.text('fix_issues') // Snake case version\n    }), (t)=>[\n        (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_1__.index)(\"custom_component_job_project_idx\").on(t.projectId),\n        (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_1__.index)(\"custom_component_job_status_idx\").on(t.status),\n        (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_1__.index)(\"custom_component_job_task_id_idx\").on(t.taskId)\n    ]);\n// Add relations for custom component jobs\nconst customComponentJobsRelations = (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_0__.relations)(customComponentJobs, ({ one })=>({\n        project: one(projects, {\n            fields: [\n                customComponentJobs.projectId\n            ],\n            references: [\n                projects.id\n            ]\n        })\n    }));\n// --- Component Errors table ---\n// Stores errors for custom component jobs\nconst componentErrors = createTable(\"component_error\", (d)=>({\n        id: d.uuid().primaryKey().defaultRandom(),\n        jobId: d.uuid().notNull().references(()=>customComponentJobs.id, {\n            onDelete: \"cascade\"\n        }),\n        errorType: d.varchar({\n            length: 100\n        }).notNull(),\n        details: d.text().notNull(),\n        createdAt: d.timestamp({\n            withTimezone: true\n        }).default((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_0__.sql)`CURRENT_TIMESTAMP`).notNull()\n    }), (t)=>[\n        (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_1__.index)(\"component_error_job_idx\").on(t.jobId)\n    ]);\nconst componentErrorsRelations = (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_0__.relations)(componentErrors, ({ one })=>({\n        job: one(customComponentJobs, {\n            fields: [\n                componentErrors.jobId\n            ],\n            references: [\n                customComponentJobs.id\n            ]\n        })\n    }));\n// --- Metrics table ---\nconst metrics = createTable(\"metric\", (d)=>({\n        id: d.uuid().primaryKey().defaultRandom(),\n        name: d.varchar({\n            length: 100\n        }).notNull(),\n        value: d.real().notNull(),\n        tags: d.jsonb(),\n        timestamp: d.timestamp({\n            withTimezone: true\n        }).default((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_0__.sql)`CURRENT_TIMESTAMP`).notNull()\n    }));\n// --- Scene Plans table ---\n// Stores LLM reasoning about scene planning\nconst scenePlans = createTable(\"scene_plan\", (d)=>({\n        id: d.uuid().primaryKey().defaultRandom(),\n        projectId: d.uuid().notNull().references(()=>projects.id, {\n            onDelete: \"cascade\"\n        }),\n        messageId: d.uuid().references(()=>messages.id, {\n            onDelete: \"cascade\"\n        }),\n        rawReasoning: d.text().notNull(),\n        planData: d.jsonb().notNull(),\n        userPrompt: d.text().notNull(),\n        createdAt: d.timestamp({\n            withTimezone: true\n        }).default((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_0__.sql)`CURRENT_TIMESTAMP`).notNull()\n    }), (t)=>[\n        (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_1__.index)(\"scene_plan_project_idx\").on(t.projectId)\n    ]);\nconst scenePlansRelations = (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_0__.relations)(scenePlans, ({ one })=>({\n        project: one(projects, {\n            fields: [\n                scenePlans.projectId\n            ],\n            references: [\n                projects.id\n            ]\n        }),\n        message: one(messages, {\n            fields: [\n                scenePlans.messageId\n            ],\n            references: [\n                messages.id\n            ]\n        })\n    }));\n// --- Animation Design Briefs table ---\n// Stores detailed animation specifications that bridge scene plans and component generation\nconst animationDesignBriefs = createTable(\"animation_design_brief\", (d)=>({\n        id: d.uuid().primaryKey().defaultRandom(),\n        projectId: d.uuid().notNull().references(()=>projects.id, {\n            onDelete: \"cascade\"\n        }),\n        sceneId: d.uuid().notNull(),\n        componentJobId: d.uuid().references(()=>customComponentJobs.id),\n        llmModel: d.varchar({\n            length: 100\n        }).notNull(),\n        status: d.varchar({\n            length: 50\n        }).default(\"pending\").notNull(),\n        errorMessage: d.text(),\n        createdAt: d.timestamp({\n            withTimezone: true\n        }).default((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_0__.sql)`CURRENT_TIMESTAMP`).notNull(),\n        updatedAt: d.timestamp({\n            withTimezone: true\n        }).default((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_0__.sql)`CURRENT_TIMESTAMP`).$onUpdate(()=>new Date()),\n        originalTsxCode: d.text(),\n        lastFixAttempt: d.timestamp({\n            withTimezone: true\n        }),\n        fixIssues: d.text()\n    }), (t)=>[\n        (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_1__.index)(\"animation_design_brief_project_idx\").on(t.projectId),\n        (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_1__.index)(\"animation_design_brief_scene_idx\").on(t.sceneId),\n        (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_1__.index)(\"animation_design_brief_component_idx\").on(t.componentJobId)\n    ]);\nconst animationDesignBriefsRelations = (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_0__.relations)(animationDesignBriefs, ({ one })=>({\n        project: one(projects, {\n            fields: [\n                animationDesignBriefs.projectId\n            ],\n            references: [\n                projects.id\n            ]\n        }),\n        componentJob: one(customComponentJobs, {\n            fields: [\n                animationDesignBriefs.componentJobId\n            ],\n            references: [\n                customComponentJobs.id\n            ]\n        })\n    }));\n// --- Feedback table ---\n// Stores user feedback and feature prioritization\nconst feedback = createTable(\"feedback\", (d)=>({\n        id: d.text('id').primaryKey().$defaultFn(()=>crypto.randomUUID()),\n        content: d.text('content'),\n        name: d.text('name'),\n        email: d.text('email'),\n        userId: d.varchar('user_id', {\n            length: 255\n        }).references(()=>users.id, {\n            onDelete: 'set null'\n        }),\n        prioritizedFeatures: d.jsonb('prioritized_features').$type(),\n        createdAt: d.timestamp('created_at', {\n            withTimezone: true\n        }).default((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_0__.sql)`CURRENT_TIMESTAMP`).notNull(),\n        status: d.text('status').default('new').notNull(),\n        adminNotes: d.text('admin_notes')\n    }), (t)=>[\n        (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_1__.index)(\"feedback_user_idx\").on(t.userId),\n        (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_1__.index)(\"feedback_status_idx\").on(t.status),\n        (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_1__.index)(\"feedback_created_at_idx\").on(t.createdAt)\n    ]);\nconst feedbackRelations = (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_0__.relations)(feedback, ({ one })=>({\n        user: one(users, {\n            fields: [\n                feedback.userId\n            ],\n            references: [\n                users.id\n            ]\n        })\n    }));\n// --- Email Subscribers table ---\n// Stores email addresses for newsletter/updates signup\nconst emailSubscribers = createTable(\"email_subscriber\", (d)=>({\n        id: d.text('id').primaryKey().$defaultFn(()=>crypto.randomUUID()),\n        email: d.text('email').notNull().unique(),\n        subscribedAt: d.timestamp('subscribed_at', {\n            withTimezone: true\n        }).default((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_0__.sql)`CURRENT_TIMESTAMP`).notNull(),\n        status: d.text('status').default('active').notNull(),\n        source: d.text('source').default('homepage').notNull(),\n        userId: d.varchar('user_id', {\n            length: 255\n        }).references(()=>users.id, {\n            onDelete: 'set null'\n        })\n    }), (t)=>[\n        (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_1__.index)(\"email_subscriber_email_idx\").on(t.email),\n        (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_1__.index)(\"email_subscriber_status_idx\").on(t.status),\n        (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_1__.index)(\"email_subscriber_subscribed_at_idx\").on(t.subscribedAt)\n    ]);\nconst emailSubscribersRelations = (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_0__.relations)(emailSubscribers, ({ one })=>({\n        user: one(users, {\n            fields: [\n                emailSubscribers.userId\n            ],\n            references: [\n                users.id\n            ]\n        })\n    }));\n// --- Agent Messages table ---\n// Stores messages exchanged between agents for A2A protocol support\nconst agentMessages = createTable(\"agent_message\", (d)=>({\n        id: d.text().primaryKey(),\n        sender: d.text(\"sender\").notNull(),\n        recipient: d.text(\"recipient\").notNull(),\n        type: d.text(\"type\").notNull(),\n        payload: d.jsonb(\"payload\").$type().notNull(),\n        correlationId: d.text(\"correlation_id\"),\n        status: d.text(\"status\").default('pending').notNull(),\n        createdAt: d.timestamp({\n            withTimezone: true,\n            mode: 'date'\n        }).default((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_0__.sql)`CURRENT_TIMESTAMP`).notNull(),\n        processedAt: d.timestamp({\n            withTimezone: true,\n            mode: 'date'\n        })\n    }), (t)=>[\n        (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_1__.index)(\"agent_message_correlation_id_idx\").on(t.correlationId),\n        (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_1__.index)(\"agent_message_type_idx\").on(t.type),\n        (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_1__.index)(\"agent_message_sender_idx\").on(t.sender),\n        (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_1__.index)(\"agent_message_recipient_idx\").on(t.recipient)\n    ]);\n// Add custom index for task ID in payload\nconst agentMessagesIndexes = {\n    byTaskId: (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_0__.sql)`CREATE INDEX IF NOT EXISTS \"idx_agent_messages_task_id\" ON \"bazaar-vid_agent_message\" ((payload->>'taskId'))`\n};\n// Add history field to customComponentJobs to support A2A protocol task history\nconst customComponentJobsUpdate = (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_0__.sql)`\n  ALTER TABLE \"bazaar-vid_custom_component_job\"\n  ADD COLUMN IF NOT EXISTS \"history\" JSONB\n`;\nconst customComponentJobsRecoveryUpdate = (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_0__.sql)`\n  ALTER TABLE \"bazaar-vid_custom_component_job\"\n  ADD COLUMN IF NOT EXISTS \"last_successful_step\" varchar(50),\n  ADD COLUMN IF NOT EXISTS \"next_retry_at\" timestamp with time zone,\n  ADD COLUMN IF NOT EXISTS \"error_context\" jsonb\n`;\n// --- Component Test Cases table ---\n// Stores test cases for component generation evaluation\nconst componentTestCases = createTable(\"component_test_case\", (d)=>({\n        id: d.uuid().primaryKey().defaultRandom(),\n        prompt: d.text().notNull(),\n        category: d.varchar({\n            length: 50\n        }).notNull(),\n        complexity: d.integer().notNull(),\n        edgeCases: d.jsonb().default([]),\n        createdAt: d.timestamp({\n            withTimezone: true\n        }).default((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_0__.sql)`CURRENT_TIMESTAMP`).notNull()\n    }), (t)=>[\n        (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_1__.index)(\"component_test_cases_category_idx\").on(t.category)\n    ]);\n// --- Component Evaluation Metrics table ---\n// Stores metrics from component generation evaluation\nconst componentEvaluationMetrics = createTable(\"component_evaluation_metric\", (d)=>({\n        id: d.uuid().primaryKey().defaultRandom(),\n        testCaseId: d.uuid().notNull().references(()=>componentTestCases.id),\n        timestamp: d.timestamp({\n            withTimezone: true\n        }).default((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_0__.sql)`CURRENT_TIMESTAMP`).notNull(),\n        // Test case metadata\n        category: d.varchar({\n            length: 50\n        }).notNull(),\n        complexity: d.integer().notNull(),\n        edgeCases: d.jsonb().default([]),\n        // Pipeline success metrics\n        success: d.boolean().notNull(),\n        errorStage: d.varchar({\n            length: 50\n        }),\n        errorType: d.varchar({\n            length: 100\n        }),\n        errorMessage: d.text(),\n        // Timing metrics\n        promptSubmissionTime: d.timestamp({\n            withTimezone: true\n        }).notNull(),\n        codeGenerationStartTime: d.timestamp({\n            withTimezone: true\n        }),\n        codeGenerationEndTime: d.timestamp({\n            withTimezone: true\n        }),\n        validationStartTime: d.timestamp({\n            withTimezone: true\n        }),\n        validationEndTime: d.timestamp({\n            withTimezone: true\n        }),\n        buildStartTime: d.timestamp({\n            withTimezone: true\n        }),\n        buildEndTime: d.timestamp({\n            withTimezone: true\n        }),\n        uploadStartTime: d.timestamp({\n            withTimezone: true\n        }),\n        uploadEndTime: d.timestamp({\n            withTimezone: true\n        }),\n        componentCompletionTime: d.timestamp({\n            withTimezone: true\n        }),\n        // Derived timing metrics\n        timeToFirstToken: d.integer(),\n        codeGenerationTime: d.integer(),\n        validationTime: d.integer(),\n        buildTime: d.integer(),\n        uploadTime: d.integer(),\n        totalTime: d.integer(),\n        // Code quality metrics\n        syntaxErrorCount: d.integer(),\n        eslintErrorCount: d.integer(),\n        eslintWarningCount: d.integer(),\n        codeLength: d.integer(),\n        // Rendering metrics\n        renderSuccess: d.boolean(),\n        renderErrorMessage: d.text(),\n        // References\n        componentId: d.varchar({\n            length: 100\n        }),\n        outputUrl: d.text(),\n        taskId: d.uuid(),\n        // A2A specific metrics\n        stateTransitions: d.jsonb().default([]),\n        artifacts: d.jsonb().default([]),\n        // Analysis fields\n        analysisNotes: d.text(),\n        tags: d.jsonb().default([])\n    }), (t)=>[\n        (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_1__.index)(\"component_evaluation_metrics_test_case_id_idx\").on(t.testCaseId),\n        (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_1__.index)(\"component_evaluation_metrics_success_idx\").on(t.success),\n        (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_1__.index)(\"component_evaluation_metrics_timestamp_idx\").on(t.timestamp),\n        (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_1__.index)(\"component_evaluation_metrics_category_idx\").on(t.category)\n    ]);\nconst componentEvaluationMetricsRelations = (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_0__.relations)(componentEvaluationMetrics, ({ one })=>({\n        testCase: one(componentTestCases, {\n            fields: [\n                componentEvaluationMetrics.testCaseId\n            ],\n            references: [\n                componentTestCases.id\n            ]\n        })\n    }));\n// --- Shared Videos table ---\n// Stores shared videos for public video sharing\nconst sharedVideos = createTable(\"shared_video\", (d)=>({\n        id: d.varchar({\n            length: 255\n        }).notNull().primaryKey().$defaultFn(()=>crypto.randomUUID()),\n        projectId: d.uuid().notNull().references(()=>projects.id),\n        userId: d.varchar({\n            length: 255\n        }).notNull().references(()=>users.id),\n        title: d.varchar({\n            length: 255\n        }),\n        description: d.text(),\n        videoUrl: d.varchar({\n            length: 500\n        }),\n        thumbnailUrl: d.varchar({\n            length: 500\n        }),\n        isPublic: d.boolean().default(true),\n        viewCount: d.integer().default(0),\n        createdAt: d.timestamp({\n            withTimezone: true\n        }).default((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_0__.sql)`CURRENT_TIMESTAMP`).notNull(),\n        expiresAt: d.timestamp({\n            withTimezone: true\n        })\n    }));\nconst sharedVideosRelations = (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_0__.relations)(sharedVideos, ({ one })=>({\n        project: one(projects, {\n            fields: [\n                sharedVideos.projectId\n            ],\n            references: [\n                projects.id\n            ]\n        }),\n        user: one(users, {\n            fields: [\n                sharedVideos.userId\n            ],\n            references: [\n                users.id\n            ]\n        })\n    }));\n// --- Phase 2: Project Memory & Image Analysis Tables for Async Context Storage ---\n/**\n * Project Memory Table: Stores accumulated context across user sessions\n * Enables 30+ prompt workflows with persistent user preferences and scene relationships\n */ const projectMemory = createTable(\"project_memory\", (d)=>({\n        id: d.uuid().primaryKey().defaultRandom(),\n        projectId: d.uuid(\"project_id\").notNull().references(()=>projects.id, {\n            onDelete: \"cascade\"\n        }),\n        memoryType: d.varchar(\"memory_type\", {\n            length: 50\n        }).notNull(),\n        memoryKey: d.varchar(\"memory_key\", {\n            length: 255\n        }).notNull(),\n        memoryValue: d.text(\"memory_value\").notNull(),\n        confidence: d.real(\"confidence\").default(0.8),\n        sourcePrompt: d.text(\"source_prompt\"),\n        createdAt: d.timestamp(\"created_at\", {\n            withTimezone: true\n        }).default((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_0__.sql)`CURRENT_TIMESTAMP`).notNull(),\n        updatedAt: d.timestamp(\"updated_at\", {\n            withTimezone: true\n        }).default((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_0__.sql)`CURRENT_TIMESTAMP`).$onUpdate(()=>new Date()),\n        expiresAt: d.timestamp(\"expires_at\", {\n            withTimezone: true\n        })\n    }), (t)=>[\n        (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_1__.index)(\"project_memory_project_idx\").on(t.projectId),\n        (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_1__.index)(\"project_memory_type_key_idx\").on(t.memoryType, t.memoryKey)\n    ]);\n/**\n * Image Analysis Table: Stores persistent image facts from vision analysis\n * Supports fire-and-forget async image processing with late-arriving facts integration\n */ const imageAnalysis = createTable(\"image_analysis\", (d)=>({\n        id: d.uuid().primaryKey().defaultRandom(),\n        projectId: d.uuid(\"project_id\").notNull().references(()=>projects.id, {\n            onDelete: \"cascade\"\n        }),\n        traceId: d.varchar(\"trace_id\", {\n            length: 100\n        }).notNull(),\n        imageUrls: d.jsonb(\"image_urls\").notNull(),\n        palette: d.jsonb(\"palette\").notNull(),\n        typography: d.text(\"typography\").notNull(),\n        mood: d.text(\"mood\").notNull(),\n        layoutJson: d.jsonb(\"layout_json\"),\n        processingTimeMs: d.integer(\"processing_time_ms\").notNull(),\n        createdAt: d.timestamp(\"created_at\", {\n            withTimezone: true\n        }).default((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_0__.sql)`CURRENT_TIMESTAMP`).notNull(),\n        usedInScenes: d.jsonb(\"used_in_scenes\")\n    }), (t)=>[\n        (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_1__.index)(\"image_analysis_project_idx\").on(t.projectId),\n        (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_1__.index)(\"image_analysis_trace_idx\").on(t.traceId),\n        (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_1__.index)(\"image_analysis_created_idx\").on(t.createdAt)\n    ]);\n// Relations for project memory\nconst projectMemoryRelations = (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_0__.relations)(projectMemory, ({ one })=>({\n        project: one(projects, {\n            fields: [\n                projectMemory.projectId\n            ],\n            references: [\n                projects.id\n            ]\n        })\n    }));\n// Relations for image analysis\nconst imageAnalysisRelations = (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_0__.relations)(imageAnalysis, ({ one })=>({\n        project: one(projects, {\n            fields: [\n                imageAnalysis.projectId\n            ],\n            references: [\n                projects.id\n            ]\n        })\n    }));\n// Memory type enum for better type safety\nconst MEMORY_TYPES = {\n    USER_PREFERENCE: 'user_preference',\n    SCENE_RELATIONSHIP: 'scene_relationship',\n    CONVERSATION_CONTEXT: 'conversation_context'\n};\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../packages/database/schema.ts\n");

/***/ }),

/***/ "(rsc)/./src/app/api/trpc/[trpc]/route.ts":
/*!******************************************!*\
  !*** ./src/app/api/trpc/[trpc]/route.ts ***!
  \******************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ handler),\n/* harmony export */   OPTIONS: () => (/* binding */ handler),\n/* harmony export */   POST: () => (/* binding */ handler),\n/* harmony export */   maxDuration: () => (/* binding */ maxDuration)\n/* harmony export */ });\n/* harmony import */ var _trpc_server_adapters_fetch__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @trpc/server/adapters/fetch */ \"(rsc)/../../node_modules/@trpc/server/dist/adapters/fetch/index.mjs\");\n/* harmony import */ var _env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ~/env */ \"(rsc)/./src/env.js\");\n/* harmony import */ var _server_api_root__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ~/server/api/root */ \"(rsc)/./src/server/api/root.ts\");\n/* harmony import */ var _server_api_trpc__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ~/server/api/trpc */ \"(rsc)/./src/server/api/trpc.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_server_api_root__WEBPACK_IMPORTED_MODULE_2__, _server_api_trpc__WEBPACK_IMPORTED_MODULE_3__]);\n([_server_api_root__WEBPACK_IMPORTED_MODULE_2__, _server_api_trpc__WEBPACK_IMPORTED_MODULE_3__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\nconst maxDuration = 180; // 3 minutes\n\n\n\n\n/**\n * This wraps the `createTRPCContext` helper and provides the required context for the tRPC API when\n * handling a HTTP request (e.g. when you make requests from Client Components).\n */ const createContext = async (req)=>{\n    return (0,_server_api_trpc__WEBPACK_IMPORTED_MODULE_3__.createTRPCContext)({\n        headers: req.headers\n    });\n};\nconst handler = async (req)=>{\n    // Handle preflight requests\n    if (req.method === 'OPTIONS') {\n        return new Response(null, {\n            status: 200,\n            headers: {\n                'Access-Control-Allow-Origin':  true ? 'http://localhost:3001' : 0,\n                'Access-Control-Allow-Methods': 'GET,OPTIONS,PATCH,DELETE,POST,PUT',\n                'Access-Control-Allow-Headers': 'X-CSRF-Token, X-Requested-With, Accept, Accept-Version, Content-Length, Content-MD5, Content-Type, Date, X-Api-Version',\n                'Access-Control-Allow-Credentials': 'true'\n            }\n        });\n    }\n    const response = await (0,_trpc_server_adapters_fetch__WEBPACK_IMPORTED_MODULE_0__.fetchRequestHandler)({\n        endpoint: \"/api/trpc\",\n        req,\n        router: _server_api_root__WEBPACK_IMPORTED_MODULE_2__.appRouter,\n        createContext: ()=>createContext(req),\n        onError: _env__WEBPACK_IMPORTED_MODULE_1__.env.NODE_ENV === \"development\" ? ({ path, error })=>{\n            console.error(`❌ tRPC failed on ${path ?? \"<no-path>\"}: ${error.message}`);\n        } : undefined\n    });\n    // Add CORS headers to response\n    response.headers.set('Access-Control-Allow-Origin',  true ? 'http://localhost:3001' : 0);\n    response.headers.set('Access-Control-Allow-Credentials', 'true');\n    return response;\n};\n\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvYXBwL2FwaS90cnBjL1t0cnBjXS9yb3V0ZS50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUFPLE1BQU1BLGNBQWMsSUFBSSxDQUFDLFlBQVk7QUFFc0I7QUFHdEM7QUFDa0I7QUFDUTtBQUV0RDs7O0NBR0MsR0FDRCxNQUFNSyxnQkFBZ0IsT0FBT0M7SUFDM0IsT0FBT0YsbUVBQWlCQSxDQUFDO1FBQ3ZCRyxTQUFTRCxJQUFJQyxPQUFPO0lBQ3RCO0FBQ0Y7QUFFQSxNQUFNQyxVQUFVLE9BQU9GO0lBQ3JCLDRCQUE0QjtJQUM1QixJQUFJQSxJQUFJRyxNQUFNLEtBQUssV0FBVztRQUM1QixPQUFPLElBQUlDLFNBQVMsTUFBTTtZQUN4QkMsUUFBUTtZQUNSSixTQUFTO2dCQUNQLCtCQUErQkssS0FBc0MsR0FDakUsMEJBQ0EsQ0FBeUI7Z0JBQzdCLGdDQUFnQztnQkFDaEMsZ0NBQWdDO2dCQUNoQyxvQ0FBb0M7WUFDdEM7UUFDRjtJQUNGO0lBRUEsTUFBTUMsV0FBVyxNQUFNWixnRkFBbUJBLENBQUM7UUFDekNhLFVBQVU7UUFDVlI7UUFDQVMsUUFBUVosdURBQVNBO1FBQ2pCRSxlQUFlLElBQU1BLGNBQWNDO1FBQ25DVSxTQUNFZCxxQ0FBR0EsQ0FBQ2UsUUFBUSxLQUFLLGdCQUNiLENBQUMsRUFBRUMsSUFBSSxFQUFFQyxLQUFLLEVBQUU7WUFDZEMsUUFBUUQsS0FBSyxDQUNYLENBQUMsaUJBQWlCLEVBQUVELFFBQVEsWUFBWSxFQUFFLEVBQUVDLE1BQU1FLE9BQU8sRUFBRTtRQUUvRCxJQUNBQztJQUNSO0lBRUEsK0JBQStCO0lBQy9CVCxTQUFTTixPQUFPLENBQUNnQixHQUFHLENBQUMsK0JBQStCWCxLQUFzQyxHQUN0RiwwQkFDQSxDQUF5QjtJQUM3QkMsU0FBU04sT0FBTyxDQUFDZ0IsR0FBRyxDQUFDLG9DQUFvQztJQUV6RCxPQUFPVjtBQUNUO0FBRStEIiwic291cmNlcyI6WyIvVXNlcnMvbWFya3VzaG9nbmUvRG9jdW1lbnRzL0FQUFMvYmF6YWFyLXZpZC9iYXphYXItdmlkL2FwcHMvbWFpbi9zcmMvYXBwL2FwaS90cnBjL1t0cnBjXS9yb3V0ZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgbWF4RHVyYXRpb24gPSAxODA7IC8vIDMgbWludXRlc1xuXG5pbXBvcnQgeyBmZXRjaFJlcXVlc3RIYW5kbGVyIH0gZnJvbSBcIkB0cnBjL3NlcnZlci9hZGFwdGVycy9mZXRjaFwiO1xuaW1wb3J0IHsgdHlwZSBOZXh0UmVxdWVzdCB9IGZyb20gXCJuZXh0L3NlcnZlclwiO1xuXG5pbXBvcnQgeyBlbnYgfSBmcm9tIFwifi9lbnZcIjtcbmltcG9ydCB7IGFwcFJvdXRlciB9IGZyb20gXCJ+L3NlcnZlci9hcGkvcm9vdFwiO1xuaW1wb3J0IHsgY3JlYXRlVFJQQ0NvbnRleHQgfSBmcm9tIFwifi9zZXJ2ZXIvYXBpL3RycGNcIjtcblxuLyoqXG4gKiBUaGlzIHdyYXBzIHRoZSBgY3JlYXRlVFJQQ0NvbnRleHRgIGhlbHBlciBhbmQgcHJvdmlkZXMgdGhlIHJlcXVpcmVkIGNvbnRleHQgZm9yIHRoZSB0UlBDIEFQSSB3aGVuXG4gKiBoYW5kbGluZyBhIEhUVFAgcmVxdWVzdCAoZS5nLiB3aGVuIHlvdSBtYWtlIHJlcXVlc3RzIGZyb20gQ2xpZW50IENvbXBvbmVudHMpLlxuICovXG5jb25zdCBjcmVhdGVDb250ZXh0ID0gYXN5bmMgKHJlcTogTmV4dFJlcXVlc3QpID0+IHtcbiAgcmV0dXJuIGNyZWF0ZVRSUENDb250ZXh0KHtcbiAgICBoZWFkZXJzOiByZXEuaGVhZGVycyxcbiAgfSk7XG59O1xuXG5jb25zdCBoYW5kbGVyID0gYXN5bmMgKHJlcTogTmV4dFJlcXVlc3QpID0+IHtcbiAgLy8gSGFuZGxlIHByZWZsaWdodCByZXF1ZXN0c1xuICBpZiAocmVxLm1ldGhvZCA9PT0gJ09QVElPTlMnKSB7XG4gICAgcmV0dXJuIG5ldyBSZXNwb25zZShudWxsLCB7XG4gICAgICBzdGF0dXM6IDIwMCxcbiAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgJ0FjY2Vzcy1Db250cm9sLUFsbG93LU9yaWdpbic6IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAnZGV2ZWxvcG1lbnQnIFxuICAgICAgICAgID8gJ2h0dHA6Ly9sb2NhbGhvc3Q6MzAwMScgXG4gICAgICAgICAgOiAnaHR0cHM6Ly9hZG1pbi5iYXphYXIuaXQnLFxuICAgICAgICAnQWNjZXNzLUNvbnRyb2wtQWxsb3ctTWV0aG9kcyc6ICdHRVQsT1BUSU9OUyxQQVRDSCxERUxFVEUsUE9TVCxQVVQnLFxuICAgICAgICAnQWNjZXNzLUNvbnRyb2wtQWxsb3ctSGVhZGVycyc6ICdYLUNTUkYtVG9rZW4sIFgtUmVxdWVzdGVkLVdpdGgsIEFjY2VwdCwgQWNjZXB0LVZlcnNpb24sIENvbnRlbnQtTGVuZ3RoLCBDb250ZW50LU1ENSwgQ29udGVudC1UeXBlLCBEYXRlLCBYLUFwaS1WZXJzaW9uJyxcbiAgICAgICAgJ0FjY2Vzcy1Db250cm9sLUFsbG93LUNyZWRlbnRpYWxzJzogJ3RydWUnLFxuICAgICAgfSxcbiAgICB9KTtcbiAgfVxuXG4gIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2hSZXF1ZXN0SGFuZGxlcih7XG4gICAgZW5kcG9pbnQ6IFwiL2FwaS90cnBjXCIsXG4gICAgcmVxLFxuICAgIHJvdXRlcjogYXBwUm91dGVyLFxuICAgIGNyZWF0ZUNvbnRleHQ6ICgpID0+IGNyZWF0ZUNvbnRleHQocmVxKSxcbiAgICBvbkVycm9yOlxuICAgICAgZW52Lk5PREVfRU5WID09PSBcImRldmVsb3BtZW50XCJcbiAgICAgICAgPyAoeyBwYXRoLCBlcnJvciB9KSA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFxuICAgICAgICAgICAgICBg4p2MIHRSUEMgZmFpbGVkIG9uICR7cGF0aCA/PyBcIjxuby1wYXRoPlwifTogJHtlcnJvci5tZXNzYWdlfWAsXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgOiB1bmRlZmluZWQsXG4gIH0pO1xuXG4gIC8vIEFkZCBDT1JTIGhlYWRlcnMgdG8gcmVzcG9uc2VcbiAgcmVzcG9uc2UuaGVhZGVycy5zZXQoJ0FjY2Vzcy1Db250cm9sLUFsbG93LU9yaWdpbicsIHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAnZGV2ZWxvcG1lbnQnIFxuICAgID8gJ2h0dHA6Ly9sb2NhbGhvc3Q6MzAwMScgXG4gICAgOiAnaHR0cHM6Ly9hZG1pbi5iYXphYXIuaXQnKTtcbiAgcmVzcG9uc2UuaGVhZGVycy5zZXQoJ0FjY2Vzcy1Db250cm9sLUFsbG93LUNyZWRlbnRpYWxzJywgJ3RydWUnKTtcblxuICByZXR1cm4gcmVzcG9uc2U7XG59O1xuXG5leHBvcnQgeyBoYW5kbGVyIGFzIEdFVCwgaGFuZGxlciBhcyBQT1NULCBoYW5kbGVyIGFzIE9QVElPTlMgfTtcbiJdLCJuYW1lcyI6WyJtYXhEdXJhdGlvbiIsImZldGNoUmVxdWVzdEhhbmRsZXIiLCJlbnYiLCJhcHBSb3V0ZXIiLCJjcmVhdGVUUlBDQ29udGV4dCIsImNyZWF0ZUNvbnRleHQiLCJyZXEiLCJoZWFkZXJzIiwiaGFuZGxlciIsIm1ldGhvZCIsIlJlc3BvbnNlIiwic3RhdHVzIiwicHJvY2VzcyIsInJlc3BvbnNlIiwiZW5kcG9pbnQiLCJyb3V0ZXIiLCJvbkVycm9yIiwiTk9ERV9FTlYiLCJwYXRoIiwiZXJyb3IiLCJjb25zb2xlIiwibWVzc2FnZSIsInVuZGVmaW5lZCIsInNldCIsIkdFVCIsIlBPU1QiLCJPUFRJT05TIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./src/app/api/trpc/[trpc]/route.ts\n");

/***/ }),

/***/ "(rsc)/./src/brain/orchestratorNEW.ts":
/*!**************************************!*\
  !*** ./src/brain/orchestratorNEW.ts ***!
  \**************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Orchestrator: () => (/* binding */ Orchestrator),\n/* harmony export */   orchestrator: () => (/* binding */ orchestrator)\n/* harmony export */ });\n/* harmony import */ var _orchestrator_functions_contextBuilder__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./orchestrator_functions/contextBuilder */ \"(rsc)/./src/brain/orchestrator_functions/contextBuilder.ts\");\n/* harmony import */ var _orchestrator_functions_intentAnalyzer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./orchestrator_functions/intentAnalyzer */ \"(rsc)/./src/brain/orchestrator_functions/intentAnalyzer.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_orchestrator_functions_contextBuilder__WEBPACK_IMPORTED_MODULE_0__]);\n_orchestrator_functions_contextBuilder__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n// Simplified & Modular Orchestrator - Decision Only (Sprint 41)\n\n\nclass Orchestrator {\n    async processUserInput(input) {\n        console.log('\\n🧠 [NEW ORCHESTRATOR] === PROCESSING USER INPUT ===');\n        console.log('🧠 [NEW ORCHESTRATOR] Input:', {\n            prompt: input.prompt,\n            projectId: input.projectId,\n            hasImages: !!input.userContext?.imageUrls?.length,\n            sceneCount: input.storyboardSoFar?.length || 0\n        });\n        try {\n            // 1. Build context\n            console.log('🧠 [NEW ORCHESTRATOR] Step 1: Building context...');\n            input.onProgress?.('🧠 Understanding your request...', 'building');\n            const contextPacket = await this.contextBuilder.buildContext(input);\n            console.log('🧠 [NEW ORCHESTRATOR] Context built successfully');\n            // 2. Analyze intent and select tool\n            console.log('🧠 [NEW ORCHESTRATOR] Step 2: Analyzing intent...');\n            input.onProgress?.('🎯 Choosing the right approach...', 'building');\n            const toolSelection = await this.intentAnalyzer.analyzeIntent(input, contextPacket);\n            console.log('🧠 [NEW ORCHESTRATOR] Tool selected:', {\n                tool: toolSelection.toolName,\n                reasoning: toolSelection.reasoning?.substring(0, 100) + '...'\n            });\n            if (!toolSelection.success) {\n                return {\n                    success: false,\n                    error: toolSelection.error ?? 'Failed to understand request',\n                    chatResponse: \"I couldn't understand your request. Could you please rephrase it?\"\n                };\n            }\n            // 3. Return decision (NO EXECUTION!)\n            console.log('🧠 [NEW ORCHESTRATOR] Decision complete! Returning to router...');\n            if (!toolSelection.toolName) {\n                return {\n                    success: false,\n                    error: \"No tool selected\",\n                    chatResponse: toolSelection.clarificationQuestion || \"I need more information to help you.\"\n                };\n            }\n            const result = {\n                success: true,\n                toolUsed: toolSelection.toolName,\n                reasoning: toolSelection.reasoning,\n                chatResponse: toolSelection.userFeedback || toolSelection.reasoning,\n                // Pass along the tool selection details for execution in generation.ts\n                result: {\n                    toolName: toolSelection.toolName,\n                    toolContext: {\n                        userPrompt: input.prompt,\n                        targetSceneId: toolSelection.targetSceneId,\n                        targetDuration: toolSelection.targetDuration,\n                        referencedSceneIds: toolSelection.referencedSceneIds,\n                        imageUrls: input.userContext?.imageUrls || undefined,\n                        webContext: contextPacket.webContext\n                    },\n                    workflow: toolSelection.workflow\n                }\n            };\n            console.log('🧠 [NEW ORCHESTRATOR] === ORCHESTRATION COMPLETE ===\\n');\n            return result;\n        } catch (error) {\n            console.error('[Orchestrator] Error:', error);\n            return {\n                success: false,\n                error: error instanceof Error ? error.message : String(error),\n                chatResponse: \"I encountered an issue processing your request. Please try again.\"\n            };\n        }\n    }\n    constructor(){\n        this.contextBuilder = new _orchestrator_functions_contextBuilder__WEBPACK_IMPORTED_MODULE_0__.ContextBuilder();\n        this.intentAnalyzer = new _orchestrator_functions_intentAnalyzer__WEBPACK_IMPORTED_MODULE_1__.IntentAnalyzer();\n    }\n}\n// Singleton export\nconst orchestrator = new Orchestrator();\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/brain/orchestratorNEW.ts\n");

/***/ }),

/***/ "(rsc)/./src/brain/orchestrator_functions/contextBuilder.ts":
/*!************************************************************!*\
  !*** ./src/brain/orchestrator_functions/contextBuilder.ts ***!
  \************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ContextBuilder: () => (/* binding */ ContextBuilder)\n/* harmony export */ });\n/* harmony import */ var _bazaar_database__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @bazaar/database */ \"(rsc)/../../packages/database/index.ts\");\n/* harmony import */ var drizzle_orm__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! drizzle-orm */ \"drizzle-orm\");\n/* harmony import */ var _tools_webAnalysis_WebAnalysisAgent__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../tools/webAnalysis/WebAnalysisAgent */ \"(rsc)/./src/tools/webAnalysis/WebAnalysisAgent.ts\");\n/* harmony import */ var _lib_utils_url_detection__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../lib/utils/url-detection */ \"(rsc)/./src/lib/utils/url-detection.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_bazaar_database__WEBPACK_IMPORTED_MODULE_0__, drizzle_orm__WEBPACK_IMPORTED_MODULE_1__, _tools_webAnalysis_WebAnalysisAgent__WEBPACK_IMPORTED_MODULE_2__]);\n([_bazaar_database__WEBPACK_IMPORTED_MODULE_0__, drizzle_orm__WEBPACK_IMPORTED_MODULE_1__, _tools_webAnalysis_WebAnalysisAgent__WEBPACK_IMPORTED_MODULE_2__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n// Context builder for the modular orchestrator\n// Rebuilt to use real context: web analysis, scene history, chat context\n\n\n\n\n\nclass ContextBuilder {\n    async buildContext(input) {\n        console.log('\\n📚 [CONTEXT BUILDER] === BUILDING REAL CONTEXT ===');\n        console.log('📚 [CONTEXT BUILDER] Project:', input.projectId);\n        console.log('📚 [CONTEXT BUILDER] Has images:', !!input.userContext?.imageUrls?.length);\n        try {\n            // 1. Get scenes with FULL TSX code for cross-scene operations\n            const scenesWithCode = await _bazaar_database__WEBPACK_IMPORTED_MODULE_0__.db.select({\n                id: _bazaar_database__WEBPACK_IMPORTED_MODULE_0__.scenes.id,\n                name: _bazaar_database__WEBPACK_IMPORTED_MODULE_0__.scenes.name,\n                order: _bazaar_database__WEBPACK_IMPORTED_MODULE_0__.scenes.order,\n                tsxCode: _bazaar_database__WEBPACK_IMPORTED_MODULE_0__.scenes.tsxCode // CRITICAL: Full code for context\n            }).from(_bazaar_database__WEBPACK_IMPORTED_MODULE_0__.scenes).where((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_1__.eq)(_bazaar_database__WEBPACK_IMPORTED_MODULE_0__.scenes.projectId, input.projectId)).orderBy(_bazaar_database__WEBPACK_IMPORTED_MODULE_0__.scenes.order);\n            // 2. Build recent chat context\n            const recentChat = (input.chatHistory || []).slice(-5);\n            // 3. Build image context from conversation\n            const imageContext = await this.buildImageContext(input);\n            // 4. Build web analysis context from URL detection\n            const webContext = await this.buildWebContext(input);\n            return {\n                // Real scene history with full TSX for cross-scene operations\n                sceneHistory: scenesWithCode.map((scene)=>({\n                        id: scene.id,\n                        name: scene.name || 'Untitled Scene',\n                        tsxCode: scene.tsxCode || '',\n                        order: scene.order\n                    })),\n                // Recent conversation for flow understanding\n                conversationContext: this.summarizeConversation(recentChat),\n                recentMessages: recentChat,\n                // Image context from uploads\n                imageContext: imageContext,\n                // Web analysis context from URL detection\n                webContext: webContext,\n                // Scene list for quick reference\n                sceneList: scenesWithCode.map((scene)=>({\n                        id: scene.id,\n                        name: scene.name || 'Untitled Scene',\n                        order: scene.order\n                    }))\n            };\n        } catch (error) {\n            console.error('[ContextBuilder] Error building context:', error);\n            // Minimal fallback\n            return {\n                sceneHistory: [],\n                conversationContext: 'New conversation',\n                recentMessages: input.chatHistory?.slice(-5) || [],\n                imageContext: {\n                    currentImages: [],\n                    recentImagesFromChat: []\n                },\n                webContext: undefined,\n                sceneList: []\n            };\n        }\n    }\n    summarizeConversation(chatHistory) {\n        if (chatHistory.length === 0) return 'New conversation';\n        const recentMessages = chatHistory.slice(-5);\n        const topics = [];\n        for (const message of recentMessages){\n            if (message.role === 'user') {\n                if (message.content.includes('create') || message.content.includes('generate')) {\n                    topics.push('scene creation');\n                }\n                if (message.content.includes('edit') || message.content.includes('change')) {\n                    topics.push('scene editing');\n                }\n                if (message.content.includes('color') || message.content.includes('background')) {\n                    topics.push('styling');\n                }\n            }\n        }\n        const uniqueTopics = Array.from(new Set(topics));\n        return uniqueTopics.length > 0 ? `Conversation about: ${uniqueTopics.join(', ')}` : 'General conversation';\n    }\n    async buildImageContext(input) {\n        // Simple: Check current request for images\n        const currentImages = input.userContext?.imageUrls || [];\n        // Extract images from recent chat history  \n        const recentImagesFromChat = [];\n        const recentChat = input.chatHistory?.slice(-10) || [];\n        for(let i = 0; i < recentChat.length; i++){\n            const msg = recentChat[i];\n            if (msg.role === 'user' && msg.imageUrls?.length > 0) {\n                recentImagesFromChat.push({\n                    position: i + 1,\n                    userPrompt: msg.content,\n                    imageUrls: msg.imageUrls\n                });\n            }\n        }\n        return {\n            currentImages,\n            recentImagesFromChat\n        };\n    }\n    async buildWebContext(input) {\n        try {\n            // Extract URL from current prompt\n            const targetUrl = (0,_lib_utils_url_detection__WEBPACK_IMPORTED_MODULE_3__.extractFirstValidUrl)(input.prompt);\n            if (!targetUrl) {\n                console.log('📚 [CONTEXT BUILDER] No valid URL found in prompt');\n                return undefined;\n            }\n            console.log(`📚 [CONTEXT BUILDER] Analyzing website: ${targetUrl}`);\n            // Initialize web analysis agent\n            const webAgent = new _tools_webAnalysis_WebAnalysisAgent__WEBPACK_IMPORTED_MODULE_2__.WebAnalysisAgent();\n            // Validate URL first\n            const validation = await webAgent.validateUrl(targetUrl);\n            if (!validation.valid) {\n                console.log(`📚 [CONTEXT BUILDER] URL validation failed: ${validation.error}`);\n                return undefined;\n            }\n            // Perform web analysis with R2 upload\n            const analysis = await webAgent.analyzeWebsite(targetUrl, input.projectId, input.userId);\n            if (!analysis.success) {\n                console.log(`📚 [CONTEXT BUILDER] Web analysis failed: ${analysis.error}`);\n                return undefined;\n            }\n            // Return structured web context\n            if (analysis.screenshotUrls && analysis.pageData) {\n                console.log(`📚 [CONTEXT BUILDER] ✅ Web context created for ${analysis.pageData.title}`);\n                return {\n                    originalUrl: analysis.url,\n                    screenshotUrls: analysis.screenshotUrls,\n                    pageData: analysis.pageData,\n                    analyzedAt: analysis.analyzedAt\n                };\n            }\n            return undefined;\n        } catch (error) {\n            console.error('📚 [CONTEXT BUILDER] Error in web analysis:', error);\n            return undefined;\n        }\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvYnJhaW4vb3JjaGVzdHJhdG9yX2Z1bmN0aW9ucy9jb250ZXh0QnVpbGRlci50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBLCtDQUErQztBQUMvQyx5RUFBeUU7QUFFbkM7QUFDYztBQUNiO0FBRXFDO0FBQ1A7QUFFOUQsTUFBTUs7SUFFWCxNQUFNQyxhQUFhQyxLQUF5QixFQUEwQjtRQUNwRUMsUUFBUUMsR0FBRyxDQUFDO1FBQ1pELFFBQVFDLEdBQUcsQ0FBQyxpQ0FBaUNGLE1BQU1HLFNBQVM7UUFDNURGLFFBQVFDLEdBQUcsQ0FBQyxvQ0FBb0MsQ0FBQyxDQUFFRixNQUFNSSxXQUFXLEVBQUVDLFdBQXdCQztRQUU5RixJQUFJO1lBQ0YsOERBQThEO1lBQzlELE1BQU1DLGlCQUFpQixNQUFNZCxnREFBRUEsQ0FDNUJlLE1BQU0sQ0FBQztnQkFDTkMsSUFBSWYsb0RBQU1BLENBQUNlLEVBQUU7Z0JBQ2JDLE1BQU1oQixvREFBTUEsQ0FBQ2dCLElBQUk7Z0JBQ2pCQyxPQUFPakIsb0RBQU1BLENBQUNpQixLQUFLO2dCQUNuQkMsU0FBU2xCLG9EQUFNQSxDQUFDa0IsT0FBTyxDQUFFLGtDQUFrQztZQUM3RCxHQUNDQyxJQUFJLENBQUNuQixvREFBTUEsRUFDWG9CLEtBQUssQ0FBQ25CLCtDQUFFQSxDQUFDRCxvREFBTUEsQ0FBQ1MsU0FBUyxFQUFFSCxNQUFNRyxTQUFTLEdBQzFDWSxPQUFPLENBQUNyQixvREFBTUEsQ0FBQ2lCLEtBQUs7WUFFdkIsK0JBQStCO1lBQy9CLE1BQU1LLGFBQWEsQ0FBQ2hCLE1BQU1pQixXQUFXLElBQUksRUFBRSxFQUFFQyxLQUFLLENBQUMsQ0FBQztZQUVwRCwyQ0FBMkM7WUFDM0MsTUFBTUMsZUFBZSxNQUFNLElBQUksQ0FBQ0MsaUJBQWlCLENBQUNwQjtZQUVsRCxtREFBbUQ7WUFDbkQsTUFBTXFCLGFBQWEsTUFBTSxJQUFJLENBQUNDLGVBQWUsQ0FBQ3RCO1lBRTlDLE9BQU87Z0JBQ0wsOERBQThEO2dCQUM5RHVCLGNBQWNoQixlQUFlaUIsR0FBRyxDQUFDQyxDQUFBQSxRQUFVO3dCQUN6Q2hCLElBQUlnQixNQUFNaEIsRUFBRTt3QkFDWkMsTUFBTWUsTUFBTWYsSUFBSSxJQUFJO3dCQUNwQkUsU0FBU2EsTUFBTWIsT0FBTyxJQUFJO3dCQUMxQkQsT0FBT2MsTUFBTWQsS0FBSztvQkFDcEI7Z0JBRUEsNkNBQTZDO2dCQUM3Q2UscUJBQXFCLElBQUksQ0FBQ0MscUJBQXFCLENBQUNYO2dCQUNoRFksZ0JBQWdCWjtnQkFFaEIsNkJBQTZCO2dCQUM3QkcsY0FBY0E7Z0JBRWQsMENBQTBDO2dCQUMxQ0UsWUFBWUE7Z0JBRVosaUNBQWlDO2dCQUNqQ1EsV0FBV3RCLGVBQWVpQixHQUFHLENBQUNDLENBQUFBLFFBQVU7d0JBQ3RDaEIsSUFBSWdCLE1BQU1oQixFQUFFO3dCQUNaQyxNQUFNZSxNQUFNZixJQUFJLElBQUk7d0JBQ3BCQyxPQUFPYyxNQUFNZCxLQUFLO29CQUNwQjtZQUNGO1FBRUYsRUFBRSxPQUFPbUIsT0FBTztZQUNkN0IsUUFBUTZCLEtBQUssQ0FBQyw0Q0FBNENBO1lBRTFELG1CQUFtQjtZQUNuQixPQUFPO2dCQUNMUCxjQUFjLEVBQUU7Z0JBQ2hCRyxxQkFBcUI7Z0JBQ3JCRSxnQkFBZ0I1QixNQUFNaUIsV0FBVyxFQUFFQyxNQUFNLENBQUMsTUFBTSxFQUFFO2dCQUNsREMsY0FBYztvQkFBRVksZUFBZSxFQUFFO29CQUFFQyxzQkFBc0IsRUFBRTtnQkFBQztnQkFDNURYLFlBQVlZO2dCQUNaSixXQUFXLEVBQUU7WUFDZjtRQUNGO0lBQ0Y7SUFHUUYsc0JBQXNCVixXQUFtRCxFQUFVO1FBQ3pGLElBQUlBLFlBQVlYLE1BQU0sS0FBSyxHQUFHLE9BQU87UUFFckMsTUFBTXNCLGlCQUFpQlgsWUFBWUMsS0FBSyxDQUFDLENBQUM7UUFDMUMsTUFBTWdCLFNBQW1CLEVBQUU7UUFFM0IsS0FBSyxNQUFNQyxXQUFXUCxlQUFnQjtZQUNwQyxJQUFJTyxRQUFRQyxJQUFJLEtBQUssUUFBUTtnQkFDM0IsSUFBSUQsUUFBUUUsT0FBTyxDQUFDQyxRQUFRLENBQUMsYUFBYUgsUUFBUUUsT0FBTyxDQUFDQyxRQUFRLENBQUMsYUFBYTtvQkFDOUVKLE9BQU9LLElBQUksQ0FBQztnQkFDZDtnQkFDQSxJQUFJSixRQUFRRSxPQUFPLENBQUNDLFFBQVEsQ0FBQyxXQUFXSCxRQUFRRSxPQUFPLENBQUNDLFFBQVEsQ0FBQyxXQUFXO29CQUMxRUosT0FBT0ssSUFBSSxDQUFDO2dCQUNkO2dCQUNBLElBQUlKLFFBQVFFLE9BQU8sQ0FBQ0MsUUFBUSxDQUFDLFlBQVlILFFBQVFFLE9BQU8sQ0FBQ0MsUUFBUSxDQUFDLGVBQWU7b0JBQy9FSixPQUFPSyxJQUFJLENBQUM7Z0JBQ2Q7WUFDRjtRQUNGO1FBRUEsTUFBTUMsZUFBZUMsTUFBTTVCLElBQUksQ0FBQyxJQUFJNkIsSUFBSVI7UUFDeEMsT0FBT00sYUFBYWxDLE1BQU0sR0FBRyxJQUFJLENBQUMsb0JBQW9CLEVBQUVrQyxhQUFhRyxJQUFJLENBQUMsT0FBTyxHQUFHO0lBQ3RGO0lBRUEsTUFBY3ZCLGtCQUFrQnBCLEtBQXlCLEVBQUU7UUFDekQsMkNBQTJDO1FBQzNDLE1BQU0rQixnQkFBZ0IvQixNQUFNSSxXQUFXLEVBQUVDLGFBQXlCLEVBQUU7UUFFcEUsNENBQTRDO1FBQzVDLE1BQU0yQix1QkFBOEIsRUFBRTtRQUN0QyxNQUFNaEIsYUFBYWhCLE1BQU1pQixXQUFXLEVBQUVDLE1BQU0sQ0FBQyxPQUFPLEVBQUU7UUFFdEQsSUFBSyxJQUFJMEIsSUFBSSxHQUFHQSxJQUFJNUIsV0FBV1YsTUFBTSxFQUFFc0MsSUFBSztZQUMxQyxNQUFNQyxNQUFNN0IsVUFBVSxDQUFDNEIsRUFBRTtZQUN6QixJQUFJQyxJQUFJVCxJQUFJLEtBQUssVUFBVSxJQUFhL0IsU0FBUyxFQUFFQyxTQUFTLEdBQUc7Z0JBQzdEMEIscUJBQXFCTyxJQUFJLENBQUM7b0JBQ3hCTyxVQUFVRixJQUFJO29CQUNkRyxZQUFZRixJQUFJUixPQUFPO29CQUN2QmhDLFdBQVcsSUFBYUEsU0FBUztnQkFDbkM7WUFDRjtRQUNGO1FBRUEsT0FBTztZQUNMMEI7WUFDQUM7UUFDRjtJQUNGO0lBRUEsTUFBY1YsZ0JBQWdCdEIsS0FBeUIsRUFBRTtRQUN2RCxJQUFJO1lBQ0Ysa0NBQWtDO1lBQ2xDLE1BQU1nRCxZQUFZbkQsOEVBQW9CQSxDQUFDRyxNQUFNaUQsTUFBTTtZQUVuRCxJQUFJLENBQUNELFdBQVc7Z0JBQ2QvQyxRQUFRQyxHQUFHLENBQUM7Z0JBQ1osT0FBTytCO1lBQ1Q7WUFFQWhDLFFBQVFDLEdBQUcsQ0FBQyxDQUFDLHdDQUF3QyxFQUFFOEMsV0FBVztZQUVsRSxnQ0FBZ0M7WUFDaEMsTUFBTUUsV0FBVyxJQUFJdEQsaUZBQWdCQTtZQUVyQyxxQkFBcUI7WUFDckIsTUFBTXVELGFBQWEsTUFBTUQsU0FBU0UsV0FBVyxDQUFDSjtZQUM5QyxJQUFJLENBQUNHLFdBQVdFLEtBQUssRUFBRTtnQkFDckJwRCxRQUFRQyxHQUFHLENBQUMsQ0FBQyw0Q0FBNEMsRUFBRWlELFdBQVdyQixLQUFLLEVBQUU7Z0JBQzdFLE9BQU9HO1lBQ1Q7WUFFQSxzQ0FBc0M7WUFDdEMsTUFBTXFCLFdBQVcsTUFBTUosU0FBU0ssY0FBYyxDQUFDUCxXQUFXaEQsTUFBTUcsU0FBUyxFQUFFSCxNQUFNd0QsTUFBTTtZQUV2RixJQUFJLENBQUNGLFNBQVNHLE9BQU8sRUFBRTtnQkFDckJ4RCxRQUFRQyxHQUFHLENBQUMsQ0FBQywwQ0FBMEMsRUFBRW9ELFNBQVN4QixLQUFLLEVBQUU7Z0JBQ3pFLE9BQU9HO1lBQ1Q7WUFFQSxnQ0FBZ0M7WUFDaEMsSUFBSXFCLFNBQVNJLGNBQWMsSUFBSUosU0FBU0ssUUFBUSxFQUFFO2dCQUNoRDFELFFBQVFDLEdBQUcsQ0FBQyxDQUFDLCtDQUErQyxFQUFFb0QsU0FBU0ssUUFBUSxDQUFDQyxLQUFLLEVBQUU7Z0JBQ3ZGLE9BQU87b0JBQ0xDLGFBQWFQLFNBQVNRLEdBQUc7b0JBQ3pCSixnQkFBZ0JKLFNBQVNJLGNBQWM7b0JBQ3ZDQyxVQUFVTCxTQUFTSyxRQUFRO29CQUMzQkksWUFBWVQsU0FBU1MsVUFBVTtnQkFDakM7WUFDRjtZQUVBLE9BQU85QjtRQUVULEVBQUUsT0FBT0gsT0FBTztZQUNkN0IsUUFBUTZCLEtBQUssQ0FBQywrQ0FBK0NBO1lBQzdELE9BQU9HO1FBQ1Q7SUFDRjtBQUNGIiwic291cmNlcyI6WyIvVXNlcnMvbWFya3VzaG9nbmUvRG9jdW1lbnRzL0FQUFMvYmF6YWFyLXZpZC9iYXphYXItdmlkL2FwcHMvbWFpbi9zcmMvYnJhaW4vb3JjaGVzdHJhdG9yX2Z1bmN0aW9ucy9jb250ZXh0QnVpbGRlci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb250ZXh0IGJ1aWxkZXIgZm9yIHRoZSBtb2R1bGFyIG9yY2hlc3RyYXRvclxuLy8gUmVidWlsdCB0byB1c2UgcmVhbCBjb250ZXh0OiB3ZWIgYW5hbHlzaXMsIHNjZW5lIGhpc3RvcnksIGNoYXQgY29udGV4dFxuXG5pbXBvcnQgeyBkYiB9IGZyb20gXCJAYmF6YWFyL2RhdGFiYXNlXCI7XG5pbXBvcnQgeyBzY2VuZXMsIG1lc3NhZ2VzIH0gZnJvbSBcIkBiYXphYXIvZGF0YWJhc2VcIjtcbmltcG9ydCB7IGVxLCBkZXNjIH0gZnJvbSBcImRyaXp6bGUtb3JtXCI7XG5pbXBvcnQgdHlwZSB7IE9yY2hlc3RyYXRpb25JbnB1dCwgQ29udGV4dFBhY2tldCB9IGZyb20gXCIuLi8uLi9saWIvdHlwZXMvYWkvYnJhaW4udHlwZXNcIjtcbmltcG9ydCB7IFdlYkFuYWx5c2lzQWdlbnQgfSBmcm9tIFwiLi4vLi4vdG9vbHMvd2ViQW5hbHlzaXMvV2ViQW5hbHlzaXNBZ2VudFwiO1xuaW1wb3J0IHsgZXh0cmFjdEZpcnN0VmFsaWRVcmwgfSBmcm9tIFwiLi4vLi4vbGliL3V0aWxzL3VybC1kZXRlY3Rpb25cIjtcblxuZXhwb3J0IGNsYXNzIENvbnRleHRCdWlsZGVyIHtcblxuICBhc3luYyBidWlsZENvbnRleHQoaW5wdXQ6IE9yY2hlc3RyYXRpb25JbnB1dCk6IFByb21pc2U8Q29udGV4dFBhY2tldD4ge1xuICAgIGNvbnNvbGUubG9nKCdcXG7wn5OaIFtDT05URVhUIEJVSUxERVJdID09PSBCVUlMRElORyBSRUFMIENPTlRFWFQgPT09Jyk7XG4gICAgY29uc29sZS5sb2coJ/Cfk5ogW0NPTlRFWFQgQlVJTERFUl0gUHJvamVjdDonLCBpbnB1dC5wcm9qZWN0SWQpO1xuICAgIGNvbnNvbGUubG9nKCfwn5OaIFtDT05URVhUIEJVSUxERVJdIEhhcyBpbWFnZXM6JywgISEoaW5wdXQudXNlckNvbnRleHQ/LmltYWdlVXJscyBhcyBzdHJpbmdbXSk/Lmxlbmd0aCk7XG4gICAgXG4gICAgdHJ5IHtcbiAgICAgIC8vIDEuIEdldCBzY2VuZXMgd2l0aCBGVUxMIFRTWCBjb2RlIGZvciBjcm9zcy1zY2VuZSBvcGVyYXRpb25zXG4gICAgICBjb25zdCBzY2VuZXNXaXRoQ29kZSA9IGF3YWl0IGRiXG4gICAgICAgIC5zZWxlY3QoeyBcbiAgICAgICAgICBpZDogc2NlbmVzLmlkLCBcbiAgICAgICAgICBuYW1lOiBzY2VuZXMubmFtZSwgXG4gICAgICAgICAgb3JkZXI6IHNjZW5lcy5vcmRlcixcbiAgICAgICAgICB0c3hDb2RlOiBzY2VuZXMudHN4Q29kZSAgLy8gQ1JJVElDQUw6IEZ1bGwgY29kZSBmb3IgY29udGV4dFxuICAgICAgICB9KVxuICAgICAgICAuZnJvbShzY2VuZXMpXG4gICAgICAgIC53aGVyZShlcShzY2VuZXMucHJvamVjdElkLCBpbnB1dC5wcm9qZWN0SWQpKVxuICAgICAgICAub3JkZXJCeShzY2VuZXMub3JkZXIpO1xuXG4gICAgICAvLyAyLiBCdWlsZCByZWNlbnQgY2hhdCBjb250ZXh0XG4gICAgICBjb25zdCByZWNlbnRDaGF0ID0gKGlucHV0LmNoYXRIaXN0b3J5IHx8IFtdKS5zbGljZSgtNSk7XG5cbiAgICAgIC8vIDMuIEJ1aWxkIGltYWdlIGNvbnRleHQgZnJvbSBjb252ZXJzYXRpb25cbiAgICAgIGNvbnN0IGltYWdlQ29udGV4dCA9IGF3YWl0IHRoaXMuYnVpbGRJbWFnZUNvbnRleHQoaW5wdXQpO1xuICAgICAgXG4gICAgICAvLyA0LiBCdWlsZCB3ZWIgYW5hbHlzaXMgY29udGV4dCBmcm9tIFVSTCBkZXRlY3Rpb25cbiAgICAgIGNvbnN0IHdlYkNvbnRleHQgPSBhd2FpdCB0aGlzLmJ1aWxkV2ViQ29udGV4dChpbnB1dCk7XG4gICAgICBcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC8vIFJlYWwgc2NlbmUgaGlzdG9yeSB3aXRoIGZ1bGwgVFNYIGZvciBjcm9zcy1zY2VuZSBvcGVyYXRpb25zXG4gICAgICAgIHNjZW5lSGlzdG9yeTogc2NlbmVzV2l0aENvZGUubWFwKHNjZW5lID0+ICh7XG4gICAgICAgICAgaWQ6IHNjZW5lLmlkLFxuICAgICAgICAgIG5hbWU6IHNjZW5lLm5hbWUgfHwgJ1VudGl0bGVkIFNjZW5lJyxcbiAgICAgICAgICB0c3hDb2RlOiBzY2VuZS50c3hDb2RlIHx8ICcnLCAvLyBGdWxsIGNvZGUgYXZhaWxhYmxlIGZvciBjb250ZXh0XG4gICAgICAgICAgb3JkZXI6IHNjZW5lLm9yZGVyXG4gICAgICAgIH0pKSxcbiAgICAgICAgXG4gICAgICAgIC8vIFJlY2VudCBjb252ZXJzYXRpb24gZm9yIGZsb3cgdW5kZXJzdGFuZGluZ1xuICAgICAgICBjb252ZXJzYXRpb25Db250ZXh0OiB0aGlzLnN1bW1hcml6ZUNvbnZlcnNhdGlvbihyZWNlbnRDaGF0KSxcbiAgICAgICAgcmVjZW50TWVzc2FnZXM6IHJlY2VudENoYXQsXG4gICAgICAgIFxuICAgICAgICAvLyBJbWFnZSBjb250ZXh0IGZyb20gdXBsb2Fkc1xuICAgICAgICBpbWFnZUNvbnRleHQ6IGltYWdlQ29udGV4dCxcbiAgICAgICAgXG4gICAgICAgIC8vIFdlYiBhbmFseXNpcyBjb250ZXh0IGZyb20gVVJMIGRldGVjdGlvblxuICAgICAgICB3ZWJDb250ZXh0OiB3ZWJDb250ZXh0LFxuICAgICAgICBcbiAgICAgICAgLy8gU2NlbmUgbGlzdCBmb3IgcXVpY2sgcmVmZXJlbmNlXG4gICAgICAgIHNjZW5lTGlzdDogc2NlbmVzV2l0aENvZGUubWFwKHNjZW5lID0+ICh7XG4gICAgICAgICAgaWQ6IHNjZW5lLmlkLFxuICAgICAgICAgIG5hbWU6IHNjZW5lLm5hbWUgfHwgJ1VudGl0bGVkIFNjZW5lJyxcbiAgICAgICAgICBvcmRlcjogc2NlbmUub3JkZXJcbiAgICAgICAgfSkpXG4gICAgICB9O1xuXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ1tDb250ZXh0QnVpbGRlcl0gRXJyb3IgYnVpbGRpbmcgY29udGV4dDonLCBlcnJvcik7XG4gICAgICBcbiAgICAgIC8vIE1pbmltYWwgZmFsbGJhY2tcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHNjZW5lSGlzdG9yeTogW10sXG4gICAgICAgIGNvbnZlcnNhdGlvbkNvbnRleHQ6ICdOZXcgY29udmVyc2F0aW9uJyxcbiAgICAgICAgcmVjZW50TWVzc2FnZXM6IGlucHV0LmNoYXRIaXN0b3J5Py5zbGljZSgtNSkgfHwgW10sXG4gICAgICAgIGltYWdlQ29udGV4dDogeyBjdXJyZW50SW1hZ2VzOiBbXSwgcmVjZW50SW1hZ2VzRnJvbUNoYXQ6IFtdIH0sXG4gICAgICAgIHdlYkNvbnRleHQ6IHVuZGVmaW5lZCxcbiAgICAgICAgc2NlbmVMaXN0OiBbXVxuICAgICAgfTtcbiAgICB9XG4gIH1cblxuXG4gIHByaXZhdGUgc3VtbWFyaXplQ29udmVyc2F0aW9uKGNoYXRIaXN0b3J5OiBBcnJheTx7cm9sZTogc3RyaW5nLCBjb250ZW50OiBzdHJpbmd9Pik6IHN0cmluZyB7XG4gICAgaWYgKGNoYXRIaXN0b3J5Lmxlbmd0aCA9PT0gMCkgcmV0dXJuICdOZXcgY29udmVyc2F0aW9uJztcbiAgICBcbiAgICBjb25zdCByZWNlbnRNZXNzYWdlcyA9IGNoYXRIaXN0b3J5LnNsaWNlKC01KTtcbiAgICBjb25zdCB0b3BpY3M6IHN0cmluZ1tdID0gW107XG4gICAgXG4gICAgZm9yIChjb25zdCBtZXNzYWdlIG9mIHJlY2VudE1lc3NhZ2VzKSB7XG4gICAgICBpZiAobWVzc2FnZS5yb2xlID09PSAndXNlcicpIHtcbiAgICAgICAgaWYgKG1lc3NhZ2UuY29udGVudC5pbmNsdWRlcygnY3JlYXRlJykgfHwgbWVzc2FnZS5jb250ZW50LmluY2x1ZGVzKCdnZW5lcmF0ZScpKSB7XG4gICAgICAgICAgdG9waWNzLnB1c2goJ3NjZW5lIGNyZWF0aW9uJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UuY29udGVudC5pbmNsdWRlcygnZWRpdCcpIHx8IG1lc3NhZ2UuY29udGVudC5pbmNsdWRlcygnY2hhbmdlJykpIHtcbiAgICAgICAgICB0b3BpY3MucHVzaCgnc2NlbmUgZWRpdGluZycpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLmNvbnRlbnQuaW5jbHVkZXMoJ2NvbG9yJykgfHwgbWVzc2FnZS5jb250ZW50LmluY2x1ZGVzKCdiYWNrZ3JvdW5kJykpIHtcbiAgICAgICAgICB0b3BpY3MucHVzaCgnc3R5bGluZycpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIFxuICAgIGNvbnN0IHVuaXF1ZVRvcGljcyA9IEFycmF5LmZyb20obmV3IFNldCh0b3BpY3MpKTtcbiAgICByZXR1cm4gdW5pcXVlVG9waWNzLmxlbmd0aCA+IDAgPyBgQ29udmVyc2F0aW9uIGFib3V0OiAke3VuaXF1ZVRvcGljcy5qb2luKCcsICcpfWAgOiAnR2VuZXJhbCBjb252ZXJzYXRpb24nO1xuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBidWlsZEltYWdlQ29udGV4dChpbnB1dDogT3JjaGVzdHJhdGlvbklucHV0KSB7XG4gICAgLy8gU2ltcGxlOiBDaGVjayBjdXJyZW50IHJlcXVlc3QgZm9yIGltYWdlc1xuICAgIGNvbnN0IGN1cnJlbnRJbWFnZXMgPSBpbnB1dC51c2VyQ29udGV4dD8uaW1hZ2VVcmxzIGFzIHN0cmluZ1tdIHx8IFtdO1xuICAgIFxuICAgIC8vIEV4dHJhY3QgaW1hZ2VzIGZyb20gcmVjZW50IGNoYXQgaGlzdG9yeSAgXG4gICAgY29uc3QgcmVjZW50SW1hZ2VzRnJvbUNoYXQ6IGFueVtdID0gW107XG4gICAgY29uc3QgcmVjZW50Q2hhdCA9IGlucHV0LmNoYXRIaXN0b3J5Py5zbGljZSgtMTApIHx8IFtdO1xuICAgIFxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcmVjZW50Q2hhdC5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgbXNnID0gcmVjZW50Q2hhdFtpXTtcbiAgICAgIGlmIChtc2cucm9sZSA9PT0gJ3VzZXInICYmIChtc2cgYXMgYW55KS5pbWFnZVVybHM/Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgcmVjZW50SW1hZ2VzRnJvbUNoYXQucHVzaCh7XG4gICAgICAgICAgcG9zaXRpb246IGkgKyAxLFxuICAgICAgICAgIHVzZXJQcm9tcHQ6IG1zZy5jb250ZW50LFxuICAgICAgICAgIGltYWdlVXJsczogKG1zZyBhcyBhbnkpLmltYWdlVXJsc1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4geyBcbiAgICAgIGN1cnJlbnRJbWFnZXMsXG4gICAgICByZWNlbnRJbWFnZXNGcm9tQ2hhdFxuICAgIH07XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIGJ1aWxkV2ViQ29udGV4dChpbnB1dDogT3JjaGVzdHJhdGlvbklucHV0KSB7XG4gICAgdHJ5IHtcbiAgICAgIC8vIEV4dHJhY3QgVVJMIGZyb20gY3VycmVudCBwcm9tcHRcbiAgICAgIGNvbnN0IHRhcmdldFVybCA9IGV4dHJhY3RGaXJzdFZhbGlkVXJsKGlucHV0LnByb21wdCk7XG4gICAgICBcbiAgICAgIGlmICghdGFyZ2V0VXJsKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCfwn5OaIFtDT05URVhUIEJVSUxERVJdIE5vIHZhbGlkIFVSTCBmb3VuZCBpbiBwcm9tcHQnKTtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgY29uc29sZS5sb2coYPCfk5ogW0NPTlRFWFQgQlVJTERFUl0gQW5hbHl6aW5nIHdlYnNpdGU6ICR7dGFyZ2V0VXJsfWApO1xuICAgICAgXG4gICAgICAvLyBJbml0aWFsaXplIHdlYiBhbmFseXNpcyBhZ2VudFxuICAgICAgY29uc3Qgd2ViQWdlbnQgPSBuZXcgV2ViQW5hbHlzaXNBZ2VudCgpO1xuICAgICAgXG4gICAgICAvLyBWYWxpZGF0ZSBVUkwgZmlyc3RcbiAgICAgIGNvbnN0IHZhbGlkYXRpb24gPSBhd2FpdCB3ZWJBZ2VudC52YWxpZGF0ZVVybCh0YXJnZXRVcmwpO1xuICAgICAgaWYgKCF2YWxpZGF0aW9uLnZhbGlkKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKGDwn5OaIFtDT05URVhUIEJVSUxERVJdIFVSTCB2YWxpZGF0aW9uIGZhaWxlZDogJHt2YWxpZGF0aW9uLmVycm9yfWApO1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgXG4gICAgICAvLyBQZXJmb3JtIHdlYiBhbmFseXNpcyB3aXRoIFIyIHVwbG9hZFxuICAgICAgY29uc3QgYW5hbHlzaXMgPSBhd2FpdCB3ZWJBZ2VudC5hbmFseXplV2Vic2l0ZSh0YXJnZXRVcmwsIGlucHV0LnByb2plY3RJZCwgaW5wdXQudXNlcklkKTtcbiAgICAgIFxuICAgICAgaWYgKCFhbmFseXNpcy5zdWNjZXNzKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKGDwn5OaIFtDT05URVhUIEJVSUxERVJdIFdlYiBhbmFseXNpcyBmYWlsZWQ6ICR7YW5hbHlzaXMuZXJyb3J9YCk7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICBcbiAgICAgIC8vIFJldHVybiBzdHJ1Y3R1cmVkIHdlYiBjb250ZXh0XG4gICAgICBpZiAoYW5hbHlzaXMuc2NyZWVuc2hvdFVybHMgJiYgYW5hbHlzaXMucGFnZURhdGEpIHtcbiAgICAgICAgY29uc29sZS5sb2coYPCfk5ogW0NPTlRFWFQgQlVJTERFUl0g4pyFIFdlYiBjb250ZXh0IGNyZWF0ZWQgZm9yICR7YW5hbHlzaXMucGFnZURhdGEudGl0bGV9YCk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgb3JpZ2luYWxVcmw6IGFuYWx5c2lzLnVybCEsXG4gICAgICAgICAgc2NyZWVuc2hvdFVybHM6IGFuYWx5c2lzLnNjcmVlbnNob3RVcmxzLFxuICAgICAgICAgIHBhZ2VEYXRhOiBhbmFseXNpcy5wYWdlRGF0YSxcbiAgICAgICAgICBhbmFseXplZEF0OiBhbmFseXNpcy5hbmFseXplZEF0IVxuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgXG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ/Cfk5ogW0NPTlRFWFQgQlVJTERFUl0gRXJyb3IgaW4gd2ViIGFuYWx5c2lzOicsIGVycm9yKTtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICB9XG59ICJdLCJuYW1lcyI6WyJkYiIsInNjZW5lcyIsImVxIiwiV2ViQW5hbHlzaXNBZ2VudCIsImV4dHJhY3RGaXJzdFZhbGlkVXJsIiwiQ29udGV4dEJ1aWxkZXIiLCJidWlsZENvbnRleHQiLCJpbnB1dCIsImNvbnNvbGUiLCJsb2ciLCJwcm9qZWN0SWQiLCJ1c2VyQ29udGV4dCIsImltYWdlVXJscyIsImxlbmd0aCIsInNjZW5lc1dpdGhDb2RlIiwic2VsZWN0IiwiaWQiLCJuYW1lIiwib3JkZXIiLCJ0c3hDb2RlIiwiZnJvbSIsIndoZXJlIiwib3JkZXJCeSIsInJlY2VudENoYXQiLCJjaGF0SGlzdG9yeSIsInNsaWNlIiwiaW1hZ2VDb250ZXh0IiwiYnVpbGRJbWFnZUNvbnRleHQiLCJ3ZWJDb250ZXh0IiwiYnVpbGRXZWJDb250ZXh0Iiwic2NlbmVIaXN0b3J5IiwibWFwIiwic2NlbmUiLCJjb252ZXJzYXRpb25Db250ZXh0Iiwic3VtbWFyaXplQ29udmVyc2F0aW9uIiwicmVjZW50TWVzc2FnZXMiLCJzY2VuZUxpc3QiLCJlcnJvciIsImN1cnJlbnRJbWFnZXMiLCJyZWNlbnRJbWFnZXNGcm9tQ2hhdCIsInVuZGVmaW5lZCIsInRvcGljcyIsIm1lc3NhZ2UiLCJyb2xlIiwiY29udGVudCIsImluY2x1ZGVzIiwicHVzaCIsInVuaXF1ZVRvcGljcyIsIkFycmF5IiwiU2V0Iiwiam9pbiIsImkiLCJtc2ciLCJwb3NpdGlvbiIsInVzZXJQcm9tcHQiLCJ0YXJnZXRVcmwiLCJwcm9tcHQiLCJ3ZWJBZ2VudCIsInZhbGlkYXRpb24iLCJ2YWxpZGF0ZVVybCIsInZhbGlkIiwiYW5hbHlzaXMiLCJhbmFseXplV2Vic2l0ZSIsInVzZXJJZCIsInN1Y2Nlc3MiLCJzY3JlZW5zaG90VXJscyIsInBhZ2VEYXRhIiwidGl0bGUiLCJvcmlnaW5hbFVybCIsInVybCIsImFuYWx5emVkQXQiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./src/brain/orchestrator_functions/contextBuilder.ts\n");

/***/ }),

/***/ "(rsc)/./src/brain/orchestrator_functions/intentAnalyzer.ts":
/*!************************************************************!*\
  !*** ./src/brain/orchestrator_functions/intentAnalyzer.ts ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   IntentAnalyzer: () => (/* binding */ IntentAnalyzer)\n/* harmony export */ });\n/* harmony import */ var _server_services_ai_aiClient_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ~/server/services/ai/aiClient.service */ \"(rsc)/./src/server/services/ai/aiClient.service.ts\");\n/* harmony import */ var _config_models_config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ~/config/models.config */ \"(rsc)/./src/config/models.config.ts\");\n/* harmony import */ var _config_prompts_config__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ~/config/prompts.config */ \"(rsc)/./src/config/prompts.config.ts\");\n// Intent analyzer for tool selection\n\n\n\nclass IntentAnalyzer {\n    async analyzeIntent(input, contextPacket) {\n        console.log('\\n🎯 [NEW INTENT ANALYZER] === ANALYZING INTENT ===');\n        console.log('🎯 [NEW INTENT ANALYZER] User prompt:', input.prompt.substring(0, 50) + '...');\n        try {\n            const systemPrompt = _config_prompts_config__WEBPACK_IMPORTED_MODULE_2__.SYSTEM_PROMPTS.BRAIN_ORCHESTRATOR.content;\n            const userPrompt = this.buildUserPrompt(input, contextPacket);\n            const response = await _server_services_ai_aiClient_service__WEBPACK_IMPORTED_MODULE_0__.AIClientService.generateResponse(this.modelConfig, [\n                {\n                    role: \"system\",\n                    content: systemPrompt\n                },\n                {\n                    role: \"user\",\n                    content: userPrompt\n                }\n            ], undefined, {\n                responseFormat: {\n                    type: \"json_object\"\n                }\n            });\n            const rawOutput = response.content;\n            if (!rawOutput) {\n                throw new Error(\"No response from Brain LLM\");\n            }\n            console.log('🎯 [NEW INTENT ANALYZER] Brain responded, parsing decision...');\n            const parsed = this.extractJsonFromResponse(rawOutput);\n            // Debug log to see what brain actually returned\n            console.log('🎯 [NEW INTENT ANALYZER] Raw parsed JSON:', JSON.stringify(parsed, null, 2));\n            const result = this.processBrainDecision(parsed, input);\n            console.log('🎯 [NEW INTENT ANALYZER] Decision:', {\n                toolName: result.toolName,\n                success: result.success,\n                reasoning: result.reasoning?.substring(0, 50) + '...'\n            });\n            return result;\n        } catch (error) {\n            console.error('[IntentAnalyzer] Error:', error);\n            return {\n                success: false,\n                error: error instanceof Error ? error.message : \"Intent analysis failed\"\n            };\n        }\n    }\n    buildUserPrompt(input, contextPacket) {\n        const { prompt, storyboardSoFar } = input;\n        // Build storyboard context with clear ordering and recency\n        let storyboardInfo = \"No scenes yet\";\n        if (storyboardSoFar && storyboardSoFar.length > 0) {\n            storyboardInfo = storyboardSoFar.map((scene, i)=>{\n                const sceneNum = i + 1;\n                const isNewest = i === storyboardSoFar.length - 1;\n                const isFirst = i === 0;\n                const durationSec = (scene.duration / 30).toFixed(1); // Convert frames to seconds\n                return `Scene ${sceneNum}: \"${scene.name}\" (ID: ${scene.id}, Duration: ${scene.duration} frames / ${durationSec}s)${isNewest ? ' [NEWEST/LAST ADDED]' : ''}${isFirst ? ' [FIRST]' : ''}`;\n            }).join('\\n');\n            // Add helpful context about recent actions\n            if (storyboardSoFar.length > 0) {\n                storyboardInfo += `\\n\\nIMPORTANT: When user says \"it\" or \"the scene\" right after adding content, they usually mean the NEWEST scene (Scene ${storyboardSoFar.length}).`;\n            }\n            if (input.userContext?.sceneId) {\n                const selected = storyboardSoFar.find((s)=>s.id === input.userContext?.sceneId);\n                if (selected) storyboardInfo += `\\nUSER SELECTED: \"${selected.name}\"`;\n            }\n        }\n        // Add image context\n        let imageInfo = \"\";\n        if (contextPacket.imageContext && contextPacket.imageContext.recentImagesFromChat && contextPacket.imageContext.recentImagesFromChat.length > 0) {\n            const images = contextPacket.imageContext.recentImagesFromChat;\n            imageInfo = `\\nIMAGES IN CONVERSATION:`;\n            images.forEach((img)=>{\n                imageInfo += `\\n${img.position}. \"${img.userPrompt}\" [${img.imageUrls.length} image(s)]`;\n            });\n            imageInfo += `\\n\\nWhen user references images:\n- \"the image\" or \"this image\" → most recent image (position ${images.length})\n- \"first/second/third image\" → by position number\n- \"image 1/2/3\" → by position number\n- \"earlier image\" → previous images in conversation\n\nNOTE: All tools are multimodal. When images are referenced, include them in the tool's imageUrls parameter.`;\n        }\n        // Check if current prompt has images  \n        const currentImageUrls = input.userContext?.imageUrls || [];\n        if (currentImageUrls.length > 0) {\n            imageInfo += `\\n\\nCURRENT MESSAGE: Includes ${currentImageUrls.length} image(s) uploaded with this request.`;\n        }\n        // Add conversation context with recent action detection\n        let chatInfo = \"\";\n        if (contextPacket.conversationContext !== 'New conversation') {\n            chatInfo = `\\nCONVERSATION: ${contextPacket.conversationContext}`;\n            // Check if last message indicates we just added a scene\n            const lastMessages = contextPacket.recentMessages || [];\n            if (lastMessages.length >= 2) {\n                const lastAssistantMsg = [\n                    ...lastMessages\n                ].reverse().find((m)=>m.role === 'assistant');\n                if (lastAssistantMsg && (lastAssistantMsg.content.includes('added') || lastAssistantMsg.content.includes('created') || lastAssistantMsg.content.includes('I\\'ve added'))) {\n                    chatInfo += `\\nRECENT: Just added a new scene (likely Scene ${storyboardSoFar?.length || 'latest'})`;\n                }\n            }\n        }\n        // Add web analysis context\n        let webInfo = \"\";\n        if (contextPacket.webContext) {\n            const web = contextPacket.webContext;\n            webInfo = `\\nWEB ANALYSIS CONTEXT:\nWebsite: ${web.pageData.title} (${web.originalUrl})\nDescription: ${web.pageData.description || 'No description'}\nKey Headings: ${web.pageData.headings.slice(0, 3).join(', ')}\nScreenshots: Desktop (${web.screenshotUrls.desktop}) & Mobile (${web.screenshotUrls.mobile})\nAnalyzed: ${new Date(web.analyzedAt).toLocaleString()}\n\nThe AI has access to visual screenshots of this website and can reference them for brand matching, design inspiration, and style consistency.`;\n        }\n        return `USER: \"${prompt}\"\n\nSTORYBOARD:\n${storyboardInfo}${imageInfo}${chatInfo}${webInfo}\n\nRespond with JSON only.`;\n    }\n    extractJsonFromResponse(content) {\n        if (!content || typeof content !== 'string') {\n            throw new Error('Empty or invalid response content');\n        }\n        const cleaned = content.trim();\n        if (cleaned.startsWith('```')) {\n            const lines = cleaned.split('\\n');\n            const startIndex = lines.findIndex((line)=>line.includes('```json') || line === '```');\n            const endIndex = lines.findIndex((line, index)=>index > startIndex && line.includes('```'));\n            if (startIndex !== -1 && endIndex !== -1) {\n                const jsonLines = lines.slice(startIndex + 1, endIndex);\n                const jsonString = jsonLines.join('\\n').trim();\n                if (!jsonString) {\n                    throw new Error('Empty JSON content in markdown block');\n                }\n                return JSON.parse(jsonString);\n            }\n        }\n        return JSON.parse(cleaned);\n    }\n    processBrainDecision(parsed, input) {\n        // Check for multi-step workflow\n        if (parsed.workflow && Array.isArray(parsed.workflow)) {\n            return {\n                success: true,\n                workflow: parsed.workflow,\n                reasoning: parsed.reasoning || \"Multi-step workflow planned\"\n            };\n        }\n        // Handle clarification responses\n        if (parsed.needsClarification) {\n            return {\n                success: true,\n                needsClarification: true,\n                clarificationQuestion: parsed.clarificationQuestion,\n                reasoning: parsed.reasoning\n            };\n        }\n        // Single tool operation\n        const result = {\n            success: true,\n            toolName: parsed.toolName,\n            reasoning: parsed.reasoning,\n            targetSceneId: parsed.targetSceneId,\n            targetDuration: parsed.targetDuration,\n            referencedSceneIds: parsed.referencedSceneIds,\n            userFeedback: parsed.userFeedback\n        };\n        // Extract requested duration\n        const requestedDurationSeconds = this.extractRequestedDuration(input.prompt);\n        if (requestedDurationSeconds) {\n            result.requestedDurationSeconds = requestedDurationSeconds;\n        }\n        return result;\n    }\n    extractRequestedDuration(prompt) {\n        const durationMatch = prompt.match(/\\b(\\d+)\\s*(?:seconds?|sec|se[ocn]{1,3}ds?)\\b/i);\n        if (durationMatch && durationMatch[1]) {\n            const seconds = parseInt(durationMatch[1], 10);\n            if (!isNaN(seconds) && seconds > 0) {\n                return seconds;\n            }\n        }\n        return undefined;\n    }\n    constructor(){\n        this.modelConfig = (0,_config_models_config__WEBPACK_IMPORTED_MODULE_1__.getModel)(\"brain\");\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/brain/orchestrator_functions/intentAnalyzer.ts\n");

/***/ }),

/***/ "(rsc)/./src/config/models.config.ts":
/*!*************************************!*\
  !*** ./src/config/models.config.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ACTIVE_MODEL_PACK: () => (/* binding */ ACTIVE_MODEL_PACK),\n/* harmony export */   MODEL_PACKS: () => (/* binding */ MODEL_PACKS),\n/* harmony export */   ModelConfigSchema: () => (/* binding */ ModelConfigSchema),\n/* harmony export */   ModelPackSchema: () => (/* binding */ ModelPackSchema),\n/* harmony export */   ModelProviderSchema: () => (/* binding */ ModelProviderSchema),\n/* harmony export */   getActiveModelPack: () => (/* binding */ getActiveModelPack),\n/* harmony export */   getClient: () => (/* binding */ getClient),\n/* harmony export */   getModel: () => (/* binding */ getModel),\n/* harmony export */   getModelManifest: () => (/* binding */ getModelManifest),\n/* harmony export */   getPackDescription: () => (/* binding */ getPackDescription),\n/* harmony export */   listAvailablePacks: () => (/* binding */ listAvailablePacks),\n/* harmony export */   logCurrentModelConfiguration: () => (/* binding */ logCurrentModelConfiguration),\n/* harmony export */   resolveModel: () => (/* binding */ resolveModel)\n/* harmony export */ });\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! zod */ \"(rsc)/../../node_modules/zod/lib/index.mjs\");\n/* harmony import */ var openai_shims_node__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! openai/shims/node */ \"(rsc)/../../node_modules/openai/shims/node.mjs\");\n/* harmony import */ var openai__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! openai */ \"(rsc)/../../node_modules/openai/index.mjs\");\n/* harmony import */ var _anthropic_ai_sdk__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @anthropic-ai/sdk */ \"(rsc)/../../node_modules/@anthropic-ai/sdk/index.mjs\");\n//src/config/models.config.ts\n\n// =============================================================================\n// RUNTIME VALIDATION SCHEMAS\n// =============================================================================\nconst ModelProviderSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.enum([\n    'openai',\n    'anthropic'\n]);\nconst ModelConfigSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    provider: ModelProviderSchema,\n    model: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().min(1),\n    temperature: zod__WEBPACK_IMPORTED_MODULE_0__.z.number().gte(0).lte(2).optional(),\n    maxTokens: zod__WEBPACK_IMPORTED_MODULE_0__.z.number().int().positive().optional(),\n    apiKey: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().optional()\n});\n// Simplified schema for only the models we actually use\nconst ModelPackSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    name: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().min(1),\n    description: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().min(1),\n    models: zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n        // Core orchestration\n        brain: ModelConfigSchema,\n        // Code generation\n        codeGenerator: ModelConfigSchema,\n        editScene: ModelConfigSchema,\n        // Simple utilities\n        titleGenerator: ModelConfigSchema\n    })\n});\n// =============================================================================\n// MODEL PACKS (Only what we actually use)\n// =============================================================================\n// 🎯 OPTIMAL PACK: Best balance of speed, cost, and quality\nconst optimalPack = {\n    name: 'Optimal Pack',\n    description: 'Best balance of speed, cost, and quality',\n    models: {\n        brain: {\n            provider: 'openai',\n            model: 'gpt-4.1-mini',\n            temperature: 0.4\n        },\n        codeGenerator: {\n            provider: 'anthropic',\n            model: 'claude-sonnet-4-20250514',\n            temperature: 0.3,\n            maxTokens: 16000\n        },\n        editScene: {\n            provider: 'anthropic',\n            model: 'claude-sonnet-4-20250514',\n            temperature: 0.3,\n            maxTokens: 16000\n        },\n        titleGenerator: {\n            provider: 'openai',\n            model: 'gpt-4o-mini',\n            temperature: 0.5,\n            maxTokens: 400\n        }\n    }\n};\n// 🤖 ANTHROPIC PACK: All Claude models\nconst anthropicPack = {\n    name: 'Anthropic Pack',\n    description: 'Claude models only - excellent for code generation',\n    models: {\n        brain: {\n            provider: 'anthropic',\n            model: 'claude-sonnet-4-20250514',\n            temperature: 0.6\n        },\n        codeGenerator: {\n            provider: 'anthropic',\n            model: 'claude-sonnet-4-20250514',\n            temperature: 0.3,\n            maxTokens: 16000\n        },\n        editScene: {\n            provider: 'anthropic',\n            model: 'claude-sonnet-4-20250514',\n            temperature: 0.3,\n            maxTokens: 16000\n        },\n        titleGenerator: {\n            provider: 'anthropic',\n            model: 'claude-sonnet-4-20250514',\n            temperature: 0.5,\n            maxTokens: 100\n        }\n    }\n};\n// 🚀 OPENAI PACK: All OpenAI models\nconst openaiPack = {\n    name: 'OpenAI Pack',\n    description: 'OpenAI models only - GPT-4.1 for intelligence, GPT-4o-mini for speed',\n    models: {\n        brain: {\n            provider: 'openai',\n            model: 'gpt-4.1',\n            temperature: 0.6\n        },\n        codeGenerator: {\n            provider: 'openai',\n            model: 'gpt-4.1',\n            temperature: 0.3,\n            maxTokens: 16000\n        },\n        editScene: {\n            provider: 'openai',\n            model: 'gpt-4.1',\n            temperature: 0.3,\n            maxTokens: 16000\n        },\n        titleGenerator: {\n            provider: 'openai',\n            model: 'gpt-4o-mini',\n            temperature: 0.5,\n            maxTokens: 100\n        }\n    }\n};\n// Validate all packs at runtime\nconst MODEL_PACKS = {\n    'optimal-pack': ModelPackSchema.parse(optimalPack),\n    'anthropic-pack': ModelPackSchema.parse(anthropicPack),\n    'openai-pack': ModelPackSchema.parse(openaiPack)\n};\n// =============================================================================\n// ENVIRONMENT-DRIVEN ACTIVE PACK\n// =============================================================================\nconst ACTIVE_MODEL_PACK = process.env.MODEL_PACK ?? 'optimal-pack';\n// Get the currently active model configuration\nfunction getActiveModelPack() {\n    const pack = MODEL_PACKS[ACTIVE_MODEL_PACK];\n    if (!pack) {\n        throw new Error(`Model pack \"${ACTIVE_MODEL_PACK}\" not found. Available packs: ${Object.keys(MODEL_PACKS).join(', ')}`);\n    }\n    return pack;\n}\nfunction getModel(key) {\n    const model = getActiveModelPack().models[key];\n    if (!model) {\n        throw new Error(`Model \"${String(key)}\" missing in active pack \"${ACTIVE_MODEL_PACK}\"`);\n    }\n    return model;\n}\n// =============================================================================\n// PER-REQUEST OVERRIDE HOOK\n// =============================================================================\nfunction resolveModel(key, overrides) {\n    const base = getModel(key);\n    return {\n        ...base,\n        ...overrides\n    };\n}\n// =============================================================================\n// PROVIDER CLIENT REGISTRY\n// =============================================================================\n\n\n\nconst clientCache = new Map();\nfunction createClient(provider) {\n    switch(provider){\n        case 'openai':\n            return new openai__WEBPACK_IMPORTED_MODULE_3__[\"default\"]({\n                apiKey: process.env.OPENAI_API_KEY\n            });\n        case 'anthropic':\n            return new _anthropic_ai_sdk__WEBPACK_IMPORTED_MODULE_2__[\"default\"]({\n                apiKey: process.env.ANTHROPIC_API_KEY\n            });\n        default:\n            throw new Error(`Unsupported provider: ${provider}`);\n    }\n}\nfunction getClient(provider) {\n    if (!clientCache.has(provider)) {\n        clientCache.set(provider, createClient(provider));\n    }\n    return clientCache.get(provider);\n}\n// =============================================================================\n// UTILITY FUNCTIONS\n// =============================================================================\nfunction listAvailablePacks() {\n    return Object.keys(MODEL_PACKS);\n}\nfunction getPackDescription(packName) {\n    const pack = MODEL_PACKS[packName];\n    return pack ? pack.description : 'Pack not found';\n}\n// =============================================================================\n// OBSERVABILITY & HEALTH CHECK\n// =============================================================================\nfunction getModelManifest() {\n    const pack = getActiveModelPack();\n    return {\n        environment: \"development\" || 0,\n        activePack: ACTIVE_MODEL_PACK,\n        packName: pack.name,\n        packDescription: pack.description,\n        models: {\n            brain: `${pack.models.brain.provider}/${pack.models.brain.model}`,\n            codeGenerator: `${pack.models.codeGenerator.provider}/${pack.models.codeGenerator.model}`,\n            editScene: `${pack.models.editScene.provider}/${pack.models.editScene.model}`,\n            titleGenerator: `${pack.models.titleGenerator.provider}/${pack.models.titleGenerator.model}`\n        },\n        availablePacks: listAvailablePacks()\n    };\n}\n// Development helper to log current configuration\nfunction logCurrentModelConfiguration() {\n    if (true) {\n        const manifest = getModelManifest();\n        console.log('🤖 Model Management System');\n        console.log('📦 Active Pack:', manifest.activePack);\n        console.log('📝 Description:', manifest.packDescription);\n        console.log('🔧 Models:', manifest.models);\n        console.log('🌍 Environment:', manifest.environment);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/config/models.config.ts\n");

/***/ }),

/***/ "(rsc)/./src/config/prompts.config.ts":
/*!**************************************!*\
  !*** ./src/config/prompts.config.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PROMPTS: () => (/* binding */ PROMPTS),\n/* harmony export */   SYSTEM_PROMPTS: () => (/* binding */ SYSTEM_PROMPTS),\n/* harmony export */   getParameterizedPrompt: () => (/* binding */ getParameterizedPrompt),\n/* harmony export */   getSystemPrompt: () => (/* binding */ getSystemPrompt)\n/* harmony export */ });\n/* harmony import */ var _prompts_active_brain_orchestrator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./prompts/active/brain-orchestrator */ \"(rsc)/./src/config/prompts/active/brain-orchestrator.ts\");\n/* harmony import */ var _prompts_active_code_generator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./prompts/active/code-generator */ \"(rsc)/./src/config/prompts/active/code-generator.ts\");\n/* harmony import */ var _prompts_active_code_editor__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./prompts/active/code-editor */ \"(rsc)/./src/config/prompts/active/code-editor.ts\");\n/* harmony import */ var _prompts_active_title_generator__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./prompts/active/title-generator */ \"(rsc)/./src/config/prompts/active/title-generator.ts\");\n/**\n * Modular Prompts Configuration\n * \n * This file imports all active prompts from individual files.\n * Deprecated prompts are kept in the deprecated folder for reference.\n * \n * Active Prompts (4 total):\n * 1. BRAIN_ORCHESTRATOR - Tool selection\n * 2. CODE_GENERATOR - Universal scene creation\n * 3. CODE_EDITOR - Universal scene editing\n * 4. TITLE_GENERATOR - Project titles\n */ \n\n\n\n// Export all prompts as a single object for backward compatibility\nconst SYSTEM_PROMPTS = {\n    // Core prompts\n    BRAIN_ORCHESTRATOR: _prompts_active_brain_orchestrator__WEBPACK_IMPORTED_MODULE_0__.BRAIN_ORCHESTRATOR,\n    CODE_GENERATOR: _prompts_active_code_generator__WEBPACK_IMPORTED_MODULE_1__.CODE_GENERATOR,\n    CODE_EDITOR: _prompts_active_code_editor__WEBPACK_IMPORTED_MODULE_2__.CODE_EDITOR,\n    TITLE_GENERATOR: _prompts_active_title_generator__WEBPACK_IMPORTED_MODULE_3__.TITLE_GENERATOR\n};\n// Helper to get system prompt with proper typing\nfunction getSystemPrompt(key) {\n    const prompt = SYSTEM_PROMPTS[key];\n    if (!prompt) {\n        console.warn(`Prompt not found: ${key}`);\n        return '';\n    }\n    return prompt.content;\n}\n// Helper to get parameterized prompt (replaces placeholders)\nfunction getParameterizedPrompt(key, params) {\n    const prompt = SYSTEM_PROMPTS[key];\n    if (!prompt) {\n        console.warn(`Prompt not found: ${key}`);\n        return {\n            role: 'system',\n            content: ''\n        };\n    }\n    let content = prompt.content;\n    // Replace all placeholders\n    Object.entries(params).forEach(([key, value])=>{\n        content = content.replace(new RegExp(`{{${key}}}`, 'g'), value);\n    });\n    return {\n        role: prompt.role,\n        content\n    };\n}\n// Re-export the main content for direct access\nconst PROMPTS = {\n    brainOrchestrator: _prompts_active_brain_orchestrator__WEBPACK_IMPORTED_MODULE_0__.BRAIN_ORCHESTRATOR.content,\n    codeGenerator: _prompts_active_code_generator__WEBPACK_IMPORTED_MODULE_1__.CODE_GENERATOR.content,\n    codeEditor: _prompts_active_code_editor__WEBPACK_IMPORTED_MODULE_2__.CODE_EDITOR.content,\n    titleGenerator: _prompts_active_title_generator__WEBPACK_IMPORTED_MODULE_3__.TITLE_GENERATOR.content\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvY29uZmlnL3Byb21wdHMuY29uZmlnLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7Ozs7Ozs7Ozs7O0NBV0MsR0FFd0U7QUFDUjtBQUNOO0FBQ1E7QUFFbkUsbUVBQW1FO0FBQzVELE1BQU1JLGlCQUFpQjtJQUM1QixlQUFlO0lBQ2ZKLGtCQUFrQkEsb0ZBQUFBO0lBQ2xCQyxjQUFjQSw0RUFBQUE7SUFDZEMsV0FBV0Esc0VBQUFBO0lBQ1hDLGVBQWVBLDhFQUFBQTtBQUVqQixFQUFXO0FBS1gsaURBQWlEO0FBQzFDLFNBQVNFLGdCQUFnQkMsR0FBb0I7SUFDbEQsTUFBTUMsU0FBU0gsY0FBYyxDQUFDRSxJQUFJO0lBQ2xDLElBQUksQ0FBQ0MsUUFBUTtRQUNYQyxRQUFRQyxJQUFJLENBQUMsQ0FBQyxrQkFBa0IsRUFBRUgsS0FBSztRQUN2QyxPQUFPO0lBQ1Q7SUFDQSxPQUFPQyxPQUFPRyxPQUFPO0FBQ3ZCO0FBRUEsNkRBQTZEO0FBQ3RELFNBQVNDLHVCQUNkTCxHQUFvQixFQUNwQk0sTUFBOEI7SUFFOUIsTUFBTUwsU0FBU0gsY0FBYyxDQUFDRSxJQUFJO0lBQ2xDLElBQUksQ0FBQ0MsUUFBUTtRQUNYQyxRQUFRQyxJQUFJLENBQUMsQ0FBQyxrQkFBa0IsRUFBRUgsS0FBSztRQUN2QyxPQUFPO1lBQUVPLE1BQU07WUFBVUgsU0FBUztRQUFHO0lBQ3ZDO0lBRUEsSUFBSUEsVUFBVUgsT0FBT0csT0FBTztJQUU1QiwyQkFBMkI7SUFDM0JJLE9BQU9DLE9BQU8sQ0FBQ0gsUUFBUUksT0FBTyxDQUFDLENBQUMsQ0FBQ1YsS0FBS1csTUFBTTtRQUMxQ1AsVUFBVUEsUUFBUVEsT0FBTyxDQUFDLElBQUlDLE9BQU8sQ0FBQyxFQUFFLEVBQUViLElBQUksRUFBRSxDQUFDLEVBQUUsTUFBTVc7SUFDM0Q7SUFFQSxPQUFPO1FBQ0xKLE1BQU1OLE9BQU9NLElBQUk7UUFDakJIO0lBQ0Y7QUFDRjtBQUVBLCtDQUErQztBQUN4QyxNQUFNVSxVQUFVO0lBQ3JCQyxtQkFBbUJyQixrRkFBa0JBLENBQUNVLE9BQU87SUFDN0NZLGVBQWVyQiwwRUFBY0EsQ0FBQ1MsT0FBTztJQUNyQ2EsWUFBWXJCLG9FQUFXQSxDQUFDUSxPQUFPO0lBQy9CYyxnQkFBZ0JyQiw0RUFBZUEsQ0FBQ08sT0FBTztBQUN6QyxFQUFXIiwic291cmNlcyI6WyIvVXNlcnMvbWFya3VzaG9nbmUvRG9jdW1lbnRzL0FQUFMvYmF6YWFyLXZpZC9iYXphYXItdmlkL2FwcHMvbWFpbi9zcmMvY29uZmlnL3Byb21wdHMuY29uZmlnLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogTW9kdWxhciBQcm9tcHRzIENvbmZpZ3VyYXRpb25cbiAqIFxuICogVGhpcyBmaWxlIGltcG9ydHMgYWxsIGFjdGl2ZSBwcm9tcHRzIGZyb20gaW5kaXZpZHVhbCBmaWxlcy5cbiAqIERlcHJlY2F0ZWQgcHJvbXB0cyBhcmUga2VwdCBpbiB0aGUgZGVwcmVjYXRlZCBmb2xkZXIgZm9yIHJlZmVyZW5jZS5cbiAqIFxuICogQWN0aXZlIFByb21wdHMgKDQgdG90YWwpOlxuICogMS4gQlJBSU5fT1JDSEVTVFJBVE9SIC0gVG9vbCBzZWxlY3Rpb25cbiAqIDIuIENPREVfR0VORVJBVE9SIC0gVW5pdmVyc2FsIHNjZW5lIGNyZWF0aW9uXG4gKiAzLiBDT0RFX0VESVRPUiAtIFVuaXZlcnNhbCBzY2VuZSBlZGl0aW5nXG4gKiA0LiBUSVRMRV9HRU5FUkFUT1IgLSBQcm9qZWN0IHRpdGxlc1xuICovXG5cbmltcG9ydCB7IEJSQUlOX09SQ0hFU1RSQVRPUiB9IGZyb20gJy4vcHJvbXB0cy9hY3RpdmUvYnJhaW4tb3JjaGVzdHJhdG9yJztcbmltcG9ydCB7IENPREVfR0VORVJBVE9SIH0gZnJvbSAnLi9wcm9tcHRzL2FjdGl2ZS9jb2RlLWdlbmVyYXRvcic7XG5pbXBvcnQgeyBDT0RFX0VESVRPUiB9IGZyb20gJy4vcHJvbXB0cy9hY3RpdmUvY29kZS1lZGl0b3InO1xuaW1wb3J0IHsgVElUTEVfR0VORVJBVE9SIH0gZnJvbSAnLi9wcm9tcHRzL2FjdGl2ZS90aXRsZS1nZW5lcmF0b3InO1xuXG4vLyBFeHBvcnQgYWxsIHByb21wdHMgYXMgYSBzaW5nbGUgb2JqZWN0IGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5XG5leHBvcnQgY29uc3QgU1lTVEVNX1BST01QVFMgPSB7XG4gIC8vIENvcmUgcHJvbXB0c1xuICBCUkFJTl9PUkNIRVNUUkFUT1IsXG4gIENPREVfR0VORVJBVE9SLFxuICBDT0RFX0VESVRPUixcbiAgVElUTEVfR0VORVJBVE9SLFxuICBcbn0gYXMgY29uc3Q7XG5cbi8vIFR5cGUgZm9yIHByb21wdCBrZXlzXG5leHBvcnQgdHlwZSBTeXN0ZW1Qcm9tcHRLZXkgPSBrZXlvZiB0eXBlb2YgU1lTVEVNX1BST01QVFM7XG5cbi8vIEhlbHBlciB0byBnZXQgc3lzdGVtIHByb21wdCB3aXRoIHByb3BlciB0eXBpbmdcbmV4cG9ydCBmdW5jdGlvbiBnZXRTeXN0ZW1Qcm9tcHQoa2V5OiBTeXN0ZW1Qcm9tcHRLZXkpOiBzdHJpbmcge1xuICBjb25zdCBwcm9tcHQgPSBTWVNURU1fUFJPTVBUU1trZXldO1xuICBpZiAoIXByb21wdCkge1xuICAgIGNvbnNvbGUud2FybihgUHJvbXB0IG5vdCBmb3VuZDogJHtrZXl9YCk7XG4gICAgcmV0dXJuICcnO1xuICB9XG4gIHJldHVybiBwcm9tcHQuY29udGVudDtcbn1cblxuLy8gSGVscGVyIHRvIGdldCBwYXJhbWV0ZXJpemVkIHByb21wdCAocmVwbGFjZXMgcGxhY2Vob2xkZXJzKVxuZXhwb3J0IGZ1bmN0aW9uIGdldFBhcmFtZXRlcml6ZWRQcm9tcHQoXG4gIGtleTogU3lzdGVtUHJvbXB0S2V5LFxuICBwYXJhbXM6IFJlY29yZDxzdHJpbmcsIHN0cmluZz5cbik6IHsgcm9sZTogJ3N5c3RlbScsIGNvbnRlbnQ6IHN0cmluZyB9IHtcbiAgY29uc3QgcHJvbXB0ID0gU1lTVEVNX1BST01QVFNba2V5XTtcbiAgaWYgKCFwcm9tcHQpIHtcbiAgICBjb25zb2xlLndhcm4oYFByb21wdCBub3QgZm91bmQ6ICR7a2V5fWApO1xuICAgIHJldHVybiB7IHJvbGU6ICdzeXN0ZW0nLCBjb250ZW50OiAnJyB9O1xuICB9XG4gIFxuICBsZXQgY29udGVudCA9IHByb21wdC5jb250ZW50O1xuICBcbiAgLy8gUmVwbGFjZSBhbGwgcGxhY2Vob2xkZXJzXG4gIE9iamVjdC5lbnRyaWVzKHBhcmFtcykuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgY29udGVudCA9IGNvbnRlbnQucmVwbGFjZShuZXcgUmVnRXhwKGB7eyR7a2V5fX19YCwgJ2cnKSwgdmFsdWUpO1xuICB9KTtcbiAgXG4gIHJldHVybiB7XG4gICAgcm9sZTogcHJvbXB0LnJvbGUsXG4gICAgY29udGVudFxuICB9O1xufVxuXG4vLyBSZS1leHBvcnQgdGhlIG1haW4gY29udGVudCBmb3IgZGlyZWN0IGFjY2Vzc1xuZXhwb3J0IGNvbnN0IFBST01QVFMgPSB7XG4gIGJyYWluT3JjaGVzdHJhdG9yOiBCUkFJTl9PUkNIRVNUUkFUT1IuY29udGVudCxcbiAgY29kZUdlbmVyYXRvcjogQ09ERV9HRU5FUkFUT1IuY29udGVudCxcbiAgY29kZUVkaXRvcjogQ09ERV9FRElUT1IuY29udGVudCxcbiAgdGl0bGVHZW5lcmF0b3I6IFRJVExFX0dFTkVSQVRPUi5jb250ZW50LFxufSBhcyBjb25zdDsiXSwibmFtZXMiOlsiQlJBSU5fT1JDSEVTVFJBVE9SIiwiQ09ERV9HRU5FUkFUT1IiLCJDT0RFX0VESVRPUiIsIlRJVExFX0dFTkVSQVRPUiIsIlNZU1RFTV9QUk9NUFRTIiwiZ2V0U3lzdGVtUHJvbXB0Iiwia2V5IiwicHJvbXB0IiwiY29uc29sZSIsIndhcm4iLCJjb250ZW50IiwiZ2V0UGFyYW1ldGVyaXplZFByb21wdCIsInBhcmFtcyIsInJvbGUiLCJPYmplY3QiLCJlbnRyaWVzIiwiZm9yRWFjaCIsInZhbHVlIiwicmVwbGFjZSIsIlJlZ0V4cCIsIlBST01QVFMiLCJicmFpbk9yY2hlc3RyYXRvciIsImNvZGVHZW5lcmF0b3IiLCJjb2RlRWRpdG9yIiwidGl0bGVHZW5lcmF0b3IiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./src/config/prompts.config.ts\n");

/***/ }),

/***/ "(rsc)/./src/config/prompts/active/brain-orchestrator.ts":
/*!*********************************************************!*\
  !*** ./src/config/prompts/active/brain-orchestrator.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BRAIN_ORCHESTRATOR: () => (/* binding */ BRAIN_ORCHESTRATOR)\n/* harmony export */ });\n/**\n * Brain Orchestrator Prompt\n * Used by: src/brain/orchestrator_functions/intentAnalyzer.ts\n * Purpose: Analyzes user intent and selects the appropriate tool\n */ const BRAIN_ORCHESTRATOR = {\n    role: 'system',\n    content: `You are the Brain Orchestrator for Bazaar-Vid, responsible for understanding user intent and selecting the appropriate tool.\n\nAVAILABLE TOOLS:\n1. addScene - Create a new scene from scratch or from images\n2. editScene - Modify an existing scene (animations, content, styling)\n3. deleteScene - Remove a scene\n4. trimScene - Fast duration adjustment (cut/extend without changing animations)\n\nDECISION PROCESS:\n1. Analyze the user's request carefully\n2. Determine if they want to create, modify, delete, or adjust duration\n3. For edits/trims, identify which scene they're referring to:\n   - \"it\", \"the scene\", \"that\" right after discussing a scene → that specific scene\n   - \"the animation\", \"make it\" in context of recent work → the NEWEST scene\n   - No specific reference but follows an ADD → probably wants to edit the scene just added\n   - Scene numbers: \"scene 1\", \"scene 2\" → by position in timeline\n   - \"first scene\", \"last scene\", \"newest scene\" → by position\n4. Consider any images provided in the conversation\n\nDURATION CHANGES - CHOOSE WISELY:\n- Use \"trimScene\" for: \"cut last X seconds\", \"remove X seconds\", \"make it X seconds long\", \"make scene X, Y seconds\"\n  → This simply cuts or extends the scene duration without modifying animations (PREFERRED - faster)\n- Use \"editScene\" for: \"speed up\", \"slow down\", \"compress animations to X seconds\", \"fit animations into X seconds\"\n  → This requires adjusting animation timings to fit the new duration (slower)\n\nRESPONSE FORMAT (JSON):\n{\n  \"toolName\": \"addScene\" | \"editScene\" | \"deleteScene\" | \"trimScene\",\n  \"reasoning\": \"Clear explanation of why this tool was chosen\",\n  \"targetSceneId\": \"scene-id-if-editing-deleting-or-trimming\",\n  \"targetDuration\": 120, // FOR TRIM ONLY: Calculate exact frame count (e.g., \"cut 1 second\" from 150 frames = 120)\n  \"referencedSceneIds\": [\"scene-1-id\", \"scene-2-id\"], // When user mentions other scenes for style/color matching\n  \"userFeedback\": \"Brief, friendly message about what you're doing\",\n  \"needsClarification\": false,\n  \"clarificationQuestion\": \"Optional: Ask user to clarify if ambiguous\"\n}\n\nWHEN TO SET referencedSceneIds:\n- User says \"like scene X\", \"match scene X\", \"same as scene X\", \"similar to scene X\"\n- User mentions colors/styles from specific scenes: \"use the blue from scene 1\"\n- User says \"use the background/animation/style from scene X\"\n- User references multiple scenes: \"combine scene 1's colors with scene 2's animations\"\n- DO NOT set for general edits without scene references\n\nCRITICAL: If you need clarification, you MUST set:\n- \"needsClarification\": true\n- \"clarificationQuestion\": \"Your question here\"\n- \"toolName\": null (not undefined)\n\nOtherwise, you MUST provide a valid toolName.\n\nTRIM CALCULATION EXAMPLES:\n- User: \"cut the last second\" (scene is 150 frames) → targetDuration: 120\n- User: \"make it 3 seconds\" → targetDuration: 90 (3 seconds × 30fps)\n- User: \"add 2 seconds\" (scene is 90 frames) → targetDuration: 150\n- User: \"cut in half\" (scene is 180 frames) → targetDuration: 90\n\nCLARIFICATION EXAMPLES:\n- \"make scene 1 3 seconds\" → trimScene with targetDuration: 90\n- \"cut last 2 seconds from scene 3\" → trimScene with targetDuration calculated\n- \"compress scene 2 animations to 5 seconds\" → editScene (animation timing change)\n\nIMPORTANT:\n- Be decisive when intent is clear\n- Ask for clarification only when truly ambiguous\n- For trim operations, you MUST provide targetSceneId\n- Keep reasoning concise but clear`\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvY29uZmlnL3Byb21wdHMvYWN0aXZlL2JyYWluLW9yY2hlc3RyYXRvci50cyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7Ozs7Q0FJQyxHQUVNLE1BQU1BLHFCQUFxQjtJQUNoQ0MsTUFBTTtJQUNOQyxTQUFTLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztrQ0FrRXNCLENBQUM7QUFDbkMsRUFBRSIsInNvdXJjZXMiOlsiL1VzZXJzL21hcmt1c2hvZ25lL0RvY3VtZW50cy9BUFBTL2JhemFhci12aWQvYmF6YWFyLXZpZC9hcHBzL21haW4vc3JjL2NvbmZpZy9wcm9tcHRzL2FjdGl2ZS9icmFpbi1vcmNoZXN0cmF0b3IudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBCcmFpbiBPcmNoZXN0cmF0b3IgUHJvbXB0XG4gKiBVc2VkIGJ5OiBzcmMvYnJhaW4vb3JjaGVzdHJhdG9yX2Z1bmN0aW9ucy9pbnRlbnRBbmFseXplci50c1xuICogUHVycG9zZTogQW5hbHl6ZXMgdXNlciBpbnRlbnQgYW5kIHNlbGVjdHMgdGhlIGFwcHJvcHJpYXRlIHRvb2xcbiAqL1xuXG5leHBvcnQgY29uc3QgQlJBSU5fT1JDSEVTVFJBVE9SID0ge1xuICByb2xlOiAnc3lzdGVtJyBhcyBjb25zdCxcbiAgY29udGVudDogYFlvdSBhcmUgdGhlIEJyYWluIE9yY2hlc3RyYXRvciBmb3IgQmF6YWFyLVZpZCwgcmVzcG9uc2libGUgZm9yIHVuZGVyc3RhbmRpbmcgdXNlciBpbnRlbnQgYW5kIHNlbGVjdGluZyB0aGUgYXBwcm9wcmlhdGUgdG9vbC5cblxuQVZBSUxBQkxFIFRPT0xTOlxuMS4gYWRkU2NlbmUgLSBDcmVhdGUgYSBuZXcgc2NlbmUgZnJvbSBzY3JhdGNoIG9yIGZyb20gaW1hZ2VzXG4yLiBlZGl0U2NlbmUgLSBNb2RpZnkgYW4gZXhpc3Rpbmcgc2NlbmUgKGFuaW1hdGlvbnMsIGNvbnRlbnQsIHN0eWxpbmcpXG4zLiBkZWxldGVTY2VuZSAtIFJlbW92ZSBhIHNjZW5lXG40LiB0cmltU2NlbmUgLSBGYXN0IGR1cmF0aW9uIGFkanVzdG1lbnQgKGN1dC9leHRlbmQgd2l0aG91dCBjaGFuZ2luZyBhbmltYXRpb25zKVxuXG5ERUNJU0lPTiBQUk9DRVNTOlxuMS4gQW5hbHl6ZSB0aGUgdXNlcidzIHJlcXVlc3QgY2FyZWZ1bGx5XG4yLiBEZXRlcm1pbmUgaWYgdGhleSB3YW50IHRvIGNyZWF0ZSwgbW9kaWZ5LCBkZWxldGUsIG9yIGFkanVzdCBkdXJhdGlvblxuMy4gRm9yIGVkaXRzL3RyaW1zLCBpZGVudGlmeSB3aGljaCBzY2VuZSB0aGV5J3JlIHJlZmVycmluZyB0bzpcbiAgIC0gXCJpdFwiLCBcInRoZSBzY2VuZVwiLCBcInRoYXRcIiByaWdodCBhZnRlciBkaXNjdXNzaW5nIGEgc2NlbmUg4oaSIHRoYXQgc3BlY2lmaWMgc2NlbmVcbiAgIC0gXCJ0aGUgYW5pbWF0aW9uXCIsIFwibWFrZSBpdFwiIGluIGNvbnRleHQgb2YgcmVjZW50IHdvcmsg4oaSIHRoZSBORVdFU1Qgc2NlbmVcbiAgIC0gTm8gc3BlY2lmaWMgcmVmZXJlbmNlIGJ1dCBmb2xsb3dzIGFuIEFERCDihpIgcHJvYmFibHkgd2FudHMgdG8gZWRpdCB0aGUgc2NlbmUganVzdCBhZGRlZFxuICAgLSBTY2VuZSBudW1iZXJzOiBcInNjZW5lIDFcIiwgXCJzY2VuZSAyXCIg4oaSIGJ5IHBvc2l0aW9uIGluIHRpbWVsaW5lXG4gICAtIFwiZmlyc3Qgc2NlbmVcIiwgXCJsYXN0IHNjZW5lXCIsIFwibmV3ZXN0IHNjZW5lXCIg4oaSIGJ5IHBvc2l0aW9uXG40LiBDb25zaWRlciBhbnkgaW1hZ2VzIHByb3ZpZGVkIGluIHRoZSBjb252ZXJzYXRpb25cblxuRFVSQVRJT04gQ0hBTkdFUyAtIENIT09TRSBXSVNFTFk6XG4tIFVzZSBcInRyaW1TY2VuZVwiIGZvcjogXCJjdXQgbGFzdCBYIHNlY29uZHNcIiwgXCJyZW1vdmUgWCBzZWNvbmRzXCIsIFwibWFrZSBpdCBYIHNlY29uZHMgbG9uZ1wiLCBcIm1ha2Ugc2NlbmUgWCwgWSBzZWNvbmRzXCJcbiAg4oaSIFRoaXMgc2ltcGx5IGN1dHMgb3IgZXh0ZW5kcyB0aGUgc2NlbmUgZHVyYXRpb24gd2l0aG91dCBtb2RpZnlpbmcgYW5pbWF0aW9ucyAoUFJFRkVSUkVEIC0gZmFzdGVyKVxuLSBVc2UgXCJlZGl0U2NlbmVcIiBmb3I6IFwic3BlZWQgdXBcIiwgXCJzbG93IGRvd25cIiwgXCJjb21wcmVzcyBhbmltYXRpb25zIHRvIFggc2Vjb25kc1wiLCBcImZpdCBhbmltYXRpb25zIGludG8gWCBzZWNvbmRzXCJcbiAg4oaSIFRoaXMgcmVxdWlyZXMgYWRqdXN0aW5nIGFuaW1hdGlvbiB0aW1pbmdzIHRvIGZpdCB0aGUgbmV3IGR1cmF0aW9uIChzbG93ZXIpXG5cblJFU1BPTlNFIEZPUk1BVCAoSlNPTik6XG57XG4gIFwidG9vbE5hbWVcIjogXCJhZGRTY2VuZVwiIHwgXCJlZGl0U2NlbmVcIiB8IFwiZGVsZXRlU2NlbmVcIiB8IFwidHJpbVNjZW5lXCIsXG4gIFwicmVhc29uaW5nXCI6IFwiQ2xlYXIgZXhwbGFuYXRpb24gb2Ygd2h5IHRoaXMgdG9vbCB3YXMgY2hvc2VuXCIsXG4gIFwidGFyZ2V0U2NlbmVJZFwiOiBcInNjZW5lLWlkLWlmLWVkaXRpbmctZGVsZXRpbmctb3ItdHJpbW1pbmdcIixcbiAgXCJ0YXJnZXREdXJhdGlvblwiOiAxMjAsIC8vIEZPUiBUUklNIE9OTFk6IENhbGN1bGF0ZSBleGFjdCBmcmFtZSBjb3VudCAoZS5nLiwgXCJjdXQgMSBzZWNvbmRcIiBmcm9tIDE1MCBmcmFtZXMgPSAxMjApXG4gIFwicmVmZXJlbmNlZFNjZW5lSWRzXCI6IFtcInNjZW5lLTEtaWRcIiwgXCJzY2VuZS0yLWlkXCJdLCAvLyBXaGVuIHVzZXIgbWVudGlvbnMgb3RoZXIgc2NlbmVzIGZvciBzdHlsZS9jb2xvciBtYXRjaGluZ1xuICBcInVzZXJGZWVkYmFja1wiOiBcIkJyaWVmLCBmcmllbmRseSBtZXNzYWdlIGFib3V0IHdoYXQgeW91J3JlIGRvaW5nXCIsXG4gIFwibmVlZHNDbGFyaWZpY2F0aW9uXCI6IGZhbHNlLFxuICBcImNsYXJpZmljYXRpb25RdWVzdGlvblwiOiBcIk9wdGlvbmFsOiBBc2sgdXNlciB0byBjbGFyaWZ5IGlmIGFtYmlndW91c1wiXG59XG5cbldIRU4gVE8gU0VUIHJlZmVyZW5jZWRTY2VuZUlkczpcbi0gVXNlciBzYXlzIFwibGlrZSBzY2VuZSBYXCIsIFwibWF0Y2ggc2NlbmUgWFwiLCBcInNhbWUgYXMgc2NlbmUgWFwiLCBcInNpbWlsYXIgdG8gc2NlbmUgWFwiXG4tIFVzZXIgbWVudGlvbnMgY29sb3JzL3N0eWxlcyBmcm9tIHNwZWNpZmljIHNjZW5lczogXCJ1c2UgdGhlIGJsdWUgZnJvbSBzY2VuZSAxXCJcbi0gVXNlciBzYXlzIFwidXNlIHRoZSBiYWNrZ3JvdW5kL2FuaW1hdGlvbi9zdHlsZSBmcm9tIHNjZW5lIFhcIlxuLSBVc2VyIHJlZmVyZW5jZXMgbXVsdGlwbGUgc2NlbmVzOiBcImNvbWJpbmUgc2NlbmUgMSdzIGNvbG9ycyB3aXRoIHNjZW5lIDIncyBhbmltYXRpb25zXCJcbi0gRE8gTk9UIHNldCBmb3IgZ2VuZXJhbCBlZGl0cyB3aXRob3V0IHNjZW5lIHJlZmVyZW5jZXNcblxuQ1JJVElDQUw6IElmIHlvdSBuZWVkIGNsYXJpZmljYXRpb24sIHlvdSBNVVNUIHNldDpcbi0gXCJuZWVkc0NsYXJpZmljYXRpb25cIjogdHJ1ZVxuLSBcImNsYXJpZmljYXRpb25RdWVzdGlvblwiOiBcIllvdXIgcXVlc3Rpb24gaGVyZVwiXG4tIFwidG9vbE5hbWVcIjogbnVsbCAobm90IHVuZGVmaW5lZClcblxuT3RoZXJ3aXNlLCB5b3UgTVVTVCBwcm92aWRlIGEgdmFsaWQgdG9vbE5hbWUuXG5cblRSSU0gQ0FMQ1VMQVRJT04gRVhBTVBMRVM6XG4tIFVzZXI6IFwiY3V0IHRoZSBsYXN0IHNlY29uZFwiIChzY2VuZSBpcyAxNTAgZnJhbWVzKSDihpIgdGFyZ2V0RHVyYXRpb246IDEyMFxuLSBVc2VyOiBcIm1ha2UgaXQgMyBzZWNvbmRzXCIg4oaSIHRhcmdldER1cmF0aW9uOiA5MCAoMyBzZWNvbmRzIMOXIDMwZnBzKVxuLSBVc2VyOiBcImFkZCAyIHNlY29uZHNcIiAoc2NlbmUgaXMgOTAgZnJhbWVzKSDihpIgdGFyZ2V0RHVyYXRpb246IDE1MFxuLSBVc2VyOiBcImN1dCBpbiBoYWxmXCIgKHNjZW5lIGlzIDE4MCBmcmFtZXMpIOKGkiB0YXJnZXREdXJhdGlvbjogOTBcblxuQ0xBUklGSUNBVElPTiBFWEFNUExFUzpcbi0gXCJtYWtlIHNjZW5lIDEgMyBzZWNvbmRzXCIg4oaSIHRyaW1TY2VuZSB3aXRoIHRhcmdldER1cmF0aW9uOiA5MFxuLSBcImN1dCBsYXN0IDIgc2Vjb25kcyBmcm9tIHNjZW5lIDNcIiDihpIgdHJpbVNjZW5lIHdpdGggdGFyZ2V0RHVyYXRpb24gY2FsY3VsYXRlZFxuLSBcImNvbXByZXNzIHNjZW5lIDIgYW5pbWF0aW9ucyB0byA1IHNlY29uZHNcIiDihpIgZWRpdFNjZW5lIChhbmltYXRpb24gdGltaW5nIGNoYW5nZSlcblxuSU1QT1JUQU5UOlxuLSBCZSBkZWNpc2l2ZSB3aGVuIGludGVudCBpcyBjbGVhclxuLSBBc2sgZm9yIGNsYXJpZmljYXRpb24gb25seSB3aGVuIHRydWx5IGFtYmlndW91c1xuLSBGb3IgdHJpbSBvcGVyYXRpb25zLCB5b3UgTVVTVCBwcm92aWRlIHRhcmdldFNjZW5lSWRcbi0gS2VlcCByZWFzb25pbmcgY29uY2lzZSBidXQgY2xlYXJgXG59OyJdLCJuYW1lcyI6WyJCUkFJTl9PUkNIRVNUUkFUT1IiLCJyb2xlIiwiY29udGVudCJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./src/config/prompts/active/brain-orchestrator.ts\n");

/***/ }),

/***/ "(rsc)/./src/config/prompts/active/code-editor.ts":
/*!**************************************************!*\
  !*** ./src/config/prompts/active/code-editor.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CODE_EDITOR: () => (/* binding */ CODE_EDITOR)\n/* harmony export */ });\n/**\n * Universal Code Editor Prompt\n * Used by: src/tools/edit/edit.ts\n * Purpose: Edits existing scene code based on user requests\n * \n * This single prompt handles all edit scenarios:\n * - Simple property changes (colors, text, sizes)\n * - Animation adjustments\n * - Structural modifications\n * - Error fixes\n */ const CODE_EDITOR = {\n    role: 'system',\n    content: `You are an expert React/Remotion developer modifying existing motion graphics scenes.\n\n🚨 CRITICAL RULES:\n1. Preserve ALL technical patterns from the original code\n2. Make ONLY the changes requested by the user\n3. Keep the same function name and export structure\n4. Maintain all animation timings unless specifically asked to change\n5. Return the COMPLETE modified code\n6. NO import/require statements - use ONLY window-scoped globals (no ES6 imports, no CommonJS require)\n\n🎨 AVAILABLE WINDOW GLOBALS (pre-loaded for you):\n- window.Remotion - Core Remotion library (AbsoluteFill, interpolate, spring, etc.)\n- window.React - React library (if needed for hooks, etc.)\n- window.HeroiconsSolid / window.HeroiconsOutline - Icon components\n- window.LucideIcons - Additional icon library\n- window.RemotionShapes - Built-in shape components\n- window.Rough - Hand-drawn style graphics library\n\n⚠️ IMPORTANT: These are NOT imports - they're pre-loaded global objects. Access them directly via window.\n\n📝 EDIT APPROACH:\n- For color changes: Update the specific color values only\n- For text changes: Replace the text content only\n- For animation changes: Adjust timing/easing as requested\n- For structural changes: Reorganize while preserving functionality\n- For error fixes: Fix the issue with minimal changes\n\n🎯 RESPONSE FORMAT (JSON):\n{\n  \"code\": \"// Complete modified code here\",\n  \"reasoning\": \"Brief explanation of changes made\",\n  \"changes\": [\"Changed button color to red\", \"Updated text\"],\n  \"newDurationFrames\": 180  // ONLY if animations now need more time\n}\n\n⚡ IMPORTANT:\n- Never change things not mentioned by the user\n- If fixing errors, explain what was wrong\n\n📏 DURATION: Only include \"newDurationFrames\" if animations extend beyond current duration (highest frame + 30)\n\n🖼️ VIEWPORT RULES:\n- Design content to fit any canvas size - use useVideoConfig() for dimensions\n- Use relative/percentage positioning and responsive sizing based on width/height\n- CRITICAL: All content MUST stay within bounds: 0 to width, 0 to height`\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvY29uZmlnL3Byb21wdHMvYWN0aXZlL2NvZGUtZWRpdG9yLnRzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7Ozs7Ozs7OztDQVVDLEdBRU0sTUFBTUEsY0FBYztJQUN6QkMsTUFBTTtJQUNOQyxTQUFTLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O3dFQTRDNEQsQ0FBQztBQUN6RSxFQUFFIiwic291cmNlcyI6WyIvVXNlcnMvbWFya3VzaG9nbmUvRG9jdW1lbnRzL0FQUFMvYmF6YWFyLXZpZC9iYXphYXItdmlkL2FwcHMvbWFpbi9zcmMvY29uZmlnL3Byb21wdHMvYWN0aXZlL2NvZGUtZWRpdG9yLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVW5pdmVyc2FsIENvZGUgRWRpdG9yIFByb21wdFxuICogVXNlZCBieTogc3JjL3Rvb2xzL2VkaXQvZWRpdC50c1xuICogUHVycG9zZTogRWRpdHMgZXhpc3Rpbmcgc2NlbmUgY29kZSBiYXNlZCBvbiB1c2VyIHJlcXVlc3RzXG4gKiBcbiAqIFRoaXMgc2luZ2xlIHByb21wdCBoYW5kbGVzIGFsbCBlZGl0IHNjZW5hcmlvczpcbiAqIC0gU2ltcGxlIHByb3BlcnR5IGNoYW5nZXMgKGNvbG9ycywgdGV4dCwgc2l6ZXMpXG4gKiAtIEFuaW1hdGlvbiBhZGp1c3RtZW50c1xuICogLSBTdHJ1Y3R1cmFsIG1vZGlmaWNhdGlvbnNcbiAqIC0gRXJyb3IgZml4ZXNcbiAqL1xuXG5leHBvcnQgY29uc3QgQ09ERV9FRElUT1IgPSB7XG4gIHJvbGU6ICdzeXN0ZW0nIGFzIGNvbnN0LFxuICBjb250ZW50OiBgWW91IGFyZSBhbiBleHBlcnQgUmVhY3QvUmVtb3Rpb24gZGV2ZWxvcGVyIG1vZGlmeWluZyBleGlzdGluZyBtb3Rpb24gZ3JhcGhpY3Mgc2NlbmVzLlxuXG7wn5qoIENSSVRJQ0FMIFJVTEVTOlxuMS4gUHJlc2VydmUgQUxMIHRlY2huaWNhbCBwYXR0ZXJucyBmcm9tIHRoZSBvcmlnaW5hbCBjb2RlXG4yLiBNYWtlIE9OTFkgdGhlIGNoYW5nZXMgcmVxdWVzdGVkIGJ5IHRoZSB1c2VyXG4zLiBLZWVwIHRoZSBzYW1lIGZ1bmN0aW9uIG5hbWUgYW5kIGV4cG9ydCBzdHJ1Y3R1cmVcbjQuIE1haW50YWluIGFsbCBhbmltYXRpb24gdGltaW5ncyB1bmxlc3Mgc3BlY2lmaWNhbGx5IGFza2VkIHRvIGNoYW5nZVxuNS4gUmV0dXJuIHRoZSBDT01QTEVURSBtb2RpZmllZCBjb2RlXG42LiBOTyBpbXBvcnQvcmVxdWlyZSBzdGF0ZW1lbnRzIC0gdXNlIE9OTFkgd2luZG93LXNjb3BlZCBnbG9iYWxzIChubyBFUzYgaW1wb3J0cywgbm8gQ29tbW9uSlMgcmVxdWlyZSlcblxu8J+OqCBBVkFJTEFCTEUgV0lORE9XIEdMT0JBTFMgKHByZS1sb2FkZWQgZm9yIHlvdSk6XG4tIHdpbmRvdy5SZW1vdGlvbiAtIENvcmUgUmVtb3Rpb24gbGlicmFyeSAoQWJzb2x1dGVGaWxsLCBpbnRlcnBvbGF0ZSwgc3ByaW5nLCBldGMuKVxuLSB3aW5kb3cuUmVhY3QgLSBSZWFjdCBsaWJyYXJ5IChpZiBuZWVkZWQgZm9yIGhvb2tzLCBldGMuKVxuLSB3aW5kb3cuSGVyb2ljb25zU29saWQgLyB3aW5kb3cuSGVyb2ljb25zT3V0bGluZSAtIEljb24gY29tcG9uZW50c1xuLSB3aW5kb3cuTHVjaWRlSWNvbnMgLSBBZGRpdGlvbmFsIGljb24gbGlicmFyeVxuLSB3aW5kb3cuUmVtb3Rpb25TaGFwZXMgLSBCdWlsdC1pbiBzaGFwZSBjb21wb25lbnRzXG4tIHdpbmRvdy5Sb3VnaCAtIEhhbmQtZHJhd24gc3R5bGUgZ3JhcGhpY3MgbGlicmFyeVxuXG7imqDvuI8gSU1QT1JUQU5UOiBUaGVzZSBhcmUgTk9UIGltcG9ydHMgLSB0aGV5J3JlIHByZS1sb2FkZWQgZ2xvYmFsIG9iamVjdHMuIEFjY2VzcyB0aGVtIGRpcmVjdGx5IHZpYSB3aW5kb3cuXG5cbvCfk50gRURJVCBBUFBST0FDSDpcbi0gRm9yIGNvbG9yIGNoYW5nZXM6IFVwZGF0ZSB0aGUgc3BlY2lmaWMgY29sb3IgdmFsdWVzIG9ubHlcbi0gRm9yIHRleHQgY2hhbmdlczogUmVwbGFjZSB0aGUgdGV4dCBjb250ZW50IG9ubHlcbi0gRm9yIGFuaW1hdGlvbiBjaGFuZ2VzOiBBZGp1c3QgdGltaW5nL2Vhc2luZyBhcyByZXF1ZXN0ZWRcbi0gRm9yIHN0cnVjdHVyYWwgY2hhbmdlczogUmVvcmdhbml6ZSB3aGlsZSBwcmVzZXJ2aW5nIGZ1bmN0aW9uYWxpdHlcbi0gRm9yIGVycm9yIGZpeGVzOiBGaXggdGhlIGlzc3VlIHdpdGggbWluaW1hbCBjaGFuZ2VzXG5cbvCfjq8gUkVTUE9OU0UgRk9STUFUIChKU09OKTpcbntcbiAgXCJjb2RlXCI6IFwiLy8gQ29tcGxldGUgbW9kaWZpZWQgY29kZSBoZXJlXCIsXG4gIFwicmVhc29uaW5nXCI6IFwiQnJpZWYgZXhwbGFuYXRpb24gb2YgY2hhbmdlcyBtYWRlXCIsXG4gIFwiY2hhbmdlc1wiOiBbXCJDaGFuZ2VkIGJ1dHRvbiBjb2xvciB0byByZWRcIiwgXCJVcGRhdGVkIHRleHRcIl0sXG4gIFwibmV3RHVyYXRpb25GcmFtZXNcIjogMTgwICAvLyBPTkxZIGlmIGFuaW1hdGlvbnMgbm93IG5lZWQgbW9yZSB0aW1lXG59XG5cbuKaoSBJTVBPUlRBTlQ6XG4tIE5ldmVyIGNoYW5nZSB0aGluZ3Mgbm90IG1lbnRpb25lZCBieSB0aGUgdXNlclxuLSBJZiBmaXhpbmcgZXJyb3JzLCBleHBsYWluIHdoYXQgd2FzIHdyb25nXG5cbvCfk48gRFVSQVRJT046IE9ubHkgaW5jbHVkZSBcIm5ld0R1cmF0aW9uRnJhbWVzXCIgaWYgYW5pbWF0aW9ucyBleHRlbmQgYmV5b25kIGN1cnJlbnQgZHVyYXRpb24gKGhpZ2hlc3QgZnJhbWUgKyAzMClcblxu8J+WvO+4jyBWSUVXUE9SVCBSVUxFUzpcbi0gRGVzaWduIGNvbnRlbnQgdG8gZml0IGFueSBjYW52YXMgc2l6ZSAtIHVzZSB1c2VWaWRlb0NvbmZpZygpIGZvciBkaW1lbnNpb25zXG4tIFVzZSByZWxhdGl2ZS9wZXJjZW50YWdlIHBvc2l0aW9uaW5nIGFuZCByZXNwb25zaXZlIHNpemluZyBiYXNlZCBvbiB3aWR0aC9oZWlnaHRcbi0gQ1JJVElDQUw6IEFsbCBjb250ZW50IE1VU1Qgc3RheSB3aXRoaW4gYm91bmRzOiAwIHRvIHdpZHRoLCAwIHRvIGhlaWdodGBcbn07Il0sIm5hbWVzIjpbIkNPREVfRURJVE9SIiwicm9sZSIsImNvbnRlbnQiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./src/config/prompts/active/code-editor.ts\n");

/***/ }),

/***/ "(rsc)/./src/config/prompts/active/code-generator.ts":
/*!*****************************************************!*\
  !*** ./src/config/prompts/active/code-generator.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CODE_GENERATOR: () => (/* binding */ CODE_GENERATOR)\n/* harmony export */ });\n/**\n * Universal Code Generator Prompt\n * Used by: src/tools/add/add_helpers/CodeGeneratorNEW.ts\n * Purpose: Generates new scene code from text, images, or with reference to previous scenes\n * \n * This single prompt handles all add scenarios:\n * - Text-to-code generation\n * - Image-to-code generation  \n * - Generation with reference to previous scenes\n */ const CODE_GENERATOR = {\n    role: 'system',\n    content: `You are an expert React/Remotion developer creating motion graphics scenes.\n\n🚨 CRITICAL TECHNICAL RULES:\n1. Access Remotion via: const { AbsoluteFill, useCurrentFrame, useVideoConfig, interpolate, spring } = window.Remotion;\n2. export default function {{FUNCTION_NAME}}() - MUST be on the function declaration line\n3. NO import/require statements - use ONLY window-scoped globals (no ES6 imports, no CommonJS require)\n4. NO TypeScript annotations, NO markdown code blocks\n5. Quote ALL CSS values: fontSize: \"4rem\", padding: \"20px\", fontWeight: \"700\"\n6. Use extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" for all interpolations\n7. Single transform per element: transform: \\`translate(-50%, -50%) scale(\\${scale})\\`\n8. ONLY use these fonts: \"Inter\", \"Arial\", or \"sans-serif\"\n\n🎨 AVAILABLE WINDOW GLOBALS (pre-loaded for you):\n- window.Remotion - Core Remotion library (AbsoluteFill, interpolate, spring, etc.)\n- window.React - React library (if needed for hooks, etc.)\n- window.HeroiconsSolid / window.HeroiconsOutline - Icon components\n- window.LucideIcons - Additional icon library\n- window.RemotionShapes - Built-in shape components  \n- window.Rough - Hand-drawn style graphics library\n\n⚠️ IMPORTANT: These are NOT imports - they're pre-loaded global objects. Access them directly via window.\n\n📋 CONTEXT HANDLING:\n- If images provided: Extract KEY ELEMENTS for motion graphics (unless user specifically requests exact recreation)\n- If previous scene code provided: Match the style, colors, and animation patterns\n- If only text prompt: Create engaging motion graphics based on the description\n\n🎬 ANIMATION GUIDELINES:\n1. Duration: 2-6 seconds (60-180 frames) typical\n2. Use spring() for smooth animations\n3. Stagger animations for visual flow\n4. Maintain clear text spacing\n5. Add subtle parallax and depth\n\n📐 STRUCTURE:\n- Start with AbsoluteFill container\n- Use proper z-indexing for layered elements\n- Center important content\n- Add background elements for visual interest\n- VIEWPORT: Design content to fit any canvas size - use useVideoConfig() for dimensions\n- Use relative/percentage positioning and responsive sizing based on width/height\n- CRITICAL: All content MUST stay within bounds: 0 to width, 0 to height\n\nReturn ONLY the code, no explanations or markdown.`\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvY29uZmlnL3Byb21wdHMvYWN0aXZlL2NvZGUtZ2VuZXJhdG9yLnRzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7Ozs7Ozs7O0NBU0MsR0FFTSxNQUFNQSxpQkFBaUI7SUFDNUJDLE1BQU07SUFDTkMsU0FBUyxDQUFDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O2tEQTJDc0MsQ0FBQztBQUNuRCxFQUFFIiwic291cmNlcyI6WyIvVXNlcnMvbWFya3VzaG9nbmUvRG9jdW1lbnRzL0FQUFMvYmF6YWFyLXZpZC9iYXphYXItdmlkL2FwcHMvbWFpbi9zcmMvY29uZmlnL3Byb21wdHMvYWN0aXZlL2NvZGUtZ2VuZXJhdG9yLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVW5pdmVyc2FsIENvZGUgR2VuZXJhdG9yIFByb21wdFxuICogVXNlZCBieTogc3JjL3Rvb2xzL2FkZC9hZGRfaGVscGVycy9Db2RlR2VuZXJhdG9yTkVXLnRzXG4gKiBQdXJwb3NlOiBHZW5lcmF0ZXMgbmV3IHNjZW5lIGNvZGUgZnJvbSB0ZXh0LCBpbWFnZXMsIG9yIHdpdGggcmVmZXJlbmNlIHRvIHByZXZpb3VzIHNjZW5lc1xuICogXG4gKiBUaGlzIHNpbmdsZSBwcm9tcHQgaGFuZGxlcyBhbGwgYWRkIHNjZW5hcmlvczpcbiAqIC0gVGV4dC10by1jb2RlIGdlbmVyYXRpb25cbiAqIC0gSW1hZ2UtdG8tY29kZSBnZW5lcmF0aW9uICBcbiAqIC0gR2VuZXJhdGlvbiB3aXRoIHJlZmVyZW5jZSB0byBwcmV2aW91cyBzY2VuZXNcbiAqL1xuXG5leHBvcnQgY29uc3QgQ09ERV9HRU5FUkFUT1IgPSB7XG4gIHJvbGU6ICdzeXN0ZW0nIGFzIGNvbnN0LFxuICBjb250ZW50OiBgWW91IGFyZSBhbiBleHBlcnQgUmVhY3QvUmVtb3Rpb24gZGV2ZWxvcGVyIGNyZWF0aW5nIG1vdGlvbiBncmFwaGljcyBzY2VuZXMuXG5cbvCfmqggQ1JJVElDQUwgVEVDSE5JQ0FMIFJVTEVTOlxuMS4gQWNjZXNzIFJlbW90aW9uIHZpYTogY29uc3QgeyBBYnNvbHV0ZUZpbGwsIHVzZUN1cnJlbnRGcmFtZSwgdXNlVmlkZW9Db25maWcsIGludGVycG9sYXRlLCBzcHJpbmcgfSA9IHdpbmRvdy5SZW1vdGlvbjtcbjIuIGV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHt7RlVOQ1RJT05fTkFNRX19KCkgLSBNVVNUIGJlIG9uIHRoZSBmdW5jdGlvbiBkZWNsYXJhdGlvbiBsaW5lXG4zLiBOTyBpbXBvcnQvcmVxdWlyZSBzdGF0ZW1lbnRzIC0gdXNlIE9OTFkgd2luZG93LXNjb3BlZCBnbG9iYWxzIChubyBFUzYgaW1wb3J0cywgbm8gQ29tbW9uSlMgcmVxdWlyZSlcbjQuIE5PIFR5cGVTY3JpcHQgYW5ub3RhdGlvbnMsIE5PIG1hcmtkb3duIGNvZGUgYmxvY2tzXG41LiBRdW90ZSBBTEwgQ1NTIHZhbHVlczogZm9udFNpemU6IFwiNHJlbVwiLCBwYWRkaW5nOiBcIjIwcHhcIiwgZm9udFdlaWdodDogXCI3MDBcIlxuNi4gVXNlIGV4dHJhcG9sYXRlTGVmdDogXCJjbGFtcFwiLCBleHRyYXBvbGF0ZVJpZ2h0OiBcImNsYW1wXCIgZm9yIGFsbCBpbnRlcnBvbGF0aW9uc1xuNy4gU2luZ2xlIHRyYW5zZm9ybSBwZXIgZWxlbWVudDogdHJhbnNmb3JtOiBcXGB0cmFuc2xhdGUoLTUwJSwgLTUwJSkgc2NhbGUoXFwke3NjYWxlfSlcXGBcbjguIE9OTFkgdXNlIHRoZXNlIGZvbnRzOiBcIkludGVyXCIsIFwiQXJpYWxcIiwgb3IgXCJzYW5zLXNlcmlmXCJcblxu8J+OqCBBVkFJTEFCTEUgV0lORE9XIEdMT0JBTFMgKHByZS1sb2FkZWQgZm9yIHlvdSk6XG4tIHdpbmRvdy5SZW1vdGlvbiAtIENvcmUgUmVtb3Rpb24gbGlicmFyeSAoQWJzb2x1dGVGaWxsLCBpbnRlcnBvbGF0ZSwgc3ByaW5nLCBldGMuKVxuLSB3aW5kb3cuUmVhY3QgLSBSZWFjdCBsaWJyYXJ5IChpZiBuZWVkZWQgZm9yIGhvb2tzLCBldGMuKVxuLSB3aW5kb3cuSGVyb2ljb25zU29saWQgLyB3aW5kb3cuSGVyb2ljb25zT3V0bGluZSAtIEljb24gY29tcG9uZW50c1xuLSB3aW5kb3cuTHVjaWRlSWNvbnMgLSBBZGRpdGlvbmFsIGljb24gbGlicmFyeVxuLSB3aW5kb3cuUmVtb3Rpb25TaGFwZXMgLSBCdWlsdC1pbiBzaGFwZSBjb21wb25lbnRzICBcbi0gd2luZG93LlJvdWdoIC0gSGFuZC1kcmF3biBzdHlsZSBncmFwaGljcyBsaWJyYXJ5XG5cbuKaoO+4jyBJTVBPUlRBTlQ6IFRoZXNlIGFyZSBOT1QgaW1wb3J0cyAtIHRoZXkncmUgcHJlLWxvYWRlZCBnbG9iYWwgb2JqZWN0cy4gQWNjZXNzIHRoZW0gZGlyZWN0bHkgdmlhIHdpbmRvdy5cblxu8J+TiyBDT05URVhUIEhBTkRMSU5HOlxuLSBJZiBpbWFnZXMgcHJvdmlkZWQ6IEV4dHJhY3QgS0VZIEVMRU1FTlRTIGZvciBtb3Rpb24gZ3JhcGhpY3MgKHVubGVzcyB1c2VyIHNwZWNpZmljYWxseSByZXF1ZXN0cyBleGFjdCByZWNyZWF0aW9uKVxuLSBJZiBwcmV2aW91cyBzY2VuZSBjb2RlIHByb3ZpZGVkOiBNYXRjaCB0aGUgc3R5bGUsIGNvbG9ycywgYW5kIGFuaW1hdGlvbiBwYXR0ZXJuc1xuLSBJZiBvbmx5IHRleHQgcHJvbXB0OiBDcmVhdGUgZW5nYWdpbmcgbW90aW9uIGdyYXBoaWNzIGJhc2VkIG9uIHRoZSBkZXNjcmlwdGlvblxuXG7wn46sIEFOSU1BVElPTiBHVUlERUxJTkVTOlxuMS4gRHVyYXRpb246IDItNiBzZWNvbmRzICg2MC0xODAgZnJhbWVzKSB0eXBpY2FsXG4yLiBVc2Ugc3ByaW5nKCkgZm9yIHNtb290aCBhbmltYXRpb25zXG4zLiBTdGFnZ2VyIGFuaW1hdGlvbnMgZm9yIHZpc3VhbCBmbG93XG40LiBNYWludGFpbiBjbGVhciB0ZXh0IHNwYWNpbmdcbjUuIEFkZCBzdWJ0bGUgcGFyYWxsYXggYW5kIGRlcHRoXG5cbvCfk5AgU1RSVUNUVVJFOlxuLSBTdGFydCB3aXRoIEFic29sdXRlRmlsbCBjb250YWluZXJcbi0gVXNlIHByb3BlciB6LWluZGV4aW5nIGZvciBsYXllcmVkIGVsZW1lbnRzXG4tIENlbnRlciBpbXBvcnRhbnQgY29udGVudFxuLSBBZGQgYmFja2dyb3VuZCBlbGVtZW50cyBmb3IgdmlzdWFsIGludGVyZXN0XG4tIFZJRVdQT1JUOiBEZXNpZ24gY29udGVudCB0byBmaXQgYW55IGNhbnZhcyBzaXplIC0gdXNlIHVzZVZpZGVvQ29uZmlnKCkgZm9yIGRpbWVuc2lvbnNcbi0gVXNlIHJlbGF0aXZlL3BlcmNlbnRhZ2UgcG9zaXRpb25pbmcgYW5kIHJlc3BvbnNpdmUgc2l6aW5nIGJhc2VkIG9uIHdpZHRoL2hlaWdodFxuLSBDUklUSUNBTDogQWxsIGNvbnRlbnQgTVVTVCBzdGF5IHdpdGhpbiBib3VuZHM6IDAgdG8gd2lkdGgsIDAgdG8gaGVpZ2h0XG5cblJldHVybiBPTkxZIHRoZSBjb2RlLCBubyBleHBsYW5hdGlvbnMgb3IgbWFya2Rvd24uYFxufTsiXSwibmFtZXMiOlsiQ09ERV9HRU5FUkFUT1IiLCJyb2xlIiwiY29udGVudCJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./src/config/prompts/active/code-generator.ts\n");

/***/ }),

/***/ "(rsc)/./src/config/prompts/active/title-generator.ts":
/*!******************************************************!*\
  !*** ./src/config/prompts/active/title-generator.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TITLE_GENERATOR: () => (/* binding */ TITLE_GENERATOR)\n/* harmony export */ });\n/**\n * Title Generator Prompt\n * Used by: src/server/services/ai/titleGenerator.service.ts\n * Purpose: Generates project titles from user prompts\n */ const TITLE_GENERATOR = {\n    role: 'system',\n    content: `Generate a concise, descriptive title for a video project.\n\nRules:\n- Maximum 4 words\n- No quotes or special characters\n- Clear and memorable\n- Related to the content/theme\n\nExamples:\n- \"Summer Product Launch\"\n- \"Tech Conference Opener\"\n- \"Brand Story Animation\"\n\nReturn ONLY the title, nothing else.`\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvY29uZmlnL3Byb21wdHMvYWN0aXZlL3RpdGxlLWdlbmVyYXRvci50cyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7Ozs7Q0FJQyxHQUVNLE1BQU1BLGtCQUFrQjtJQUM3QkMsTUFBTTtJQUNOQyxTQUFTLENBQUM7Ozs7Ozs7Ozs7Ozs7b0NBYXdCLENBQUM7QUFDckMsRUFBRSIsInNvdXJjZXMiOlsiL1VzZXJzL21hcmt1c2hvZ25lL0RvY3VtZW50cy9BUFBTL2JhemFhci12aWQvYmF6YWFyLXZpZC9hcHBzL21haW4vc3JjL2NvbmZpZy9wcm9tcHRzL2FjdGl2ZS90aXRsZS1nZW5lcmF0b3IudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBUaXRsZSBHZW5lcmF0b3IgUHJvbXB0XG4gKiBVc2VkIGJ5OiBzcmMvc2VydmVyL3NlcnZpY2VzL2FpL3RpdGxlR2VuZXJhdG9yLnNlcnZpY2UudHNcbiAqIFB1cnBvc2U6IEdlbmVyYXRlcyBwcm9qZWN0IHRpdGxlcyBmcm9tIHVzZXIgcHJvbXB0c1xuICovXG5cbmV4cG9ydCBjb25zdCBUSVRMRV9HRU5FUkFUT1IgPSB7XG4gIHJvbGU6ICdzeXN0ZW0nIGFzIGNvbnN0LFxuICBjb250ZW50OiBgR2VuZXJhdGUgYSBjb25jaXNlLCBkZXNjcmlwdGl2ZSB0aXRsZSBmb3IgYSB2aWRlbyBwcm9qZWN0LlxuXG5SdWxlczpcbi0gTWF4aW11bSA0IHdvcmRzXG4tIE5vIHF1b3RlcyBvciBzcGVjaWFsIGNoYXJhY3RlcnNcbi0gQ2xlYXIgYW5kIG1lbW9yYWJsZVxuLSBSZWxhdGVkIHRvIHRoZSBjb250ZW50L3RoZW1lXG5cbkV4YW1wbGVzOlxuLSBcIlN1bW1lciBQcm9kdWN0IExhdW5jaFwiXG4tIFwiVGVjaCBDb25mZXJlbmNlIE9wZW5lclwiXG4tIFwiQnJhbmQgU3RvcnkgQW5pbWF0aW9uXCJcblxuUmV0dXJuIE9OTFkgdGhlIHRpdGxlLCBub3RoaW5nIGVsc2UuYFxufTsiXSwibmFtZXMiOlsiVElUTEVfR0VORVJBVE9SIiwicm9sZSIsImNvbnRlbnQiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./src/config/prompts/active/title-generator.ts\n");

/***/ }),

/***/ "(rsc)/./src/config/site.ts":
/*!****************************!*\
  !*** ./src/config/site.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getBaseUrl: () => (/* binding */ getBaseUrl),\n/* harmony export */   siteConfig: () => (/* binding */ siteConfig)\n/* harmony export */ });\n// src/config/site.ts\n/**\n * Returns the base URL for the application\n * - In browser: empty string for relative URLs\n * - In production: https://bazaar.it\n * - In development: http://localhost:3000\n */ function getBaseUrl() {\n    if (false) {} // browser should use relative url\n    if (false) {}\n    return `http://localhost:${process.env.PORT ?? 3000}`; // local development\n}\nconst siteConfig = {\n    name: \"Bazaar Vid\",\n    description: \"Create professional motion graphics videos with AI-powered scene generation\",\n    url: getBaseUrl(),\n    ogImage: \"/og-image.png\",\n    links: {\n        twitter: \"https://twitter.com/bazaarvid\",\n        github: \"https://github.com/bazaar-vid/bazaar-vid\"\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvY29uZmlnL3NpdGUudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxxQkFBcUI7QUFFckI7Ozs7O0NBS0MsR0FDTSxTQUFTQTtJQUNkLElBQUksS0FBNkIsRUFBRSxFQUFVLENBQUMsa0NBQWtDO0lBQ2hGLElBQUlDLEtBQXFDLEVBQUUsRUFBMkI7SUFDdEUsT0FBTyxDQUFDLGlCQUFpQixFQUFFQSxRQUFRQyxHQUFHLENBQUNDLElBQUksSUFBSSxNQUFNLEVBQUUsb0JBQW9CO0FBQzdFO0FBRU8sTUFBTUMsYUFBYTtJQUN4QkMsTUFBTTtJQUNOQyxhQUFhO0lBQ2JDLEtBQUtQO0lBQ0xRLFNBQVM7SUFDVEMsT0FBTztRQUNMQyxTQUFTO1FBQ1RDLFFBQVE7SUFDVjtBQUNGLEVBQUUiLCJzb3VyY2VzIjpbIi9Vc2Vycy9tYXJrdXNob2duZS9Eb2N1bWVudHMvQVBQUy9iYXphYXItdmlkL2JhemFhci12aWQvYXBwcy9tYWluL3NyYy9jb25maWcvc2l0ZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBzcmMvY29uZmlnL3NpdGUudHNcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBiYXNlIFVSTCBmb3IgdGhlIGFwcGxpY2F0aW9uXG4gKiAtIEluIGJyb3dzZXI6IGVtcHR5IHN0cmluZyBmb3IgcmVsYXRpdmUgVVJMc1xuICogLSBJbiBwcm9kdWN0aW9uOiBodHRwczovL2JhemFhci5pdFxuICogLSBJbiBkZXZlbG9wbWVudDogaHR0cDovL2xvY2FsaG9zdDozMDAwXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRCYXNlVXJsKCkge1xuICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHJldHVybiAnJzsgLy8gYnJvd3NlciBzaG91bGQgdXNlIHJlbGF0aXZlIHVybFxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykgcmV0dXJuICdodHRwczovL2JhemFhci5pdCc7XG4gIHJldHVybiBgaHR0cDovL2xvY2FsaG9zdDoke3Byb2Nlc3MuZW52LlBPUlQgPz8gMzAwMH1gOyAvLyBsb2NhbCBkZXZlbG9wbWVudFxufVxuXG5leHBvcnQgY29uc3Qgc2l0ZUNvbmZpZyA9IHtcbiAgbmFtZTogXCJCYXphYXIgVmlkXCIsXG4gIGRlc2NyaXB0aW9uOiBcIkNyZWF0ZSBwcm9mZXNzaW9uYWwgbW90aW9uIGdyYXBoaWNzIHZpZGVvcyB3aXRoIEFJLXBvd2VyZWQgc2NlbmUgZ2VuZXJhdGlvblwiLFxuICB1cmw6IGdldEJhc2VVcmwoKSwgLy8gUmVtb3ZlZCBORVhUX1BVQkxJQ19CQVNFX1VSTCBzaW5jZSB3ZSdyZSBoYXJkY29kaW5nXG4gIG9nSW1hZ2U6IFwiL29nLWltYWdlLnBuZ1wiLFxuICBsaW5rczoge1xuICAgIHR3aXR0ZXI6IFwiaHR0cHM6Ly90d2l0dGVyLmNvbS9iYXphYXJ2aWRcIixcbiAgICBnaXRodWI6IFwiaHR0cHM6Ly9naXRodWIuY29tL2JhemFhci12aWQvYmF6YWFyLXZpZFwiLFxuICB9LFxufTtcbiJdLCJuYW1lcyI6WyJnZXRCYXNlVXJsIiwicHJvY2VzcyIsImVudiIsIlBPUlQiLCJzaXRlQ29uZmlnIiwibmFtZSIsImRlc2NyaXB0aW9uIiwidXJsIiwib2dJbWFnZSIsImxpbmtzIiwidHdpdHRlciIsImdpdGh1YiJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./src/config/site.ts\n");

/***/ }),

/***/ "(rsc)/./src/env.js":
/*!********************!*\
  !*** ./src/env.js ***!
  \********************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   env: () => (/* binding */ env)\n/* harmony export */ });\n/* harmony import */ var _t3_oss_env_nextjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @t3-oss/env-nextjs */ \"(rsc)/../../node_modules/@t3-oss/env-nextjs/dist/index.js\");\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! zod */ \"(rsc)/../../node_modules/zod/lib/index.mjs\");\n// src/env.js\n\n\nconst env = (0,_t3_oss_env_nextjs__WEBPACK_IMPORTED_MODULE_0__.createEnv)({\n    /**\n   * Specify your server-side environment variables schema here. This way you can ensure the app\n   * isn't built with invalid env vars.\n   */ server: {\n        AUTH_SECRET:  false ? 0 : zod__WEBPACK_IMPORTED_MODULE_1__.z.string().optional(),\n        AUTH_GITHUB_ID: zod__WEBPACK_IMPORTED_MODULE_1__.z.string(),\n        AUTH_GITHUB_SECRET: zod__WEBPACK_IMPORTED_MODULE_1__.z.string(),\n        AUTH_GOOGLE_ID: zod__WEBPACK_IMPORTED_MODULE_1__.z.string(),\n        AUTH_GOOGLE_SECRET: zod__WEBPACK_IMPORTED_MODULE_1__.z.string(),\n        DATABASE_URL: zod__WEBPACK_IMPORTED_MODULE_1__.z.string().url(),\n        DATABASE_URL_NON_POOLED: zod__WEBPACK_IMPORTED_MODULE_1__.z.string().url(),\n        // Default model for Animation Design Brief generation\n        DEFAULT_ADB_MODEL: zod__WEBPACK_IMPORTED_MODULE_1__.z.string().optional().default(\"o4-mini\"),\n        NODE_ENV: zod__WEBPACK_IMPORTED_MODULE_1__.z.enum([\n            \"development\",\n            \"test\",\n            \"production\"\n        ]).default(\"development\"),\n        OPENAI_API_KEY: zod__WEBPACK_IMPORTED_MODULE_1__.z.string().min(1),\n        // R2 Storage Configuration\n        R2_ENDPOINT: zod__WEBPACK_IMPORTED_MODULE_1__.z.string().url(),\n        R2_ACCESS_KEY_ID: zod__WEBPACK_IMPORTED_MODULE_1__.z.string().min(1),\n        R2_SECRET_ACCESS_KEY: zod__WEBPACK_IMPORTED_MODULE_1__.z.string().min(1),\n        R2_BUCKET_NAME: zod__WEBPACK_IMPORTED_MODULE_1__.z.string().min(1),\n        R2_PUBLIC_URL: zod__WEBPACK_IMPORTED_MODULE_1__.z.string().url(),\n        // Cron Job Configuration\n        CRON_SECRET: zod__WEBPACK_IMPORTED_MODULE_1__.z.string().min(1),\n        // Worker Configuration (Server-side)\n        WORKER_POLLING_INTERVAL: zod__WEBPACK_IMPORTED_MODULE_1__.z.preprocess((val)=>val ? parseInt(String(val), 10) : undefined, zod__WEBPACK_IMPORTED_MODULE_1__.z.number().positive().optional()),\n        TASK_PROCESSOR_POLLING_INTERVAL: zod__WEBPACK_IMPORTED_MODULE_1__.z.preprocess((val)=>val ? parseInt(String(val), 10) : undefined, zod__WEBPACK_IMPORTED_MODULE_1__.z.number().positive().optional()),\n        // Toggle to enable the new message bus routing (`true` by default)\n        USE_MESSAGE_BUS: zod__WEBPACK_IMPORTED_MODULE_1__.z.preprocess((val)=>{\n            if (val === undefined) return true; // default\n            return String(val).toLowerCase() === 'true';\n        }, zod__WEBPACK_IMPORTED_MODULE_1__.z.boolean().optional()),\n        DISABLE_BACKGROUND_WORKERS: zod__WEBPACK_IMPORTED_MODULE_1__.z.preprocess(// Coerce 'true' to true, 'false' to false, otherwise undefined\n        (val)=>String(val).toLowerCase() === 'true' ? true : String(val).toLowerCase() === 'false' ? false : undefined, zod__WEBPACK_IMPORTED_MODULE_1__.z.boolean().optional()),\n        // Log Agent URL for developer tools\n        LOG_AGENT_URL: zod__WEBPACK_IMPORTED_MODULE_1__.z.string().url().optional().default(\"http://localhost:3002\"),\n        // Model pack selection for AI services\n        MODEL_PACK: zod__WEBPACK_IMPORTED_MODULE_1__.z.string().optional().default(\"optimal-pack\")\n    },\n    /**\n   * Specify your client-side environment variables schema here. This way you can ensure the app\n   * isn't built with invalid env vars. To expose them to the client, prefix them with\n   * `NEXT_PUBLIC_`.\n   */ client: {\n        // NEXT_PUBLIC_CLIENTVAR: z.string(),\n        NEXT_PUBLIC_LOG_AGENT_URL: zod__WEBPACK_IMPORTED_MODULE_1__.z.string().url().optional().default('http://localhost:3002'),\n        NEXT_PUBLIC_LOG_RUN_ID: zod__WEBPACK_IMPORTED_MODULE_1__.z.string().optional()\n    },\n    /**\n   * You can't destruct `process.env` as a regular object in the Next.js edge runtimes (e.g.\n   * middlewares) or client-side so we need to destruct manually.\n   */ runtimeEnv: {\n        AUTH_SECRET: process.env.AUTH_SECRET,\n        AUTH_GITHUB_ID: process.env.AUTH_GITHUB_ID,\n        AUTH_GITHUB_SECRET: process.env.AUTH_GITHUB_SECRET,\n        AUTH_GOOGLE_ID: process.env.AUTH_GOOGLE_ID,\n        AUTH_GOOGLE_SECRET: process.env.AUTH_GOOGLE_SECRET,\n        DATABASE_URL: process.env.DATABASE_URL,\n        DATABASE_URL_NON_POOLED: process.env.DATABASE_URL_NON_POOLED,\n        DEFAULT_ADB_MODEL: process.env.DEFAULT_ADB_MODEL,\n        NODE_ENV: \"development\",\n        OPENAI_API_KEY: process.env.OPENAI_API_KEY,\n        // R2 Storage Environment Variables\n        R2_ENDPOINT: process.env.R2_ENDPOINT,\n        R2_ACCESS_KEY_ID: process.env.R2_ACCESS_KEY_ID,\n        R2_SECRET_ACCESS_KEY: process.env.R2_SECRET_ACCESS_KEY,\n        R2_BUCKET_NAME: process.env.R2_BUCKET_NAME,\n        R2_PUBLIC_URL: process.env.R2_PUBLIC_URL,\n        // Cron Job Environment Variables\n        CRON_SECRET: process.env.CRON_SECRET,\n        // Worker Configuration Runtime Environment Variables\n        WORKER_POLLING_INTERVAL: process.env.WORKER_POLLING_INTERVAL,\n        TASK_PROCESSOR_POLLING_INTERVAL: process.env.TASK_PROCESSOR_POLLING_INTERVAL,\n        USE_MESSAGE_BUS: process.env.USE_MESSAGE_BUS,\n        DISABLE_BACKGROUND_WORKERS: process.env.DISABLE_BACKGROUND_WORKERS,\n        LOG_AGENT_URL: process.env.LOG_AGENT_URL,\n        MODEL_PACK: process.env.MODEL_PACK,\n        NEXT_PUBLIC_LOG_AGENT_URL: process.env.NEXT_PUBLIC_LOG_AGENT_URL,\n        NEXT_PUBLIC_LOG_RUN_ID: process.env.NEXT_PUBLIC_LOG_RUN_ID\n    },\n    /**\n   * Run `build` or `dev` with `SKIP_ENV_VALIDATION` to skip env validation. This is especially\n   * useful for Docker builds.\n   */ skipValidation: !!process.env.SKIP_ENV_VALIDATION,\n    /**\n   * Makes it so that empty strings are treated as undefined. `SOME_VAR: z.string()` and\n   * `SOME_VAR=''` will throw an error.\n   */ emptyStringAsUndefined: true\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvZW52LmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLGFBQWE7QUFDa0M7QUFDdkI7QUFFakIsTUFBTUUsTUFBTUYsNkRBQVNBLENBQUM7SUFDM0I7OztHQUdDLEdBQ0RHLFFBQVE7UUFDTkMsYUFDRUMsTUFBcUMsR0FDakNKLENBQVUsR0FDVkEsa0NBQUNBLENBQUNLLE1BQU0sR0FBR0MsUUFBUTtRQUN6QkMsZ0JBQWdCUCxrQ0FBQ0EsQ0FBQ0ssTUFBTTtRQUN4Qkcsb0JBQW9CUixrQ0FBQ0EsQ0FBQ0ssTUFBTTtRQUM1QkksZ0JBQWdCVCxrQ0FBQ0EsQ0FBQ0ssTUFBTTtRQUN4Qkssb0JBQW9CVixrQ0FBQ0EsQ0FBQ0ssTUFBTTtRQUM1Qk0sY0FBY1gsa0NBQUNBLENBQUNLLE1BQU0sR0FBR08sR0FBRztRQUM1QkMseUJBQXlCYixrQ0FBQ0EsQ0FBQ0ssTUFBTSxHQUFHTyxHQUFHO1FBQ3ZDLHNEQUFzRDtRQUN0REUsbUJBQW1CZCxrQ0FBQ0EsQ0FBQ0ssTUFBTSxHQUFHQyxRQUFRLEdBQUdTLE9BQU8sQ0FBQztRQUNqREMsVUFBVWhCLGtDQUFDQSxDQUNSaUIsSUFBSSxDQUFDO1lBQUM7WUFBZTtZQUFRO1NBQWEsRUFDMUNGLE9BQU8sQ0FBQztRQUNYRyxnQkFBZ0JsQixrQ0FBQ0EsQ0FBQ0ssTUFBTSxHQUFHYyxHQUFHLENBQUM7UUFDL0IsMkJBQTJCO1FBQzNCQyxhQUFhcEIsa0NBQUNBLENBQUNLLE1BQU0sR0FBR08sR0FBRztRQUMzQlMsa0JBQWtCckIsa0NBQUNBLENBQUNLLE1BQU0sR0FBR2MsR0FBRyxDQUFDO1FBQ2pDRyxzQkFBc0J0QixrQ0FBQ0EsQ0FBQ0ssTUFBTSxHQUFHYyxHQUFHLENBQUM7UUFDckNJLGdCQUFnQnZCLGtDQUFDQSxDQUFDSyxNQUFNLEdBQUdjLEdBQUcsQ0FBQztRQUMvQkssZUFBZXhCLGtDQUFDQSxDQUFDSyxNQUFNLEdBQUdPLEdBQUc7UUFDN0IseUJBQXlCO1FBQ3pCYSxhQUFhekIsa0NBQUNBLENBQUNLLE1BQU0sR0FBR2MsR0FBRyxDQUFDO1FBRTVCLHFDQUFxQztRQUNyQ08seUJBQXlCMUIsa0NBQUNBLENBQUMyQixVQUFVLENBQ25DLENBQUNDLE1BQVNBLE1BQU1DLFNBQVNDLE9BQU9GLE1BQU0sTUFBTUcsV0FDNUMvQixrQ0FBQ0EsQ0FBQ2dDLE1BQU0sR0FBR0MsUUFBUSxHQUFHM0IsUUFBUTtRQUVoQzRCLGlDQUFpQ2xDLGtDQUFDQSxDQUFDMkIsVUFBVSxDQUMzQyxDQUFDQyxNQUFTQSxNQUFNQyxTQUFTQyxPQUFPRixNQUFNLE1BQU1HLFdBQzVDL0Isa0NBQUNBLENBQUNnQyxNQUFNLEdBQUdDLFFBQVEsR0FBRzNCLFFBQVE7UUFFaEMsbUVBQW1FO1FBQ25FNkIsaUJBQWlCbkMsa0NBQUNBLENBQUMyQixVQUFVLENBQzNCLENBQUNDO1lBQ0MsSUFBSUEsUUFBUUcsV0FBVyxPQUFPLE1BQU0sVUFBVTtZQUM5QyxPQUFPRCxPQUFPRixLQUFLUSxXQUFXLE9BQU87UUFDdkMsR0FDQXBDLGtDQUFDQSxDQUFDcUMsT0FBTyxHQUFHL0IsUUFBUTtRQUV0QmdDLDRCQUE0QnRDLGtDQUFDQSxDQUFDMkIsVUFBVSxDQUN0QywrREFBK0Q7UUFDL0QsQ0FBQ0MsTUFBU0UsT0FBT0YsS0FBS1EsV0FBVyxPQUFPLFNBQVMsT0FBT04sT0FBT0YsS0FBS1EsV0FBVyxPQUFPLFVBQVUsUUFBUUwsV0FDeEcvQixrQ0FBQ0EsQ0FBQ3FDLE9BQU8sR0FBRy9CLFFBQVE7UUFFdEIsb0NBQW9DO1FBQ3BDaUMsZUFBZXZDLGtDQUFDQSxDQUFDSyxNQUFNLEdBQUdPLEdBQUcsR0FBR04sUUFBUSxHQUFHUyxPQUFPLENBQUM7UUFDbkQsdUNBQXVDO1FBQ3ZDeUIsWUFBWXhDLGtDQUFDQSxDQUFDSyxNQUFNLEdBQUdDLFFBQVEsR0FBR1MsT0FBTyxDQUFDO0lBQzVDO0lBRUE7Ozs7R0FJQyxHQUNEMEIsUUFBUTtRQUNOLHFDQUFxQztRQUNyQ0MsMkJBQTJCMUMsa0NBQUNBLENBQUNLLE1BQU0sR0FBR08sR0FBRyxHQUFHTixRQUFRLEdBQUdTLE9BQU8sQ0FBQztRQUMvRDRCLHdCQUF3QjNDLGtDQUFDQSxDQUFDSyxNQUFNLEdBQUdDLFFBQVE7SUFDN0M7SUFFQTs7O0dBR0MsR0FDRHNDLFlBQVk7UUFDVnpDLGFBQWFDLFFBQVFILEdBQUcsQ0FBQ0UsV0FBVztRQUNwQ0ksZ0JBQWdCSCxRQUFRSCxHQUFHLENBQUNNLGNBQWM7UUFDMUNDLG9CQUFvQkosUUFBUUgsR0FBRyxDQUFDTyxrQkFBa0I7UUFDbERDLGdCQUFnQkwsUUFBUUgsR0FBRyxDQUFDUSxjQUFjO1FBQzFDQyxvQkFBb0JOLFFBQVFILEdBQUcsQ0FBQ1Msa0JBQWtCO1FBQ2xEQyxjQUFjUCxRQUFRSCxHQUFHLENBQUNVLFlBQVk7UUFDdENFLHlCQUF5QlQsUUFBUUgsR0FBRyxDQUFDWSx1QkFBdUI7UUFDNURDLG1CQUFtQlYsUUFBUUgsR0FBRyxDQUFDYSxpQkFBaUI7UUFDaERFLFVBakZKO1FBa0ZJRSxnQkFBZ0JkLFFBQVFILEdBQUcsQ0FBQ2lCLGNBQWM7UUFDMUMsbUNBQW1DO1FBQ25DRSxhQUFhaEIsUUFBUUgsR0FBRyxDQUFDbUIsV0FBVztRQUNwQ0Msa0JBQWtCakIsUUFBUUgsR0FBRyxDQUFDb0IsZ0JBQWdCO1FBQzlDQyxzQkFBc0JsQixRQUFRSCxHQUFHLENBQUNxQixvQkFBb0I7UUFDdERDLGdCQUFnQm5CLFFBQVFILEdBQUcsQ0FBQ3NCLGNBQWM7UUFDMUNDLGVBQWVwQixRQUFRSCxHQUFHLENBQUN1QixhQUFhO1FBQ3hDLGlDQUFpQztRQUNqQ0MsYUFBYXJCLFFBQVFILEdBQUcsQ0FBQ3dCLFdBQVc7UUFDcEMscURBQXFEO1FBQ3JEQyx5QkFBeUJ0QixRQUFRSCxHQUFHLENBQUN5Qix1QkFBdUI7UUFDNURRLGlDQUFpQzlCLFFBQVFILEdBQUcsQ0FBQ2lDLCtCQUErQjtRQUM1RUMsaUJBQWlCL0IsUUFBUUgsR0FBRyxDQUFDa0MsZUFBZTtRQUM1Q0csNEJBQTRCbEMsUUFBUUgsR0FBRyxDQUFDcUMsMEJBQTBCO1FBQ2xFQyxlQUFlbkMsUUFBUUgsR0FBRyxDQUFDc0MsYUFBYTtRQUN4Q0MsWUFBWXBDLFFBQVFILEdBQUcsQ0FBQ3VDLFVBQVU7UUFDbENFLDJCQUEyQnRDLFFBQVFILEdBQUcsQ0FBQ3lDLHlCQUF5QjtRQUNoRUMsd0JBQXdCdkMsUUFBUUgsR0FBRyxDQUFDMEMsc0JBQXNCO0lBQzVEO0lBQ0E7OztHQUdDLEdBQ0RFLGdCQUFnQixDQUFDLENBQUN6QyxRQUFRSCxHQUFHLENBQUM2QyxtQkFBbUI7SUFDakQ7OztHQUdDLEdBQ0RDLHdCQUF3QjtBQUMxQixHQUFHIiwic291cmNlcyI6WyIvVXNlcnMvbWFya3VzaG9nbmUvRG9jdW1lbnRzL0FQUFMvYmF6YWFyLXZpZC9iYXphYXItdmlkL2FwcHMvbWFpbi9zcmMvZW52LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHNyYy9lbnYuanNcbmltcG9ydCB7IGNyZWF0ZUVudiB9IGZyb20gXCJAdDMtb3NzL2Vudi1uZXh0anNcIjtcbmltcG9ydCB7IHogfSBmcm9tIFwiem9kXCI7XG5cbmV4cG9ydCBjb25zdCBlbnYgPSBjcmVhdGVFbnYoe1xuICAvKipcbiAgICogU3BlY2lmeSB5b3VyIHNlcnZlci1zaWRlIGVudmlyb25tZW50IHZhcmlhYmxlcyBzY2hlbWEgaGVyZS4gVGhpcyB3YXkgeW91IGNhbiBlbnN1cmUgdGhlIGFwcFxuICAgKiBpc24ndCBidWlsdCB3aXRoIGludmFsaWQgZW52IHZhcnMuXG4gICAqL1xuICBzZXJ2ZXI6IHtcbiAgICBBVVRIX1NFQ1JFVDpcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIlxuICAgICAgICA/IHouc3RyaW5nKClcbiAgICAgICAgOiB6LnN0cmluZygpLm9wdGlvbmFsKCksXG4gICAgQVVUSF9HSVRIVUJfSUQ6IHouc3RyaW5nKCksXG4gICAgQVVUSF9HSVRIVUJfU0VDUkVUOiB6LnN0cmluZygpLFxuICAgIEFVVEhfR09PR0xFX0lEOiB6LnN0cmluZygpLFxuICAgIEFVVEhfR09PR0xFX1NFQ1JFVDogei5zdHJpbmcoKSxcbiAgICBEQVRBQkFTRV9VUkw6IHouc3RyaW5nKCkudXJsKCksXG4gICAgREFUQUJBU0VfVVJMX05PTl9QT09MRUQ6IHouc3RyaW5nKCkudXJsKCksXG4gICAgLy8gRGVmYXVsdCBtb2RlbCBmb3IgQW5pbWF0aW9uIERlc2lnbiBCcmllZiBnZW5lcmF0aW9uXG4gICAgREVGQVVMVF9BREJfTU9ERUw6IHouc3RyaW5nKCkub3B0aW9uYWwoKS5kZWZhdWx0KFwibzQtbWluaVwiKSxcbiAgICBOT0RFX0VOVjogelxuICAgICAgLmVudW0oW1wiZGV2ZWxvcG1lbnRcIiwgXCJ0ZXN0XCIsIFwicHJvZHVjdGlvblwiXSlcbiAgICAgIC5kZWZhdWx0KFwiZGV2ZWxvcG1lbnRcIiksXG4gICAgT1BFTkFJX0FQSV9LRVk6IHouc3RyaW5nKCkubWluKDEpLFxuICAgIC8vIFIyIFN0b3JhZ2UgQ29uZmlndXJhdGlvblxuICAgIFIyX0VORFBPSU5UOiB6LnN0cmluZygpLnVybCgpLFxuICAgIFIyX0FDQ0VTU19LRVlfSUQ6IHouc3RyaW5nKCkubWluKDEpLFxuICAgIFIyX1NFQ1JFVF9BQ0NFU1NfS0VZOiB6LnN0cmluZygpLm1pbigxKSxcbiAgICBSMl9CVUNLRVRfTkFNRTogei5zdHJpbmcoKS5taW4oMSksXG4gICAgUjJfUFVCTElDX1VSTDogei5zdHJpbmcoKS51cmwoKSxcbiAgICAvLyBDcm9uIEpvYiBDb25maWd1cmF0aW9uXG4gICAgQ1JPTl9TRUNSRVQ6IHouc3RyaW5nKCkubWluKDEpLFxuXG4gICAgLy8gV29ya2VyIENvbmZpZ3VyYXRpb24gKFNlcnZlci1zaWRlKVxuICAgIFdPUktFUl9QT0xMSU5HX0lOVEVSVkFMOiB6LnByZXByb2Nlc3MoXG4gICAgICAodmFsKSA9PiAodmFsID8gcGFyc2VJbnQoU3RyaW5nKHZhbCksIDEwKSA6IHVuZGVmaW5lZCksXG4gICAgICB6Lm51bWJlcigpLnBvc2l0aXZlKCkub3B0aW9uYWwoKVxuICAgICksXG4gICAgVEFTS19QUk9DRVNTT1JfUE9MTElOR19JTlRFUlZBTDogei5wcmVwcm9jZXNzKFxuICAgICAgKHZhbCkgPT4gKHZhbCA/IHBhcnNlSW50KFN0cmluZyh2YWwpLCAxMCkgOiB1bmRlZmluZWQpLFxuICAgICAgei5udW1iZXIoKS5wb3NpdGl2ZSgpLm9wdGlvbmFsKClcbiAgICApLFxuICAgIC8vIFRvZ2dsZSB0byBlbmFibGUgdGhlIG5ldyBtZXNzYWdlIGJ1cyByb3V0aW5nIChgdHJ1ZWAgYnkgZGVmYXVsdClcbiAgICBVU0VfTUVTU0FHRV9CVVM6IHoucHJlcHJvY2VzcyhcbiAgICAgICh2YWwpID0+IHtcbiAgICAgICAgaWYgKHZhbCA9PT0gdW5kZWZpbmVkKSByZXR1cm4gdHJ1ZTsgLy8gZGVmYXVsdFxuICAgICAgICByZXR1cm4gU3RyaW5nKHZhbCkudG9Mb3dlckNhc2UoKSA9PT0gJ3RydWUnO1xuICAgICAgfSxcbiAgICAgIHouYm9vbGVhbigpLm9wdGlvbmFsKClcbiAgICApLFxuICAgIERJU0FCTEVfQkFDS0dST1VORF9XT1JLRVJTOiB6LnByZXByb2Nlc3MoXG4gICAgICAvLyBDb2VyY2UgJ3RydWUnIHRvIHRydWUsICdmYWxzZScgdG8gZmFsc2UsIG90aGVyd2lzZSB1bmRlZmluZWRcbiAgICAgICh2YWwpID0+IChTdHJpbmcodmFsKS50b0xvd2VyQ2FzZSgpID09PSAndHJ1ZScgPyB0cnVlIDogU3RyaW5nKHZhbCkudG9Mb3dlckNhc2UoKSA9PT0gJ2ZhbHNlJyA/IGZhbHNlIDogdW5kZWZpbmVkKSxcbiAgICAgIHouYm9vbGVhbigpLm9wdGlvbmFsKClcbiAgICApLFxuICAgIC8vIExvZyBBZ2VudCBVUkwgZm9yIGRldmVsb3BlciB0b29sc1xuICAgIExPR19BR0VOVF9VUkw6IHouc3RyaW5nKCkudXJsKCkub3B0aW9uYWwoKS5kZWZhdWx0KFwiaHR0cDovL2xvY2FsaG9zdDozMDAyXCIpLFxuICAgIC8vIE1vZGVsIHBhY2sgc2VsZWN0aW9uIGZvciBBSSBzZXJ2aWNlc1xuICAgIE1PREVMX1BBQ0s6IHouc3RyaW5nKCkub3B0aW9uYWwoKS5kZWZhdWx0KFwib3B0aW1hbC1wYWNrXCIpLFxuICB9LFxuXG4gIC8qKlxuICAgKiBTcGVjaWZ5IHlvdXIgY2xpZW50LXNpZGUgZW52aXJvbm1lbnQgdmFyaWFibGVzIHNjaGVtYSBoZXJlLiBUaGlzIHdheSB5b3UgY2FuIGVuc3VyZSB0aGUgYXBwXG4gICAqIGlzbid0IGJ1aWx0IHdpdGggaW52YWxpZCBlbnYgdmFycy4gVG8gZXhwb3NlIHRoZW0gdG8gdGhlIGNsaWVudCwgcHJlZml4IHRoZW0gd2l0aFxuICAgKiBgTkVYVF9QVUJMSUNfYC5cbiAgICovXG4gIGNsaWVudDoge1xuICAgIC8vIE5FWFRfUFVCTElDX0NMSUVOVFZBUjogei5zdHJpbmcoKSxcbiAgICBORVhUX1BVQkxJQ19MT0dfQUdFTlRfVVJMOiB6LnN0cmluZygpLnVybCgpLm9wdGlvbmFsKCkuZGVmYXVsdCgnaHR0cDovL2xvY2FsaG9zdDozMDAyJyksXG4gICAgTkVYVF9QVUJMSUNfTE9HX1JVTl9JRDogei5zdHJpbmcoKS5vcHRpb25hbCgpLFxuICB9LFxuXG4gIC8qKlxuICAgKiBZb3UgY2FuJ3QgZGVzdHJ1Y3QgYHByb2Nlc3MuZW52YCBhcyBhIHJlZ3VsYXIgb2JqZWN0IGluIHRoZSBOZXh0LmpzIGVkZ2UgcnVudGltZXMgKGUuZy5cbiAgICogbWlkZGxld2FyZXMpIG9yIGNsaWVudC1zaWRlIHNvIHdlIG5lZWQgdG8gZGVzdHJ1Y3QgbWFudWFsbHkuXG4gICAqL1xuICBydW50aW1lRW52OiB7XG4gICAgQVVUSF9TRUNSRVQ6IHByb2Nlc3MuZW52LkFVVEhfU0VDUkVULFxuICAgIEFVVEhfR0lUSFVCX0lEOiBwcm9jZXNzLmVudi5BVVRIX0dJVEhVQl9JRCxcbiAgICBBVVRIX0dJVEhVQl9TRUNSRVQ6IHByb2Nlc3MuZW52LkFVVEhfR0lUSFVCX1NFQ1JFVCxcbiAgICBBVVRIX0dPT0dMRV9JRDogcHJvY2Vzcy5lbnYuQVVUSF9HT09HTEVfSUQsXG4gICAgQVVUSF9HT09HTEVfU0VDUkVUOiBwcm9jZXNzLmVudi5BVVRIX0dPT0dMRV9TRUNSRVQsXG4gICAgREFUQUJBU0VfVVJMOiBwcm9jZXNzLmVudi5EQVRBQkFTRV9VUkwsXG4gICAgREFUQUJBU0VfVVJMX05PTl9QT09MRUQ6IHByb2Nlc3MuZW52LkRBVEFCQVNFX1VSTF9OT05fUE9PTEVELFxuICAgIERFRkFVTFRfQURCX01PREVMOiBwcm9jZXNzLmVudi5ERUZBVUxUX0FEQl9NT0RFTCxcbiAgICBOT0RFX0VOVjogcHJvY2Vzcy5lbnYuTk9ERV9FTlYsXG4gICAgT1BFTkFJX0FQSV9LRVk6IHByb2Nlc3MuZW52Lk9QRU5BSV9BUElfS0VZLFxuICAgIC8vIFIyIFN0b3JhZ2UgRW52aXJvbm1lbnQgVmFyaWFibGVzXG4gICAgUjJfRU5EUE9JTlQ6IHByb2Nlc3MuZW52LlIyX0VORFBPSU5ULFxuICAgIFIyX0FDQ0VTU19LRVlfSUQ6IHByb2Nlc3MuZW52LlIyX0FDQ0VTU19LRVlfSUQsXG4gICAgUjJfU0VDUkVUX0FDQ0VTU19LRVk6IHByb2Nlc3MuZW52LlIyX1NFQ1JFVF9BQ0NFU1NfS0VZLFxuICAgIFIyX0JVQ0tFVF9OQU1FOiBwcm9jZXNzLmVudi5SMl9CVUNLRVRfTkFNRSxcbiAgICBSMl9QVUJMSUNfVVJMOiBwcm9jZXNzLmVudi5SMl9QVUJMSUNfVVJMLFxuICAgIC8vIENyb24gSm9iIEVudmlyb25tZW50IFZhcmlhYmxlc1xuICAgIENST05fU0VDUkVUOiBwcm9jZXNzLmVudi5DUk9OX1NFQ1JFVCxcbiAgICAvLyBXb3JrZXIgQ29uZmlndXJhdGlvbiBSdW50aW1lIEVudmlyb25tZW50IFZhcmlhYmxlc1xuICAgIFdPUktFUl9QT0xMSU5HX0lOVEVSVkFMOiBwcm9jZXNzLmVudi5XT1JLRVJfUE9MTElOR19JTlRFUlZBTCxcbiAgICBUQVNLX1BST0NFU1NPUl9QT0xMSU5HX0lOVEVSVkFMOiBwcm9jZXNzLmVudi5UQVNLX1BST0NFU1NPUl9QT0xMSU5HX0lOVEVSVkFMLFxuICAgIFVTRV9NRVNTQUdFX0JVUzogcHJvY2Vzcy5lbnYuVVNFX01FU1NBR0VfQlVTLFxuICAgIERJU0FCTEVfQkFDS0dST1VORF9XT1JLRVJTOiBwcm9jZXNzLmVudi5ESVNBQkxFX0JBQ0tHUk9VTkRfV09SS0VSUyxcbiAgICBMT0dfQUdFTlRfVVJMOiBwcm9jZXNzLmVudi5MT0dfQUdFTlRfVVJMLFxuICAgIE1PREVMX1BBQ0s6IHByb2Nlc3MuZW52Lk1PREVMX1BBQ0ssXG4gICAgTkVYVF9QVUJMSUNfTE9HX0FHRU5UX1VSTDogcHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfTE9HX0FHRU5UX1VSTCxcbiAgICBORVhUX1BVQkxJQ19MT0dfUlVOX0lEOiBwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19MT0dfUlVOX0lELFxuICB9LFxuICAvKipcbiAgICogUnVuIGBidWlsZGAgb3IgYGRldmAgd2l0aCBgU0tJUF9FTlZfVkFMSURBVElPTmAgdG8gc2tpcCBlbnYgdmFsaWRhdGlvbi4gVGhpcyBpcyBlc3BlY2lhbGx5XG4gICAqIHVzZWZ1bCBmb3IgRG9ja2VyIGJ1aWxkcy5cbiAgICovXG4gIHNraXBWYWxpZGF0aW9uOiAhIXByb2Nlc3MuZW52LlNLSVBfRU5WX1ZBTElEQVRJT04sXG4gIC8qKlxuICAgKiBNYWtlcyBpdCBzbyB0aGF0IGVtcHR5IHN0cmluZ3MgYXJlIHRyZWF0ZWQgYXMgdW5kZWZpbmVkLiBgU09NRV9WQVI6IHouc3RyaW5nKClgIGFuZFxuICAgKiBgU09NRV9WQVI9JydgIHdpbGwgdGhyb3cgYW4gZXJyb3IuXG4gICAqL1xuICBlbXB0eVN0cmluZ0FzVW5kZWZpbmVkOiB0cnVlLFxufSk7XG4iXSwibmFtZXMiOlsiY3JlYXRlRW52IiwieiIsImVudiIsInNlcnZlciIsIkFVVEhfU0VDUkVUIiwicHJvY2VzcyIsInN0cmluZyIsIm9wdGlvbmFsIiwiQVVUSF9HSVRIVUJfSUQiLCJBVVRIX0dJVEhVQl9TRUNSRVQiLCJBVVRIX0dPT0dMRV9JRCIsIkFVVEhfR09PR0xFX1NFQ1JFVCIsIkRBVEFCQVNFX1VSTCIsInVybCIsIkRBVEFCQVNFX1VSTF9OT05fUE9PTEVEIiwiREVGQVVMVF9BREJfTU9ERUwiLCJkZWZhdWx0IiwiTk9ERV9FTlYiLCJlbnVtIiwiT1BFTkFJX0FQSV9LRVkiLCJtaW4iLCJSMl9FTkRQT0lOVCIsIlIyX0FDQ0VTU19LRVlfSUQiLCJSMl9TRUNSRVRfQUNDRVNTX0tFWSIsIlIyX0JVQ0tFVF9OQU1FIiwiUjJfUFVCTElDX1VSTCIsIkNST05fU0VDUkVUIiwiV09SS0VSX1BPTExJTkdfSU5URVJWQUwiLCJwcmVwcm9jZXNzIiwidmFsIiwicGFyc2VJbnQiLCJTdHJpbmciLCJ1bmRlZmluZWQiLCJudW1iZXIiLCJwb3NpdGl2ZSIsIlRBU0tfUFJPQ0VTU09SX1BPTExJTkdfSU5URVJWQUwiLCJVU0VfTUVTU0FHRV9CVVMiLCJ0b0xvd2VyQ2FzZSIsImJvb2xlYW4iLCJESVNBQkxFX0JBQ0tHUk9VTkRfV09SS0VSUyIsIkxPR19BR0VOVF9VUkwiLCJNT0RFTF9QQUNLIiwiY2xpZW50IiwiTkVYVF9QVUJMSUNfTE9HX0FHRU5UX1VSTCIsIk5FWFRfUFVCTElDX0xPR19SVU5fSUQiLCJydW50aW1lRW52Iiwic2tpcFZhbGlkYXRpb24iLCJTS0lQX0VOVl9WQUxJREFUSU9OIiwiZW1wdHlTdHJpbmdBc1VuZGVmaW5lZCJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./src/env.js\n");

/***/ }),

/***/ "(rsc)/./src/lib/api/response-helpers.ts":
/*!*****************************************!*\
  !*** ./src/lib/api/response-helpers.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ResponseBuilder: () => (/* binding */ ResponseBuilder),\n/* harmony export */   getErrorCode: () => (/* binding */ getErrorCode),\n/* harmony export */   logResponse: () => (/* binding */ logResponse)\n/* harmony export */ });\n/* harmony import */ var _lib_types_api_universal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ~/lib/types/api/universal */ \"(rsc)/./src/lib/types/api/universal.ts\");\n\n// Generate request IDs using built-in crypto\nconst generateRequestId = ()=>{\n    // Use crypto.randomUUID() for a standard UUID\n    if (typeof crypto !== 'undefined' && crypto.randomUUID) {\n        // Take first 12 chars of UUID for shorter IDs\n        return crypto.randomUUID().replace(/-/g, '').substring(0, 12).toUpperCase();\n    }\n    // Fallback for older environments\n    return Date.now().toString(36) + Math.random().toString(36).substring(2, 6);\n};\n/**\n * Helper class for building consistent API responses\n * Ensures every response follows the UniversalResponse format\n */ class ResponseBuilder {\n    constructor(requestId){\n        this.startTime = Date.now();\n        this.requestId = requestId || generateRequestId();\n    }\n    /**\n   * Create a success response\n   */ success(data, operation, entity, affectedIds = []) {\n        return {\n            data,\n            meta: {\n                requestId: this.requestId,\n                timestamp: Date.now(),\n                operation,\n                entity,\n                success: true,\n                affectedIds,\n                executionTimeMs: Date.now() - this.startTime\n            }\n        };\n    }\n    /**\n   * Create an error response\n   */ error(code, message, operation, entity, details) {\n        return {\n            data: null,\n            meta: {\n                requestId: this.requestId,\n                timestamp: Date.now(),\n                operation,\n                entity,\n                success: false,\n                affectedIds: [],\n                executionTimeMs: Date.now() - this.startTime\n            },\n            error: {\n                code,\n                message,\n                details,\n                retryable: this.isRetryable(code)\n            }\n        };\n    }\n    /**\n   * Add context to an existing response\n   */ withContext(response, context) {\n        return {\n            ...response,\n            context\n        };\n    }\n    /**\n   * Get the request ID for logging\n   */ getRequestId() {\n        return this.requestId;\n    }\n    /**\n   * Get execution time so far\n   */ getExecutionTime() {\n        return Date.now() - this.startTime;\n    }\n    /**\n   * Determine if an error is retryable\n   */ isRetryable(code) {\n        return [\n            _lib_types_api_universal__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.AI_ERROR,\n            _lib_types_api_universal__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.STORAGE_ERROR,\n            _lib_types_api_universal__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.DATABASE_ERROR,\n            _lib_types_api_universal__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.RATE_LIMITED,\n            _lib_types_api_universal__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.SERVICE_UNAVAILABLE\n        ].includes(code);\n    }\n}\n/**\n * Helper function to extract error code from various error types\n */ function getErrorCode(error) {\n    if (error instanceof Error) {\n        // Check for specific error patterns\n        const message = error.message.toLowerCase();\n        if (message.includes('not found')) return _lib_types_api_universal__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.NOT_FOUND;\n        if (message.includes('unauthorized')) return _lib_types_api_universal__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.UNAUTHORIZED;\n        if (message.includes('forbidden')) return _lib_types_api_universal__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.FORBIDDEN;\n        if (message.includes('validation')) return _lib_types_api_universal__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.VALIDATION_FAILED;\n        if (message.includes('already exists')) return _lib_types_api_universal__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.ALREADY_EXISTS;\n        if (message.includes('rate limit')) return _lib_types_api_universal__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.RATE_LIMITED;\n        if (message.includes('ai') || message.includes('openai') || message.includes('gpt')) return _lib_types_api_universal__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.AI_ERROR;\n        if (message.includes('database') || message.includes('db')) return _lib_types_api_universal__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.DATABASE_ERROR;\n        if (message.includes('storage') || message.includes('upload')) return _lib_types_api_universal__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.STORAGE_ERROR;\n    }\n    return _lib_types_api_universal__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.INTERNAL_ERROR;\n}\n/**\n * Helper to log responses consistently\n */ function logResponse(response, logger) {\n    const logData = {\n        requestId: response.meta.requestId,\n        operation: response.meta.operation,\n        entity: response.meta.entity,\n        success: response.meta.success,\n        executionTimeMs: response.meta.executionTimeMs,\n        affectedIds: response.meta.affectedIds\n    };\n    if (response.meta.success) {\n        logger.info(`[${response.meta.requestId}] ${response.meta.operation} completed`, logData);\n    } else {\n        logger.error(`[${response.meta.requestId}] ${response.meta.operation} failed`, {\n            ...logData,\n            error: response.error\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/api/response-helpers.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/types/ai/brain.types.ts":
/*!*****************************************!*\
  !*** ./src/lib/types/ai/brain.types.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TOOL_OPERATION_MAP: () => (/* binding */ TOOL_OPERATION_MAP),\n/* harmony export */   isValidToolName: () => (/* binding */ isValidToolName)\n/* harmony export */ });\n/**\n * Brain/AI Types - Consolidated\n * Single source of truth for all AI/orchestration related types\n * \n * IMPORTANT: We use simple, flat architecture - no complexity types\n * Field names MUST match database: tsxCode (not code), name (not sceneName)\n */ // ============================================================================\n// TOOL NAMES - Only the 4 actual tools we have\n// ============================================================================\n// ============================================================================\n// TOOL TO OPERATION MAPPING - Single source of truth\n// ============================================================================\nconst TOOL_OPERATION_MAP = {\n    addScene: 'scene.create',\n    editScene: 'scene.update',\n    trimScene: 'scene.update',\n    deleteScene: 'scene.delete'\n};\n// ============================================================================\n// TYPE GUARDS\n// ============================================================================\nfunction isValidToolName(value) {\n    return [\n        'addScene',\n        'editScene',\n        'deleteScene',\n        'trimScene'\n    ].includes(value);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/types/ai/brain.types.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/types/api/universal.ts":
/*!****************************************!*\
  !*** ./src/lib/types/api/universal.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ErrorCode: () => (/* binding */ ErrorCode),\n/* harmony export */   isErrorResponse: () => (/* binding */ isErrorResponse),\n/* harmony export */   isSuccessResponse: () => (/* binding */ isSuccessResponse)\n/* harmony export */ });\n/**\n * Universal response format for ALL API operations\n * Every single endpoint MUST return this format\n */ // Import entities from generated types (TICKET-001)\n// Standardized error codes\nvar ErrorCode = /*#__PURE__*/ function(ErrorCode) {\n    // Validation errors\n    ErrorCode[\"VALIDATION_FAILED\"] = \"VALIDATION_FAILED\";\n    ErrorCode[\"INVALID_INPUT\"] = \"INVALID_INPUT\";\n    // Resource errors\n    ErrorCode[\"NOT_FOUND\"] = \"NOT_FOUND\";\n    ErrorCode[\"ALREADY_EXISTS\"] = \"ALREADY_EXISTS\";\n    // Permission errors\n    ErrorCode[\"UNAUTHORIZED\"] = \"UNAUTHORIZED\";\n    ErrorCode[\"FORBIDDEN\"] = \"FORBIDDEN\";\n    // External service errors\n    ErrorCode[\"AI_ERROR\"] = \"AI_ERROR\";\n    ErrorCode[\"STORAGE_ERROR\"] = \"STORAGE_ERROR\";\n    ErrorCode[\"DATABASE_ERROR\"] = \"DATABASE_ERROR\";\n    // System errors\n    ErrorCode[\"INTERNAL_ERROR\"] = \"INTERNAL_ERROR\";\n    ErrorCode[\"RATE_LIMITED\"] = \"RATE_LIMITED\";\n    ErrorCode[\"SERVICE_UNAVAILABLE\"] = \"SERVICE_UNAVAILABLE\";\n    return ErrorCode;\n}({});\n// Type guards for better TypeScript support\nfunction isSuccessResponse(response) {\n    return response.meta.success === true && response.data !== null;\n}\nfunction isErrorResponse(response) {\n    return response.meta.success === false && response.error !== undefined;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvbGliL3R5cGVzL2FwaS91bml2ZXJzYWwudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7OztDQUdDLEdBRUQsb0RBQW9EO0FBb0RwRCwyQkFBMkI7QUFDcEIsdUNBQUtBO0lBQ1Ysb0JBQW9COzs7SUFJcEIsa0JBQWtCOzs7SUFJbEIsb0JBQW9COzs7SUFJcEIsMEJBQTBCOzs7O0lBSzFCLGdCQUFnQjs7OztXQWxCTkE7TUFzQlg7QUFFRCw0Q0FBNEM7QUFDckMsU0FBU0Msa0JBQXFCQyxRQUE4QjtJQUNqRSxPQUFPQSxTQUFTQyxJQUFJLENBQUNDLE9BQU8sS0FBSyxRQUFRRixTQUFTRyxJQUFJLEtBQUs7QUFDN0Q7QUFFTyxTQUFTQyxnQkFBbUJKLFFBQThCO0lBQy9ELE9BQU9BLFNBQVNDLElBQUksQ0FBQ0MsT0FBTyxLQUFLLFNBQVNGLFNBQVNLLEtBQUssS0FBS0M7QUFDL0QiLCJzb3VyY2VzIjpbIi9Vc2Vycy9tYXJrdXNob2duZS9Eb2N1bWVudHMvQVBQUy9iYXphYXItdmlkL2JhemFhci12aWQvYXBwcy9tYWluL3NyYy9saWIvdHlwZXMvYXBpL3VuaXZlcnNhbC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFVuaXZlcnNhbCByZXNwb25zZSBmb3JtYXQgZm9yIEFMTCBBUEkgb3BlcmF0aW9uc1xuICogRXZlcnkgc2luZ2xlIGVuZHBvaW50IE1VU1QgcmV0dXJuIHRoaXMgZm9ybWF0XG4gKi9cblxuLy8gSW1wb3J0IGVudGl0aWVzIGZyb20gZ2VuZXJhdGVkIHR5cGVzIChUSUNLRVQtMDAxKVxuaW1wb3J0IHR5cGUgeyBTY2VuZUVudGl0eSB9IGZyb20gXCJ+L2dlbmVyYXRlZC9lbnRpdGllc1wiO1xuXG4vKipcbiAqIFRoZSB1bml2ZXJzYWwgcmVzcG9uc2Ugd3JhcHBlciB0aGF0IGVuc3VyZXMgY29uc2lzdGVuY3lcbiAqIEB0ZW1wbGF0ZSBURGF0YSAtIFRoZSBhY3R1YWwgZGF0YSB0eXBlIGJlaW5nIHJldHVybmVkXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgVW5pdmVyc2FsUmVzcG9uc2U8VERhdGEgPSB1bmtub3duPiB7XG4gIC8vIFRoZSBhY3R1YWwgZGF0YSAobnVsbCBvbiBlcnJvcilcbiAgZGF0YTogVERhdGE7XG4gIFxuICAvLyBNZXRhZGF0YSBhYm91dCB0aGUgb3BlcmF0aW9uXG4gIG1ldGE6IHtcbiAgICByZXF1ZXN0SWQ6IHN0cmluZzsgICAgICAvLyBVbmlxdWUgSUQgZm9yIHRyYWNpbmdcbiAgICB0aW1lc3RhbXA6IG51bWJlcjsgICAgICAvLyBXaGVuIHJlc3BvbnNlIHdhcyBjcmVhdGVkXG4gICAgb3BlcmF0aW9uOiBPcGVyYXRpb247ICAgLy8gV2hhdCBvcGVyYXRpb24gd2FzIHBlcmZvcm1lZFxuICAgIGVudGl0eTogRW50aXR5OyAgICAgICAgIC8vIFdoYXQgZW50aXR5IHdhcyBhZmZlY3RlZFxuICAgIHN1Y2Nlc3M6IGJvb2xlYW47ICAgICAgIC8vIERpZCBpdCBzdWNjZWVkP1xuICAgIGFmZmVjdGVkSWRzOiBzdHJpbmdbXTsgIC8vIFdoYXQgSURzIHdlcmUgY3JlYXRlZC91cGRhdGVkL2RlbGV0ZWRcbiAgICBleGVjdXRpb25UaW1lTXM6IG51bWJlcjsgLy8gSG93IGxvbmcgaXQgdG9va1xuICB9O1xuICBcbiAgLy8gT3B0aW9uYWwgY29udGV4dCAocmVhc29uaW5nLCBzdWdnZXN0aW9ucywgZXRjKVxuICBjb250ZXh0Pzoge1xuICAgIHJlYXNvbmluZz86IHN0cmluZzsgICAgICAvLyBXaHkgdGhlIEFJIG1hZGUgdGhpcyBkZWNpc2lvblxuICAgIGNoYXRSZXNwb25zZT86IHN0cmluZzsgICAvLyBNZXNzYWdlIGZvciB0aGUgdXNlclxuICAgIHN1Z2dlc3Rpb25zPzogc3RyaW5nW107ICAvLyBXaGF0IHVzZXIgY291bGQgZG8gbmV4dFxuICB9O1xuICBcbiAgLy8gRXJyb3IgaW5mb3JtYXRpb24gKG9ubHkgcHJlc2VudCBvbiBmYWlsdXJlKVxuICBlcnJvcj86IHtcbiAgICBjb2RlOiBFcnJvckNvZGU7ICAgICAgICAvLyBTdGFuZGFyZGl6ZWQgZXJyb3IgY29kZVxuICAgIG1lc3NhZ2U6IHN0cmluZzsgICAgICAgIC8vIEh1bWFuLXJlYWRhYmxlIG1lc3NhZ2VcbiAgICBkZXRhaWxzPzogdW5rbm93bjsgICAgICAvLyBUZWNobmljYWwgZGV0YWlscyBmb3IgZGVidWdnaW5nXG4gICAgcmV0cnlhYmxlOiBib29sZWFuOyAgICAgLy8gQ2FuIHRoaXMgYmUgcmV0cmllZD9cbiAgfTtcbn1cblxuLy8gQWxsIHBvc3NpYmxlIG9wZXJhdGlvbnMgaW4gdGhlIHN5c3RlbVxuZXhwb3J0IHR5cGUgT3BlcmF0aW9uID0gXG4gIHwgJ3NjZW5lLmNyZWF0ZSdcbiAgfCAnc2NlbmUudXBkYXRlJyBcbiAgfCAnc2NlbmUuZGVsZXRlJ1xuICB8ICdzY2VuZS5hbmFseXplJ1xuICB8ICdicmFpbi5kZWNpZGUnXG4gIHwgJ3Byb2plY3QucmVhZCdcbiAgfCAncHJvamVjdC51cGRhdGUnXG4gIHwgJ3VzZXIuYXV0aGVudGljYXRlJztcblxuLy8gQWxsIGVudGl0aWVzIGluIHRoZSBzeXN0ZW1cbmV4cG9ydCB0eXBlIEVudGl0eSA9ICdzY2VuZScgfCAncHJvamVjdCcgfCAndXNlcicgfCAnZGVjaXNpb24nO1xuXG4vLyBTdGFuZGFyZGl6ZWQgZXJyb3IgY29kZXNcbmV4cG9ydCBlbnVtIEVycm9yQ29kZSB7XG4gIC8vIFZhbGlkYXRpb24gZXJyb3JzXG4gIFZBTElEQVRJT05fRkFJTEVEID0gJ1ZBTElEQVRJT05fRkFJTEVEJyxcbiAgSU5WQUxJRF9JTlBVVCA9ICdJTlZBTElEX0lOUFVUJyxcbiAgXG4gIC8vIFJlc291cmNlIGVycm9yc1xuICBOT1RfRk9VTkQgPSAnTk9UX0ZPVU5EJyxcbiAgQUxSRUFEWV9FWElTVFMgPSAnQUxSRUFEWV9FWElTVFMnLFxuICBcbiAgLy8gUGVybWlzc2lvbiBlcnJvcnNcbiAgVU5BVVRIT1JJWkVEID0gJ1VOQVVUSE9SSVpFRCcsXG4gIEZPUkJJRERFTiA9ICdGT1JCSURERU4nLFxuICBcbiAgLy8gRXh0ZXJuYWwgc2VydmljZSBlcnJvcnNcbiAgQUlfRVJST1IgPSAnQUlfRVJST1InLFxuICBTVE9SQUdFX0VSUk9SID0gJ1NUT1JBR0VfRVJST1InLFxuICBEQVRBQkFTRV9FUlJPUiA9ICdEQVRBQkFTRV9FUlJPUicsXG4gIFxuICAvLyBTeXN0ZW0gZXJyb3JzXG4gIElOVEVSTkFMX0VSUk9SID0gJ0lOVEVSTkFMX0VSUk9SJyxcbiAgUkFURV9MSU1JVEVEID0gJ1JBVEVfTElNSVRFRCcsXG4gIFNFUlZJQ0VfVU5BVkFJTEFCTEUgPSAnU0VSVklDRV9VTkFWQUlMQUJMRSdcbn1cblxuLy8gVHlwZSBndWFyZHMgZm9yIGJldHRlciBUeXBlU2NyaXB0IHN1cHBvcnRcbmV4cG9ydCBmdW5jdGlvbiBpc1N1Y2Nlc3NSZXNwb25zZTxUPihyZXNwb25zZTogVW5pdmVyc2FsUmVzcG9uc2U8VD4pOiByZXNwb25zZSBpcyBVbml2ZXJzYWxSZXNwb25zZTxUPiAmIHsgZGF0YTogVCB9IHtcbiAgcmV0dXJuIHJlc3BvbnNlLm1ldGEuc3VjY2VzcyA9PT0gdHJ1ZSAmJiByZXNwb25zZS5kYXRhICE9PSBudWxsO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNFcnJvclJlc3BvbnNlPFQ+KHJlc3BvbnNlOiBVbml2ZXJzYWxSZXNwb25zZTxUPik6IHJlc3BvbnNlIGlzIFVuaXZlcnNhbFJlc3BvbnNlPFQ+ICYgeyBlcnJvcjogTm9uTnVsbGFibGU8VW5pdmVyc2FsUmVzcG9uc2U8VD5bJ2Vycm9yJ10+IH0ge1xuICByZXR1cm4gcmVzcG9uc2UubWV0YS5zdWNjZXNzID09PSBmYWxzZSAmJiByZXNwb25zZS5lcnJvciAhPT0gdW5kZWZpbmVkO1xufVxuXG4vLyBDb21tb24gcmVzcG9uc2UgdHlwZXMgZm9yIHNjZW5lc1xuZXhwb3J0IHR5cGUgU2NlbmVDcmVhdGVSZXNwb25zZSA9IFVuaXZlcnNhbFJlc3BvbnNlPFNjZW5lRW50aXR5PjtcbmV4cG9ydCB0eXBlIFNjZW5lVXBkYXRlUmVzcG9uc2UgPSBVbml2ZXJzYWxSZXNwb25zZTxTY2VuZUVudGl0eT47XG5leHBvcnQgdHlwZSBTY2VuZURlbGV0ZVJlc3BvbnNlID0gVW5pdmVyc2FsUmVzcG9uc2U8eyBkZWxldGVkSWQ6IHN0cmluZyB9PjtcbmV4cG9ydCB0eXBlIFNjZW5lTGlzdFJlc3BvbnNlID0gVW5pdmVyc2FsUmVzcG9uc2U8U2NlbmVFbnRpdHlbXT47Il0sIm5hbWVzIjpbIkVycm9yQ29kZSIsImlzU3VjY2Vzc1Jlc3BvbnNlIiwicmVzcG9uc2UiLCJtZXRhIiwic3VjY2VzcyIsImRhdGEiLCJpc0Vycm9yUmVzcG9uc2UiLCJlcnJvciIsInVuZGVmaW5lZCJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/types/api/universal.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/types/shared/json-patch.ts":
/*!********************************************!*\
  !*** ./src/lib/types/shared/json-patch.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   jsonPatchSchema: () => (/* binding */ jsonPatchSchema),\n/* harmony export */   operationSchema: () => (/* binding */ operationSchema)\n/* harmony export */ });\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! zod */ \"(rsc)/../../node_modules/zod/lib/index.mjs\");\n/**\n * RFC-6902 JSON-Patch operation list – the subset we care about for MVP.\n * Later you can switch to `import { Operation } from \"fast-json-patch\"`\n * if you install that lib, the shape is identical.\n */ \n// Based on RFC 6902 JSON Patch standard\nconst operationSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    op: zod__WEBPACK_IMPORTED_MODULE_0__.z.enum([\n        \"add\",\n        \"remove\",\n        \"replace\",\n        \"move\",\n        \"copy\",\n        \"test\"\n    ]),\n    path: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().startsWith(\"/\"),\n    value: zod__WEBPACK_IMPORTED_MODULE_0__.z.unknown().optional(),\n    from: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().startsWith(\"/\").optional()\n});\nconst jsonPatchSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.array(operationSchema);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvbGliL3R5cGVzL3NoYXJlZC9qc29uLXBhdGNoLnRzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBOzs7O0NBSUMsR0FDdUI7QUFFeEIsd0NBQXdDO0FBQ2pDLE1BQU1DLGtCQUFrQkQsa0NBQUNBLENBQUNFLE1BQU0sQ0FBQztJQUN0Q0MsSUFBSUgsa0NBQUNBLENBQUNJLElBQUksQ0FBQztRQUFDO1FBQU87UUFBVTtRQUFXO1FBQVE7UUFBUTtLQUFPO0lBQy9EQyxNQUFNTCxrQ0FBQ0EsQ0FBQ00sTUFBTSxHQUFHQyxVQUFVLENBQUM7SUFDNUJDLE9BQU9SLGtDQUFDQSxDQUFDUyxPQUFPLEdBQUdDLFFBQVE7SUFDM0JDLE1BQU1YLGtDQUFDQSxDQUFDTSxNQUFNLEdBQUdDLFVBQVUsQ0FBQyxLQUFLRyxRQUFRO0FBQzNDLEdBQUc7QUFFSSxNQUFNRSxrQkFBa0JaLGtDQUFDQSxDQUFDYSxLQUFLLENBQUNaLGlCQUFpQiIsInNvdXJjZXMiOlsiL1VzZXJzL21hcmt1c2hvZ25lL0RvY3VtZW50cy9BUFBTL2JhemFhci12aWQvYmF6YWFyLXZpZC9hcHBzL21haW4vc3JjL2xpYi90eXBlcy9zaGFyZWQvanNvbi1wYXRjaC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFJGQy02OTAyIEpTT04tUGF0Y2ggb3BlcmF0aW9uIGxpc3Qg4oCTIHRoZSBzdWJzZXQgd2UgY2FyZSBhYm91dCBmb3IgTVZQLlxuICogTGF0ZXIgeW91IGNhbiBzd2l0Y2ggdG8gYGltcG9ydCB7IE9wZXJhdGlvbiB9IGZyb20gXCJmYXN0LWpzb24tcGF0Y2hcImBcbiAqIGlmIHlvdSBpbnN0YWxsIHRoYXQgbGliLCB0aGUgc2hhcGUgaXMgaWRlbnRpY2FsLlxuICovXG5pbXBvcnQgeyB6IH0gZnJvbSBcInpvZFwiO1xuXG4vLyBCYXNlZCBvbiBSRkMgNjkwMiBKU09OIFBhdGNoIHN0YW5kYXJkXG5leHBvcnQgY29uc3Qgb3BlcmF0aW9uU2NoZW1hID0gei5vYmplY3Qoe1xuICBvcDogei5lbnVtKFtcImFkZFwiLCBcInJlbW92ZVwiLCBcInJlcGxhY2VcIiwgXCJtb3ZlXCIsIFwiY29weVwiLCBcInRlc3RcIl0pLFxuICBwYXRoOiB6LnN0cmluZygpLnN0YXJ0c1dpdGgoXCIvXCIpLFxuICB2YWx1ZTogei51bmtub3duKCkub3B0aW9uYWwoKSxcbiAgZnJvbTogei5zdHJpbmcoKS5zdGFydHNXaXRoKFwiL1wiKS5vcHRpb25hbCgpLFxufSk7XG5cbmV4cG9ydCBjb25zdCBqc29uUGF0Y2hTY2hlbWEgPSB6LmFycmF5KG9wZXJhdGlvblNjaGVtYSk7XG5cbmV4cG9ydCB0eXBlIEpzb25QYXRjaE9wZXJhdGlvbiA9IHouaW5mZXI8dHlwZW9mIG9wZXJhdGlvblNjaGVtYT47XG5leHBvcnQgdHlwZSBKc29uUGF0Y2ggPSB6LmluZmVyPHR5cGVvZiBqc29uUGF0Y2hTY2hlbWE+OyJdLCJuYW1lcyI6WyJ6Iiwib3BlcmF0aW9uU2NoZW1hIiwib2JqZWN0Iiwib3AiLCJlbnVtIiwicGF0aCIsInN0cmluZyIsInN0YXJ0c1dpdGgiLCJ2YWx1ZSIsInVua25vd24iLCJvcHRpb25hbCIsImZyb20iLCJqc29uUGF0Y2hTY2hlbWEiLCJhcnJheSJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/types/shared/json-patch.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/types/video/remotion-constants.ts":
/*!***************************************************!*\
  !*** ./src/lib/types/video/remotion-constants.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BG_COLOR_ANIMATIONS: () => (/* binding */ BG_COLOR_ANIMATIONS),\n/* harmony export */   COMP_NAME: () => (/* binding */ COMP_NAME),\n/* harmony export */   CompositionProps: () => (/* binding */ CompositionProps),\n/* harmony export */   DEFAULT_PROJECT_PROPS: () => (/* binding */ DEFAULT_PROJECT_PROPS),\n/* harmony export */   DIRECTIONS: () => (/* binding */ DIRECTIONS),\n/* harmony export */   DURATION_IN_FRAMES: () => (/* binding */ DURATION_IN_FRAMES),\n/* harmony export */   DemoTimelineProps: () => (/* binding */ DemoTimelineProps),\n/* harmony export */   GRADIENT_TYPES: () => (/* binding */ GRADIENT_TYPES),\n/* harmony export */   PARTICLE_TYPES: () => (/* binding */ PARTICLE_TYPES),\n/* harmony export */   SCENE_TYPES: () => (/* binding */ SCENE_TYPES),\n/* harmony export */   SHAPES: () => (/* binding */ SHAPES),\n/* harmony export */   SHAPE_ANIMATIONS: () => (/* binding */ SHAPE_ANIMATIONS),\n/* harmony export */   SVG_ANIMATIONS: () => (/* binding */ SVG_ANIMATIONS),\n/* harmony export */   SVG_ICONS: () => (/* binding */ SVG_ICONS),\n/* harmony export */   TEXT_ANIMATIONS: () => (/* binding */ TEXT_ANIMATIONS),\n/* harmony export */   TRANSITIONS: () => (/* binding */ TRANSITIONS),\n/* harmony export */   VIDEO_FPS: () => (/* binding */ VIDEO_FPS),\n/* harmony export */   VIDEO_HEIGHT: () => (/* binding */ VIDEO_HEIGHT),\n/* harmony export */   VIDEO_WIDTH: () => (/* binding */ VIDEO_WIDTH),\n/* harmony export */   createDefaultProjectProps: () => (/* binding */ createDefaultProjectProps),\n/* harmony export */   defaultDemoProps: () => (/* binding */ defaultDemoProps),\n/* harmony export */   defaultMyCompProps: () => (/* binding */ defaultMyCompProps)\n/* harmony export */ });\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! uuid */ \"(rsc)/../../node_modules/uuid/dist/esm/v4.js\");\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! zod */ \"(rsc)/../../node_modules/zod/lib/index.mjs\");\n// src/types/remotion-constants.ts\n// Use a browser-compatible UUID generation approach instead of Node's crypto\n\n\nconst COMP_NAME = \"MyComp\";\nconst CompositionProps = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    title: zod__WEBPACK_IMPORTED_MODULE_0__.z.string()\n});\nconst defaultMyCompProps = {\n    title: \"Bazaar-Vid\"\n};\nconst DemoTimelineProps = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    title: zod__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    author: zod__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    imageUrl: zod__WEBPACK_IMPORTED_MODULE_0__.z.string()\n});\nconst defaultDemoProps = {\n    title: \"Bazaar-Vid\",\n    author: \"You\",\n    imageUrl: \"/demo.jpg\"\n};\n// Function to generate default project props with a welcome scene\nfunction createDefaultProjectProps() {\n    const welcomeSceneId = (0,uuid__WEBPACK_IMPORTED_MODULE_1__[\"default\"])();\n    return {\n        meta: {\n            duration: 300,\n            title: \"New Project\",\n            backgroundColor: \"#0f0f23\"\n        },\n        scenes: [\n            {\n                id: welcomeSceneId,\n                type: \"welcome\",\n                start: 0,\n                duration: 300,\n                data: {\n                    name: \"Welcome Scene\",\n                    code: `//src/remotion/components/scenes/WelcomeScene.tsx\nconst { AbsoluteFill, useCurrentFrame, useVideoConfig, interpolate, random, spring, Sequence, Img } = window.Remotion;\n\nexport default function WelcomeScene({\n  title = \"Welcome to Bazaar\",\n  subtitle = \"Transform Your Ideas Into Motion\",\n  backgroundColor = \"#0f0f23\",\n  textColor = \"#ffffff\"\n}) {\n  const frame = useCurrentFrame();\n  const { fps, durationInFrames, width, height } = useVideoConfig();\n\n  // Multi-stage animation sequences (10 seconds total)\n  // Stage 1: Logo reveal (0-2s)\n  // Stage 2: Main title and subtitle (1.5-3.5s)\n  // Stage 3: Feature showcase (3.5-6s) - FAST!\n  // Stage 4: Call to action (6-10s)\n\n  // Global exit animation (last 1 second)\n  const exitStart = durationInFrames - fps;\n  const globalFadeOut = interpolate(\n    frame,\n    [exitStart, durationInFrames],\n    [1, 0],\n    { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" }\n  );\n  const globalScaleOut = interpolate(\n    frame,\n    [exitStart, durationInFrames],\n    [1, 0.95],\n    { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" }\n  );\n\n  // Responsive sizing based on canvas width\n  const isMobile = width < 600;\n  const isTablet = width < 900;\n\n  // Logo reveal animation (0-2 seconds)\n  const logoRevealStart = 0;\n  const logoRevealEnd = fps * 2;\n  const logoProgress = spring({\n    frame: frame - logoRevealStart,\n    fps,\n    config: {\n      damping: 100,\n      stiffness: 200,\n      mass: 0.5,\n    },\n  });\n\n  // Main title animation (1.5-3.5 seconds)\n  const titleStart = fps * 1.5;\n  const titleEnd = fps * 3.5;\n  const titleOpacity = interpolate(\n    frame,\n    [titleStart, titleStart + fps * 0.8],\n    [0, 1],\n    { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" }\n  );\n  \n  const titleScale = spring({\n    frame: frame - titleStart,\n    fps,\n    config: { damping: 20, stiffness: 100 },\n  });\n\n  // Typewriter effect for title\n  const titleText = title || \"Welcome to Bazaar\";\n  const titleCharsToShow = Math.floor(\n    interpolate(\n      frame,\n      [titleStart, titleStart + fps * 1.2], // 1.2 seconds to type\n      [0, titleText.length],\n      { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" }\n    )\n  );\n  const displayedTitle = titleText.slice(0, titleCharsToShow);\n\n  // Subtitle animation with elegant fade\n  const subtitleStart = fps * 2;\n  const subtitleOpacity = interpolate(\n    frame,\n    [subtitleStart, subtitleStart + fps * 0.5],\n    [0, 1],\n    { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" }\n  );\n\n  // Feature cards animation (3.5-6 seconds) - MUCH FASTER!\n  const featuresStart = fps * 3.5;\n  const feature1Start = featuresStart;\n  const feature2Start = featuresStart + fps * 0.2; // Only 0.2s delay\n  const feature3Start = featuresStart + fps * 0.4; // Only 0.4s delay\n\n  // Call to action animation (6-10 seconds)\n  const ctaStart = fps * 6;\n  const ctaScale = spring({\n    frame: frame - ctaStart,\n    fps,\n    config: { damping: 15, stiffness: 150 },\n  });\n\n  // Typewriter effect for CTA\n  const ctaText = \"Type your first prompt to begin...\";\n  const ctaCharsToShow = Math.floor(\n    interpolate(\n      frame,\n      [ctaStart + fps * 0.5, ctaStart + fps * 2], // 1.5 seconds to type\n      [0, ctaText.length],\n      { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" }\n    )\n  );\n  const displayedCta = ctaText.slice(0, ctaCharsToShow);\n\n  // Advanced background effects\n  const bgGradientAngle = interpolate(\n    frame,\n    [0, durationInFrames],\n    [0, 360],\n    { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" }\n  );\n\n  const bgPulse = Math.sin(frame * 0.02) * 0.1 + 1;\n\n  // Particle system with depth\n  const particleCount = 60;\n  const particles = [...Array(particleCount)].map((_, i) => {\n    const layer = i < 20 ? 'back' : i < 40 ? 'mid' : 'front';\n    const size = layer === 'back' ? 2 : layer === 'mid' ? 3 : 4;\n    const speed = layer === 'back' ? 0.5 : layer === 'mid' ? 1 : 1.5;\n    const opacity = layer === 'back' ? 0.3 : layer === 'mid' ? 0.5 : 0.7;\n    \n    const startX = random(\\`particle-x-\\${i}\\`) * 100;\n    const startY = random(\\`particle-y-\\${i}\\`) * 120 - 10;\n    const amplitude = random(\\`particle-amp-\\${i}\\`) * 20 + 10;\n    \n    const x = startX + Math.sin(frame * 0.02 * speed + i) * amplitude;\n    const y = ((startY + frame * speed * 0.3) % 120) - 10;\n    \n    return { x, y, size, opacity: opacity * interpolate(\n      frame,\n      [0, fps * 2],\n      [0, 1],\n      { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" }\n    )};\n  });\n\n  // Feature card animation helper - FAST entrance\n  const getFeatureAnimation = (startFrame) => {\n    const progress = spring({\n      frame: frame - startFrame,\n      fps,\n      config: { damping: 15, stiffness: 200 }, // Stiffer spring for snappier animation\n    });\n    const slideIn = interpolate(\n      frame,\n      [startFrame, startFrame + fps * 0.3], // Only 0.3 seconds to slide in\n      [50, 0], // Reduced slide distance\n      { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" }\n    );\n    return { progress, slideIn };\n  };\n\n  return (\n    <AbsoluteFill\n      style={{\n        background: \\`\n          radial-gradient(circle at 50% 50%, rgba(168, 85, 247, 0.1) 0%, transparent 50%),\n          linear-gradient(\\${bgGradientAngle}deg, #0f0f23, #1a0f2e, #0f0f23)\n        \\`,\n        fontFamily: \"-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif\",\n        position: \"relative\",\n        overflow: \"hidden\",\n        opacity: globalFadeOut,\n        transform: \\`scale(\\${globalScaleOut})\\`,\n        transformOrigin: \"center center\",\n      }}\n    >\n      {/* Animated particle system with depth layers */}\n      <div style={{ position: \"absolute\", inset: 0 }}>\n        {particles.map((particle, i) => (\n          <div\n            key={i}\n            style={{\n              position: \"absolute\",\n              left: \\`\\${particle.x}%\\`,\n              top: \\`\\${particle.y}%\\`,\n              width: \\`\\${particle.size}px\\`,\n              height: \\`\\${particle.size}px\\`,\n              backgroundColor: \"#a855f7\",\n              borderRadius: \"50%\",\n              opacity: particle.opacity,\n              filter: \"blur(1px)\",\n              boxShadow: \"0 0 10px rgba(168, 85, 247, 0.5)\",\n            }}\n          />\n        ))}\n      </div>\n\n      {/* Animated grid background */}\n      <div\n        style={{\n          position: \"absolute\",\n          inset: 0,\n          backgroundImage: \\`\n            repeating-linear-gradient(0deg, rgba(168, 85, 247, 0.03) 0px, transparent 1px, transparent 100px, rgba(168, 85, 247, 0.03) 101px),\n            repeating-linear-gradient(90deg, rgba(168, 85, 247, 0.03) 0px, transparent 1px, transparent 100px, rgba(168, 85, 247, 0.03) 101px)\n          \\`,\n          transform: \\`scale(\\${bgPulse})\\`,\n          opacity: interpolate(frame, [0, fps * 2], [0, 1]),\n        }}\n      />\n\n      {/* Stage 1: Logo reveal */}\n      {frame >= logoRevealStart && frame < logoRevealEnd && (\n        <AbsoluteFill\n          style={{\n            justifyContent: \"center\",\n            alignItems: \"center\",\n            transform: \\`scale(\\${logoProgress})\\`,\n            opacity: interpolate(\n              frame,\n              [logoRevealEnd - fps * 0.3, logoRevealEnd],\n              [1, 0],\n              { extrapolateLeft: \"clamp\", extrapolateRight: \"clamp\" }\n            ),\n          }}\n        >\n          <div\n            style={{\n              width: \"120px\",\n              height: \"120px\",\n              background: \"linear-gradient(135deg, #a855f7, #3b82f6)\",\n              borderRadius: \"30px\",\n              display: \"flex\",\n              alignItems: \"center\",\n              justifyContent: \"center\",\n              boxShadow: \"0 20px 60px rgba(168, 85, 247, 0.4)\",\n              transform: \\`rotate(\\${interpolate(frame, [0, fps * 2], [0, 180])}deg)\\`,\n            }}\n          >\n            <div\n              style={{\n                fontSize: \"60px\",\n                fontWeight: \"bold\",\n                color: \"white\",\n                transform: \\`rotate(\\${interpolate(frame, [0, fps * 2], [0, -180])}deg)\\`,\n              }}\n            >\n              B\n            </div>\n          </div>\n        </AbsoluteFill>\n      )}\n\n      {/* Stage 2: Main title and subtitle */}\n      <Sequence from={titleStart} durationInFrames={titleEnd - titleStart}>\n        <AbsoluteFill\n          style={{\n            justifyContent: \"center\",\n            alignItems: \"center\",\n            flexDirection: \"column\",\n          }}\n        >\n          <h1\n            style={{\n              fontSize: isMobile ? \"2.5rem\" : isTablet ? \"3.5rem\" : \"5rem\",\n              fontWeight: \"800\",\n              margin: 0,\n              opacity: titleOpacity,\n              transform: \\`scale(\\${titleScale})\\`,\n              background: \"linear-gradient(135deg, #ffffff, #a855f7, #3b82f6)\",\n              backgroundClip: \"text\",\n              WebkitBackgroundClip: \"text\",\n              WebkitTextFillColor: \"transparent\",\n              letterSpacing: \"-2px\",\n              textAlign: \"center\",\n              filter: \"drop-shadow(0 4px 20px rgba(168, 85, 247, 0.3))\",\n              padding: \"0 20px\",\n            }}\n          >\n            {displayedTitle}\n            <span style={{\n              opacity: Math.floor(frame / 15) % 2 ? 1 : 0,\n              marginLeft: \"2px\"\n            }}>|</span>\n          </h1>\n          \n          <p\n            style={{\n              fontSize: isMobile ? \"1.2rem\" : isTablet ? \"1.5rem\" : \"2rem\",\n              fontWeight: \"300\",\n              color: \"#e0e0e0\",\n              marginTop: \"1rem\",\n              opacity: subtitleOpacity,\n              transform: \\`translateY(\\${interpolate(\n                frame,\n                [subtitleStart, subtitleStart + fps],\n                [30, 0]\n              )}px)\\`,\n              letterSpacing: \"1px\",\n              textAlign: \"center\",\n              padding: \"0 20px\",\n              maxWidth: isMobile ? \"90%\" : \"80%\",\n            }}\n          >\n            {subtitle}\n          </p>\n        </AbsoluteFill>\n      </Sequence>\n\n      {/* Stage 3: Feature showcase */}\n      <Sequence from={featuresStart} durationInFrames={fps * 2.5}>\n        <AbsoluteFill\n          style={{\n            justifyContent: \"center\",\n            alignItems: \"center\",\n            padding: \"0 5%\",\n          }}\n        >\n          <div\n            style={{\n              display: \"flex\",\n              gap: isMobile ? \"1rem\" : \"2rem\",\n              maxWidth: isMobile ? \"100%\" : \"1200px\",\n              width: \"100%\",\n              justifyContent: \"center\",\n              flexWrap: isMobile ? \"nowrap\" : \"wrap\",\n              flexDirection: isMobile ? \"column\" : \"row\",\n              alignItems: \"center\",\n              padding: isMobile ? \"0 20px\" : \"0\",\n            }}\n          >\n            {/* Feature 1: Upload Image */}\n            <div\n              style={{\n                ...getFeatureCardStyle(),\n                transform: \\`translateX(\\${getFeatureAnimation(feature1Start).slideIn}px) scale(\\${getFeatureAnimation(feature1Start).progress})\\`,\n                opacity: getFeatureAnimation(feature1Start).progress,\n              }}\n            >\n              <div style={getIconStyle(\"#a855f7\")}>📸</div>\n              <h3 style={getFeatureTitle()}>Upload Images</h3>\n              <p style={getFeatureDescription()}>\n                Start with your own visuals\n              </p>\n            </div>\n\n            {/* Feature 2: AI Generation */}\n            <div\n              style={{\n                ...getFeatureCardStyle(),\n                transform: \\`translateX(\\${getFeatureAnimation(feature2Start).slideIn}px) scale(\\${getFeatureAnimation(feature2Start).progress})\\`,\n                opacity: getFeatureAnimation(feature2Start).progress,\n              }}\n            >\n              <div style={getIconStyle(\"#3b82f6\")}>✨</div>\n              <h3 style={getFeatureTitle()}>AI-Powered</h3>\n              <p style={getFeatureDescription()}>\n                Generate motion graphics instantly\n              </p>\n            </div>\n\n            {/* Feature 3: Export Ready */}\n            <div\n              style={{\n                ...getFeatureCardStyle(),\n                transform: \\`translateX(\\${getFeatureAnimation(feature3Start).slideIn}px) scale(\\${getFeatureAnimation(feature3Start).progress})\\`,\n                opacity: getFeatureAnimation(feature3Start).progress,\n              }}\n            >\n              <div style={getIconStyle(\"#10b981\")}>🚀</div>\n              <h3 style={getFeatureTitle()}>Twitter-Ready</h3>\n              <p style={getFeatureDescription()}>\n                Export in minutes, not hours\n              </p>\n            </div>\n          </div>\n        </AbsoluteFill>\n      </Sequence>\n\n      {/* Stage 4: Call to action */}\n      <Sequence from={ctaStart} durationInFrames={fps * 4}>\n        <AbsoluteFill\n          style={{\n            justifyContent: \"center\",\n            alignItems: \"center\",\n            flexDirection: \"column\",\n          }}\n        >\n          <div\n            style={{\n              transform: \\`scale(\\${ctaScale})\\`,\n              textAlign: \"center\",\n            }}\n          >\n            <div\n              style={{\n                fontSize: \"2.5rem\",\n                fontWeight: \"600\",\n                color: \"white\",\n                marginBottom: \"2rem\",\n                opacity: interpolate(\n                  frame,\n                  [ctaStart, ctaStart + fps],\n                  [0, 1]\n                ),\n              }}\n            >\n              Ready to Create?\n            </div>\n            \n            <div\n              style={{\n                background: \"linear-gradient(135deg, #a855f7, #3b82f6)\",\n                padding: \"1.5rem 3rem\",\n                borderRadius: \"100px\",\n                fontSize: \"1.2rem\",\n                fontWeight: \"600\",\n                color: \"white\",\n                boxShadow: \"0 10px 40px rgba(168, 85, 247, 0.4)\",\n                transform: \\`translateY(\\${interpolate(\n                  frame,\n                  [ctaStart + fps * 0.5, ctaStart + fps * 1.5],\n                  [20, 0]\n                )}px)\\`,\n                opacity: interpolate(\n                  frame,\n                  [ctaStart + fps * 0.5, ctaStart + fps * 1.5],\n                  [0, 1]\n                ),\n              }}\n            >\n              {displayedCta}\n              <span style={{\n                opacity: Math.floor(frame / 15) % 2 ? 1 : 0,\n                marginLeft: \"2px\"\n              }}>|</span>\n            </div>\n\n            {/* Pulsing indicator */}\n            <div\n              style={{\n                marginTop: \"2rem\",\n                display: \"flex\",\n                gap: \"0.5rem\",\n                justifyContent: \"center\",\n                opacity: interpolate(\n                  frame,\n                  [ctaStart + fps * 2, ctaStart + fps * 3],\n                  [0, 1]\n                ),\n              }}\n            >\n              {[0, 1, 2].map((i) => (\n                <div\n                  key={i}\n                  style={{\n                    width: \"8px\",\n                    height: \"8px\",\n                    borderRadius: \"50%\",\n                    backgroundColor: \"#a855f7\",\n                    opacity: Math.sin((frame - ctaStart - fps * 2) * 0.05 + i * 1.5) * 0.5 + 0.5,\n                  }}\n                />\n              ))}\n            </div>\n          </div>\n        </AbsoluteFill>\n      </Sequence>\n    </AbsoluteFill>\n  );\n\n  // Helper functions for consistent styling\n  function getFeatureCardStyle() {\n    return {\n      background: \"rgba(255, 255, 255, 0.05)\",\n      backdropFilter: \"blur(20px)\",\n      border: \"1px solid rgba(255, 255, 255, 0.1)\",\n      borderRadius: \"20px\",\n      padding: isMobile ? \"1.5rem\" : \"2rem\",\n      width: isMobile ? \"100%\" : \"300px\",\n      maxWidth: isMobile ? \"280px\" : \"300px\",\n      textAlign: \"center\",\n      boxShadow: \"0 10px 30px rgba(0, 0, 0, 0.2)\",\n    };\n  }\n\n  function getIconStyle(color) {\n    return {\n      fontSize: \"3rem\",\n      marginBottom: \"1rem\",\n      filter: \\`drop-shadow(0 0 20px \\${color})\\`,\n    };\n  }\n\n  function getFeatureTitle() {\n    return {\n      fontSize: \"1.5rem\",\n      fontWeight: \"600\",\n      color: \"white\",\n      marginBottom: \"0.5rem\",\n    };\n  }\n\n  function getFeatureDescription() {\n    return {\n      fontSize: \"1rem\",\n      color: \"rgba(255, 255, 255, 0.7)\",\n      lineHeight: \"1.5\",\n    };\n  }\n}`,\n                    isWelcomeScene: true\n                }\n            }\n        ]\n    };\n}\n// Legacy constant for backward compatibility - but should not be used for new projects\nconst DEFAULT_PROJECT_PROPS = {\n    meta: {\n        duration: 150,\n        title: \"My First Video\"\n    },\n    scenes: [\n        {\n            id: (0,uuid__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(),\n            type: \"text\",\n            start: 0,\n            duration: 60,\n            data: {\n                text: \"Welcome to your new video\",\n                color: \"#FFFFFF\",\n                fontSize: 70,\n                backgroundColor: \"#000000\"\n            }\n        }\n    ]\n};\n// Constants for scene types\nconst SCENE_TYPES = [\n    \"welcome\",\n    \"text\",\n    \"image\",\n    \"custom\",\n    \"background-color\",\n    \"shape\",\n    \"simple-shape\",\n    \"gradient\",\n    \"particles\",\n    \"text-animation\",\n    \"split-screen\",\n    \"zoom-pan\",\n    \"svg-animation\",\n    \"simple-colored-shape\"\n];\n// Constants for shape types\nconst SHAPES = [\n    \"circle\",\n    \"square\",\n    \"triangle\",\n    \"star\",\n    \"heart\"\n];\n// Constants for transitions\nconst TRANSITIONS = [\n    \"fade\",\n    \"slide\",\n    \"wipe\"\n];\n// Constants for directions\nconst DIRECTIONS = [\n    \"from-left\",\n    \"from-right\",\n    \"from-top\",\n    \"from-bottom\"\n];\n// Constants for text animations\nconst TEXT_ANIMATIONS = [\n    \"typewriter\",\n    \"fadeLetters\",\n    \"slideUp\",\n    \"bounce\",\n    \"wavy\"\n];\n// Constants for shape animations\nconst SHAPE_ANIMATIONS = [\n    \"pulse\",\n    \"rotate\",\n    \"bounce\",\n    \"scale\"\n];\n// Constants for background color animations\nconst BG_COLOR_ANIMATIONS = [\n    \"fade\",\n    \"spring\",\n    \"pulse\"\n];\n// Constants for gradient types\nconst GRADIENT_TYPES = [\n    \"linear\",\n    \"radial\",\n    \"conic\"\n];\n// Constants for particle types\nconst PARTICLE_TYPES = [\n    \"circle\",\n    \"square\",\n    \"dot\",\n    \"star\"\n];\n// Constants for SVG animations\nconst SVG_ANIMATIONS = [\n    \"draw\",\n    \"scale\",\n    \"rotate\",\n    \"fade\",\n    \"moveIn\"\n];\n// Constants for SVG icons\nconst SVG_ICONS = [\n    \"circle\",\n    \"square\",\n    \"triangle\",\n    \"star\",\n    \"heart\",\n    \"checkmark\",\n    \"cross\",\n    \"arrow\"\n];\nconst DURATION_IN_FRAMES = 200;\nconst VIDEO_WIDTH = 1280;\nconst VIDEO_HEIGHT = 720;\nconst VIDEO_FPS = 30;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/types/video/remotion-constants.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/utils/codeDurationExtractor.ts":
/*!************************************************!*\
  !*** ./src/lib/utils/codeDurationExtractor.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   analyzeDuration: () => (/* binding */ analyzeDuration),\n/* harmony export */   extractDurationFromCode: () => (/* binding */ extractDurationFromCode),\n/* harmony export */   framesToSeconds: () => (/* binding */ framesToSeconds),\n/* harmony export */   secondsToFrames: () => (/* binding */ secondsToFrames)\n/* harmony export */ });\n/**\n * Extracts the actual duration from generated Remotion code by analyzing\n * interpolate() calls, animation timings, and frame-based logic.\n * \n * This fixes the issue where scenes always show 6 seconds (180 frames) instead\n * of the actual animation duration specified in the generated code.\n */ /**\n * Calculate intelligent scene duration by adding buffers based on animation complexity\n */ function calculateSmartDuration(rawAnimationDuration, code, ranges) {\n    const MIN_PRACTICAL_DURATION = 60; // 2 seconds minimum for any scene\n    const BUFFER_FRAMES = 30; // 1 second buffer for breathing room\n    // Start with the raw animation duration\n    let smartDuration = rawAnimationDuration;\n    // Always add a basic buffer for breathing room\n    smartDuration += BUFFER_FRAMES;\n    // Add complexity-based adjustments\n    const codeLength = code.length;\n    const animationCount = ranges.length;\n    const hasMultipleAnimations = animationCount > 1;\n    const hasComplexLogic = code.includes('if') || code.includes('switch') || code.includes('map');\n    // Extra buffer for complex scenes\n    if (codeLength > 2000 || hasMultipleAnimations || hasComplexLogic) {\n        smartDuration += 15; // Extra 0.5 seconds for complex scenes\n    }\n    // Ensure minimum practical duration\n    smartDuration = Math.max(smartDuration, MIN_PRACTICAL_DURATION);\n    return smartDuration;\n}\nfunction extractDurationFromCode(code) {\n    const DEFAULT_DURATION = 180; // 6 seconds at 30fps - fallback only\n    const MIN_ANIMATION_DURATION = 30; // 1 second minimum for valid animation detection\n    const MIN_PRACTICAL_DURATION = 60; // 2 seconds minimum for a practical scene\n    const MAX_DURATION = 900; // 30 seconds maximum\n    try {\n        // Remove comments and clean the code for parsing\n        const cleanCode = code.replace(/\\/\\*[\\s\\S]*?\\*\\//g, '').replace(/\\/\\/.*$/gm, '');\n        const ranges = [];\n        // Pattern 1: Direct interpolate calls with frame ranges\n        // Example: interpolate(frame, [0, 90], [0, 1])\n        const interpolateRegex = /interpolate\\s*\\(\\s*\\w+\\s*,\\s*\\[\\s*(\\d+)\\s*,\\s*(\\d+)\\s*\\]/g;\n        let match;\n        while((match = interpolateRegex.exec(cleanCode)) !== null){\n            const startFrame = match[1] ? parseInt(match[1], 10) : NaN;\n            const endFrame = match[2] ? parseInt(match[2], 10) : NaN;\n            if (!isNaN(startFrame) && !isNaN(endFrame) && endFrame > startFrame) {\n                ranges.push({\n                    startFrame,\n                    endFrame,\n                    purpose: 'interpolate'\n                });\n            }\n        }\n        // Pattern 2: Spring animations with durationInFrames\n        // Example: spring({frame, fps, from: 0, to: 1, durationInFrames: fps * 0.8})\n        const springRegex = /spring\\s*\\(\\s*\\{[^}]*durationInFrames:\\s*fps\\s*\\*\\s*([\\d.]+)[^}]*\\}/g;\n        while((match = springRegex.exec(cleanCode)) !== null){\n            const multiplier = match[1] ? parseFloat(match[1]) : NaN;\n            if (!isNaN(multiplier) && multiplier > 0) {\n                const durationFrames = Math.round(30 * multiplier); // Assume 30fps\n                ranges.push({\n                    startFrame: 0,\n                    endFrame: durationFrames,\n                    purpose: 'spring-animation'\n                });\n            }\n        }\n        // Pattern 3: Frame offset patterns (for staggered animations)\n        // Example: frame - 38, frame - 16\n        const frameOffsetRegex = /frame\\s*-\\s*(\\d+)/g;\n        while((match = frameOffsetRegex.exec(cleanCode)) !== null){\n            const offset = match[1] ? parseInt(match[1], 10) : NaN;\n            if (!isNaN(offset) && offset > 0) {\n                ranges.push({\n                    startFrame: offset,\n                    endFrame: offset + 30,\n                    purpose: 'frame-offset'\n                });\n            }\n        }\n        // Pattern 4: FPS-based duration patterns\n        // Example: fps * 0.8, fps * 1.5\n        const fpsDurationRegex = /fps\\s*\\*\\s*([\\d.]+)/g;\n        while((match = fpsDurationRegex.exec(cleanCode)) !== null){\n            const multiplier = match[1] ? parseFloat(match[1]) : NaN;\n            if (!isNaN(multiplier) && multiplier > 0) {\n                const durationFrames = Math.round(30 * multiplier); // Assume 30fps\n                ranges.push({\n                    startFrame: 0,\n                    endFrame: durationFrames,\n                    purpose: 'fps-duration'\n                });\n            }\n        }\n        // Pattern 5: useCurrentFrame with explicit frame checks\n        // Example: frame < 60, frame > 120\n        const frameComparisonRegex = /frame\\s*[<>]=?\\s*(\\d+)/g;\n        while((match = frameComparisonRegex.exec(cleanCode)) !== null){\n            const frameValue = match[1] ? parseInt(match[1], 10) : NaN;\n            if (!isNaN(frameValue) && frameValue > 0) {\n                ranges.push({\n                    startFrame: 0,\n                    endFrame: frameValue,\n                    purpose: 'frame-comparison'\n                });\n            }\n        }\n        // Pattern 6: Animation duration comments or constants\n        // Example: // Duration: 3 seconds, const DURATION = 90\n        const durationCommentRegex = /(?:duration|DURATION).*?(\\d+).*?(?:second|frame)/gi;\n        while((match = durationCommentRegex.exec(cleanCode)) !== null){\n            const value = match[1] ? parseInt(match[1], 10) : NaN;\n            if (!isNaN(value)) {\n                // If it's seconds, convert to frames (assuming 30fps)\n                const frames = match[0] && match[0].toLowerCase().includes('second') ? value * 30 : value;\n                if (frames > 0) {\n                    ranges.push({\n                        startFrame: 0,\n                        endFrame: frames,\n                        purpose: 'duration-comment'\n                    });\n                }\n            }\n        }\n        // Pattern 7: Sequence-based animations with delays\n        // Example: delay + duration patterns\n        const sequenceRegex = /(\\w+)\\s*\\+\\s*(\\d+)|delay.*?(\\d+).*?duration.*?(\\d+)/gi;\n        while((match = sequenceRegex.exec(cleanCode)) !== null){\n            // Look for delay + duration patterns\n            const delay = match[3] ? parseInt(match[3], 10) : 0;\n            const duration = match[4] ? parseInt(match[4], 10) : match[2] ? parseInt(match[2], 10) : 0;\n            if (!isNaN(delay) && !isNaN(duration) && duration > 0) {\n                ranges.push({\n                    startFrame: delay,\n                    endFrame: delay + duration,\n                    purpose: 'sequence'\n                });\n            }\n        }\n        // If no ranges found, look for any numeric values that might represent frames\n        if (ranges.length === 0) {\n            const numberRegex = /\\b(\\d{2,3})\\b/g;\n            const numbers = [];\n            while((match = numberRegex.exec(cleanCode)) !== null){\n                const num = match[1] ? parseInt(match[1], 10) : NaN;\n                // Only consider reasonable frame numbers (between 30 and 900)\n                if (!isNaN(num) && num >= MIN_ANIMATION_DURATION && num <= MAX_DURATION) {\n                    numbers.push(num);\n                }\n            }\n            if (numbers.length > 0) {\n                // Use the largest reasonable number as likely duration\n                const maxFrames = Math.max(...numbers);\n                ranges.push({\n                    startFrame: 0,\n                    endFrame: maxFrames,\n                    purpose: 'numeric-heuristic'\n                });\n            }\n        }\n        // Calculate the maximum end frame from all ranges\n        if (ranges.length > 0) {\n            const rawAnimationDuration = Math.max(...ranges.map((r)=>r.endFrame));\n            // Validate the extracted animation duration\n            if (rawAnimationDuration >= MIN_ANIMATION_DURATION && rawAnimationDuration <= MAX_DURATION) {\n                // 🧠 SMART DURATION: Add intelligent buffer based on animation complexity\n                const smartDuration = calculateSmartDuration(rawAnimationDuration, code, ranges);\n                // console.log(`[CodeDurationExtractor] Raw animation: ${rawAnimationDuration} frames → Smart duration: ${smartDuration} frames from ${ranges.length} range(s)`);\n                //console.log(`[CodeDurationExtractor] Ranges found:`, ranges);\n                return smartDuration;\n            } else {\n            // console.warn(`[CodeDurationExtractor] Extracted duration ${rawAnimationDuration} frames is outside valid range (${MIN_ANIMATION_DURATION}-${MAX_DURATION}), using default`);\n            }\n        }\n        //  console.warn(`[CodeDurationExtractor] No valid animation ranges found in code, using default ${DEFAULT_DURATION} frames`);\n        return DEFAULT_DURATION;\n    } catch (error) {\n        // console.error('[CodeDurationExtractor] Error parsing code:', error);\n        return DEFAULT_DURATION;\n    }\n}\n/**\n * Helper function to convert seconds to frames at 30fps\n */ function secondsToFrames(seconds) {\n    return Math.round(seconds * 30);\n}\n/**\n * Helper function to convert frames to seconds at 30fps\n */ function framesToSeconds(frames) {\n    return Math.round(frames / 30 * 10) / 10; // Round to 1 decimal place\n}\n/**\n * Analyze code and provide a human-readable duration summary\n */ function analyzeDuration(code) {\n    const frames = extractDurationFromCode(code);\n    const seconds = framesToSeconds(frames);\n    // Determine confidence based on what was found in the code\n    let confidence = 'low';\n    let source = 'default fallback';\n    if (code.includes('spring(') && code.includes('durationInFrames')) {\n        confidence = 'high';\n        source = 'spring animations + smart buffer';\n    } else if (code.includes('interpolate(')) {\n        confidence = 'high';\n        source = 'interpolate calls + smart buffer';\n    } else if (code.includes('fps *') || /frame\\s*-\\s*\\d+/.test(code)) {\n        confidence = 'medium';\n        source = 'fps timing + frame offsets + smart buffer';\n    } else if (code.includes('frame')) {\n        confidence = 'medium';\n        source = 'frame logic + smart buffer';\n    } else if (/\\b\\d{2,3}\\b/.test(code)) {\n        confidence = 'low';\n        source = 'numeric heuristics + smart buffer';\n    }\n    return {\n        frames,\n        seconds,\n        confidence,\n        source\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/utils/codeDurationExtractor.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/utils/logger.ts":
/*!*********************************!*\
  !*** ./src/lib/utils/logger.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   agentLogger: () => (/* binding */ agentLogger),\n/* harmony export */   animationDesignerLogger: () => (/* binding */ animationDesignerLogger),\n/* harmony export */   apiLogger: () => (/* binding */ apiLogger),\n/* harmony export */   authLogger: () => (/* binding */ authLogger),\n/* harmony export */   buildLogger: () => (/* binding */ buildLogger),\n/* harmony export */   chatLogger: () => (/* binding */ chatLogger),\n/* harmony export */   componentLogger: () => (/* binding */ componentLogger),\n/* harmony export */   cronLogger: () => (/* binding */ cronLogger),\n/* harmony export */   dbLogger: () => (/* binding */ dbLogger),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   initializeSystemFileTransport: () => (/* binding */ initializeSystemFileTransport),\n/* harmony export */   isSystemFileTransportInitialized: () => (/* binding */ isSystemFileTransportInitialized),\n/* harmony export */   logAgentProcess: () => (/* binding */ logAgentProcess),\n/* harmony export */   logAgentSend: () => (/* binding */ logAgentSend),\n/* harmony export */   logAnimationComplete: () => (/* binding */ logAnimationComplete),\n/* harmony export */   logAnimationStart: () => (/* binding */ logAnimationStart),\n/* harmony export */   logAnimationValidation: () => (/* binding */ logAnimationValidation),\n/* harmony export */   logBuildCompile: () => (/* binding */ logBuildCompile),\n/* harmony export */   logBuildComplete: () => (/* binding */ logBuildComplete),\n/* harmony export */   logBuildDebug: () => (/* binding */ logBuildDebug),\n/* harmony export */   logBuildStart: () => (/* binding */ logBuildStart),\n/* harmony export */   logBuildUpload: () => (/* binding */ logBuildUpload),\n/* harmony export */   logBuildWarn: () => (/* binding */ logBuildWarn),\n/* harmony export */   logChatComplete: () => (/* binding */ logChatComplete),\n/* harmony export */   logChatStream: () => (/* binding */ logChatStream),\n/* harmony export */   logChatTool: () => (/* binding */ logChatTool),\n/* harmony export */   logScenePlannerAdb: () => (/* binding */ logScenePlannerAdb),\n/* harmony export */   logScenePlannerComplete: () => (/* binding */ logScenePlannerComplete),\n/* harmony export */   logScenePlannerComponent: () => (/* binding */ logScenePlannerComponent),\n/* harmony export */   logScenePlannerDb: () => (/* binding */ logScenePlannerDb),\n/* harmony export */   logScenePlannerDebug: () => (/* binding */ logScenePlannerDebug),\n/* harmony export */   logSystemEvent: () => (/* binding */ logSystemEvent),\n/* harmony export */   logSystemProcess: () => (/* binding */ logSystemProcess),\n/* harmony export */   logger: () => (/* binding */ logger),\n/* harmony export */   modelsLogger: () => (/* binding */ modelsLogger),\n/* harmony export */   pageLogger: () => (/* binding */ pageLogger),\n/* harmony export */   scenePlannerLogger: () => (/* binding */ scenePlannerLogger),\n/* harmony export */   systemLogger: () => (/* binding */ systemLogger),\n/* harmony export */   toolsLogger: () => (/* binding */ toolsLogger),\n/* harmony export */   workerLogger: () => (/* binding */ workerLogger)\n/* harmony export */ });\n/* harmony import */ var winston__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! winston */ \"(rsc)/../../node_modules/winston/lib/winston.js\");\n/* harmony import */ var winston__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(winston__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var winston_daily_rotate_file__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! winston-daily-rotate-file */ \"(rsc)/../../node_modules/winston-daily-rotate-file/index.js\");\n/* harmony import */ var winston_daily_rotate_file__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(winston_daily_rotate_file__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(fs__WEBPACK_IMPORTED_MODULE_3__);\n// src/lib/logger.ts\n\n\n\n\n// Check if we're running on the server or in the browser\nconst isServer = \"undefined\" === 'undefined';\n// Check if we're in a production serverless environment\nconst isServerlessProduction = process.env.VERCEL || process.env.AWS_LAMBDA_FUNCTION_NAME || process.env.NETLIFY;\n// Create formatters\nconst consoleFormat = winston__WEBPACK_IMPORTED_MODULE_0__.format.combine(winston__WEBPACK_IMPORTED_MODULE_0__.format.colorize(), winston__WEBPACK_IMPORTED_MODULE_0__.format.timestamp(), winston__WEBPACK_IMPORTED_MODULE_0__.format.printf(({ timestamp, level, message, ...meta })=>{\n    const metaStr = Object.keys(meta).length ? JSON.stringify(meta, null, 2) : '';\n    return `${timestamp} [${level}]: ${message} ${metaStr}`;\n}));\nconst fileFormat = winston__WEBPACK_IMPORTED_MODULE_0__.format.combine(winston__WEBPACK_IMPORTED_MODULE_0__.format.timestamp(), winston__WEBPACK_IMPORTED_MODULE_0__.format.json());\n// Track if system file transport has been initialized to prevent duplicates\nlet systemFileTransportInitialized = false;\n// Create either a server logger or a console logger\nlet logger;\n// Safe directory creation function\nconst safeCreateDir = (dir)=>{\n    if (isServerlessProduction) {\n        // console.log(`[LOGGER] Skipping directory creation in serverless environment: ${dir}`);\n        return false;\n    }\n    try {\n        if (!fs__WEBPACK_IMPORTED_MODULE_3___default().existsSync(dir)) {\n            fs__WEBPACK_IMPORTED_MODULE_3___default().mkdirSync(dir, {\n                recursive: true\n            });\n        // console.log(`Created log directory: ${dir}`);\n        }\n        return true;\n    } catch (error) {\n        // console.warn(`[LOGGER] Could not create directory ${dir}: ${error}. Continuing without file logging.`);\n        return false;\n    }\n};\n// Initialize both server-side and client-side loggers\nif (isServer) {\n    // Get log directories from environment variables or use defaults\n    const logsDir = process.env.LOG_DIR || path__WEBPACK_IMPORTED_MODULE_2___default().join(process.cwd(), 'logs');\n    const errorLogsDir = process.env.ERROR_LOG_DIR || logsDir;\n    const combinedLogsDir = process.env.COMBINED_LOG_DIR || logsDir;\n    const componentsLogsDir = process.env.COMPONENTS_LOG_DIR || logsDir;\n    // Log the directories being used\n    // console.log(`Logger initialization with: LOG_DIR=${logsDir}, ERROR_DIR=${errorLogsDir}`);\n    // Create base transports (always include console)\n    const baseTransports = [\n        new winston__WEBPACK_IMPORTED_MODULE_0__.transports.Console({\n            format: consoleFormat,\n            level: process.env.LOG_LEVEL || 'info'\n        })\n    ];\n    // Only add file transports if we can create directories\n    if (!isServerlessProduction) {\n        // Ensure logs directories exist\n        const dirsCreated = [\n            logsDir,\n            errorLogsDir,\n            combinedLogsDir,\n            componentsLogsDir\n        ].map(safeCreateDir);\n        // Only add file transports if directories were created successfully\n        if (dirsCreated.some((created)=>created)) {\n            if (safeCreateDir(logsDir)) {\n                baseTransports.push(new winston__WEBPACK_IMPORTED_MODULE_0__.transports.DailyRotateFile({\n                    dirname: logsDir,\n                    filename: 'components-%DATE%.log',\n                    datePattern: 'YYYY-MM-DD',\n                    maxSize: '20m',\n                    maxFiles: '14d',\n                    format: fileFormat\n                }));\n            }\n            if (safeCreateDir(errorLogsDir)) {\n                baseTransports.push(new winston__WEBPACK_IMPORTED_MODULE_0__.transports.DailyRotateFile({\n                    dirname: errorLogsDir,\n                    filename: 'error-%DATE%.log',\n                    datePattern: 'YYYY-MM-DD',\n                    maxSize: '20m',\n                    maxFiles: '14d',\n                    level: 'error',\n                    format: fileFormat\n                }));\n            }\n            if (safeCreateDir(combinedLogsDir)) {\n                baseTransports.push(new winston__WEBPACK_IMPORTED_MODULE_0__.transports.DailyRotateFile({\n                    dirname: combinedLogsDir,\n                    filename: 'combined-%DATE%.log',\n                    datePattern: 'YYYY-MM-DD',\n                    maxSize: '20m',\n                    maxFiles: '14d',\n                    format: fileFormat\n                }));\n            }\n        }\n    }\n    // Create the main logger with safe transports\n    logger = (0,winston__WEBPACK_IMPORTED_MODULE_0__.createLogger)({\n        level: 'debug',\n        format: fileFormat,\n        defaultMeta: {},\n        transports: baseTransports\n    });\n    // Set up components logger with safe transports\n    const componentsTransports = [\n        new winston__WEBPACK_IMPORTED_MODULE_0__.transports.Console({\n            format: consoleFormat,\n            level: process.env.LOG_LEVEL || 'info'\n        })\n    ];\n    if (!isServerlessProduction && safeCreateDir(componentsLogsDir)) {\n        componentsTransports.push(new winston__WEBPACK_IMPORTED_MODULE_0__.transports.DailyRotateFile({\n            dirname: componentsLogsDir,\n            filename: 'components-%DATE%.log',\n            datePattern: 'YYYY-MM-DD',\n            maxSize: '20m',\n            maxFiles: '14d',\n            format: fileFormat\n        }));\n    }\n    const componentsLogger = (0,winston__WEBPACK_IMPORTED_MODULE_0__.createLogger)({\n        level: 'debug',\n        format: fileFormat,\n        defaultMeta: {},\n        transports: componentsTransports\n    });\n// Log the environment variables affecting logger console level\n// console.log(`[DEBUG_LOGGER] LOGGING_MODE: ${process.env.LOGGING_MODE}, LOG_LEVEL: ${process.env.LOG_LEVEL}`)\n// console.log(`Logger initialized with log directories: main=${logsDir}, error=${errorLogsDir}, combined=${combinedLogsDir}`);\n} else {\n    // Simple console logger for client-side\n    logger = (0,winston__WEBPACK_IMPORTED_MODULE_0__.createLogger)({\n        level: 'info',\n        format: fileFormat,\n        transports: [\n            new winston__WEBPACK_IMPORTED_MODULE_0__.transports.Console({\n                format: consoleFormat\n            })\n        ]\n    });\n    // Create a separate system logger\n    const systemLogger = (0,winston__WEBPACK_IMPORTED_MODULE_0__.createLogger)({\n        level: 'info',\n        format: fileFormat,\n        defaultMeta: {\n            system: true\n        },\n        transports: [\n            new winston__WEBPACK_IMPORTED_MODULE_0__.transports.Console({\n                format: consoleFormat\n            })\n        ]\n    });\n    // Create a separate components logger\n    const componentsLogger = (0,winston__WEBPACK_IMPORTED_MODULE_0__.createLogger)({\n        level: 'info',\n        format: fileFormat,\n        defaultMeta: {},\n        transports: [\n            new winston__WEBPACK_IMPORTED_MODULE_0__.transports.Console({\n                format: consoleFormat\n            })\n        ]\n    });\n}\n// Function to initialize system file transport if requested\nconst initializeSystemFileTransport = ()=>{\n    // Skip file transport initialization in serverless production environments\n    if (isServerlessProduction) {\n        // console.log('[LOGGER] Skipping system file transport initialization in serverless environment');\n        systemFileTransportInitialized = true;\n        return;\n    }\n    if (systemFileTransportInitialized) {\n        // console.log('[LOGGER] System file transport already initialized, skipping...');\n        return;\n    }\n    const isTestMode = \"development\" === 'test';\n    const systemLogsDir = isTestMode ? path__WEBPACK_IMPORTED_MODULE_2___default().join(process.cwd(), 'tmp', 'system-test-logs') : path__WEBPACK_IMPORTED_MODULE_2___default().join(process.cwd(), 'logs', 'system');\n    // Ensure directory exists - but only in non-serverless environments\n    try {\n        if (!fs__WEBPACK_IMPORTED_MODULE_3___default().existsSync(systemLogsDir)) {\n            fs__WEBPACK_IMPORTED_MODULE_3___default().mkdirSync(systemLogsDir, {\n                recursive: true\n            });\n        // console.log(`Created system log directory: ${systemLogsDir}`);\n        }\n    } catch (error) {\n        // console.warn(`[LOGGER] Could not create system log directory: ${error}. Continuing without file logging.`);\n        systemFileTransportInitialized = true;\n        return;\n    }\n    // Add file transport to the logger\n    systemLogger.add(new winston__WEBPACK_IMPORTED_MODULE_0__.transports.DailyRotateFile({\n        level: process.env.LOG_LEVEL || 'debug',\n        dirname: systemLogsDir,\n        filename: 'system-%DATE%.log',\n        datePattern: 'YYYY-MM-DD',\n        maxSize: '20m',\n        maxFiles: '14d',\n        format: fileFormat\n    }));\n    systemFileTransportInitialized = true;\n    systemLogger.info(`System file transport initialized in ${isTestMode ? 'TEST' : 'NORMAL'} mode`);\n    systemLogger.info(`System file transport initialized with logs at: ${systemLogsDir}`);\n};\n// Allow processes to explicitly check if the file transport is initialized\nfunction isSystemFileTransportInitialized() {\n    return systemFileTransportInitialized;\n}\nconst chatLogger = logger.child({\n    module: 'chat'\n});\nconst origChatInfo = chatLogger.info.bind(chatLogger);\nconst origChatError = chatLogger.error.bind(chatLogger);\nchatLogger.error = (messageOrInfo, ...args)=>{\n    let msg;\n    let meta = {};\n    if (typeof messageOrInfo === 'string') {\n        msg = messageOrInfo;\n        if (args.length > 0 && typeof args[0] === 'object' && args[0] !== null) {\n            meta = args[0];\n        } else if (args.length > 0) {\n            meta = {\n                splat: args\n            };\n        }\n    } else {\n        const infoObj = messageOrInfo;\n        msg = infoObj.message || '';\n        const { message: _msg, level: _lvl, timestamp: _ts, ...restInfo } = infoObj;\n        meta = restInfo;\n    }\n    const messageId = meta?.messageId || 'unknown-message';\n    const fullMessage = `[CHAT:ERROR][MSG:${messageId}] ${msg}`;\n    const { messageId: _mId, ...metaForOrigCall } = meta;\n    const finalMetaForOrigCall = {\n        ...metaForOrigCall,\n        taskId: messageId,\n        chat: true\n    };\n    origChatError(fullMessage, finalMetaForOrigCall);\n    return chatLogger;\n};\nchatLogger.info = (messageOrInfo, ...args)=>{\n    let msg;\n    let meta = {};\n    if (typeof messageOrInfo === 'string') {\n        msg = messageOrInfo;\n        if (args.length > 0 && typeof args[0] === 'object' && args[0] !== null) {\n            meta = args[0];\n        } else if (args.length > 0) {\n            meta = {\n                splat: args\n            };\n        }\n    } else {\n        const infoObj = messageOrInfo;\n        msg = infoObj.message || '';\n        const { message: _msg, level: _lvl, timestamp: _ts, ...restInfo } = infoObj;\n        meta = restInfo;\n    }\n    const messageId = meta?.messageId || 'unknown-message';\n    const fullMessage = `[CHAT:INFO][MSG:${messageId}] ${msg}`;\n    const { messageId: _mId, ...metaForOrigCall } = meta;\n    const finalMetaForOrigCall = {\n        ...metaForOrigCall,\n        taskId: messageId,\n        chat: true\n    };\n    origChatInfo(fullMessage, finalMetaForOrigCall);\n    return chatLogger;\n};\nconst buildLogger = logger.child({\n    module: 'build'\n});\nconst origBuildInfo = buildLogger.info.bind(buildLogger);\nconst origBuildError = buildLogger.error.bind(buildLogger);\nbuildLogger.error = (messageOrInfo, ...args)=>{\n    let msg;\n    let meta = {};\n    if (typeof messageOrInfo === 'string') {\n        msg = messageOrInfo;\n        if (args.length > 0 && typeof args[0] === 'object' && args[0] !== null) {\n            meta = args[0];\n        } else if (args.length > 0) {\n            meta = {\n                splat: args\n            };\n        }\n    } else {\n        const infoObj = messageOrInfo;\n        msg = infoObj.message || '';\n        const { message: _msg, level: _lvl, timestamp: _ts, ...restInfo } = infoObj;\n        meta = restInfo;\n    }\n    const jobId = meta?.jobId || 'unknown-job';\n    const fullMessage = `[BUILD:ERROR][JOB:${jobId}] ${msg}`;\n    const { jobId: _jId, ...metaForOrigCall } = meta;\n    const finalMetaForOrigCall = {\n        ...metaForOrigCall,\n        taskId: jobId,\n        build: true\n    };\n    origBuildError(fullMessage, finalMetaForOrigCall);\n    return buildLogger;\n};\nbuildLogger.info = (messageOrInfo, ...args)=>{\n    let msg;\n    let meta = {};\n    if (typeof messageOrInfo === 'string') {\n        msg = messageOrInfo;\n        if (args.length > 0 && typeof args[0] === 'object' && args[0] !== null) {\n            meta = args[0];\n        } else if (args.length > 0) {\n            meta = {\n                splat: args\n            };\n        }\n    } else {\n        const infoObj = messageOrInfo;\n        msg = infoObj.message || '';\n        const { message: _msg, level: _lvl, timestamp: _ts, ...restInfo } = infoObj;\n        meta = restInfo;\n    }\n    const jobId = meta?.jobId || 'unknown-job';\n    const fullMessage = `[BUILD:INFO][JOB:${jobId}] ${msg}`;\n    const { jobId: _jId, ...metaForOrigCall } = meta;\n    const finalMetaForOrigCall = {\n        ...metaForOrigCall,\n        taskId: jobId,\n        build: true\n    };\n    origBuildInfo(fullMessage, finalMetaForOrigCall);\n    return buildLogger;\n};\n// Add buildLogger.start method\nbuildLogger.start = (jobId, message, meta = {})=>{\n    const fullMessage = `[BUILD:START][JOB:${jobId}] ${message}`;\n    const finalMetaForOrigCall = {\n        ...meta,\n        taskId: jobId,\n        build: true\n    };\n    origBuildInfo(fullMessage, finalMetaForOrigCall);\n    return buildLogger;\n};\n// Add buildLogger.compile method\nbuildLogger.compile = (jobId, message, meta = {})=>{\n    const fullMessage = `[BUILD:COMPILE][JOB:${jobId}] ${message}`;\n    const finalMetaForOrigCall = {\n        ...meta,\n        taskId: jobId,\n        build: true\n    };\n    origBuildInfo(fullMessage, finalMetaForOrigCall);\n    return buildLogger;\n};\n// Add buildLogger.upload method\nbuildLogger.upload = (jobId, message, meta = {})=>{\n    const fullMessage = `[BUILD:UPLOAD][JOB:${jobId}] ${message}`;\n    const finalMetaForOrigCall = {\n        ...meta,\n        taskId: jobId,\n        build: true\n    };\n    origBuildInfo(fullMessage, finalMetaForOrigCall);\n    return buildLogger;\n};\n// Add buildLogger.complete method\nbuildLogger.complete = (jobId, message, meta = {})=>{\n    const fullMessage = `[BUILD:COMPLETE][JOB:${jobId}] ${message}`;\n    const finalMetaForOrigCall = {\n        ...meta,\n        taskId: jobId,\n        build: true\n    };\n    origBuildInfo(fullMessage, finalMetaForOrigCall);\n    return buildLogger;\n};\nconst scenePlannerLogger = logger.child({\n    module: 'scenePlanner'\n});\nconst origScenePlannerInfo = scenePlannerLogger.info.bind(scenePlannerLogger);\nconst origScenePlannerError = scenePlannerLogger.error.bind(scenePlannerLogger);\nscenePlannerLogger.error = (messageOrInfo, ...args)=>{\n    let msg;\n    let meta = {};\n    if (typeof messageOrInfo === 'string') {\n        msg = messageOrInfo;\n        if (args.length > 0 && typeof args[0] === 'object' && args[0] !== null) {\n            meta = args[0];\n        } else if (args.length > 0) {\n            meta = {\n                splat: args\n            };\n        }\n    } else {\n        const infoObj = messageOrInfo;\n        msg = infoObj.message || '';\n        const { message: _msg, level: _lvl, timestamp: _ts, ...restInfo } = infoObj;\n        meta = restInfo;\n    }\n    const planId = meta?.planId || 'unknown-plan';\n    const fullMessage = `[PIPELINE:ERROR][PLAN:${planId}] ${msg}`;\n    const { planId: _pId, ...metaForOrigCall } = meta;\n    const finalMetaForOrigCall = {\n        ...metaForOrigCall,\n        taskId: planId,\n        scenePlanner: true\n    };\n    origScenePlannerError(fullMessage, finalMetaForOrigCall);\n    return scenePlannerLogger;\n};\nscenePlannerLogger.info = (messageOrInfo, ...args)=>{\n    let msg;\n    let meta = {};\n    if (typeof messageOrInfo === 'string') {\n        msg = messageOrInfo;\n        if (args.length > 0 && typeof args[0] === 'object' && args[0] !== null) {\n            meta = args[0];\n        } else if (args.length > 0) {\n            meta = {\n                splat: args\n            };\n        }\n    } else {\n        const infoObj = messageOrInfo;\n        msg = infoObj.message || '';\n        const { message: _msg, level: _lvl, timestamp: _ts, ...restInfo } = infoObj;\n        meta = restInfo;\n    }\n    const planId = meta?.planId || 'unknown-plan';\n    const fullMessage = `[PIPELINE:INFO][PLAN:${planId}] ${msg}`;\n    const { planId: _pId, ...metaForOrigCall } = meta;\n    const finalMetaForOrigCall = {\n        ...metaForOrigCall,\n        taskId: planId,\n        scenePlanner: true\n    };\n    origScenePlannerInfo(fullMessage, finalMetaForOrigCall);\n    return scenePlannerLogger;\n};\n// Create general system logger as a child logger\nconst systemLogger = logger.child({\n    module: 'system'\n});\n// Configure console transport level specifically\n// console.log(`[DEBUG_LOGGER] Configuring system logger console level. LOGGING_MODE: ${process.env.LOGGING_MODE}`);\nconst systemConsoleTransport = systemLogger.transports.find((t)=>t instanceof winston__WEBPACK_IMPORTED_MODULE_0__.transports.Console);\nif (systemConsoleTransport) {\n    systemConsoleTransport.level = process.env.LOG_LEVEL || 'info';\n// console.log(`[DEBUG_LOGGER] System logger console level set to: ${systemConsoleTransport.level}`);\n} else {\n// console.log('[DEBUG_LOGGER] Could not find system logger console transport to configure!');\n}\n// Other child loggers\nconst authLogger = logger.child({\n    module: 'auth'\n});\nconst pageLogger = logger.child({\n    module: 'page'\n});\nconst apiLogger = logger.child({\n    module: 'api'\n});\nconst cronLogger = logger.child({\n    module: 'cron'\n});\nconst workerLogger = logger.child({\n    module: 'worker'\n});\nconst dbLogger = logger.child({\n    module: 'db'\n});\nconst toolsLogger = logger.child({\n    module: 'tools'\n});\nconst agentLogger = logger.child({\n    module: 'agent'\n});\nconst modelsLogger = logger.child({\n    module: 'models'\n});\nconst componentLogger = logger.child({\n    module: 'component'\n});\nconst animationDesignerLogger = logger.child({\n    module: 'animationDesigner'\n});\n// System Logger standalone functions\nconst origSystemDebug = systemLogger.debug.bind(systemLogger);\nconst origSystemInfo = systemLogger.info.bind(systemLogger);\nconst logSystemProcess = (loggerInstance, processId, message, meta = {})=>{\n    const normalizedProcessId = processId || 'unknown-process';\n    loggerInstance.info(`[SYSTEM:PROCESS][ID:${normalizedProcessId}] ${message}`, {\n        ...meta,\n        processId: normalizedProcessId,\n        system: true\n    });\n};\nconst logSystemEvent = (loggerInstance, eventType, eventData, meta = {})=>{\n    loggerInstance.debug(`[SYSTEM:EVENT] ${eventType}`, {\n        ...meta,\n        eventType,\n        eventPayload: eventData,\n        system: true\n    });\n};\n// Initialize ChatLogger specific methods\nconst logChatStream = (loggerInstance, messageId, message, meta = {})=>{\n    const normalizedMessageId = messageId || 'unknown-message';\n    loggerInstance.debug(`[CHAT:STREAM][MSG:${normalizedMessageId}] ${message}`, {\n        ...meta,\n        taskId: normalizedMessageId,\n        chat: true\n    });\n};\nconst logChatTool = (loggerInstance, messageId, toolName, message, meta = {})=>{\n    const normalizedMessageId = messageId || 'unknown-message';\n    loggerInstance.debug(`[CHAT:TOOL:${toolName}][MSG:${normalizedMessageId}] ${message}`, {\n        ...meta,\n        taskId: normalizedMessageId,\n        chat: true,\n        tool: toolName\n    });\n};\nconst logChatComplete = (loggerInstance, messageId, message, meta = {})=>{\n    const normalizedMessageId = messageId || 'unknown-message';\n    loggerInstance.info(`[CHAT:COMPLETE][MSG:${normalizedMessageId}] ${message}`, {\n        ...meta,\n        taskId: normalizedMessageId,\n        chat: true\n    });\n};\n// Initialize BuildLogger specific methods\nconst logBuildStart = (loggerInstance, jobId, message, meta = {})=>{\n    const normalizedJobId = jobId || 'unknown-job';\n    loggerInstance.info(`[BUILD:START][JOB:${normalizedJobId}] ${message}`, {\n        ...meta,\n        taskId: normalizedJobId,\n        build: true\n    });\n};\nconst logBuildCompile = (loggerInstance, jobId, message, meta = {})=>{\n    const normalizedJobId = jobId || 'unknown-job';\n    loggerInstance.debug(`[BUILD:COMPILE][JOB:${normalizedJobId}] ${message}`, {\n        ...meta,\n        taskId: normalizedJobId,\n        build: true\n    });\n};\nconst logBuildUpload = (loggerInstance, jobId, message, meta = {})=>{\n    const normalizedJobId = jobId || 'unknown-job';\n    loggerInstance.debug(`[BUILD:UPLOAD][JOB:${normalizedJobId}] ${message}`, {\n        ...meta,\n        taskId: normalizedJobId,\n        build: true\n    });\n};\nconst logBuildWarn = (loggerInstance, jobId, message, meta = {})=>{\n    const normalizedJobId = jobId || 'unknown-job';\n    loggerInstance.warn(`[BUILD:WARN][JOB:${normalizedJobId}] ${message}`, {\n        ...meta,\n        taskId: normalizedJobId,\n        build: true\n    });\n};\nconst logBuildComplete = (loggerInstance, jobId, message, meta = {})=>{\n    const normalizedJobId = jobId || 'unknown-job';\n    loggerInstance.info(`[BUILD:COMPLETE][JOB:${normalizedJobId}] ${message}`, {\n        ...meta,\n        taskId: normalizedJobId,\n        build: true\n    });\n};\nconst logBuildDebug = (loggerInstance, jobId, message, meta = {})=>{\n    const normalizedJobId = jobId || 'unknown-job';\n    loggerInstance.debug(`[BUILD:DEBUG][JOB:${normalizedJobId}] ${message}`, {\n        ...meta,\n        taskId: normalizedJobId,\n        build: true\n    });\n};\n// Initialize ScenePlannerLogger specific methods\nconst logScenePlannerDb = (loggerInstance, planId, message, meta = {})=>{\n    const normalizedPlanId = planId || 'unknown-plan';\n    loggerInstance.debug(`[PIPELINE:DB][PLAN:${normalizedPlanId}] ${message}`, {\n        ...meta,\n        taskId: normalizedPlanId,\n        scenePlanner: true\n    });\n};\nconst logScenePlannerAdb = (loggerInstance, planId, sceneId, message, meta = {})=>{\n    const normalizedPlanId = planId || 'unknown-plan';\n    const normalizedSceneId = sceneId || 'unknown-scene';\n    loggerInstance.debug(`[PIPELINE:ADB][PLAN:${normalizedPlanId}][SCENE:${normalizedSceneId}] ${message}`, {\n        ...meta,\n        taskId: normalizedPlanId,\n        sceneId: normalizedSceneId,\n        scenePlanner: true\n    });\n};\nconst logScenePlannerComponent = (loggerInstance, planId, sceneId, message, meta = {})=>{\n    const normalizedPlanId = planId || 'unknown-plan';\n    const normalizedSceneId = sceneId || 'unknown-scene';\n    loggerInstance.debug(`[PIPELINE:COMPONENT][PLAN:${normalizedPlanId}][SCENE:${normalizedSceneId}] ${message}`, {\n        ...meta,\n        taskId: normalizedPlanId,\n        sceneId: normalizedSceneId,\n        scenePlanner: true\n    });\n};\nconst logScenePlannerComplete = (loggerInstance, planId, message, meta = {})=>{\n    const normalizedPlanId = planId || 'unknown-plan';\n    loggerInstance.info(`[PIPELINE:COMPLETE][PLAN:${normalizedPlanId}] ${message}`, {\n        ...meta,\n        taskId: normalizedPlanId,\n        scenePlanner: true\n    });\n};\nconst logScenePlannerDebug = (loggerInstance, planId, message, meta = {})=>{\n    const normalizedPlanId = planId || 'unknown-plan';\n    loggerInstance.debug(`[PIPELINE:DEBUG][PLAN:${normalizedPlanId}] ${message}`, {\n        ...meta,\n        taskId: normalizedPlanId,\n        scenePlanner: true\n    });\n};\n// Fallback logger - if a specific logger doesn't have a method, it will use the base logger's methods\n// However, this might not be desired if we want strict method availability per logger.\n\n// Make `logger` the default export\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (logger);\n/**\n * Agent Send Logging - Standalone function to handle agent send logging\n */ function logAgentSend(loggerInstance, agentName, taskId, recipient, messageType, meta) {\n    const formattedMessage = `AGENT[${agentName}] -> ${recipient}: ${messageType}`;\n    return loggerInstance.info(formattedMessage, {\n        ...meta,\n        agent: agentName,\n        taskId,\n        recipient,\n        messageType,\n        action: 'agent_send'\n    });\n}\n/**\n * Agent Process Logging - Standalone function to handle agent process logging\n */ function logAgentProcess(loggerInstance, agentName, taskId, processName, message, meta) {\n    const formattedMessage = `AGENT[${agentName}] PROCESS[${processName}]: ${message}`;\n    return loggerInstance.info(formattedMessage, {\n        ...meta,\n        agent: agentName,\n        taskId,\n        processName,\n        action: 'agent_process'\n    });\n}\n/**\n * Animation Designer Start Logging - Standalone function for tracking animation generation starts\n */ function logAnimationStart(loggerInstance, sceneId, message, meta) {\n    const formattedMessage = `[ANIMATION:START][SCENE:${sceneId}] ${message}`;\n    return loggerInstance.info(formattedMessage, {\n        ...meta,\n        sceneId,\n        animation: true,\n        stage: 'start'\n    });\n}\n/**\n * Animation Designer Validation Logging - Standalone function for animation validation logs\n */ function logAnimationValidation(loggerInstance, sceneId, message, meta) {\n    const formattedMessage = `[ANIMATION:VALIDATION][SCENE:${sceneId}] ${message}`;\n    return loggerInstance.info(formattedMessage, {\n        ...meta,\n        sceneId,\n        animation: true,\n        stage: 'validation'\n    });\n}\n/**\n * Animation Designer Complete Logging - Standalone function for marking completion of animation tasks\n */ function logAnimationComplete(loggerInstance, sceneId, message, meta) {\n    const formattedMessage = `[ANIMATION:COMPLETE][SCENE:${sceneId}] ${message}`;\n    return loggerInstance.info(formattedMessage, {\n        ...meta,\n        sceneId,\n        animation: true,\n        stage: 'complete'\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/utils/logger.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/utils/nameGenerator.ts":
/*!****************************************!*\
  !*** ./src/lib/utils/nameGenerator.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   generateNameFromPrompt: () => (/* binding */ generateNameFromPrompt)\n/* harmony export */ });\n// src/lib/nameGenerator.ts\n/**\n * Utility functions for generating project names from user prompts\n */ /**\n * Cleans and formats a user prompt into a concise title\n * @param prompt The user's chat message\n * @returns A cleaned up title derived from the prompt\n */ function generateNameFromPrompt(prompt) {\n    if (!prompt) return \"New Project\";\n    // Remove common phrases that don't add value to the title\n    const cleaned = prompt.replace(/^(create|make|generate|build|develop|design|implement|add|show me|can you|please)/i, \"\").replace(/^(a|an|the)\\s+/i, \"\").replace(/\\s+(for me|for us|for our team|for our company|for my project)$/i, \"\").trim();\n    // Limit length and capitalize first letter of each word\n    const words = cleaned.split(\" \");\n    const limitedWords = words.slice(0, 7); // Take first 7 words max\n    const titled = limitedWords.map((word)=>word.charAt(0).toUpperCase() + word.slice(1)).join(\" \");\n    return titled || \"New Project\";\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvbGliL3V0aWxzL25hbWVHZW5lcmF0b3IudHMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLDJCQUEyQjtBQUMzQjs7Q0FFQyxHQUVEOzs7O0NBSUMsR0FDTSxTQUFTQSx1QkFBdUJDLE1BQWM7SUFDbkQsSUFBSSxDQUFDQSxRQUFRLE9BQU87SUFFcEIsMERBQTBEO0lBQzFELE1BQU1DLFVBQVVELE9BQ2JFLE9BQU8sQ0FBQyxzRkFBc0YsSUFDOUZBLE9BQU8sQ0FBQyxtQkFBbUIsSUFDM0JBLE9BQU8sQ0FBQyxvRUFBb0UsSUFDNUVDLElBQUk7SUFFUCx3REFBd0Q7SUFDeEQsTUFBTUMsUUFBUUgsUUFBUUksS0FBSyxDQUFDO0lBQzVCLE1BQU1DLGVBQWVGLE1BQU1HLEtBQUssQ0FBQyxHQUFHLElBQUkseUJBQXlCO0lBRWpFLE1BQU1DLFNBQVNGLGFBQ1pHLEdBQUcsQ0FBQ0MsQ0FBQUEsT0FBUUEsS0FBS0MsTUFBTSxDQUFDLEdBQUdDLFdBQVcsS0FBS0YsS0FBS0gsS0FBSyxDQUFDLElBQ3RETSxJQUFJLENBQUM7SUFFUixPQUFPTCxVQUFVO0FBQ25CIiwic291cmNlcyI6WyIvVXNlcnMvbWFya3VzaG9nbmUvRG9jdW1lbnRzL0FQUFMvYmF6YWFyLXZpZC9iYXphYXItdmlkL2FwcHMvbWFpbi9zcmMvbGliL3V0aWxzL25hbWVHZW5lcmF0b3IudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gc3JjL2xpYi9uYW1lR2VuZXJhdG9yLnRzXG4vKipcbiAqIFV0aWxpdHkgZnVuY3Rpb25zIGZvciBnZW5lcmF0aW5nIHByb2plY3QgbmFtZXMgZnJvbSB1c2VyIHByb21wdHNcbiAqL1xuXG4vKipcbiAqIENsZWFucyBhbmQgZm9ybWF0cyBhIHVzZXIgcHJvbXB0IGludG8gYSBjb25jaXNlIHRpdGxlXG4gKiBAcGFyYW0gcHJvbXB0IFRoZSB1c2VyJ3MgY2hhdCBtZXNzYWdlXG4gKiBAcmV0dXJucyBBIGNsZWFuZWQgdXAgdGl0bGUgZGVyaXZlZCBmcm9tIHRoZSBwcm9tcHRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdlbmVyYXRlTmFtZUZyb21Qcm9tcHQocHJvbXB0OiBzdHJpbmcpOiBzdHJpbmcge1xuICBpZiAoIXByb21wdCkgcmV0dXJuIFwiTmV3IFByb2plY3RcIjtcbiAgXG4gIC8vIFJlbW92ZSBjb21tb24gcGhyYXNlcyB0aGF0IGRvbid0IGFkZCB2YWx1ZSB0byB0aGUgdGl0bGVcbiAgY29uc3QgY2xlYW5lZCA9IHByb21wdFxuICAgIC5yZXBsYWNlKC9eKGNyZWF0ZXxtYWtlfGdlbmVyYXRlfGJ1aWxkfGRldmVsb3B8ZGVzaWdufGltcGxlbWVudHxhZGR8c2hvdyBtZXxjYW4geW91fHBsZWFzZSkvaSwgXCJcIilcbiAgICAucmVwbGFjZSgvXihhfGFufHRoZSlcXHMrL2ksIFwiXCIpXG4gICAgLnJlcGxhY2UoL1xccysoZm9yIG1lfGZvciB1c3xmb3Igb3VyIHRlYW18Zm9yIG91ciBjb21wYW55fGZvciBteSBwcm9qZWN0KSQvaSwgXCJcIilcbiAgICAudHJpbSgpO1xuICBcbiAgLy8gTGltaXQgbGVuZ3RoIGFuZCBjYXBpdGFsaXplIGZpcnN0IGxldHRlciBvZiBlYWNoIHdvcmRcbiAgY29uc3Qgd29yZHMgPSBjbGVhbmVkLnNwbGl0KFwiIFwiKTtcbiAgY29uc3QgbGltaXRlZFdvcmRzID0gd29yZHMuc2xpY2UoMCwgNyk7IC8vIFRha2UgZmlyc3QgNyB3b3JkcyBtYXhcbiAgXG4gIGNvbnN0IHRpdGxlZCA9IGxpbWl0ZWRXb3Jkc1xuICAgIC5tYXAod29yZCA9PiB3b3JkLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgd29yZC5zbGljZSgxKSlcbiAgICAuam9pbihcIiBcIik7XG4gIFxuICByZXR1cm4gdGl0bGVkIHx8IFwiTmV3IFByb2plY3RcIjtcbn1cbiJdLCJuYW1lcyI6WyJnZW5lcmF0ZU5hbWVGcm9tUHJvbXB0IiwicHJvbXB0IiwiY2xlYW5lZCIsInJlcGxhY2UiLCJ0cmltIiwid29yZHMiLCJzcGxpdCIsImxpbWl0ZWRXb3JkcyIsInNsaWNlIiwidGl0bGVkIiwibWFwIiwid29yZCIsImNoYXJBdCIsInRvVXBwZXJDYXNlIiwiam9pbiJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/utils/nameGenerator.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/utils/r2-upload.ts":
/*!************************************!*\
  !*** ./src/lib/utils/r2-upload.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   uploadScreenshotToR2: () => (/* binding */ uploadScreenshotToR2),\n/* harmony export */   uploadWebAnalysisScreenshots: () => (/* binding */ uploadWebAnalysisScreenshots)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_client_s3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/client-s3 */ \"@aws-sdk/client-s3\");\n/* harmony import */ var _aws_sdk_client_s3__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_aws_sdk_client_s3__WEBPACK_IMPORTED_MODULE_0__);\n\n/**\n * Upload screenshot buffer to Cloudflare R2 storage\n */ async function uploadScreenshotToR2(buffer, fileName, projectId, userId) {\n    // Configure S3 client for Cloudflare R2\n    const s3Client = new _aws_sdk_client_s3__WEBPACK_IMPORTED_MODULE_0__.S3Client({\n        region: 'auto',\n        endpoint: process.env.CLOUDFLARE_R2_ENDPOINT,\n        credentials: {\n            accessKeyId: process.env.CLOUDFLARE_R2_ACCESS_KEY_ID,\n            secretAccessKey: process.env.CLOUDFLARE_R2_SECRET_ACCESS_KEY\n        }\n    });\n    // Generate unique key for web analysis screenshots\n    const timestamp = Date.now();\n    const randomId = crypto.randomUUID().slice(0, 8);\n    const uniqueKey = `web-analysis/${projectId}/${timestamp}-${randomId}-${fileName}`;\n    // Upload screenshot to R2\n    const command = new _aws_sdk_client_s3__WEBPACK_IMPORTED_MODULE_0__.PutObjectCommand({\n        Bucket: process.env.CLOUDFLARE_R2_BUCKET_NAME,\n        Key: uniqueKey,\n        Body: buffer,\n        ContentType: 'image/png',\n        Metadata: {\n            'type': 'web-analysis-screenshot',\n            'project-id': projectId,\n            'uploaded-by': userId || 'system',\n            'created-at': new Date().toISOString()\n        }\n    });\n    await s3Client.send(command);\n    // Construct public URL\n    const publicUrl = `${process.env.CLOUDFLARE_R2_PUBLIC_URL}/${uniqueKey}`;\n    console.log(`📸 Screenshot uploaded to R2: ${fileName} (${buffer.length} bytes)`);\n    return publicUrl;\n}\n/**\n * Upload multiple screenshots from web analysis\n */ async function uploadWebAnalysisScreenshots(screenshots, projectId, userId) {\n    console.log('📤 Uploading web analysis screenshots to R2...');\n    const [desktopUrl, mobileUrl] = await Promise.all([\n        uploadScreenshotToR2(screenshots.desktop, 'desktop.png', projectId, userId),\n        uploadScreenshotToR2(screenshots.mobile, 'mobile.png', projectId, userId)\n    ]);\n    console.log('✅ All screenshots uploaded successfully');\n    return {\n        desktop: desktopUrl,\n        mobile: mobileUrl\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvbGliL3V0aWxzL3IyLXVwbG9hZC50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQWdFO0FBRWhFOztDQUVDLEdBQ00sZUFBZUUscUJBQ3BCQyxNQUFjLEVBQ2RDLFFBQWdCLEVBQ2hCQyxTQUFpQixFQUNqQkMsTUFBZTtJQUVmLHdDQUF3QztJQUN4QyxNQUFNQyxXQUFXLElBQUlQLHdEQUFRQSxDQUFDO1FBQzVCUSxRQUFRO1FBQ1JDLFVBQVVDLFFBQVFDLEdBQUcsQ0FBQ0Msc0JBQXNCO1FBQzVDQyxhQUFhO1lBQ1hDLGFBQWFKLFFBQVFDLEdBQUcsQ0FBQ0ksMkJBQTJCO1lBQ3BEQyxpQkFBaUJOLFFBQVFDLEdBQUcsQ0FBQ00sK0JBQStCO1FBQzlEO0lBQ0Y7SUFFQSxtREFBbUQ7SUFDbkQsTUFBTUMsWUFBWUMsS0FBS0MsR0FBRztJQUMxQixNQUFNQyxXQUFXQyxPQUFPQyxVQUFVLEdBQUdDLEtBQUssQ0FBQyxHQUFHO0lBQzlDLE1BQU1DLFlBQVksQ0FBQyxhQUFhLEVBQUVwQixVQUFVLENBQUMsRUFBRWEsVUFBVSxDQUFDLEVBQUVHLFNBQVMsQ0FBQyxFQUFFakIsVUFBVTtJQUVsRiwwQkFBMEI7SUFDMUIsTUFBTXNCLFVBQVUsSUFBSXpCLGdFQUFnQkEsQ0FBQztRQUNuQzBCLFFBQVFqQixRQUFRQyxHQUFHLENBQUNpQix5QkFBeUI7UUFDN0NDLEtBQUtKO1FBQ0xLLE1BQU0zQjtRQUNONEIsYUFBYTtRQUNiQyxVQUFVO1lBQ1IsUUFBUTtZQUNSLGNBQWMzQjtZQUNkLGVBQWVDLFVBQVU7WUFDekIsY0FBYyxJQUFJYSxPQUFPYyxXQUFXO1FBQ3RDO0lBQ0Y7SUFFQSxNQUFNMUIsU0FBUzJCLElBQUksQ0FBQ1I7SUFFcEIsdUJBQXVCO0lBQ3ZCLE1BQU1TLFlBQVksR0FBR3pCLFFBQVFDLEdBQUcsQ0FBQ3lCLHdCQUF3QixDQUFDLENBQUMsRUFBRVgsV0FBVztJQUV4RVksUUFBUUMsR0FBRyxDQUFDLENBQUMsOEJBQThCLEVBQUVsQyxTQUFTLEVBQUUsRUFBRUQsT0FBT29DLE1BQU0sQ0FBQyxPQUFPLENBQUM7SUFFaEYsT0FBT0o7QUFDVDtBQUVBOztDQUVDLEdBQ00sZUFBZUssNkJBQ3BCQyxXQUFnRCxFQUNoRHBDLFNBQWlCLEVBQ2pCQyxNQUFlO0lBRWYrQixRQUFRQyxHQUFHLENBQUM7SUFFWixNQUFNLENBQUNJLFlBQVlDLFVBQVUsR0FBRyxNQUFNQyxRQUFRQyxHQUFHLENBQUM7UUFDaEQzQyxxQkFBcUJ1QyxZQUFZSyxPQUFPLEVBQUUsZUFBZXpDLFdBQVdDO1FBQ3BFSixxQkFBcUJ1QyxZQUFZTSxNQUFNLEVBQUUsY0FBYzFDLFdBQVdDO0tBQ25FO0lBRUQrQixRQUFRQyxHQUFHLENBQUM7SUFFWixPQUFPO1FBQ0xRLFNBQVNKO1FBQ1RLLFFBQVFKO0lBQ1Y7QUFDRiIsInNvdXJjZXMiOlsiL1VzZXJzL21hcmt1c2hvZ25lL0RvY3VtZW50cy9BUFBTL2JhemFhci12aWQvYmF6YWFyLXZpZC9hcHBzL21haW4vc3JjL2xpYi91dGlscy9yMi11cGxvYWQudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUzNDbGllbnQsIFB1dE9iamVjdENvbW1hbmQgfSBmcm9tICdAYXdzLXNkay9jbGllbnQtczMnO1xuXG4vKipcbiAqIFVwbG9hZCBzY3JlZW5zaG90IGJ1ZmZlciB0byBDbG91ZGZsYXJlIFIyIHN0b3JhZ2VcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHVwbG9hZFNjcmVlbnNob3RUb1IyKFxuICBidWZmZXI6IEJ1ZmZlcixcbiAgZmlsZU5hbWU6IHN0cmluZyxcbiAgcHJvamVjdElkOiBzdHJpbmcsXG4gIHVzZXJJZD86IHN0cmluZ1xuKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgLy8gQ29uZmlndXJlIFMzIGNsaWVudCBmb3IgQ2xvdWRmbGFyZSBSMlxuICBjb25zdCBzM0NsaWVudCA9IG5ldyBTM0NsaWVudCh7XG4gICAgcmVnaW9uOiAnYXV0bycsXG4gICAgZW5kcG9pbnQ6IHByb2Nlc3MuZW52LkNMT1VERkxBUkVfUjJfRU5EUE9JTlQsXG4gICAgY3JlZGVudGlhbHM6IHtcbiAgICAgIGFjY2Vzc0tleUlkOiBwcm9jZXNzLmVudi5DTE9VREZMQVJFX1IyX0FDQ0VTU19LRVlfSUQhLFxuICAgICAgc2VjcmV0QWNjZXNzS2V5OiBwcm9jZXNzLmVudi5DTE9VREZMQVJFX1IyX1NFQ1JFVF9BQ0NFU1NfS0VZISxcbiAgICB9LFxuICB9KTtcblxuICAvLyBHZW5lcmF0ZSB1bmlxdWUga2V5IGZvciB3ZWIgYW5hbHlzaXMgc2NyZWVuc2hvdHNcbiAgY29uc3QgdGltZXN0YW1wID0gRGF0ZS5ub3coKTtcbiAgY29uc3QgcmFuZG9tSWQgPSBjcnlwdG8ucmFuZG9tVVVJRCgpLnNsaWNlKDAsIDgpO1xuICBjb25zdCB1bmlxdWVLZXkgPSBgd2ViLWFuYWx5c2lzLyR7cHJvamVjdElkfS8ke3RpbWVzdGFtcH0tJHtyYW5kb21JZH0tJHtmaWxlTmFtZX1gO1xuXG4gIC8vIFVwbG9hZCBzY3JlZW5zaG90IHRvIFIyXG4gIGNvbnN0IGNvbW1hbmQgPSBuZXcgUHV0T2JqZWN0Q29tbWFuZCh7XG4gICAgQnVja2V0OiBwcm9jZXNzLmVudi5DTE9VREZMQVJFX1IyX0JVQ0tFVF9OQU1FISxcbiAgICBLZXk6IHVuaXF1ZUtleSxcbiAgICBCb2R5OiBidWZmZXIsXG4gICAgQ29udGVudFR5cGU6ICdpbWFnZS9wbmcnLFxuICAgIE1ldGFkYXRhOiB7XG4gICAgICAndHlwZSc6ICd3ZWItYW5hbHlzaXMtc2NyZWVuc2hvdCcsXG4gICAgICAncHJvamVjdC1pZCc6IHByb2plY3RJZCxcbiAgICAgICd1cGxvYWRlZC1ieSc6IHVzZXJJZCB8fCAnc3lzdGVtJyxcbiAgICAgICdjcmVhdGVkLWF0JzogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxuICAgIH0sXG4gIH0pO1xuXG4gIGF3YWl0IHMzQ2xpZW50LnNlbmQoY29tbWFuZCk7XG5cbiAgLy8gQ29uc3RydWN0IHB1YmxpYyBVUkxcbiAgY29uc3QgcHVibGljVXJsID0gYCR7cHJvY2Vzcy5lbnYuQ0xPVURGTEFSRV9SMl9QVUJMSUNfVVJMfS8ke3VuaXF1ZUtleX1gO1xuXG4gIGNvbnNvbGUubG9nKGDwn5O4IFNjcmVlbnNob3QgdXBsb2FkZWQgdG8gUjI6ICR7ZmlsZU5hbWV9ICgke2J1ZmZlci5sZW5ndGh9IGJ5dGVzKWApO1xuICBcbiAgcmV0dXJuIHB1YmxpY1VybDtcbn1cblxuLyoqXG4gKiBVcGxvYWQgbXVsdGlwbGUgc2NyZWVuc2hvdHMgZnJvbSB3ZWIgYW5hbHlzaXNcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHVwbG9hZFdlYkFuYWx5c2lzU2NyZWVuc2hvdHMoXG4gIHNjcmVlbnNob3RzOiB7IGRlc2t0b3A6IEJ1ZmZlcjsgbW9iaWxlOiBCdWZmZXIgfSxcbiAgcHJvamVjdElkOiBzdHJpbmcsXG4gIHVzZXJJZD86IHN0cmluZ1xuKTogUHJvbWlzZTx7IGRlc2t0b3A6IHN0cmluZzsgbW9iaWxlOiBzdHJpbmcgfT4ge1xuICBjb25zb2xlLmxvZygn8J+TpCBVcGxvYWRpbmcgd2ViIGFuYWx5c2lzIHNjcmVlbnNob3RzIHRvIFIyLi4uJyk7XG4gIFxuICBjb25zdCBbZGVza3RvcFVybCwgbW9iaWxlVXJsXSA9IGF3YWl0IFByb21pc2UuYWxsKFtcbiAgICB1cGxvYWRTY3JlZW5zaG90VG9SMihzY3JlZW5zaG90cy5kZXNrdG9wLCAnZGVza3RvcC5wbmcnLCBwcm9qZWN0SWQsIHVzZXJJZCksXG4gICAgdXBsb2FkU2NyZWVuc2hvdFRvUjIoc2NyZWVuc2hvdHMubW9iaWxlLCAnbW9iaWxlLnBuZycsIHByb2plY3RJZCwgdXNlcklkKVxuICBdKTtcblxuICBjb25zb2xlLmxvZygn4pyFIEFsbCBzY3JlZW5zaG90cyB1cGxvYWRlZCBzdWNjZXNzZnVsbHknKTtcbiAgXG4gIHJldHVybiB7XG4gICAgZGVza3RvcDogZGVza3RvcFVybCxcbiAgICBtb2JpbGU6IG1vYmlsZVVybFxuICB9O1xufSJdLCJuYW1lcyI6WyJTM0NsaWVudCIsIlB1dE9iamVjdENvbW1hbmQiLCJ1cGxvYWRTY3JlZW5zaG90VG9SMiIsImJ1ZmZlciIsImZpbGVOYW1lIiwicHJvamVjdElkIiwidXNlcklkIiwiczNDbGllbnQiLCJyZWdpb24iLCJlbmRwb2ludCIsInByb2Nlc3MiLCJlbnYiLCJDTE9VREZMQVJFX1IyX0VORFBPSU5UIiwiY3JlZGVudGlhbHMiLCJhY2Nlc3NLZXlJZCIsIkNMT1VERkxBUkVfUjJfQUNDRVNTX0tFWV9JRCIsInNlY3JldEFjY2Vzc0tleSIsIkNMT1VERkxBUkVfUjJfU0VDUkVUX0FDQ0VTU19LRVkiLCJ0aW1lc3RhbXAiLCJEYXRlIiwibm93IiwicmFuZG9tSWQiLCJjcnlwdG8iLCJyYW5kb21VVUlEIiwic2xpY2UiLCJ1bmlxdWVLZXkiLCJjb21tYW5kIiwiQnVja2V0IiwiQ0xPVURGTEFSRV9SMl9CVUNLRVRfTkFNRSIsIktleSIsIkJvZHkiLCJDb250ZW50VHlwZSIsIk1ldGFkYXRhIiwidG9JU09TdHJpbmciLCJzZW5kIiwicHVibGljVXJsIiwiQ0xPVURGTEFSRV9SMl9QVUJMSUNfVVJMIiwiY29uc29sZSIsImxvZyIsImxlbmd0aCIsInVwbG9hZFdlYkFuYWx5c2lzU2NyZWVuc2hvdHMiLCJzY3JlZW5zaG90cyIsImRlc2t0b3BVcmwiLCJtb2JpbGVVcmwiLCJQcm9taXNlIiwiYWxsIiwiZGVza3RvcCIsIm1vYmlsZSJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/utils/r2-upload.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/utils/url-detection.ts":
/*!****************************************!*\
  !*** ./src/lib/utils/url-detection.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   containsUrl: () => (/* binding */ containsUrl),\n/* harmony export */   extractFirstValidUrl: () => (/* binding */ extractFirstValidUrl),\n/* harmony export */   extractUrls: () => (/* binding */ extractUrls),\n/* harmony export */   getDomain: () => (/* binding */ getDomain),\n/* harmony export */   isValidWebUrl: () => (/* binding */ isValidWebUrl),\n/* harmony export */   normalizeUrl: () => (/* binding */ normalizeUrl),\n/* harmony export */   testUrlDetection: () => (/* binding */ testUrlDetection)\n/* harmony export */ });\n/**\n * Utility functions for detecting and validating URLs in text\n */ /**\n * Extract URLs from text using regex\n */ function extractUrls(text) {\n    const urlRegex = /https?:\\/\\/[^\\s<>\"{}|\\\\^`[\\]]+/gi;\n    const matches = text.match(urlRegex) || [];\n    // Clean up URLs (remove trailing punctuation)\n    return matches.map((url)=>{\n        return url.replace(/[.,;!?)+]+$/, '');\n    });\n}\n/**\n * Check if a URL is valid and web-accessible\n */ function isValidWebUrl(url) {\n    try {\n        const parsed = new URL(url);\n        return [\n            'http:',\n            'https:'\n        ].includes(parsed.protocol);\n    } catch  {\n        return false;\n    }\n}\n/**\n * Extract the first valid URL from text\n */ function extractFirstValidUrl(text) {\n    const urls = extractUrls(text);\n    const validUrls = urls.filter(isValidWebUrl);\n    return validUrls.length > 0 ? validUrls[0] : null;\n}\n/**\n * Check if text contains any URLs\n */ function containsUrl(text) {\n    return extractUrls(text).length > 0;\n}\n/**\n * Get domain from URL\n */ function getDomain(url) {\n    try {\n        const parsed = new URL(url);\n        return parsed.hostname;\n    } catch  {\n        return null;\n    }\n}\n/**\n * Normalize URL (add https if missing)\n */ function normalizeUrl(url) {\n    if (!url.startsWith('http://') && !url.startsWith('https://')) {\n        return `https://${url}`;\n    }\n    return url;\n}\n/**\n * Test function to verify URL detection works correctly\n */ function testUrlDetection() {\n    const testCases = [\n        \"Check out https://stripe.com for payments\",\n        \"Our site is https://figma.com.\",\n        \"Visit http://example.com and https://google.com\",\n        \"No URLs here!\",\n        \"Multiple: https://a.com, https://b.com, and https://c.com\",\n        \"Create a video for our company: https://notion.so/about\",\n        \"Check this out: https://github.com/microsoft/playwright!\",\n        \"Pricing at https://vercel.com/pricing?utm_source=example\",\n        \"Mixed: Visit our site www.example.com or https://example.com/contact\"\n    ];\n    console.log('🧪 Testing URL Detection:');\n    testCases.forEach((text, index)=>{\n        const urls = extractUrls(text);\n        const validUrls = urls.filter(isValidWebUrl);\n        const firstValid = extractFirstValidUrl(text);\n        console.log(`\\n${index + 1}. \"${text}\"`);\n        console.log(`   Found URLs: ${JSON.stringify(urls)}`);\n        console.log(`   Valid URLs: ${JSON.stringify(validUrls)}`);\n        console.log(`   First Valid: ${firstValid}`);\n        console.log(`   Contains URL: ${containsUrl(text)}`);\n    });\n    // Test domain extraction\n    console.log('\\n🌐 Testing Domain Extraction:');\n    const domainTests = [\n        'https://stripe.com/pricing',\n        'http://www.example.com',\n        'https://subdomain.example.co.uk/path',\n        'invalid-url'\n    ];\n    domainTests.forEach((url)=>{\n        const domain = getDomain(url);\n        console.log(`   ${url} → ${domain}`);\n    });\n    // Test URL normalization\n    console.log('\\n🔧 Testing URL Normalization:');\n    const normalizeTests = [\n        'stripe.com',\n        'https://figma.com',\n        'http://example.com',\n        'www.github.com'\n    ];\n    normalizeTests.forEach((url)=>{\n        const normalized = normalizeUrl(url);\n        console.log(`   ${url} → ${normalized}`);\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvbGliL3V0aWxzL3VybC1kZXRlY3Rpb24udHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBOztDQUVDLEdBRUQ7O0NBRUMsR0FDTSxTQUFTQSxZQUFZQyxJQUFZO0lBQ3RDLE1BQU1DLFdBQVc7SUFDakIsTUFBTUMsVUFBVUYsS0FBS0csS0FBSyxDQUFDRixhQUFhLEVBQUU7SUFFMUMsOENBQThDO0lBQzlDLE9BQU9DLFFBQVFFLEdBQUcsQ0FBQ0MsQ0FBQUE7UUFDakIsT0FBT0EsSUFBSUMsT0FBTyxDQUFDLGVBQWU7SUFDcEM7QUFDRjtBQUVBOztDQUVDLEdBQ00sU0FBU0MsY0FBY0YsR0FBVztJQUN2QyxJQUFJO1FBQ0YsTUFBTUcsU0FBUyxJQUFJQyxJQUFJSjtRQUN2QixPQUFPO1lBQUM7WUFBUztTQUFTLENBQUNLLFFBQVEsQ0FBQ0YsT0FBT0csUUFBUTtJQUNyRCxFQUFFLE9BQU07UUFDTixPQUFPO0lBQ1Q7QUFDRjtBQUVBOztDQUVDLEdBQ00sU0FBU0MscUJBQXFCWixJQUFZO0lBQy9DLE1BQU1hLE9BQU9kLFlBQVlDO0lBQ3pCLE1BQU1jLFlBQVlELEtBQUtFLE1BQU0sQ0FBQ1I7SUFDOUIsT0FBT08sVUFBVUUsTUFBTSxHQUFHLElBQUlGLFNBQVMsQ0FBQyxFQUFFLEdBQUc7QUFDL0M7QUFFQTs7Q0FFQyxHQUNNLFNBQVNHLFlBQVlqQixJQUFZO0lBQ3RDLE9BQU9ELFlBQVlDLE1BQU1nQixNQUFNLEdBQUc7QUFDcEM7QUFFQTs7Q0FFQyxHQUNNLFNBQVNFLFVBQVViLEdBQVc7SUFDbkMsSUFBSTtRQUNGLE1BQU1HLFNBQVMsSUFBSUMsSUFBSUo7UUFDdkIsT0FBT0csT0FBT1csUUFBUTtJQUN4QixFQUFFLE9BQU07UUFDTixPQUFPO0lBQ1Q7QUFDRjtBQUVBOztDQUVDLEdBQ00sU0FBU0MsYUFBYWYsR0FBVztJQUN0QyxJQUFJLENBQUNBLElBQUlnQixVQUFVLENBQUMsY0FBYyxDQUFDaEIsSUFBSWdCLFVBQVUsQ0FBQyxhQUFhO1FBQzdELE9BQU8sQ0FBQyxRQUFRLEVBQUVoQixLQUFLO0lBQ3pCO0lBQ0EsT0FBT0E7QUFDVDtBQUVBOztDQUVDLEdBQ00sU0FBU2lCO0lBQ2QsTUFBTUMsWUFBWTtRQUNoQjtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7S0FDRDtJQUVEQyxRQUFRQyxHQUFHLENBQUM7SUFDWkYsVUFBVUcsT0FBTyxDQUFDLENBQUMxQixNQUFNMkI7UUFDdkIsTUFBTWQsT0FBT2QsWUFBWUM7UUFDekIsTUFBTWMsWUFBWUQsS0FBS0UsTUFBTSxDQUFDUjtRQUM5QixNQUFNcUIsYUFBYWhCLHFCQUFxQlo7UUFFeEN3QixRQUFRQyxHQUFHLENBQUMsQ0FBQyxFQUFFLEVBQUVFLFFBQVEsRUFBRSxHQUFHLEVBQUUzQixLQUFLLENBQUMsQ0FBQztRQUN2Q3dCLFFBQVFDLEdBQUcsQ0FBQyxDQUFDLGVBQWUsRUFBRUksS0FBS0MsU0FBUyxDQUFDakIsT0FBTztRQUNwRFcsUUFBUUMsR0FBRyxDQUFDLENBQUMsZUFBZSxFQUFFSSxLQUFLQyxTQUFTLENBQUNoQixZQUFZO1FBQ3pEVSxRQUFRQyxHQUFHLENBQUMsQ0FBQyxnQkFBZ0IsRUFBRUcsWUFBWTtRQUMzQ0osUUFBUUMsR0FBRyxDQUFDLENBQUMsaUJBQWlCLEVBQUVSLFlBQVlqQixPQUFPO0lBQ3JEO0lBRUEseUJBQXlCO0lBQ3pCd0IsUUFBUUMsR0FBRyxDQUFDO0lBQ1osTUFBTU0sY0FBYztRQUNsQjtRQUNBO1FBQ0E7UUFDQTtLQUNEO0lBRURBLFlBQVlMLE9BQU8sQ0FBQ3JCLENBQUFBO1FBQ2xCLE1BQU0yQixTQUFTZCxVQUFVYjtRQUN6Qm1CLFFBQVFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsRUFBRXBCLElBQUksR0FBRyxFQUFFMkIsUUFBUTtJQUNyQztJQUVBLHlCQUF5QjtJQUN6QlIsUUFBUUMsR0FBRyxDQUFDO0lBQ1osTUFBTVEsaUJBQWlCO1FBQ3JCO1FBQ0E7UUFDQTtRQUNBO0tBQ0Q7SUFFREEsZUFBZVAsT0FBTyxDQUFDckIsQ0FBQUE7UUFDckIsTUFBTTZCLGFBQWFkLGFBQWFmO1FBQ2hDbUIsUUFBUUMsR0FBRyxDQUFDLENBQUMsR0FBRyxFQUFFcEIsSUFBSSxHQUFHLEVBQUU2QixZQUFZO0lBQ3pDO0FBQ0YiLCJzb3VyY2VzIjpbIi9Vc2Vycy9tYXJrdXNob2duZS9Eb2N1bWVudHMvQVBQUy9iYXphYXItdmlkL2JhemFhci12aWQvYXBwcy9tYWluL3NyYy9saWIvdXRpbHMvdXJsLWRldGVjdGlvbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFV0aWxpdHkgZnVuY3Rpb25zIGZvciBkZXRlY3RpbmcgYW5kIHZhbGlkYXRpbmcgVVJMcyBpbiB0ZXh0XG4gKi9cblxuLyoqXG4gKiBFeHRyYWN0IFVSTHMgZnJvbSB0ZXh0IHVzaW5nIHJlZ2V4XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBleHRyYWN0VXJscyh0ZXh0OiBzdHJpbmcpOiBzdHJpbmdbXSB7XG4gIGNvbnN0IHVybFJlZ2V4ID0gL2h0dHBzPzpcXC9cXC9bXlxcczw+XCJ7fXxcXFxcXmBbXFxdXSsvZ2k7XG4gIGNvbnN0IG1hdGNoZXMgPSB0ZXh0Lm1hdGNoKHVybFJlZ2V4KSB8fCBbXTtcbiAgXG4gIC8vIENsZWFuIHVwIFVSTHMgKHJlbW92ZSB0cmFpbGluZyBwdW5jdHVhdGlvbilcbiAgcmV0dXJuIG1hdGNoZXMubWFwKHVybCA9PiB7XG4gICAgcmV0dXJuIHVybC5yZXBsYWNlKC9bLiw7IT8pK10rJC8sICcnKTtcbiAgfSk7XG59XG5cbi8qKlxuICogQ2hlY2sgaWYgYSBVUkwgaXMgdmFsaWQgYW5kIHdlYi1hY2Nlc3NpYmxlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc1ZhbGlkV2ViVXJsKHVybDogc3RyaW5nKTogYm9vbGVhbiB7XG4gIHRyeSB7XG4gICAgY29uc3QgcGFyc2VkID0gbmV3IFVSTCh1cmwpO1xuICAgIHJldHVybiBbJ2h0dHA6JywgJ2h0dHBzOiddLmluY2x1ZGVzKHBhcnNlZC5wcm90b2NvbCk7XG4gIH0gY2F0Y2gge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG4vKipcbiAqIEV4dHJhY3QgdGhlIGZpcnN0IHZhbGlkIFVSTCBmcm9tIHRleHRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGV4dHJhY3RGaXJzdFZhbGlkVXJsKHRleHQ6IHN0cmluZyk6IHN0cmluZyB8IG51bGwge1xuICBjb25zdCB1cmxzID0gZXh0cmFjdFVybHModGV4dCk7XG4gIGNvbnN0IHZhbGlkVXJscyA9IHVybHMuZmlsdGVyKGlzVmFsaWRXZWJVcmwpO1xuICByZXR1cm4gdmFsaWRVcmxzLmxlbmd0aCA+IDAgPyB2YWxpZFVybHNbMF0gOiBudWxsO1xufVxuXG4vKipcbiAqIENoZWNrIGlmIHRleHQgY29udGFpbnMgYW55IFVSTHNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbnRhaW5zVXJsKHRleHQ6IHN0cmluZyk6IGJvb2xlYW4ge1xuICByZXR1cm4gZXh0cmFjdFVybHModGV4dCkubGVuZ3RoID4gMDtcbn1cblxuLyoqXG4gKiBHZXQgZG9tYWluIGZyb20gVVJMXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXREb21haW4odXJsOiBzdHJpbmcpOiBzdHJpbmcgfCBudWxsIHtcbiAgdHJ5IHtcbiAgICBjb25zdCBwYXJzZWQgPSBuZXcgVVJMKHVybCk7XG4gICAgcmV0dXJuIHBhcnNlZC5ob3N0bmFtZTtcbiAgfSBjYXRjaCB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbn1cblxuLyoqXG4gKiBOb3JtYWxpemUgVVJMIChhZGQgaHR0cHMgaWYgbWlzc2luZylcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG5vcm1hbGl6ZVVybCh1cmw6IHN0cmluZyk6IHN0cmluZyB7XG4gIGlmICghdXJsLnN0YXJ0c1dpdGgoJ2h0dHA6Ly8nKSAmJiAhdXJsLnN0YXJ0c1dpdGgoJ2h0dHBzOi8vJykpIHtcbiAgICByZXR1cm4gYGh0dHBzOi8vJHt1cmx9YDtcbiAgfVxuICByZXR1cm4gdXJsO1xufVxuXG4vKipcbiAqIFRlc3QgZnVuY3Rpb24gdG8gdmVyaWZ5IFVSTCBkZXRlY3Rpb24gd29ya3MgY29ycmVjdGx5XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0ZXN0VXJsRGV0ZWN0aW9uKCk6IHZvaWQge1xuICBjb25zdCB0ZXN0Q2FzZXMgPSBbXG4gICAgXCJDaGVjayBvdXQgaHR0cHM6Ly9zdHJpcGUuY29tIGZvciBwYXltZW50c1wiLFxuICAgIFwiT3VyIHNpdGUgaXMgaHR0cHM6Ly9maWdtYS5jb20uXCIsXG4gICAgXCJWaXNpdCBodHRwOi8vZXhhbXBsZS5jb20gYW5kIGh0dHBzOi8vZ29vZ2xlLmNvbVwiLFxuICAgIFwiTm8gVVJMcyBoZXJlIVwiLFxuICAgIFwiTXVsdGlwbGU6IGh0dHBzOi8vYS5jb20sIGh0dHBzOi8vYi5jb20sIGFuZCBodHRwczovL2MuY29tXCIsXG4gICAgXCJDcmVhdGUgYSB2aWRlbyBmb3Igb3VyIGNvbXBhbnk6IGh0dHBzOi8vbm90aW9uLnNvL2Fib3V0XCIsXG4gICAgXCJDaGVjayB0aGlzIG91dDogaHR0cHM6Ly9naXRodWIuY29tL21pY3Jvc29mdC9wbGF5d3JpZ2h0IVwiLFxuICAgIFwiUHJpY2luZyBhdCBodHRwczovL3ZlcmNlbC5jb20vcHJpY2luZz91dG1fc291cmNlPWV4YW1wbGVcIixcbiAgICBcIk1peGVkOiBWaXNpdCBvdXIgc2l0ZSB3d3cuZXhhbXBsZS5jb20gb3IgaHR0cHM6Ly9leGFtcGxlLmNvbS9jb250YWN0XCJcbiAgXTtcbiAgXG4gIGNvbnNvbGUubG9nKCfwn6eqIFRlc3RpbmcgVVJMIERldGVjdGlvbjonKTtcbiAgdGVzdENhc2VzLmZvckVhY2goKHRleHQsIGluZGV4KSA9PiB7XG4gICAgY29uc3QgdXJscyA9IGV4dHJhY3RVcmxzKHRleHQpO1xuICAgIGNvbnN0IHZhbGlkVXJscyA9IHVybHMuZmlsdGVyKGlzVmFsaWRXZWJVcmwpO1xuICAgIGNvbnN0IGZpcnN0VmFsaWQgPSBleHRyYWN0Rmlyc3RWYWxpZFVybCh0ZXh0KTtcbiAgICBcbiAgICBjb25zb2xlLmxvZyhgXFxuJHtpbmRleCArIDF9LiBcIiR7dGV4dH1cImApO1xuICAgIGNvbnNvbGUubG9nKGAgICBGb3VuZCBVUkxzOiAke0pTT04uc3RyaW5naWZ5KHVybHMpfWApO1xuICAgIGNvbnNvbGUubG9nKGAgICBWYWxpZCBVUkxzOiAke0pTT04uc3RyaW5naWZ5KHZhbGlkVXJscyl9YCk7XG4gICAgY29uc29sZS5sb2coYCAgIEZpcnN0IFZhbGlkOiAke2ZpcnN0VmFsaWR9YCk7XG4gICAgY29uc29sZS5sb2coYCAgIENvbnRhaW5zIFVSTDogJHtjb250YWluc1VybCh0ZXh0KX1gKTtcbiAgfSk7XG4gIFxuICAvLyBUZXN0IGRvbWFpbiBleHRyYWN0aW9uXG4gIGNvbnNvbGUubG9nKCdcXG7wn4yQIFRlc3RpbmcgRG9tYWluIEV4dHJhY3Rpb246Jyk7XG4gIGNvbnN0IGRvbWFpblRlc3RzID0gW1xuICAgICdodHRwczovL3N0cmlwZS5jb20vcHJpY2luZycsXG4gICAgJ2h0dHA6Ly93d3cuZXhhbXBsZS5jb20nLFxuICAgICdodHRwczovL3N1YmRvbWFpbi5leGFtcGxlLmNvLnVrL3BhdGgnLFxuICAgICdpbnZhbGlkLXVybCdcbiAgXTtcbiAgXG4gIGRvbWFpblRlc3RzLmZvckVhY2godXJsID0+IHtcbiAgICBjb25zdCBkb21haW4gPSBnZXREb21haW4odXJsKTtcbiAgICBjb25zb2xlLmxvZyhgICAgJHt1cmx9IOKGkiAke2RvbWFpbn1gKTtcbiAgfSk7XG4gIFxuICAvLyBUZXN0IFVSTCBub3JtYWxpemF0aW9uXG4gIGNvbnNvbGUubG9nKCdcXG7wn5SnIFRlc3RpbmcgVVJMIE5vcm1hbGl6YXRpb246Jyk7XG4gIGNvbnN0IG5vcm1hbGl6ZVRlc3RzID0gW1xuICAgICdzdHJpcGUuY29tJyxcbiAgICAnaHR0cHM6Ly9maWdtYS5jb20nLFxuICAgICdodHRwOi8vZXhhbXBsZS5jb20nLFxuICAgICd3d3cuZ2l0aHViLmNvbSdcbiAgXTtcbiAgXG4gIG5vcm1hbGl6ZVRlc3RzLmZvckVhY2godXJsID0+IHtcbiAgICBjb25zdCBub3JtYWxpemVkID0gbm9ybWFsaXplVXJsKHVybCk7XG4gICAgY29uc29sZS5sb2coYCAgICR7dXJsfSDihpIgJHtub3JtYWxpemVkfWApO1xuICB9KTtcbn0iXSwibmFtZXMiOlsiZXh0cmFjdFVybHMiLCJ0ZXh0IiwidXJsUmVnZXgiLCJtYXRjaGVzIiwibWF0Y2giLCJtYXAiLCJ1cmwiLCJyZXBsYWNlIiwiaXNWYWxpZFdlYlVybCIsInBhcnNlZCIsIlVSTCIsImluY2x1ZGVzIiwicHJvdG9jb2wiLCJleHRyYWN0Rmlyc3RWYWxpZFVybCIsInVybHMiLCJ2YWxpZFVybHMiLCJmaWx0ZXIiLCJsZW5ndGgiLCJjb250YWluc1VybCIsImdldERvbWFpbiIsImhvc3RuYW1lIiwibm9ybWFsaXplVXJsIiwic3RhcnRzV2l0aCIsInRlc3RVcmxEZXRlY3Rpb24iLCJ0ZXN0Q2FzZXMiLCJjb25zb2xlIiwibG9nIiwiZm9yRWFjaCIsImluZGV4IiwiZmlyc3RWYWxpZCIsIkpTT04iLCJzdHJpbmdpZnkiLCJkb21haW5UZXN0cyIsImRvbWFpbiIsIm5vcm1hbGl6ZVRlc3RzIiwibm9ybWFsaXplZCJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/utils/url-detection.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/utils/url.ts":
/*!******************************!*\
  !*** ./src/lib/utils/url.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getApiUrl: () => (/* binding */ getApiUrl),\n/* harmony export */   getAppUrl: () => (/* binding */ getAppUrl),\n/* harmony export */   getBazaarUrl: () => (/* binding */ getBazaarUrl),\n/* harmony export */   getShareUrl: () => (/* binding */ getShareUrl)\n/* harmony export */ });\n/* harmony import */ var _config_site__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ~/config/site */ \"(rsc)/./src/config/site.ts\");\n\n/**\n * Environment-aware URL utility functions\n */ function getAppUrl() {\n    return (0,_config_site__WEBPACK_IMPORTED_MODULE_0__.getBaseUrl)();\n}\nfunction getShareUrl(shareId) {\n    return `${getAppUrl()}/share/${shareId}`;\n}\nfunction getApiUrl() {\n    const appUrl = getAppUrl();\n    return `${appUrl}/api`;\n}\nfunction getBazaarUrl(path = '') {\n    return `${getAppUrl()}${path}`;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvbGliL3V0aWxzL3VybC50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUEwQztBQUUxQzs7Q0FFQyxHQUNNLFNBQVNDO0lBQ2QsT0FBT0Qsd0RBQVVBO0FBQ25CO0FBRU8sU0FBU0UsWUFBWUMsT0FBZTtJQUN6QyxPQUFPLEdBQUdGLFlBQVksT0FBTyxFQUFFRSxTQUFTO0FBQzFDO0FBRU8sU0FBU0M7SUFDZCxNQUFNQyxTQUFTSjtJQUNmLE9BQU8sR0FBR0ksT0FBTyxJQUFJLENBQUM7QUFDeEI7QUFFTyxTQUFTQyxhQUFhQyxPQUFPLEVBQUU7SUFDcEMsT0FBTyxHQUFHTixjQUFjTSxNQUFNO0FBQ2hDIiwic291cmNlcyI6WyIvVXNlcnMvbWFya3VzaG9nbmUvRG9jdW1lbnRzL0FQUFMvYmF6YWFyLXZpZC9iYXphYXItdmlkL2FwcHMvbWFpbi9zcmMvbGliL3V0aWxzL3VybC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBnZXRCYXNlVXJsIH0gZnJvbSBcIn4vY29uZmlnL3NpdGVcIlxuXG4vKipcbiAqIEVudmlyb25tZW50LWF3YXJlIFVSTCB1dGlsaXR5IGZ1bmN0aW9uc1xuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0QXBwVXJsKCk6IHN0cmluZyB7XG4gIHJldHVybiBnZXRCYXNlVXJsKCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRTaGFyZVVybChzaGFyZUlkOiBzdHJpbmcpOiBzdHJpbmcge1xuICByZXR1cm4gYCR7Z2V0QXBwVXJsKCl9L3NoYXJlLyR7c2hhcmVJZH1gO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0QXBpVXJsKCk6IHN0cmluZyB7XG4gIGNvbnN0IGFwcFVybCA9IGdldEFwcFVybCgpO1xuICByZXR1cm4gYCR7YXBwVXJsfS9hcGlgO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0QmF6YWFyVXJsKHBhdGggPSAnJyk6IHN0cmluZyB7XG4gIHJldHVybiBgJHtnZXRBcHBVcmwoKX0ke3BhdGh9YDtcbn0iXSwibmFtZXMiOlsiZ2V0QmFzZVVybCIsImdldEFwcFVybCIsImdldFNoYXJlVXJsIiwic2hhcmVJZCIsImdldEFwaVVybCIsImFwcFVybCIsImdldEJhemFhclVybCIsInBhdGgiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/utils/url.ts\n");

/***/ }),

/***/ "(rsc)/./src/server/api/root.ts":
/*!********************************!*\
  !*** ./src/server/api/root.ts ***!
  \********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   appRouter: () => (/* binding */ appRouter),\n/* harmony export */   createCaller: () => (/* binding */ createCaller)\n/* harmony export */ });\n/* harmony import */ var _server_api_routers_project__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ~/server/api/routers/project */ \"(rsc)/./src/server/api/routers/project.ts\");\n/* harmony import */ var _server_api_routers_chat__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ~/server/api/routers/chat */ \"(rsc)/./src/server/api/routers/chat.ts\");\n/* harmony import */ var _server_api_routers_render__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ~/server/api/routers/render */ \"(rsc)/./src/server/api/routers/render.ts\");\n/* harmony import */ var _server_api_routers_generation_universal__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ~/server/api/routers/generation.universal */ \"(rsc)/./src/server/api/routers/generation.universal.ts\");\n/* harmony import */ var _server_api_routers_voice__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ~/server/api/routers/voice */ \"(rsc)/./src/server/api/routers/voice.ts\");\n/* harmony import */ var _server_api_routers_feedback__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ~/server/api/routers/feedback */ \"(rsc)/./src/server/api/routers/feedback.ts\");\n/* harmony import */ var _server_api_routers_emailSubscriber__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ~/server/api/routers/emailSubscriber */ \"(rsc)/./src/server/api/routers/emailSubscriber.ts\");\n/* harmony import */ var _server_api_routers_scenes__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ~/server/api/routers/scenes */ \"(rsc)/./src/server/api/routers/scenes.ts\");\n/* harmony import */ var _server_api_routers_share__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ~/server/api/routers/share */ \"(rsc)/./src/server/api/routers/share.ts\");\n/* harmony import */ var _server_api_routers_admin__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ~/server/api/routers/admin */ \"(rsc)/./src/server/api/routers/admin.ts\");\n/* harmony import */ var _server_api_trpc__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ~/server/api/trpc */ \"(rsc)/./src/server/api/trpc.ts\");\n/* harmony import */ var _server_init__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ~/server/init */ \"(rsc)/./src/server/init.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_server_api_routers_project__WEBPACK_IMPORTED_MODULE_0__, _server_api_routers_chat__WEBPACK_IMPORTED_MODULE_1__, _server_api_routers_render__WEBPACK_IMPORTED_MODULE_2__, _server_api_routers_generation_universal__WEBPACK_IMPORTED_MODULE_3__, _server_api_routers_voice__WEBPACK_IMPORTED_MODULE_4__, _server_api_routers_feedback__WEBPACK_IMPORTED_MODULE_5__, _server_api_routers_emailSubscriber__WEBPACK_IMPORTED_MODULE_6__, _server_api_routers_scenes__WEBPACK_IMPORTED_MODULE_7__, _server_api_routers_share__WEBPACK_IMPORTED_MODULE_8__, _server_api_routers_admin__WEBPACK_IMPORTED_MODULE_9__, _server_api_trpc__WEBPACK_IMPORTED_MODULE_10__, _server_init__WEBPACK_IMPORTED_MODULE_11__]);\n([_server_api_routers_project__WEBPACK_IMPORTED_MODULE_0__, _server_api_routers_chat__WEBPACK_IMPORTED_MODULE_1__, _server_api_routers_render__WEBPACK_IMPORTED_MODULE_2__, _server_api_routers_generation_universal__WEBPACK_IMPORTED_MODULE_3__, _server_api_routers_voice__WEBPACK_IMPORTED_MODULE_4__, _server_api_routers_feedback__WEBPACK_IMPORTED_MODULE_5__, _server_api_routers_emailSubscriber__WEBPACK_IMPORTED_MODULE_6__, _server_api_routers_scenes__WEBPACK_IMPORTED_MODULE_7__, _server_api_routers_share__WEBPACK_IMPORTED_MODULE_8__, _server_api_routers_admin__WEBPACK_IMPORTED_MODULE_9__, _server_api_trpc__WEBPACK_IMPORTED_MODULE_10__, _server_init__WEBPACK_IMPORTED_MODULE_11__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n// src/server/api/root.ts\n\n\n\n\n\n\n\n\n\n\n\n// Import server initialization to start background processes\n\n/**\n * This is the primary router for your server.\n *\n * All routers added in /api/routers should be manually added here.\n */ const appRouter = (0,_server_api_trpc__WEBPACK_IMPORTED_MODULE_10__.createTRPCRouter)({\n    project: _server_api_routers_project__WEBPACK_IMPORTED_MODULE_0__.projectRouter,\n    chat: _server_api_routers_chat__WEBPACK_IMPORTED_MODULE_1__.chatRouter,\n    render: _server_api_routers_render__WEBPACK_IMPORTED_MODULE_2__.renderRouter,\n    generation: _server_api_routers_generation_universal__WEBPACK_IMPORTED_MODULE_3__.generationUniversalRouter,\n    voice: _server_api_routers_voice__WEBPACK_IMPORTED_MODULE_4__.voiceRouter,\n    feedback: _server_api_routers_feedback__WEBPACK_IMPORTED_MODULE_5__.feedbackRouter,\n    emailSubscriber: _server_api_routers_emailSubscriber__WEBPACK_IMPORTED_MODULE_6__.emailSubscriberRouter,\n    scenes: _server_api_routers_scenes__WEBPACK_IMPORTED_MODULE_7__.scenesRouter,\n    share: _server_api_routers_share__WEBPACK_IMPORTED_MODULE_8__.shareRouter,\n    admin: _server_api_routers_admin__WEBPACK_IMPORTED_MODULE_9__.adminRouter\n});\n/**\n * Create a server-side caller for the tRPC API.\n * @example\n * const trpc = createCaller(createContext);\n * const res = await trpc.post.all();\n *       ^? Post[]\n */ const createCaller = (0,_server_api_trpc__WEBPACK_IMPORTED_MODULE_10__.createCallerFactory)(appRouter);\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvc2VydmVyL2FwaS9yb290LnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEseUJBQXlCO0FBQ29DO0FBQ047QUFDSTtBQUMyQjtBQUM3QjtBQUNNO0FBQ2M7QUFDbEI7QUFDRjtBQUNBO0FBQ2lCO0FBQzFFLDZEQUE2RDtBQUN0QztBQUV2Qjs7OztDQUlDLEdBQ00sTUFBTVksWUFBWUQsbUVBQWdCQSxDQUFDO0lBQ3hDRSxTQUFTYixzRUFBYUE7SUFDdEJjLE1BQU1iLGdFQUFVQTtJQUNoQmMsUUFBUWIsb0VBQVlBO0lBQ3BCYyxZQUFZYiwrRkFBeUJBO0lBQ3JDYyxPQUFPYixrRUFBV0E7SUFDbEJjLFVBQVViLHdFQUFjQTtJQUN4QmMsaUJBQWlCYixzRkFBcUJBO0lBQ3RDYyxRQUFRYixvRUFBWUE7SUFDcEJjLE9BQU9iLGtFQUFXQTtJQUNsQmMsT0FBT2Isa0VBQVdBO0FBQ3BCLEdBQUc7QUFLSDs7Ozs7O0NBTUMsR0FDTSxNQUFNYyxlQUFlYixzRUFBbUJBLENBQUNFLFdBQVciLCJzb3VyY2VzIjpbIi9Vc2Vycy9tYXJrdXNob2duZS9Eb2N1bWVudHMvQVBQUy9iYXphYXItdmlkL2JhemFhci12aWQvYXBwcy9tYWluL3NyYy9zZXJ2ZXIvYXBpL3Jvb3QudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gc3JjL3NlcnZlci9hcGkvcm9vdC50c1xuaW1wb3J0IHsgcHJvamVjdFJvdXRlciB9IGZyb20gXCJ+L3NlcnZlci9hcGkvcm91dGVycy9wcm9qZWN0XCI7XG5pbXBvcnQgeyBjaGF0Um91dGVyIH0gZnJvbSBcIn4vc2VydmVyL2FwaS9yb3V0ZXJzL2NoYXRcIjtcbmltcG9ydCB7IHJlbmRlclJvdXRlciB9IGZyb20gXCJ+L3NlcnZlci9hcGkvcm91dGVycy9yZW5kZXJcIjtcbmltcG9ydCB7IGdlbmVyYXRpb25Vbml2ZXJzYWxSb3V0ZXIgfSBmcm9tIFwifi9zZXJ2ZXIvYXBpL3JvdXRlcnMvZ2VuZXJhdGlvbi51bml2ZXJzYWxcIjtcbmltcG9ydCB7IHZvaWNlUm91dGVyIH0gZnJvbSBcIn4vc2VydmVyL2FwaS9yb3V0ZXJzL3ZvaWNlXCI7XG5pbXBvcnQgeyBmZWVkYmFja1JvdXRlciB9IGZyb20gXCJ+L3NlcnZlci9hcGkvcm91dGVycy9mZWVkYmFja1wiO1xuaW1wb3J0IHsgZW1haWxTdWJzY3JpYmVyUm91dGVyIH0gZnJvbSBcIn4vc2VydmVyL2FwaS9yb3V0ZXJzL2VtYWlsU3Vic2NyaWJlclwiO1xuaW1wb3J0IHsgc2NlbmVzUm91dGVyIH0gZnJvbSBcIn4vc2VydmVyL2FwaS9yb3V0ZXJzL3NjZW5lc1wiO1xuaW1wb3J0IHsgc2hhcmVSb3V0ZXIgfSBmcm9tIFwifi9zZXJ2ZXIvYXBpL3JvdXRlcnMvc2hhcmVcIjtcbmltcG9ydCB7IGFkbWluUm91dGVyIH0gZnJvbSBcIn4vc2VydmVyL2FwaS9yb3V0ZXJzL2FkbWluXCI7XG5pbXBvcnQgeyBjcmVhdGVDYWxsZXJGYWN0b3J5LCBjcmVhdGVUUlBDUm91dGVyIH0gZnJvbSBcIn4vc2VydmVyL2FwaS90cnBjXCI7XG4vLyBJbXBvcnQgc2VydmVyIGluaXRpYWxpemF0aW9uIHRvIHN0YXJ0IGJhY2tncm91bmQgcHJvY2Vzc2VzXG5pbXBvcnQgXCJ+L3NlcnZlci9pbml0XCI7XG5cbi8qKlxuICogVGhpcyBpcyB0aGUgcHJpbWFyeSByb3V0ZXIgZm9yIHlvdXIgc2VydmVyLlxuICpcbiAqIEFsbCByb3V0ZXJzIGFkZGVkIGluIC9hcGkvcm91dGVycyBzaG91bGQgYmUgbWFudWFsbHkgYWRkZWQgaGVyZS5cbiAqL1xuZXhwb3J0IGNvbnN0IGFwcFJvdXRlciA9IGNyZWF0ZVRSUENSb3V0ZXIoe1xuICBwcm9qZWN0OiBwcm9qZWN0Um91dGVyLFxuICBjaGF0OiBjaGF0Um91dGVyLFxuICByZW5kZXI6IHJlbmRlclJvdXRlcixcbiAgZ2VuZXJhdGlvbjogZ2VuZXJhdGlvblVuaXZlcnNhbFJvdXRlcixcbiAgdm9pY2U6IHZvaWNlUm91dGVyLFxuICBmZWVkYmFjazogZmVlZGJhY2tSb3V0ZXIsXG4gIGVtYWlsU3Vic2NyaWJlcjogZW1haWxTdWJzY3JpYmVyUm91dGVyLFxuICBzY2VuZXM6IHNjZW5lc1JvdXRlcixcbiAgc2hhcmU6IHNoYXJlUm91dGVyLFxuICBhZG1pbjogYWRtaW5Sb3V0ZXIsXG59KTtcblxuLy8gZXhwb3J0IHR5cGUgZGVmaW5pdGlvbiBvZiBBUElcbmV4cG9ydCB0eXBlIEFwcFJvdXRlciA9IHR5cGVvZiBhcHBSb3V0ZXI7XG5cbi8qKlxuICogQ3JlYXRlIGEgc2VydmVyLXNpZGUgY2FsbGVyIGZvciB0aGUgdFJQQyBBUEkuXG4gKiBAZXhhbXBsZVxuICogY29uc3QgdHJwYyA9IGNyZWF0ZUNhbGxlcihjcmVhdGVDb250ZXh0KTtcbiAqIGNvbnN0IHJlcyA9IGF3YWl0IHRycGMucG9zdC5hbGwoKTtcbiAqICAgICAgIF4/IFBvc3RbXVxuICovXG5leHBvcnQgY29uc3QgY3JlYXRlQ2FsbGVyID0gY3JlYXRlQ2FsbGVyRmFjdG9yeShhcHBSb3V0ZXIpO1xuIl0sIm5hbWVzIjpbInByb2plY3RSb3V0ZXIiLCJjaGF0Um91dGVyIiwicmVuZGVyUm91dGVyIiwiZ2VuZXJhdGlvblVuaXZlcnNhbFJvdXRlciIsInZvaWNlUm91dGVyIiwiZmVlZGJhY2tSb3V0ZXIiLCJlbWFpbFN1YnNjcmliZXJSb3V0ZXIiLCJzY2VuZXNSb3V0ZXIiLCJzaGFyZVJvdXRlciIsImFkbWluUm91dGVyIiwiY3JlYXRlQ2FsbGVyRmFjdG9yeSIsImNyZWF0ZVRSUENSb3V0ZXIiLCJhcHBSb3V0ZXIiLCJwcm9qZWN0IiwiY2hhdCIsInJlbmRlciIsImdlbmVyYXRpb24iLCJ2b2ljZSIsImZlZWRiYWNrIiwiZW1haWxTdWJzY3JpYmVyIiwic2NlbmVzIiwic2hhcmUiLCJhZG1pbiIsImNyZWF0ZUNhbGxlciJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./src/server/api/root.ts\n");

/***/ }),

/***/ "(rsc)/./src/server/api/routers/admin.ts":
/*!*****************************************!*\
  !*** ./src/server/api/routers/admin.ts ***!
  \*****************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   adminRouter: () => (/* binding */ adminRouter)\n/* harmony export */ });\n/* harmony import */ var _server_api_trpc__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ~/server/api/trpc */ \"(rsc)/./src/server/api/trpc.ts\");\n/* harmony import */ var _bazaar_database__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @bazaar/database */ \"(rsc)/../../packages/database/index.ts\");\n/* harmony import */ var drizzle_orm__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! drizzle-orm */ \"drizzle-orm\");\n/* harmony import */ var _trpc_server__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @trpc/server */ \"(rsc)/../../node_modules/@trpc/server/dist/index.mjs\");\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! zod */ \"(rsc)/../../node_modules/zod/lib/index.mjs\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_server_api_trpc__WEBPACK_IMPORTED_MODULE_0__, _bazaar_database__WEBPACK_IMPORTED_MODULE_1__, drizzle_orm__WEBPACK_IMPORTED_MODULE_2__]);\n([_server_api_trpc__WEBPACK_IMPORTED_MODULE_0__, _bazaar_database__WEBPACK_IMPORTED_MODULE_1__, drizzle_orm__WEBPACK_IMPORTED_MODULE_2__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n// src/server/api/routers/admin.ts\n\n\n\n\n\n\n// Input schema for timeframe filtering\nconst timeframeSchema = zod__WEBPACK_IMPORTED_MODULE_4__.z.enum([\n    'all',\n    '30d',\n    '24h'\n]).default('all');\n// User update schema - now includes isAdmin\nconst userUpdateSchema = zod__WEBPACK_IMPORTED_MODULE_4__.z.object({\n    name: zod__WEBPACK_IMPORTED_MODULE_4__.z.string().optional(),\n    email: zod__WEBPACK_IMPORTED_MODULE_4__.z.string().email().optional(),\n    image: zod__WEBPACK_IMPORTED_MODULE_4__.z.string().url().optional().nullable(),\n    isAdmin: zod__WEBPACK_IMPORTED_MODULE_4__.z.boolean().optional()\n});\n// Admin-only procedure that checks if user is admin\nconst adminOnlyProcedure = _server_api_trpc__WEBPACK_IMPORTED_MODULE_0__.protectedProcedure.use({\n    \"use[adminOnlyProcedure]\": async ({ ctx, next })=>{\n        // Check if user is admin\n        const user = await _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.db.select({\n            isAdmin: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.users.isAdmin\n        }).from(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.users).where((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.eq)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.users.id, ctx.session.user.id)).limit(1);\n        if (!user[0]?.isAdmin) {\n            throw new _trpc_server__WEBPACK_IMPORTED_MODULE_3__.TRPCError({\n                code: \"FORBIDDEN\",\n                message: \"Admin access required\"\n            });\n        }\n        return next();\n    }\n}[\"use[adminOnlyProcedure]\"]);\nconst adminRouter = (0,_server_api_trpc__WEBPACK_IMPORTED_MODULE_0__.createTRPCRouter)({\n    // Check if current user is admin\n    checkAdminAccess: _server_api_trpc__WEBPACK_IMPORTED_MODULE_0__.protectedProcedure.query(async ({ ctx })=>{\n        const user = await _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.db.select({\n            isAdmin: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.users.isAdmin\n        }).from(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.users).where((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.eq)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.users.id, ctx.session.user.id)).limit(1);\n        return {\n            isAdmin: user[0]?.isAdmin || false\n        };\n    }),\n    // Toggle user admin status - admin only\n    toggleUserAdmin: adminOnlyProcedure.input(zod__WEBPACK_IMPORTED_MODULE_4__.z.object({\n        userId: zod__WEBPACK_IMPORTED_MODULE_4__.z.string(),\n        isAdmin: zod__WEBPACK_IMPORTED_MODULE_4__.z.boolean()\n    })).mutation(async ({ input })=>{\n        const updatedUser = await _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.db.update(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.users).set({\n            isAdmin: input.isAdmin\n        }).where((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.eq)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.users.id, input.userId)).returning({\n            id: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.users.id,\n            name: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.users.name,\n            email: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.users.email,\n            isAdmin: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.users.isAdmin\n        });\n        if (!updatedUser[0]) {\n            throw new _trpc_server__WEBPACK_IMPORTED_MODULE_3__.TRPCError({\n                code: \"NOT_FOUND\",\n                message: \"User not found\"\n            });\n        }\n        return updatedUser[0];\n    }),\n    // Get total users count with timeframe filtering - admin only\n    getTotalUsers: adminOnlyProcedure.input(zod__WEBPACK_IMPORTED_MODULE_4__.z.object({\n        timeframe: timeframeSchema\n    })).query(async ({ input })=>{\n        let whereCondition;\n        if (input.timeframe === '24h') {\n            // Use createdAt for user creation time tracking\n            whereCondition = (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.gte)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.users.createdAt, new Date(Date.now() - 24 * 60 * 60 * 1000));\n        } else if (input.timeframe === '30d') {\n            whereCondition = (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.gte)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.users.createdAt, new Date(Date.now() - 30 * 24 * 60 * 60 * 1000));\n        }\n        const result = await _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.db.select({\n            count: (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.count)()\n        }).from(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.users).where(whereCondition);\n        return {\n            total: result[0]?.count || 0,\n            timeframe: input.timeframe\n        };\n    }),\n    // Get unique projects created in timeframe - admin only\n    getProjectsCreated: adminOnlyProcedure.input(zod__WEBPACK_IMPORTED_MODULE_4__.z.object({\n        timeframe: timeframeSchema\n    })).query(async ({ input })=>{\n        let whereCondition;\n        if (input.timeframe === '24h') {\n            whereCondition = (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.gte)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects.createdAt, new Date(Date.now() - 24 * 60 * 60 * 1000));\n        } else if (input.timeframe === '30d') {\n            whereCondition = (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.gte)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects.createdAt, new Date(Date.now() - 30 * 24 * 60 * 60 * 1000));\n        }\n        const result = await _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.db.select({\n            count: (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.count)()\n        }).from(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects).where(whereCondition);\n        return {\n            total: result[0]?.count || 0,\n            timeframe: input.timeframe\n        };\n    }),\n    // Get scenes created in timeframe - admin only\n    getScenesCreated: adminOnlyProcedure.input(zod__WEBPACK_IMPORTED_MODULE_4__.z.object({\n        timeframe: timeframeSchema\n    })).query(async ({ input })=>{\n        let whereCondition;\n        if (input.timeframe === '24h') {\n            whereCondition = (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.gte)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.scenes.createdAt, new Date(Date.now() - 24 * 60 * 60 * 1000));\n        } else if (input.timeframe === '30d') {\n            whereCondition = (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.gte)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.scenes.createdAt, new Date(Date.now() - 30 * 24 * 60 * 60 * 1000));\n        }\n        const result = await _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.db.select({\n            count: (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.count)()\n        }).from(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.scenes).where(whereCondition);\n        return {\n            total: result[0]?.count || 0,\n            timeframe: input.timeframe\n        };\n    }),\n    // Get recent feedback entries - admin only\n    getRecentFeedback: adminOnlyProcedure.input(zod__WEBPACK_IMPORTED_MODULE_4__.z.object({\n        limit: zod__WEBPACK_IMPORTED_MODULE_4__.z.number().default(10)\n    })).query(async ({ input })=>{\n        const feedbackEntries = await _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.db.select({\n            id: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.feedback.id,\n            content: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.feedback.content,\n            name: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.feedback.name,\n            email: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.feedback.email,\n            createdAt: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.feedback.createdAt,\n            status: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.feedback.status,\n            prioritizedFeatures: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.feedback.prioritizedFeatures\n        }).from(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.feedback).orderBy((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.desc)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.feedback.createdAt)).limit(input.limit);\n        return feedbackEntries;\n    }),\n    // Get comprehensive dashboard metrics - admin only\n    getDashboardMetrics: adminOnlyProcedure.query(async ()=>{\n        // Get all timeframes for each metric in parallel\n        const [totalUsersAll, totalUsers30d, totalUsers7d, totalUsers24h, projectsAll, projects30d, projects7d, projects24h, scenesAll, scenes30d, scenes7d, scenes24h, recentFeedback] = await Promise.all([\n            // Users - using createdAt for user registration tracking\n            _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.db.select({\n                count: (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.count)()\n            }).from(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.users),\n            _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.db.select({\n                count: (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.count)()\n            }).from(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.users).where((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.and)((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.gte)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.users.createdAt, new Date(Date.now() - 30 * 24 * 60 * 60 * 1000)), (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.sql)`${_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.users.createdAt} IS NOT NULL`)),\n            _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.db.select({\n                count: (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.count)()\n            }).from(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.users).where((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.and)((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.gte)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.users.createdAt, new Date(Date.now() - 7 * 24 * 60 * 60 * 1000)), (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.sql)`${_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.users.createdAt} IS NOT NULL`)),\n            _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.db.select({\n                count: (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.count)()\n            }).from(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.users).where((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.and)((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.gte)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.users.createdAt, new Date(Date.now() - 24 * 60 * 60 * 1000)), (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.sql)`${_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.users.createdAt} IS NOT NULL`)),\n            // Projects\n            _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.db.select({\n                count: (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.count)()\n            }).from(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects),\n            _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.db.select({\n                count: (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.count)()\n            }).from(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects).where((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.gte)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects.createdAt, new Date(Date.now() - 30 * 24 * 60 * 60 * 1000))),\n            _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.db.select({\n                count: (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.count)()\n            }).from(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects).where((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.gte)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects.createdAt, new Date(Date.now() - 7 * 24 * 60 * 60 * 1000))),\n            _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.db.select({\n                count: (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.count)()\n            }).from(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects).where((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.gte)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects.createdAt, new Date(Date.now() - 24 * 60 * 60 * 1000))),\n            // Scenes\n            _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.db.select({\n                count: (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.count)()\n            }).from(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.scenes),\n            _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.db.select({\n                count: (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.count)()\n            }).from(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.scenes).where((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.gte)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.scenes.createdAt, new Date(Date.now() - 30 * 24 * 60 * 60 * 1000))),\n            _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.db.select({\n                count: (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.count)()\n            }).from(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.scenes).where((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.gte)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.scenes.createdAt, new Date(Date.now() - 7 * 24 * 60 * 60 * 1000))),\n            _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.db.select({\n                count: (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.count)()\n            }).from(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.scenes).where((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.gte)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.scenes.createdAt, new Date(Date.now() - 24 * 60 * 60 * 1000))),\n            // Recent feedback\n            _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.db.select({\n                id: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.feedback.id,\n                content: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.feedback.content,\n                name: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.feedback.name,\n                email: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.feedback.email,\n                createdAt: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.feedback.createdAt,\n                status: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.feedback.status\n            }).from(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.feedback).orderBy((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.desc)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.feedback.createdAt)).limit(5)\n        ]);\n        return {\n            users: {\n                all: totalUsersAll[0]?.count || 0,\n                last30Days: totalUsers30d[0]?.count || 0,\n                last7Days: totalUsers7d[0]?.count || 0,\n                last24Hours: totalUsers24h[0]?.count || 0\n            },\n            projects: {\n                all: projectsAll[0]?.count || 0,\n                last30Days: projects30d[0]?.count || 0,\n                last7Days: projects7d[0]?.count || 0,\n                last24Hours: projects24h[0]?.count || 0\n            },\n            scenes: {\n                all: scenesAll[0]?.count || 0,\n                last30Days: scenes30d[0]?.count || 0,\n                last7Days: scenes7d[0]?.count || 0,\n                last24Hours: scenes24h[0]?.count || 0\n            },\n            recentFeedback\n        };\n    }),\n    // USER MANAGEMENT ENDPOINTS - admin only\n    // Get all users with pagination and search - admin only\n    getUsers: adminOnlyProcedure.input(zod__WEBPACK_IMPORTED_MODULE_4__.z.object({\n        page: zod__WEBPACK_IMPORTED_MODULE_4__.z.number().default(1),\n        limit: zod__WEBPACK_IMPORTED_MODULE_4__.z.number().default(20),\n        search: zod__WEBPACK_IMPORTED_MODULE_4__.z.string().optional()\n    })).query(async ({ input })=>{\n        const offset = (input.page - 1) * input.limit;\n        let whereCondition;\n        if (input.search) {\n            whereCondition = (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.or)((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.like)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.users.name, `%${input.search}%`), (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.like)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.users.email, `%${input.search}%`));\n        }\n        const [usersList, totalCount] = await Promise.all([\n            _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.db.select({\n                id: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.users.id,\n                name: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.users.name,\n                email: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.users.email,\n                emailVerified: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.users.emailVerified,\n                image: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.users.image,\n                isAdmin: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.users.isAdmin,\n                createdAt: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.users.createdAt\n            }).from(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.users).where(whereCondition).orderBy((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.desc)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.users.createdAt)) // Order by creation time instead\n            .limit(input.limit).offset(offset),\n            _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.db.select({\n                count: (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.count)()\n            }).from(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.users).where(whereCondition)\n        ]);\n        // Get prompt counts for each user\n        const userIds = usersList.map((user)=>user.id);\n        const promptCounts = userIds.length > 0 ? await _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.db.select({\n            userId: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects.userId,\n            count: (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.count)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.messages.id)\n        }).from(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.messages).innerJoin(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects, (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.eq)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.messages.projectId, _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects.id)).where((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.and)((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.inArray)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects.userId, userIds), (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.eq)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.messages.role, 'user'))).groupBy(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects.userId) : [];\n        // Create a map of userId to prompt count for easy lookup\n        const promptCountMap = new Map();\n        promptCounts.forEach((pc)=>{\n            promptCountMap.set(pc.userId, pc.count);\n        });\n        // Add prompt counts to users\n        const usersWithPrompts = usersList.map((user)=>({\n                ...user,\n                totalPrompts: promptCountMap.get(user.id) || 0\n            }));\n        return {\n            users: usersWithPrompts,\n            total: totalCount[0]?.count || 0,\n            page: input.page,\n            limit: input.limit,\n            totalPages: Math.ceil((totalCount[0]?.count || 0) / input.limit)\n        };\n    }),\n    // Get single user by ID - admin only\n    getUser: adminOnlyProcedure.input(zod__WEBPACK_IMPORTED_MODULE_4__.z.object({\n        userId: zod__WEBPACK_IMPORTED_MODULE_4__.z.string()\n    })).query(async ({ input })=>{\n        const user = await _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.db.select({\n            id: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.users.id,\n            name: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.users.name,\n            email: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.users.email,\n            emailVerified: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.users.emailVerified,\n            image: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.users.image,\n            isAdmin: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.users.isAdmin,\n            createdAt: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.users.createdAt\n        }).from(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.users).where((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.eq)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.users.id, input.userId)).limit(1);\n        if (!user[0]) {\n            throw new _trpc_server__WEBPACK_IMPORTED_MODULE_3__.TRPCError({\n                code: \"NOT_FOUND\",\n                message: \"User not found\"\n            });\n        }\n        // Get user's project count, latest activity, and prompt count\n        const [projectCount, latestProject, promptCount] = await Promise.all([\n            _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.db.select({\n                count: (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.count)()\n            }).from(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects).where((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.eq)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects.userId, input.userId)),\n            _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.db.select({\n                id: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects.id,\n                title: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects.title,\n                createdAt: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects.createdAt,\n                updatedAt: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects.updatedAt\n            }).from(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects).where((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.eq)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects.userId, input.userId)).orderBy((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.desc)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects.updatedAt)).limit(1),\n            // Count total user messages/prompts by joining through projects\n            _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.db.select({\n                count: (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.count)()\n            }).from(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.messages).innerJoin(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects, (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.eq)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.messages.projectId, _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects.id)).where((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.and)((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.eq)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects.userId, input.userId), (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.eq)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.messages.role, 'user') // Only count user messages, not assistant responses\n            ))\n        ]);\n        return {\n            ...user[0],\n            projectCount: projectCount[0]?.count || 0,\n            latestProject: latestProject[0] || null,\n            promptCount: promptCount[0]?.count || 0\n        };\n    }),\n    // Update user data - admin only\n    updateUser: adminOnlyProcedure.input(zod__WEBPACK_IMPORTED_MODULE_4__.z.object({\n        userId: zod__WEBPACK_IMPORTED_MODULE_4__.z.string(),\n        data: userUpdateSchema\n    })).mutation(async ({ input })=>{\n        const updateData = {};\n        if (input.data.name !== undefined) updateData.name = input.data.name;\n        if (input.data.email !== undefined) updateData.email = input.data.email;\n        if (input.data.image !== undefined) updateData.image = input.data.image;\n        if (input.data.isAdmin !== undefined) updateData.isAdmin = input.data.isAdmin;\n        if (Object.keys(updateData).length === 0) {\n            throw new _trpc_server__WEBPACK_IMPORTED_MODULE_3__.TRPCError({\n                code: \"BAD_REQUEST\",\n                message: \"No data provided for update\"\n            });\n        }\n        const updatedUser = await _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.db.update(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.users).set(updateData).where((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.eq)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.users.id, input.userId)).returning({\n            id: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.users.id,\n            name: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.users.name,\n            email: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.users.email,\n            emailVerified: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.users.emailVerified,\n            image: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.users.image,\n            isAdmin: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.users.isAdmin,\n            createdAt: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.users.createdAt\n        });\n        if (!updatedUser[0]) {\n            throw new _trpc_server__WEBPACK_IMPORTED_MODULE_3__.TRPCError({\n                code: \"NOT_FOUND\",\n                message: \"User not found or update failed\"\n            });\n        }\n        return updatedUser[0];\n    }),\n    // Delete user - admin only\n    deleteUser: adminOnlyProcedure.input(zod__WEBPACK_IMPORTED_MODULE_4__.z.object({\n        userId: zod__WEBPACK_IMPORTED_MODULE_4__.z.string()\n    })).mutation(async ({ input })=>{\n        // Prevent deletion of admin users for safety\n        const userToDelete = await _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.db.select({\n            isAdmin: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.users.isAdmin,\n            email: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.users.email\n        }).from(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.users).where((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.eq)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.users.id, input.userId)).limit(1);\n        if (!userToDelete[0]) {\n            throw new _trpc_server__WEBPACK_IMPORTED_MODULE_3__.TRPCError({\n                code: \"NOT_FOUND\",\n                message: \"User not found\"\n            });\n        }\n        if (userToDelete[0].isAdmin) {\n            throw new _trpc_server__WEBPACK_IMPORTED_MODULE_3__.TRPCError({\n                code: \"FORBIDDEN\",\n                message: \"Cannot delete admin users\"\n            });\n        }\n        // Delete user and all associated data\n        // Note: This will cascade delete related data due to foreign key constraints\n        const deletedUser = await _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.db.delete(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.users).where((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.eq)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.users.id, input.userId)).returning({\n            id: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.users.id,\n            email: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.users.email\n        });\n        if (!deletedUser[0]) {\n            throw new _trpc_server__WEBPACK_IMPORTED_MODULE_3__.TRPCError({\n                code: \"INTERNAL_SERVER_ERROR\",\n                message: \"Failed to delete user\"\n            });\n        }\n        return {\n            success: true,\n            deletedUser: deletedUser[0]\n        };\n    }),\n    // Get user activity summary - admin only\n    getUserActivity: adminOnlyProcedure.input(zod__WEBPACK_IMPORTED_MODULE_4__.z.object({\n        userId: zod__WEBPACK_IMPORTED_MODULE_4__.z.string()\n    })).query(async ({ input })=>{\n        const [userProjects, userScenes, userFeedback] = await Promise.all([\n            _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.db.select({\n                id: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects.id,\n                title: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects.title,\n                createdAt: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects.createdAt,\n                updatedAt: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects.updatedAt\n            }).from(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects).where((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.eq)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects.userId, input.userId)).orderBy((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.desc)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects.updatedAt)).limit(10),\n            _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.db.select({\n                id: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.scenes.id,\n                name: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.scenes.name,\n                createdAt: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.scenes.createdAt,\n                projectId: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.scenes.projectId\n            }).from(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.scenes).innerJoin(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects, (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.eq)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.scenes.projectId, _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects.id)).where((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.eq)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects.userId, input.userId)).orderBy((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.desc)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.scenes.createdAt)).limit(10),\n            _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.db.select({\n                id: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.feedback.id,\n                content: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.feedback.content,\n                createdAt: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.feedback.createdAt,\n                status: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.feedback.status\n            }).from(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.feedback).where((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.eq)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.feedback.userId, input.userId)).orderBy((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.desc)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.feedback.createdAt)).limit(5)\n        ]);\n        return {\n            projects: userProjects,\n            scenes: userScenes,\n            feedback: userFeedback\n        };\n    }),\n    // ANALYTICS ENDPOINTS - admin only\n    // Get time-series analytics data\n    getAnalyticsData: adminOnlyProcedure.input(zod__WEBPACK_IMPORTED_MODULE_4__.z.object({\n        timeframe: zod__WEBPACK_IMPORTED_MODULE_4__.z.enum([\n            '24h',\n            '7d',\n            '30d'\n        ]),\n        metric: zod__WEBPACK_IMPORTED_MODULE_4__.z.enum([\n            'users',\n            'projects',\n            'scenes',\n            'prompts'\n        ])\n    })).query(async ({ input })=>{\n        const { timeframe, metric } = input;\n        // Calculate intervals and date ranges\n        let intervalHours;\n        let totalPeriodHours;\n        switch(timeframe){\n            case '24h':\n                intervalHours = 1; // 1-hour intervals\n                totalPeriodHours = 24;\n                break;\n            case '7d':\n                intervalHours = 24; // 24-hour (daily) intervals\n                totalPeriodHours = 7 * 24;\n                break;\n            case '30d':\n                intervalHours = 24; // 24-hour (daily) intervals\n                totalPeriodHours = 30 * 24;\n                break;\n        }\n        const startDate = new Date(Date.now() - totalPeriodHours * 60 * 60 * 1000);\n        // Generate time slots\n        const timeSlots = [];\n        for(let i = 0; i < Math.ceil(totalPeriodHours / intervalHours); i++){\n            const slotStart = new Date(startDate.getTime() + i * intervalHours * 60 * 60 * 1000);\n            const slotEnd = new Date(slotStart.getTime() + intervalHours * 60 * 60 * 1000);\n            timeSlots.push({\n                start: slotStart,\n                end: slotEnd,\n                label: timeframe === '24h' ? slotStart.toLocaleTimeString([], {\n                    hour: '2-digit',\n                    minute: '2-digit'\n                }) : slotStart.toLocaleDateString([], {\n                    month: 'short',\n                    day: 'numeric'\n                })\n            });\n        }\n        // Get data based on metric type\n        let data = [];\n        switch(metric){\n            case 'users':\n                // Get new users by createdAt timestamp\n                const userCounts = await _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.db.select({\n                    timestamp: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.users.createdAt\n                }).from(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.users).where((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.and)((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.gte)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.users.createdAt, startDate), (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.sql)`${_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.users.createdAt} IS NOT NULL`)).orderBy(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.users.createdAt);\n                data = userCounts.map((row)=>({\n                        timestamp: row.timestamp,\n                        count: 1\n                    }));\n                break;\n            case 'projects':\n                const projectCounts = await _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.db.select({\n                    timestamp: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects.createdAt\n                }).from(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects).where((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.gte)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects.createdAt, startDate)).orderBy(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects.createdAt);\n                data = projectCounts.map((row)=>({\n                        timestamp: row.timestamp,\n                        count: 1\n                    }));\n                break;\n            case 'scenes':\n                const sceneCounts = await _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.db.select({\n                    timestamp: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.scenes.createdAt\n                }).from(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.scenes).where((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.gte)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.scenes.createdAt, startDate)).orderBy(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.scenes.createdAt);\n                data = sceneCounts.map((row)=>({\n                        timestamp: row.timestamp,\n                        count: 1\n                    }));\n                break;\n            case 'prompts':\n                // Get user messages (prompts) by joining through projects\n                const promptCounts = await _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.db.select({\n                    timestamp: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.messages.createdAt\n                }).from(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.messages).innerJoin(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects, (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.eq)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.messages.projectId, _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects.id)).where((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.and)((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.gte)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.messages.createdAt, startDate), (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.eq)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.messages.role, 'user') // Only count user messages\n                )).orderBy(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.messages.createdAt);\n                data = promptCounts.map((row)=>({\n                        timestamp: row.timestamp,\n                        count: 1\n                    }));\n                break;\n        }\n        // Aggregate data into time slots\n        const chartData = timeSlots.map((slot)=>{\n            const slotData = data.filter((item)=>item.timestamp >= slot.start && item.timestamp < slot.end);\n            return {\n                label: slot.label,\n                timestamp: slot.start.toISOString(),\n                count: slotData.length,\n                cumulative: 0\n            };\n        });\n        // Calculate cumulative values\n        let cumulative = 0;\n        chartData.forEach((point)=>{\n            cumulative += point.count;\n            point.cumulative = cumulative;\n        });\n        return {\n            timeframe,\n            metric,\n            data: chartData,\n            totalCount: cumulative,\n            periodStart: startDate.toISOString(),\n            periodEnd: new Date().toISOString()\n        };\n    }),\n    // Get overview analytics for all metrics\n    getAnalyticsOverview: adminOnlyProcedure.input(zod__WEBPACK_IMPORTED_MODULE_4__.z.object({\n        timeframe: zod__WEBPACK_IMPORTED_MODULE_4__.z.enum([\n            '24h',\n            '7d',\n            '30d'\n        ])\n    })).query(async ({ input })=>{\n        const { timeframe } = input;\n        let periodHours;\n        switch(timeframe){\n            case '24h':\n                periodHours = 24;\n                break;\n            case '7d':\n                periodHours = 7 * 24;\n                break;\n            case '30d':\n                periodHours = 30 * 24;\n                break;\n        }\n        const startDate = new Date(Date.now() - periodHours * 60 * 60 * 1000);\n        // Get all metrics in parallel\n        const [newUsers, newProjects, newScenes, newPrompts] = await Promise.all([\n            // New users\n            _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.db.select({\n                count: (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.count)()\n            }).from(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.users).where((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.and)((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.gte)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.users.createdAt, startDate), (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.sql)`${_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.users.createdAt} IS NOT NULL`)),\n            // New projects\n            _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.db.select({\n                count: (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.count)()\n            }).from(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects).where((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.gte)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects.createdAt, startDate)),\n            // New scenes\n            _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.db.select({\n                count: (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.count)()\n            }).from(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.scenes).where((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.gte)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.scenes.createdAt, startDate)),\n            // New prompts (user messages)\n            _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.db.select({\n                count: (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.count)()\n            }).from(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.messages).innerJoin(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects, (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.eq)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.messages.projectId, _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects.id)).where((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.and)((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.gte)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.messages.createdAt, startDate), (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.eq)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.messages.role, 'user')))\n        ]);\n        return {\n            timeframe,\n            metrics: {\n                users: newUsers[0]?.count || 0,\n                projects: newProjects[0]?.count || 0,\n                scenes: newScenes[0]?.count || 0,\n                prompts: newPrompts[0]?.count || 0\n            },\n            periodStart: startDate.toISOString(),\n            periodEnd: new Date().toISOString()\n        };\n    }),\n    // EVALUATION ENDPOINTS - admin only\n    // Run evaluation suite\n    runEvaluation: adminOnlyProcedure.input(zod__WEBPACK_IMPORTED_MODULE_4__.z.object({\n        suiteId: zod__WEBPACK_IMPORTED_MODULE_4__.z.string(),\n        modelPacks: zod__WEBPACK_IMPORTED_MODULE_4__.z.array(zod__WEBPACK_IMPORTED_MODULE_4__.z.string()),\n        maxPrompts: zod__WEBPACK_IMPORTED_MODULE_4__.z.number().optional(),\n        showOutputs: zod__WEBPACK_IMPORTED_MODULE_4__.z.boolean().optional(),\n        comparison: zod__WEBPACK_IMPORTED_MODULE_4__.z.boolean().optional(),\n        verbose: zod__WEBPACK_IMPORTED_MODULE_4__.z.boolean().optional()\n    })).mutation(async ({ input })=>{\n        // Import the evaluation runner\n        const { EvaluationRunner } = await __webpack_require__.e(/*! import() */ \"_rsc_src_lib_evals_runner_ts\").then(__webpack_require__.bind(__webpack_require__, /*! ~/lib/evals/runner */ \"(rsc)/./src/lib/evals/runner.ts\"));\n        const runner = new EvaluationRunner();\n        try {\n            const result = await runner.runSuite({\n                suiteId: input.suiteId,\n                modelPacks: input.modelPacks,\n                maxPrompts: input.maxPrompts,\n                showOutputs: input.showOutputs,\n                comparison: input.comparison,\n                verbose: input.verbose\n            });\n            return result;\n        } catch (error) {\n            console.error('Evaluation failed:', error);\n            throw new _trpc_server__WEBPACK_IMPORTED_MODULE_3__.TRPCError({\n                code: \"INTERNAL_SERVER_ERROR\",\n                message: `Evaluation failed: ${error instanceof Error ? error.message : String(error)}`\n            });\n        }\n    }),\n    // Create custom evaluation suite\n    createCustomSuite: adminOnlyProcedure.input(zod__WEBPACK_IMPORTED_MODULE_4__.z.object({\n        name: zod__WEBPACK_IMPORTED_MODULE_4__.z.string(),\n        description: zod__WEBPACK_IMPORTED_MODULE_4__.z.string(),\n        prompts: zod__WEBPACK_IMPORTED_MODULE_4__.z.array(zod__WEBPACK_IMPORTED_MODULE_4__.z.object({\n            id: zod__WEBPACK_IMPORTED_MODULE_4__.z.string(),\n            name: zod__WEBPACK_IMPORTED_MODULE_4__.z.string(),\n            type: zod__WEBPACK_IMPORTED_MODULE_4__.z.enum([\n                'text',\n                'image',\n                'code',\n                'scene'\n            ]),\n            input: zod__WEBPACK_IMPORTED_MODULE_4__.z.object({\n                text: zod__WEBPACK_IMPORTED_MODULE_4__.z.string().optional(),\n                image: zod__WEBPACK_IMPORTED_MODULE_4__.z.string().optional(),\n                context: zod__WEBPACK_IMPORTED_MODULE_4__.z.record(zod__WEBPACK_IMPORTED_MODULE_4__.z.any()).optional()\n            }),\n            expectedOutput: zod__WEBPACK_IMPORTED_MODULE_4__.z.object({\n                type: zod__WEBPACK_IMPORTED_MODULE_4__.z.enum([\n                    'exact',\n                    'contains',\n                    'pattern',\n                    'quality_score'\n                ]),\n                value: zod__WEBPACK_IMPORTED_MODULE_4__.z.union([\n                    zod__WEBPACK_IMPORTED_MODULE_4__.z.string(),\n                    zod__WEBPACK_IMPORTED_MODULE_4__.z.number()\n                ])\n            }).optional(),\n            expectedBehavior: zod__WEBPACK_IMPORTED_MODULE_4__.z.object({\n                toolCalled: zod__WEBPACK_IMPORTED_MODULE_4__.z.string().optional(),\n                editType: zod__WEBPACK_IMPORTED_MODULE_4__.z.enum([\n                    'surgical',\n                    'creative',\n                    'structural'\n                ]).optional(),\n                shouldMention: zod__WEBPACK_IMPORTED_MODULE_4__.z.array(zod__WEBPACK_IMPORTED_MODULE_4__.z.string()).optional(),\n                shouldModify: zod__WEBPACK_IMPORTED_MODULE_4__.z.array(zod__WEBPACK_IMPORTED_MODULE_4__.z.string()).optional(),\n                shouldAnalyzeImage: zod__WEBPACK_IMPORTED_MODULE_4__.z.boolean().optional(),\n                shouldUseContext: zod__WEBPACK_IMPORTED_MODULE_4__.z.boolean().optional(),\n                shouldConfirm: zod__WEBPACK_IMPORTED_MODULE_4__.z.boolean().optional(),\n                shouldAsk: zod__WEBPACK_IMPORTED_MODULE_4__.z.array(zod__WEBPACK_IMPORTED_MODULE_4__.z.string()).optional(),\n                needsClarification: zod__WEBPACK_IMPORTED_MODULE_4__.z.boolean().optional(),\n                expectedDuration: zod__WEBPACK_IMPORTED_MODULE_4__.z.number().optional(),\n                complexity: zod__WEBPACK_IMPORTED_MODULE_4__.z.enum([\n                    'low',\n                    'medium',\n                    'high',\n                    'very-high'\n                ])\n            }).optional()\n        })),\n        modelPacks: zod__WEBPACK_IMPORTED_MODULE_4__.z.array(zod__WEBPACK_IMPORTED_MODULE_4__.z.string()),\n        services: zod__WEBPACK_IMPORTED_MODULE_4__.z.array(zod__WEBPACK_IMPORTED_MODULE_4__.z.string())\n    })).mutation(async ({ input })=>{\n        // For now, just return the created suite structure\n        // In the future, this could be stored in a database\n        const customSuite = {\n            id: `custom-${Date.now()}`,\n            name: input.name,\n            description: input.description,\n            prompts: input.prompts,\n            modelPacks: input.modelPacks,\n            services: input.services\n        };\n        return customSuite;\n    }),\n    // Get available evaluation suites\n    getEvaluationSuites: adminOnlyProcedure.query(async ()=>{\n        // Import suites dynamically\n        const { allEvalSuites } = await __webpack_require__.e(/*! import() */ \"_rsc_src_lib_evals_suites_basic-prompts_ts\").then(__webpack_require__.bind(__webpack_require__, /*! ~/lib/evals/suites/basic-prompts */ \"(rsc)/./src/lib/evals/suites/basic-prompts.ts\"));\n        return allEvalSuites.map((suite)=>({\n                id: suite.id,\n                name: suite.name,\n                description: suite.description,\n                promptCount: suite.prompts.length,\n                services: suite.services,\n                modelPacks: suite.modelPacks\n            }));\n    }),\n    // Get available model packs\n    getModelPacks: adminOnlyProcedure.query(async ()=>{\n        const { MODEL_PACKS } = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ~/config/models.config */ \"(rsc)/./src/config/models.config.ts\"));\n        return Object.entries(MODEL_PACKS).map(([id, pack])=>({\n                id,\n                name: pack.name,\n                description: pack.description,\n                models: {\n                    brain: `${pack.models.brain.provider}/${pack.models.brain.model}`,\n                    codeGenerator: `${pack.models.codeGenerator.provider}/${pack.models.codeGenerator.model}`,\n                    visionAnalysis: `${pack.models.visionAnalysis.provider}/${pack.models.visionAnalysis.model}`\n                }\n            }));\n    }),\n    // Create custom prompt - admin only\n    createCustomPrompt: adminOnlyProcedure.input(zod__WEBPACK_IMPORTED_MODULE_4__.z.object({\n        name: zod__WEBPACK_IMPORTED_MODULE_4__.z.string(),\n        type: zod__WEBPACK_IMPORTED_MODULE_4__.z.enum([\n            'text',\n            'code',\n            'image',\n            'scene'\n        ]),\n        text: zod__WEBPACK_IMPORTED_MODULE_4__.z.string(),\n        expectedOutput: zod__WEBPACK_IMPORTED_MODULE_4__.z.object({\n            type: zod__WEBPACK_IMPORTED_MODULE_4__.z.string(),\n            value: zod__WEBPACK_IMPORTED_MODULE_4__.z.string().optional()\n        }).optional(),\n        context: zod__WEBPACK_IMPORTED_MODULE_4__.z.any().optional()\n    })).mutation(async ({ input })=>{\n        // TODO: Store in database for persistence\n        const customPrompt = {\n            id: `prompt-${Date.now()}`,\n            name: input.name,\n            type: input.type,\n            input: {\n                text: input.text,\n                context: input.context\n            },\n            expectedOutput: input.expectedOutput,\n            createdAt: new Date().toISOString()\n        };\n        console.log('Creating custom prompt:', customPrompt);\n        return {\n            success: true,\n            promptId: customPrompt.id,\n            prompt: customPrompt\n        };\n    }),\n    // Create custom model pack - admin only\n    createCustomModelPack: adminOnlyProcedure.input(zod__WEBPACK_IMPORTED_MODULE_4__.z.object({\n        name: zod__WEBPACK_IMPORTED_MODULE_4__.z.string(),\n        description: zod__WEBPACK_IMPORTED_MODULE_4__.z.string(),\n        brainModel: zod__WEBPACK_IMPORTED_MODULE_4__.z.string(),\n        codeModel: zod__WEBPACK_IMPORTED_MODULE_4__.z.string(),\n        visionModel: zod__WEBPACK_IMPORTED_MODULE_4__.z.string()\n    })).mutation(async ({ input })=>{\n        // Parse provider/model format\n        const parseModel = (modelString)=>{\n            const [provider, model] = modelString.split('/');\n            return {\n                provider: provider,\n                model: model\n            };\n        };\n        const customPack = {\n            id: `custom-${Date.now()}`,\n            name: input.name,\n            description: input.description,\n            models: {\n                brain: parseModel(input.brainModel),\n                codeGenerator: parseModel(input.codeModel),\n                visionAnalysis: parseModel(input.visionModel)\n            },\n            createdAt: new Date().toISOString()\n        };\n        // TODO: Store in database for persistence\n        console.log('Creating custom model pack:', customPack);\n        return {\n            success: true,\n            packId: customPack.id,\n            pack: customPack\n        };\n    }),\n    // Analyze uploaded image - admin only\n    analyzeUploadedImage: adminOnlyProcedure.input(zod__WEBPACK_IMPORTED_MODULE_4__.z.object({\n        imageData: zod__WEBPACK_IMPORTED_MODULE_4__.z.string(),\n        prompt: zod__WEBPACK_IMPORTED_MODULE_4__.z.string().optional()\n    })).mutation(async ({ input })=>{\n        try {\n            // TODO: Integrate with actual image analysis service from ~/lib/services/analyzeImage.ts\n            const analysisResult = {\n                success: true,\n                analysis: {\n                    description: \"A user interface mockup showing a modern web application with clean design elements, including navigation, content areas, and interactive components.\",\n                    colors: [\n                        \"#3B82F6\",\n                        \"#1F2937\",\n                        \"#F9FAFB\",\n                        \"#EF4444\"\n                    ],\n                    elements: [\n                        \"Navigation bar\",\n                        \"Content cards\",\n                        \"Buttons\",\n                        \"Text elements\"\n                    ],\n                    mood: \"Professional and modern\",\n                    suggestions: [\n                        \"This design could be implemented using React components\",\n                        \"The color scheme suggests a professional application\",\n                        \"Layout appears to be responsive-friendly\"\n                    ],\n                    palette: {\n                        primary: \"#3B82F6\",\n                        secondary: \"#1F2937\",\n                        accent: \"#EF4444\",\n                        background: \"#F9FAFB\"\n                    },\n                    typography: {\n                        headers: \"Bold, sans-serif typography\",\n                        body: \"Clean, readable text\"\n                    }\n                },\n                timestamp: new Date().toISOString()\n            };\n            return analysisResult;\n        } catch (error) {\n            throw new _trpc_server__WEBPACK_IMPORTED_MODULE_3__.TRPCError({\n                code: \"INTERNAL_SERVER_ERROR\",\n                message: `Image analysis failed: ${error instanceof Error ? error.message : String(error)}`\n            });\n        }\n    }),\n    // Generate scene from image - admin only\n    generateSceneFromImage: adminOnlyProcedure.input(zod__WEBPACK_IMPORTED_MODULE_4__.z.object({\n        imageData: zod__WEBPACK_IMPORTED_MODULE_4__.z.string(),\n        analysisData: zod__WEBPACK_IMPORTED_MODULE_4__.z.any().optional()\n    })).mutation(async ({ input })=>{\n        try {\n            // TODO: Integrate with actual scene generation service\n            const sceneCode = `const { AbsoluteFill, useCurrentFrame, useVideoConfig, interpolate } = window.Remotion;\n\nexport default function GeneratedScene() {\n  const frame = useCurrentFrame();\n  const { fps } = useVideoConfig();\n  \n  const opacity = interpolate(frame, [0, fps * 0.5], [0, 1], {\n    extrapolateLeft: \"clamp\",\n    extrapolateRight: \"clamp\"\n  });\n  \n  const scale = interpolate(frame, [0, fps], [0.8, 1], {\n    extrapolateLeft: \"clamp\", \n    extrapolateRight: \"clamp\"\n  });\n  \n  return (\n    <AbsoluteFill style={{ \n      backgroundColor: \"#3B82F6\",\n      display: \"flex\",\n      flexDirection: \"column\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      backgroundImage: \"linear-gradient(135deg, #3B82F6 0%, #1F2937 100%)\"\n    }}>\n      <div style={{\n        opacity,\n        transform: \\`scale(\\${scale})\\`,\n        textAlign: \"center\",\n        color: \"white\",\n        padding: \"2rem\"\n      }}>\n        <h1 style={{\n          fontSize: \"4rem\",\n          fontWeight: \"700\",\n          margin: \"0 0 1rem 0\",\n          textShadow: \"0 4px 8px rgba(0,0,0,0.3)\"\n        }}>\n          Generated from Image\n        </h1>\n        <p style={{\n          fontSize: \"1.5rem\",\n          opacity: 0.9,\n          maxWidth: \"600px\"\n        }}>\n          Professional UI Design with Modern Elements\n        </p>\n        <div style={{\n          marginTop: \"2rem\",\n          padding: \"1rem 2rem\",\n          backgroundColor: \"rgba(255,255,255,0.1)\",\n          borderRadius: \"10px\",\n          backdropFilter: \"blur(10px)\"\n        }}>\n          <span style={{ fontSize: \"1.2rem\" }}>\n            Auto-generated from uploaded reference\n          </span>\n        </div>\n      </div>\n    </AbsoluteFill>\n  );\n}`;\n            return {\n                success: true,\n                sceneCode,\n                sceneId: `scene-${Date.now()}`,\n                sceneName: \"Generated Scene\",\n                timestamp: new Date().toISOString()\n            };\n        } catch (error) {\n            throw new _trpc_server__WEBPACK_IMPORTED_MODULE_3__.TRPCError({\n                code: \"INTERNAL_SERVER_ERROR\",\n                message: `Scene generation failed: ${error instanceof Error ? error.message : 'Unknown error'}`\n            });\n        }\n    }),\n    // 🆕 NEW: Comprehensive user analytics endpoint\n    getUserAnalytics: adminOnlyProcedure.input(zod__WEBPACK_IMPORTED_MODULE_4__.z.object({\n        limit: zod__WEBPACK_IMPORTED_MODULE_4__.z.number().min(1).max(100).default(20),\n        offset: zod__WEBPACK_IMPORTED_MODULE_4__.z.number().min(0).default(0),\n        sortBy: zod__WEBPACK_IMPORTED_MODULE_4__.z.enum([\n            'signup_date',\n            'last_activity',\n            'total_projects',\n            'total_prompts'\n        ]).default('signup_date'),\n        sortOrder: zod__WEBPACK_IMPORTED_MODULE_4__.z.enum([\n            'asc',\n            'desc'\n        ]).default('desc'),\n        searchTerm: zod__WEBPACK_IMPORTED_MODULE_4__.z.string().optional(),\n        authProvider: zod__WEBPACK_IMPORTED_MODULE_4__.z.enum([\n            'all',\n            'google',\n            'github',\n            'unknown'\n        ]).default('all'),\n        activityFilter: zod__WEBPACK_IMPORTED_MODULE_4__.z.enum([\n            'all',\n            'today',\n            'week',\n            'month',\n            'never'\n        ]).default('all'),\n        signupDateFilter: zod__WEBPACK_IMPORTED_MODULE_4__.z.enum([\n            'all',\n            'today',\n            'week',\n            'month',\n            'older'\n        ]).default('all'),\n        projectsFilter: zod__WEBPACK_IMPORTED_MODULE_4__.z.enum([\n            'all',\n            'none',\n            'low',\n            'medium',\n            'high'\n        ]).default('all'),\n        adminFilter: zod__WEBPACK_IMPORTED_MODULE_4__.z.enum([\n            'all',\n            'admin',\n            'user'\n        ]).default('all')\n    })).query(async ({ input, ctx })=>{\n        console.log('🔍 getUserAnalytics called with:', {\n            input,\n            hasCtx: !!ctx\n        });\n        const { limit, offset, sortBy, sortOrder, searchTerm, authProvider, activityFilter, signupDateFilter, projectsFilter, adminFilter } = input;\n        // Build WHERE conditions for filtering\n        const whereConditions = [];\n        // Search filter\n        if (searchTerm && searchTerm.trim()) {\n            whereConditions.push((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.or)((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.like)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.users.name, `%${searchTerm}%`), (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.like)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.users.email, `%${searchTerm}%`)));\n        }\n        // Admin status filter\n        if (adminFilter !== 'all') {\n            whereConditions.push((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.eq)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.users.isAdmin, adminFilter === 'admin'));\n        }\n        // Signup date filter\n        if (signupDateFilter !== 'all') {\n            const now = new Date();\n            let signupThreshold;\n            switch(signupDateFilter){\n                case 'today':\n                    signupThreshold = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n                    whereConditions.push((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.gte)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.users.createdAt, signupThreshold));\n                    break;\n                case 'week':\n                    signupThreshold = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000);\n                    whereConditions.push((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.gte)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.users.createdAt, signupThreshold));\n                    break;\n                case 'month':\n                    signupThreshold = new Date(Date.now() - 30 * 24 * 60 * 60 * 1000);\n                    whereConditions.push((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.gte)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.users.createdAt, signupThreshold));\n                    break;\n                case 'older':\n                    signupThreshold = new Date(Date.now() - 30 * 24 * 60 * 60 * 1000);\n                    whereConditions.push((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.sql)`${_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.users.createdAt} < ${signupThreshold}`);\n                    break;\n            }\n        }\n        // 🚨 COMPREHENSIVE USER ANALYTICS QUERY WITH ENHANCED FILTERING\n        const baseQuery = _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.db.select({\n            // Basic user info\n            id: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.users.id,\n            name: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.users.name,\n            email: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.users.email,\n            image: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.users.image,\n            isAdmin: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.users.isAdmin,\n            signupDate: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.users.createdAt,\n            // OAuth provider info\n            oauthProvider: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.accounts.provider,\n            // Project metrics\n            totalProjects: (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.sql)`COUNT(DISTINCT ${_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects.id})`.as('total_projects'),\n            // Scene metrics  \n            totalScenes: (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.sql)`COUNT(DISTINCT ${_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.scenes.id})`.as('total_scenes'),\n            // Chat/prompt metrics\n            totalMessages: (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.sql)`COUNT(DISTINCT ${_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.messages.id})`.as('total_messages'),\n            totalUserPrompts: (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.sql)`COUNT(DISTINCT CASE WHEN ${_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.messages.role} = 'user' THEN ${_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.messages.id} END)`.as('total_user_prompts'),\n            // Error message tracking\n            totalErrorMessages: (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.sql)`COUNT(DISTINCT CASE WHEN ${_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.messages.status} = 'error' THEN ${_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.messages.id} END)`.as('total_error_messages'),\n            // Image usage metrics - simplified to avoid double-counting\n            promptsWithImages: (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.sql)`COUNT(DISTINCT CASE WHEN ${_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.messages.imageUrls} IS NOT NULL AND jsonb_array_length(${_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.messages.imageUrls}) > 0 THEN ${_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.messages.id} END)`.as('prompts_with_images'),\n            totalImagesUploaded: (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.sql)`COALESCE(SUM(CASE WHEN ${_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.messages.imageUrls} IS NOT NULL THEN jsonb_array_length(${_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.messages.imageUrls}) ELSE 0 END), 0)`.as('total_images_uploaded'),\n            // Activity metrics\n            firstActivity: (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.sql)`MIN(${_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.messages.createdAt})`.as('first_activity'),\n            lastActivity: (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.sql)`MAX(${_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.messages.createdAt})`.as('last_activity'),\n            // Engagement metrics\n            totalSceneIterations: (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.sql)`COUNT(DISTINCT ${_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.sceneIterations.id})`.as('total_scene_iterations'),\n            // Advanced behavior metrics\n            complexEdits: (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.sql)`COUNT(DISTINCT CASE WHEN ${_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.sceneIterations.editComplexity} = 'structural' THEN ${_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.sceneIterations.id} END)`.as('complex_edits'),\n            creativeEdits: (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.sql)`COUNT(DISTINCT CASE WHEN ${_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.sceneIterations.editComplexity} = 'creative' THEN ${_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.sceneIterations.id} END)`.as('creative_edits'),\n            surgicalEdits: (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.sql)`COUNT(DISTINCT CASE WHEN ${_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.sceneIterations.editComplexity} = 'surgical' THEN ${_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.sceneIterations.id} END)`.as('surgical_edits'),\n            // Project memory insights\n            userPreferences: (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.sql)`COUNT(DISTINCT CASE WHEN ${_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projectMemory.memoryType} = 'user_preference' THEN ${_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projectMemory.id} END)`.as('user_preferences')\n        }).from(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.users).leftJoin(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.accounts, (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.eq)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.users.id, _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.accounts.userId)).leftJoin(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects, (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.eq)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.users.id, _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects.userId)).leftJoin(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.scenes, (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.eq)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects.id, _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.scenes.projectId)).leftJoin(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.messages, (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.eq)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects.id, _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.messages.projectId)).leftJoin(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.sceneIterations, (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.eq)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects.id, _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.sceneIterations.projectId)).leftJoin(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projectMemory, (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.eq)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects.id, _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projectMemory.projectId)).$dynamic();\n        // Execute the query with conditional WHERE clause, groupBy and ordering\n        let userAnalytics = await (whereConditions.length > 0 ? baseQuery.where((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.and)(...whereConditions)) : baseQuery).groupBy(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.users.id, _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.users.name, _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.users.email, _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.users.image, _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.users.isAdmin, _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.users.createdAt, _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.accounts.provider).orderBy(sortOrder === 'desc' ? (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.desc)(sortBy === 'signup_date' ? _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.users.createdAt : sortBy === 'last_activity' ? (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.sql)`MAX(${_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.messages.createdAt})` : sortBy === 'total_projects' ? (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.sql)`COUNT(DISTINCT ${_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects.id})` : (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.sql)`COUNT(DISTINCT CASE WHEN ${_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.messages.role} = 'user' THEN ${_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.messages.id} END)`) : (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.asc)(sortBy === 'signup_date' ? _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.users.createdAt : sortBy === 'last_activity' ? (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.sql)`MAX(${_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.messages.createdAt})` : sortBy === 'total_projects' ? (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.sql)`COUNT(DISTINCT ${_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects.id})` : (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.sql)`COUNT(DISTINCT CASE WHEN ${_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.messages.role} = 'user' THEN ${_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.messages.id} END)`));\n        // Apply post-query filtering (since Drizzle doesn't support complex HAVING clauses well)\n        if (authProvider !== 'all') {\n            userAnalytics = userAnalytics.filter((user)=>{\n                if (authProvider === 'unknown') {\n                    return !user.oauthProvider;\n                }\n                return user.oauthProvider === authProvider;\n            });\n        }\n        if (projectsFilter !== 'all') {\n            userAnalytics = userAnalytics.filter((user)=>{\n                const projectCount = user.totalProjects;\n                switch(projectsFilter){\n                    case 'none':\n                        return projectCount === 0;\n                    case 'low':\n                        return projectCount >= 1 && projectCount <= 2;\n                    case 'medium':\n                        return projectCount >= 3 && projectCount <= 10;\n                    case 'high':\n                        return projectCount > 10;\n                    default:\n                        return true;\n                }\n            });\n        }\n        if (activityFilter !== 'all') {\n            const now = new Date();\n            userAnalytics = userAnalytics.filter((user)=>{\n                if (activityFilter === 'never') {\n                    return !user.lastActivity;\n                }\n                if (!user.lastActivity) return false;\n                const lastActivity = new Date(user.lastActivity);\n                let threshold;\n                switch(activityFilter){\n                    case 'today':\n                        threshold = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n                        return lastActivity >= threshold;\n                    case 'week':\n                        threshold = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000);\n                        return lastActivity >= threshold;\n                    case 'month':\n                        threshold = new Date(Date.now() - 30 * 24 * 60 * 60 * 1000);\n                        return lastActivity >= threshold;\n                    default:\n                        return true;\n                }\n            });\n        }\n        // Apply pagination after filtering\n        const totalCount = userAnalytics.length;\n        const paginatedUsers = userAnalytics.slice(offset, offset + limit);\n        return {\n            users: paginatedUsers,\n            totalCount,\n            hasMore: offset + limit < totalCount,\n            appliedFilters: {\n                searchTerm,\n                authProvider,\n                activityFilter,\n                signupDateFilter,\n                projectsFilter,\n                adminFilter\n            }\n        };\n    }),\n    // 🆕 NEW: Get detailed user activity timeline\n    getUserActivityTimeline: adminOnlyProcedure.input(zod__WEBPACK_IMPORTED_MODULE_4__.z.object({\n        userId: zod__WEBPACK_IMPORTED_MODULE_4__.z.string(),\n        days: zod__WEBPACK_IMPORTED_MODULE_4__.z.number().min(1).max(90).default(30)\n    })).query(async ({ input })=>{\n        const { userId, days } = input;\n        // 🚨 FIXED: Calculate date threshold explicitly to avoid SQL parameter binding issues\n        const startDate = new Date(Date.now() - days * 24 * 60 * 60 * 1000);\n        const activityTimeline = await _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.db.select({\n            date: (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.sql)`DATE(${_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.messages.createdAt})`.as('date'),\n            totalMessages: (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.sql)`COUNT(*)`.as('total_messages'),\n            userPrompts: (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.sql)`COUNT(CASE WHEN ${_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.messages.role} = 'user' THEN 1 END)`.as('user_prompts'),\n            assistantResponses: (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.sql)`COUNT(CASE WHEN ${_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.messages.role} = 'assistant' THEN 1 END)`.as('assistant_responses'),\n            imagesUploaded: (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.sql)`COUNT(CASE WHEN ${_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.messages.imageUrls} IS NOT NULL AND jsonb_array_length(${_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.messages.imageUrls}) > 0 THEN 1 END)`.as('images_uploaded'),\n            scenesCreated: (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.sql)`COUNT(DISTINCT ${_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.scenes.id})`.as('scenes_created'),\n            projectsWorkedOn: (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.sql)`COUNT(DISTINCT ${_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects.id})`.as('projects_worked_on'),\n            avgSessionTime: (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.sql)`EXTRACT(EPOCH FROM (MAX(${_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.messages.createdAt}) - MIN(${_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.messages.createdAt})))/60`.as('avg_session_minutes')\n        }).from(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.messages).innerJoin(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects, (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.eq)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.messages.projectId, _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects.id)).leftJoin(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.scenes, (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.and)((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.eq)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects.id, _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.scenes.projectId), (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.sql)`DATE(${_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.scenes.createdAt}) = DATE(${_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.messages.createdAt})`)).where((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.and)((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.eq)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects.userId, userId), (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.gte)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.messages.createdAt, startDate))).groupBy((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.sql)`DATE(${_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.messages.createdAt})`).orderBy((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.sql)`DATE(${_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.messages.createdAt}) DESC`);\n        return activityTimeline;\n    }),\n    // 🆕 NEW: Get individual user details\n    getUserDetails: adminOnlyProcedure.input(zod__WEBPACK_IMPORTED_MODULE_4__.z.object({\n        userId: zod__WEBPACK_IMPORTED_MODULE_4__.z.string()\n    })).query(async ({ input })=>{\n        const { userId } = input;\n        const userDetails = await _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.db.select({\n            // Basic user info\n            id: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.users.id,\n            name: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.users.name,\n            email: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.users.email,\n            image: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.users.image,\n            isAdmin: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.users.isAdmin,\n            signupDate: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.users.createdAt,\n            // OAuth provider info\n            oauthProvider: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.accounts.provider,\n            // Project metrics\n            totalProjects: (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.sql)`COUNT(DISTINCT ${_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects.id})`.as('total_projects'),\n            // Scene metrics  \n            totalScenes: (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.sql)`COUNT(DISTINCT ${_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.scenes.id})`.as('total_scenes'),\n            // Chat/prompt metrics\n            totalMessages: (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.sql)`COUNT(DISTINCT ${_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.messages.id})`.as('total_messages'),\n            totalUserPrompts: (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.sql)`COUNT(DISTINCT CASE WHEN ${_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.messages.role} = 'user' THEN ${_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.messages.id} END)`.as('total_user_prompts'),\n            // Error message tracking\n            totalErrorMessages: (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.sql)`COUNT(DISTINCT CASE WHEN ${_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.messages.status} = 'error' THEN ${_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.messages.id} END)`.as('total_error_messages'),\n            // Image usage metrics - simplified to avoid double-counting\n            promptsWithImages: (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.sql)`COUNT(DISTINCT CASE WHEN ${_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.messages.imageUrls} IS NOT NULL AND jsonb_array_length(${_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.messages.imageUrls}) > 0 THEN ${_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.messages.id} END)`.as('prompts_with_images'),\n            totalImagesUploaded: (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.sql)`COALESCE(SUM(CASE WHEN ${_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.messages.imageUrls} IS NOT NULL THEN jsonb_array_length(${_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.messages.imageUrls}) ELSE 0 END), 0)`.as('total_images_uploaded'),\n            // Activity metrics\n            firstActivity: (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.sql)`MIN(${_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.messages.createdAt})`.as('first_activity'),\n            lastActivity: (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.sql)`MAX(${_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.messages.createdAt})`.as('last_activity'),\n            // Engagement metrics\n            totalSceneIterations: (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.sql)`COUNT(DISTINCT ${_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.sceneIterations.id})`.as('total_scene_iterations'),\n            // Advanced behavior metrics\n            complexEdits: (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.sql)`COUNT(DISTINCT CASE WHEN ${_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.sceneIterations.editComplexity} = 'structural' THEN ${_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.sceneIterations.id} END)`.as('complex_edits'),\n            creativeEdits: (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.sql)`COUNT(DISTINCT CASE WHEN ${_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.sceneIterations.editComplexity} = 'creative' THEN ${_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.sceneIterations.id} END)`.as('creative_edits'),\n            surgicalEdits: (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.sql)`COUNT(DISTINCT CASE WHEN ${_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.sceneIterations.editComplexity} = 'surgical' THEN ${_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.sceneIterations.id} END)`.as('surgical_edits'),\n            // Project memory insights\n            userPreferences: (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.sql)`COUNT(DISTINCT CASE WHEN ${_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projectMemory.memoryType} = 'user_preference' THEN ${_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projectMemory.id} END)`.as('user_preferences')\n        }).from(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.users).leftJoin(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.accounts, (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.eq)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.users.id, _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.accounts.userId)).leftJoin(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects, (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.eq)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.users.id, _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects.userId)).leftJoin(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.scenes, (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.eq)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects.id, _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.scenes.projectId)).leftJoin(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.messages, (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.eq)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects.id, _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.messages.projectId)).leftJoin(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.sceneIterations, (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.eq)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects.id, _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.sceneIterations.projectId)).leftJoin(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projectMemory, (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.eq)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects.id, _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projectMemory.projectId)).where((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.eq)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.users.id, userId)).groupBy(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.users.id, _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.users.name, _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.users.email, _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.users.image, _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.users.isAdmin, _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.users.createdAt, _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.accounts.provider).limit(1);\n        return userDetails[0] || null;\n    }),\n    // 🆕 NEW: Get detailed user projects with scenes and activity\n    getUserProjects: adminOnlyProcedure.input(zod__WEBPACK_IMPORTED_MODULE_4__.z.object({\n        userId: zod__WEBPACK_IMPORTED_MODULE_4__.z.string(),\n        limit: zod__WEBPACK_IMPORTED_MODULE_4__.z.number().min(1).max(50).default(20),\n        offset: zod__WEBPACK_IMPORTED_MODULE_4__.z.number().min(0).default(0)\n    })).query(async ({ input })=>{\n        const { userId, limit, offset } = input;\n        const userProjects = await _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.db.select({\n            // Project details\n            id: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects.id,\n            title: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects.title,\n            props: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects.props,\n            createdAt: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects.createdAt,\n            updatedAt: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects.updatedAt,\n            // Scene metrics for this project\n            totalScenes: (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.sql)`COUNT(DISTINCT ${_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.scenes.id})`.as('total_scenes'),\n            // Message metrics for this project\n            totalMessages: (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.sql)`COUNT(DISTINCT ${_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.messages.id})`.as('total_messages'),\n            totalUserPrompts: (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.sql)`COUNT(DISTINCT CASE WHEN ${_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.messages.role} = 'user' THEN ${_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.messages.id} END)`.as('total_user_prompts'),\n            // Image usage in this project\n            promptsWithImages: (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.sql)`COUNT(DISTINCT CASE WHEN ${_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.messages.imageUrls} IS NOT NULL AND jsonb_array_length(${_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.messages.imageUrls}) > 0 THEN ${_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.messages.id} END)`.as('prompts_with_images'),\n            // Activity metrics\n            firstActivity: (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.sql)`MIN(${_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.messages.createdAt})`.as('first_activity'),\n            lastActivity: (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.sql)`MAX(${_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.messages.createdAt})`.as('last_activity'),\n            // Scene iterations for this project\n            totalIterations: (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.sql)`COUNT(DISTINCT ${_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.sceneIterations.id})`.as('total_iterations')\n        }).from(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects).leftJoin(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.scenes, (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.eq)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects.id, _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.scenes.projectId)).leftJoin(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.messages, (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.eq)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects.id, _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.messages.projectId)).leftJoin(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.sceneIterations, (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.eq)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects.id, _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.sceneIterations.projectId)).where((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.eq)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects.userId, userId)).groupBy(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects.id, _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects.title, _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects.props, _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects.createdAt, _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects.updatedAt).orderBy((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.desc)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects.updatedAt)).limit(limit).offset(offset);\n        // Get total count for pagination\n        const totalCountResult = await _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.db.select({\n            count: (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.count)()\n        }).from(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects).where((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.eq)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects.userId, userId));\n        return {\n            projects: userProjects,\n            totalCount: totalCountResult[0]?.count || 0,\n            hasMore: offset + limit < (totalCountResult[0]?.count || 0)\n        };\n    }),\n    // 🆕 NEW: Get full project details including scenes and complete chat history\n    getUserProjectDetails: adminOnlyProcedure.input(zod__WEBPACK_IMPORTED_MODULE_4__.z.object({\n        projectId: zod__WEBPACK_IMPORTED_MODULE_4__.z.string(),\n        userId: zod__WEBPACK_IMPORTED_MODULE_4__.z.string()\n    })).query(async ({ input })=>{\n        const { projectId, userId } = input;\n        // Verify project belongs to user\n        const projectOwnership = await _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.db.select({\n            userId: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects.userId\n        }).from(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects).where((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.eq)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects.id, projectId)).limit(1);\n        if (!projectOwnership[0] || projectOwnership[0].userId !== userId) {\n            throw new _trpc_server__WEBPACK_IMPORTED_MODULE_3__.TRPCError({\n                code: \"NOT_FOUND\",\n                message: \"Project not found or doesn't belong to user\"\n            });\n        }\n        // Get project details\n        const projectDetails = await _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.db.select({\n            id: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects.id,\n            title: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects.title,\n            props: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects.props,\n            createdAt: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects.createdAt,\n            updatedAt: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects.updatedAt\n        }).from(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects).where((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.eq)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects.id, projectId)).limit(1);\n        // Get all scenes for this project\n        const projectScenes = await _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.db.select({\n            id: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.scenes.id,\n            name: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.scenes.name,\n            tsxCode: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.scenes.tsxCode,\n            duration: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.scenes.duration,\n            createdAt: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.scenes.createdAt,\n            updatedAt: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.scenes.updatedAt,\n            // Iteration count for each scene\n            iterationCount: (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.sql)`COUNT(DISTINCT ${_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.sceneIterations.id})`.as('iteration_count')\n        }).from(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.scenes).leftJoin(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.sceneIterations, (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.eq)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.scenes.id, _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.sceneIterations.sceneId)).where((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.eq)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.scenes.projectId, projectId)).groupBy(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.scenes.id, _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.scenes.name, _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.scenes.tsxCode, _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.scenes.duration, _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.scenes.createdAt, _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.scenes.updatedAt).orderBy((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.asc)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.scenes.createdAt));\n        // Get complete chat history for this project\n        const chatHistory = await _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.db.select({\n            id: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.messages.id,\n            role: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.messages.role,\n            content: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.messages.content,\n            imageUrls: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.messages.imageUrls,\n            status: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.messages.status,\n            createdAt: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.messages.createdAt,\n            // Additional metadata\n            originalTsxCode: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.messages.originalTsxCode\n        }).from(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.messages).where((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.eq)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.messages.projectId, projectId)).orderBy((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.asc)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.messages.createdAt));\n        // Get scene iterations for detailed editing history (renamed variable)\n        const projectSceneIterations = await _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.db.select({\n            id: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.sceneIterations.id,\n            sceneId: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.sceneIterations.sceneId,\n            editComplexity: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.sceneIterations.editComplexity,\n            userPrompt: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.sceneIterations.userPrompt,\n            brainReasoning: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.sceneIterations.brainReasoning,\n            toolReasoning: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.sceneIterations.toolReasoning,\n            codeBefore: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.sceneIterations.codeBefore,\n            codeAfter: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.sceneIterations.codeAfter,\n            changesApplied: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.sceneIterations.changesApplied,\n            changesPreserved: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.sceneIterations.changesPreserved,\n            generationTimeMs: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.sceneIterations.generationTimeMs,\n            modelUsed: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.sceneIterations.modelUsed,\n            operationType: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.sceneIterations.operationType,\n            temperature: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.sceneIterations.temperature,\n            tokensUsed: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.sceneIterations.tokensUsed,\n            createdAt: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.sceneIterations.createdAt\n        }).from(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.sceneIterations).where((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.eq)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.sceneIterations.projectId, projectId)).orderBy((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.asc)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.sceneIterations.createdAt));\n        // Get project memory for context\n        const projectMemoryEntries = await _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.db.select({\n            id: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projectMemory.id,\n            memoryType: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projectMemory.memoryType,\n            memoryValue: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projectMemory.memoryValue,\n            createdAt: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projectMemory.createdAt\n        }).from(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projectMemory).where((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.eq)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projectMemory.projectId, projectId)).orderBy((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.desc)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projectMemory.createdAt));\n        return {\n            project: projectDetails[0],\n            scenes: projectScenes,\n            chatHistory,\n            sceneIterations: projectSceneIterations,\n            projectMemory: projectMemoryEntries,\n            summary: {\n                totalScenes: projectScenes.length,\n                totalMessages: chatHistory.length,\n                totalUserPrompts: chatHistory.filter((msg)=>msg.role === 'user').length,\n                totalAssistantResponses: chatHistory.filter((msg)=>msg.role === 'assistant').length,\n                totalIterations: projectSceneIterations.length,\n                imagesUploaded: chatHistory.filter((msg)=>msg.imageUrls && Array.isArray(msg.imageUrls) && msg.imageUrls.length > 0).length,\n                firstActivity: chatHistory[0]?.createdAt || null,\n                lastActivity: chatHistory[chatHistory.length - 1]?.createdAt || null\n            }\n        };\n    }),\n    // 🆕 NEW: Get all scenes created by a user across all projects\n    getUserScenes: adminOnlyProcedure.input(zod__WEBPACK_IMPORTED_MODULE_4__.z.object({\n        userId: zod__WEBPACK_IMPORTED_MODULE_4__.z.string(),\n        limit: zod__WEBPACK_IMPORTED_MODULE_4__.z.number().min(1).max(100).default(50),\n        offset: zod__WEBPACK_IMPORTED_MODULE_4__.z.number().min(0).default(0),\n        sortBy: zod__WEBPACK_IMPORTED_MODULE_4__.z.enum([\n            'created_date',\n            'updated_date',\n            'project_name',\n            'scene_name',\n            'duration'\n        ]).default('created_date'),\n        sortOrder: zod__WEBPACK_IMPORTED_MODULE_4__.z.enum([\n            'asc',\n            'desc'\n        ]).default('desc')\n    })).query(async ({ input })=>{\n        const { userId, limit, offset, sortBy, sortOrder } = input;\n        const sortColumn = sortBy === 'created_date' ? _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.scenes.createdAt : sortBy === 'updated_date' ? _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.scenes.updatedAt : sortBy === 'project_name' ? _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects.title : sortBy === 'scene_name' ? _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.scenes.name : _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.scenes.duration;\n        const userScenes = await _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.db.select({\n            // Scene details\n            id: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.scenes.id,\n            name: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.scenes.name,\n            tsxCode: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.scenes.tsxCode,\n            duration: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.scenes.duration,\n            createdAt: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.scenes.createdAt,\n            updatedAt: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.scenes.updatedAt,\n            // Project context\n            projectId: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects.id,\n            projectTitle: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects.title,\n            projectCreatedAt: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects.createdAt,\n            // Scene activity metrics\n            iterationCount: (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.sql)`COUNT(DISTINCT ${_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.sceneIterations.id})`.as('iteration_count'),\n            lastIterationDate: (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.sql)`MAX(${_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.sceneIterations.createdAt})`.as('last_iteration_date'),\n            // Complexity breakdown\n            complexEdits: (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.sql)`COUNT(DISTINCT CASE WHEN ${_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.sceneIterations.editComplexity} = 'structural' THEN ${_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.sceneIterations.id} END)`.as('complex_edits'),\n            creativeEdits: (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.sql)`COUNT(DISTINCT CASE WHEN ${_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.sceneIterations.editComplexity} = 'creative' THEN ${_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.sceneIterations.id} END)`.as('creative_edits'),\n            surgicalEdits: (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.sql)`COUNT(DISTINCT CASE WHEN ${_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.sceneIterations.editComplexity} = 'surgical' THEN ${_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.sceneIterations.id} END)`.as('surgical_edits')\n        }).from(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.scenes).innerJoin(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects, (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.eq)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.scenes.projectId, _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects.id)).leftJoin(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.sceneIterations, (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.eq)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.scenes.id, _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.sceneIterations.sceneId)).where((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.eq)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects.userId, userId)).groupBy(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.scenes.id, _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.scenes.name, _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.scenes.tsxCode, _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.scenes.duration, _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.scenes.createdAt, _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.scenes.updatedAt, _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects.id, _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects.title, _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects.createdAt).orderBy(sortOrder === 'desc' ? (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.desc)(sortColumn) : (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.asc)(sortColumn)).limit(limit).offset(offset);\n        // Get total count for pagination\n        const totalCountResult = await _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.db.select({\n            count: (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.count)()\n        }).from(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.scenes).innerJoin(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects, (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.eq)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.scenes.projectId, _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects.id)).where((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.eq)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects.userId, userId));\n        return {\n            scenes: userScenes,\n            totalCount: totalCountResult[0]?.count || 0,\n            hasMore: offset + limit < (totalCountResult[0]?.count || 0),\n            appliedSort: {\n                sortBy,\n                sortOrder\n            }\n        };\n    }),\n    // 🆕 NEW: Get detailed scene information including iteration history\n    getSceneDetails: adminOnlyProcedure.input(zod__WEBPACK_IMPORTED_MODULE_4__.z.object({\n        sceneId: zod__WEBPACK_IMPORTED_MODULE_4__.z.string(),\n        userId: zod__WEBPACK_IMPORTED_MODULE_4__.z.string()\n    })).query(async ({ input })=>{\n        const { sceneId, userId } = input;\n        // Verify scene belongs to user's project\n        const sceneOwnership = await _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.db.select({\n            userId: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects.userId,\n            projectId: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.scenes.projectId\n        }).from(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.scenes).innerJoin(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects, (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.eq)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.scenes.projectId, _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects.id)).where((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.eq)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.scenes.id, sceneId)).limit(1);\n        if (!sceneOwnership[0] || sceneOwnership[0].userId !== userId) {\n            throw new _trpc_server__WEBPACK_IMPORTED_MODULE_3__.TRPCError({\n                code: \"NOT_FOUND\",\n                message: \"Scene not found or doesn't belong to user\"\n            });\n        }\n        // Get scene details\n        const sceneDetails = await _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.db.select({\n            id: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.scenes.id,\n            name: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.scenes.name,\n            tsxCode: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.scenes.tsxCode,\n            duration: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.scenes.duration,\n            createdAt: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.scenes.createdAt,\n            updatedAt: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.scenes.updatedAt,\n            // Project context\n            projectId: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects.id,\n            projectTitle: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects.title\n        }).from(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.scenes).innerJoin(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects, (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.eq)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.scenes.projectId, _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects.id)).where((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.eq)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.scenes.id, sceneId)).limit(1);\n        // Get all iterations for this scene\n        const iterations = await _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.db.select({\n            id: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.sceneIterations.id,\n            editComplexity: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.sceneIterations.editComplexity,\n            userPrompt: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.sceneIterations.userPrompt,\n            generationTimeMs: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.sceneIterations.generationTimeMs,\n            modelUsed: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.sceneIterations.modelUsed,\n            createdAt: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.sceneIterations.createdAt\n        }).from(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.sceneIterations).where((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.eq)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.sceneIterations.sceneId, sceneId)).orderBy((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.asc)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.sceneIterations.createdAt));\n        // Get related messages from the project (context around scene creation)\n        const relatedMessages = await _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.db.select({\n            id: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.messages.id,\n            role: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.messages.role,\n            content: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.messages.content,\n            imageUrls: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.messages.imageUrls,\n            createdAt: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.messages.createdAt\n        }).from(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.messages).where((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.eq)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.messages.projectId, sceneOwnership[0].projectId)).orderBy((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.asc)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.messages.createdAt));\n        return {\n            scene: sceneDetails[0],\n            iterations,\n            relatedMessages,\n            summary: {\n                totalIterations: iterations.length,\n                complexityBreakdown: {\n                    structural: iterations.filter((i)=>i.editComplexity === 'structural').length,\n                    creative: iterations.filter((i)=>i.editComplexity === 'creative').length,\n                    surgical: iterations.filter((i)=>i.editComplexity === 'surgical').length\n                },\n                averageGenerationTime: iterations.length > 0 ? Math.round(iterations.reduce((sum, i)=>sum + (i.generationTimeMs || 0), 0) / iterations.length) : 0,\n                firstIteration: iterations[0]?.createdAt || null,\n                lastIteration: iterations[iterations.length - 1]?.createdAt || null\n            }\n        };\n    })\n});\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/server/api/routers/admin.ts\n");

/***/ }),

/***/ "(rsc)/./src/server/api/routers/chat.ts":
/*!****************************************!*\
  !*** ./src/server/api/routers/chat.ts ***!
  \****************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   chatRouter: () => (/* binding */ chatRouter)\n/* harmony export */ });\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! zod */ \"(rsc)/../../node_modules/zod/lib/index.mjs\");\n/* harmony import */ var _trpc__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../trpc */ \"(rsc)/./src/server/api/trpc.ts\");\n/* harmony import */ var _trpc_server__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @trpc/server */ \"(rsc)/../../node_modules/@trpc/server/dist/index.mjs\");\n/* harmony import */ var _bazaar_database__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @bazaar/database */ \"(rsc)/../../packages/database/index.ts\");\n/* harmony import */ var drizzle_orm__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! drizzle-orm */ \"drizzle-orm\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_trpc__WEBPACK_IMPORTED_MODULE_0__, _bazaar_database__WEBPACK_IMPORTED_MODULE_2__, drizzle_orm__WEBPACK_IMPORTED_MODULE_3__]);\n([_trpc__WEBPACK_IMPORTED_MODULE_0__, _bazaar_database__WEBPACK_IMPORTED_MODULE_2__, drizzle_orm__WEBPACK_IMPORTED_MODULE_3__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n\n\n\nconst chatRouter = (0,_trpc__WEBPACK_IMPORTED_MODULE_0__.createTRPCRouter)({\n    /**\n     * Fetches recent messages for a given project.\n     * Used by ChatPanelG component for displaying chat history.\n     */ getMessages: _trpc__WEBPACK_IMPORTED_MODULE_0__.protectedProcedure.input(zod__WEBPACK_IMPORTED_MODULE_4__.z.object({\n        projectId: zod__WEBPACK_IMPORTED_MODULE_4__.z.string().uuid(),\n        limit: zod__WEBPACK_IMPORTED_MODULE_4__.z.number().int().min(1).max(100).optional().default(50)\n    })).query(async ({ ctx, input })=>{\n        const project = await ctx.db.query.projects.findFirst({\n            columns: {\n                id: true,\n                userId: true\n            },\n            where: (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_3__.eq)(_bazaar_database__WEBPACK_IMPORTED_MODULE_2__.projects.id, input.projectId)\n        });\n        if (!project || project.userId !== ctx.session.user.id) {\n            throw new _trpc_server__WEBPACK_IMPORTED_MODULE_1__.TRPCError({\n                code: \"FORBIDDEN\",\n                message: \"Project not found or access denied.\"\n            });\n        }\n        const messageHistory = await ctx.db.query.messages.findMany({\n            where: (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_3__.eq)(_bazaar_database__WEBPACK_IMPORTED_MODULE_2__.messages.projectId, input.projectId),\n            orderBy: [\n                (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_3__.desc)(_bazaar_database__WEBPACK_IMPORTED_MODULE_2__.messages.sequence)\n            ],\n            limit: input.limit,\n            columns: {\n                id: true,\n                projectId: true,\n                content: true,\n                role: true,\n                kind: true,\n                imageUrls: true,\n                createdAt: true,\n                sequence: true\n            }\n        });\n        return messageHistory.reverse();\n    })\n});\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvc2VydmVyL2FwaS9yb3V0ZXJzL2NoYXQudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQXdCO0FBQ3VDO0FBQ3RCO0FBQ2E7QUFDZjtBQUVoQyxNQUFNUSxhQUFhUCx1REFBZ0JBLENBQUM7SUFDdkM7OztLQUdDLEdBQ0RRLGFBQWFQLHFEQUFrQkEsQ0FDMUJRLEtBQUssQ0FBQ1Ysa0NBQUNBLENBQUNXLE1BQU0sQ0FBQztRQUNaQyxXQUFXWixrQ0FBQ0EsQ0FBQ2EsTUFBTSxHQUFHQyxJQUFJO1FBQzFCQyxPQUFPZixrQ0FBQ0EsQ0FBQ2dCLE1BQU0sR0FBR0MsR0FBRyxHQUFHQyxHQUFHLENBQUMsR0FBR0MsR0FBRyxDQUFDLEtBQUtDLFFBQVEsR0FBR0MsT0FBTyxDQUFDO0lBQy9ELElBQ0NDLEtBQUssQ0FBQyxPQUFPLEVBQUVDLEdBQUcsRUFBRWIsS0FBSyxFQUFFO1FBQ3hCLE1BQU1jLFVBQVUsTUFBTUQsSUFBSUUsRUFBRSxDQUFDSCxLQUFLLENBQUNsQixRQUFRLENBQUNzQixTQUFTLENBQUM7WUFDbERDLFNBQVM7Z0JBQUVDLElBQUk7Z0JBQU1DLFFBQVE7WUFBSztZQUNsQ0MsT0FBT3hCLCtDQUFFQSxDQUFDRixzREFBUUEsQ0FBQ3dCLEVBQUUsRUFBRWxCLE1BQU1FLFNBQVM7UUFDMUM7UUFDQSxJQUFJLENBQUNZLFdBQVdBLFFBQVFLLE1BQU0sS0FBS04sSUFBSVEsT0FBTyxDQUFDQyxJQUFJLENBQUNKLEVBQUUsRUFBRTtZQUNwRCxNQUFNLElBQUl6QixtREFBU0EsQ0FBQztnQkFBRThCLE1BQU07Z0JBQWFDLFNBQVM7WUFBc0M7UUFDNUY7UUFDQSxNQUFNQyxpQkFBaUIsTUFBTVosSUFBSUUsRUFBRSxDQUFDSCxLQUFLLENBQUNqQixRQUFRLENBQUMrQixRQUFRLENBQUM7WUFDeEROLE9BQU94QiwrQ0FBRUEsQ0FBQ0Qsc0RBQVFBLENBQUNPLFNBQVMsRUFBRUYsTUFBTUUsU0FBUztZQUM3Q3lCLFNBQVM7Z0JBQUM5QixpREFBSUEsQ0FBQ0Ysc0RBQVFBLENBQUNpQyxRQUFRO2FBQUU7WUFDbEN2QixPQUFPTCxNQUFNSyxLQUFLO1lBQ2xCWSxTQUFTO2dCQUNMQyxJQUFJO2dCQUNKaEIsV0FBVztnQkFDWDJCLFNBQVM7Z0JBQ1RDLE1BQU07Z0JBQ05DLE1BQU07Z0JBQ05DLFdBQVc7Z0JBQ1hDLFdBQVc7Z0JBQ1hMLFVBQVU7WUFDZDtRQUNKO1FBQ0EsT0FBT0gsZUFBZVMsT0FBTztJQUNqQztBQUNSLEdBQUciLCJzb3VyY2VzIjpbIi9Vc2Vycy9tYXJrdXNob2duZS9Eb2N1bWVudHMvQVBQUy9iYXphYXItdmlkL2JhemFhci12aWQvYXBwcy9tYWluL3NyYy9zZXJ2ZXIvYXBpL3JvdXRlcnMvY2hhdC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB6IH0gZnJvbSBcInpvZFwiO1xuaW1wb3J0IHsgY3JlYXRlVFJQQ1JvdXRlciwgcHJvdGVjdGVkUHJvY2VkdXJlIH0gZnJvbSBcIi4uL3RycGNcIjtcbmltcG9ydCB7IFRSUENFcnJvciB9IGZyb20gXCJAdHJwYy9zZXJ2ZXJcIjtcbmltcG9ydCB7IHByb2plY3RzLCBtZXNzYWdlcyB9IGZyb20gXCJAYmF6YWFyL2RhdGFiYXNlXCI7XG5pbXBvcnQgeyBlcSwgZGVzYyB9IGZyb20gXCJkcml6emxlLW9ybVwiO1xuXG5leHBvcnQgY29uc3QgY2hhdFJvdXRlciA9IGNyZWF0ZVRSUENSb3V0ZXIoe1xuICAgIC8qKlxuICAgICAqIEZldGNoZXMgcmVjZW50IG1lc3NhZ2VzIGZvciBhIGdpdmVuIHByb2plY3QuXG4gICAgICogVXNlZCBieSBDaGF0UGFuZWxHIGNvbXBvbmVudCBmb3IgZGlzcGxheWluZyBjaGF0IGhpc3RvcnkuXG4gICAgICovXG4gICAgZ2V0TWVzc2FnZXM6IHByb3RlY3RlZFByb2NlZHVyZVxuICAgICAgICAuaW5wdXQoei5vYmplY3Qoe1xuICAgICAgICAgICAgcHJvamVjdElkOiB6LnN0cmluZygpLnV1aWQoKSxcbiAgICAgICAgICAgIGxpbWl0OiB6Lm51bWJlcigpLmludCgpLm1pbigxKS5tYXgoMTAwKS5vcHRpb25hbCgpLmRlZmF1bHQoNTApLFxuICAgICAgICB9KSlcbiAgICAgICAgLnF1ZXJ5KGFzeW5jICh7IGN0eCwgaW5wdXQgfSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgcHJvamVjdCA9IGF3YWl0IGN0eC5kYi5xdWVyeS5wcm9qZWN0cy5maW5kRmlyc3Qoe1xuICAgICAgICAgICAgICAgIGNvbHVtbnM6IHsgaWQ6IHRydWUsIHVzZXJJZDogdHJ1ZSB9LFxuICAgICAgICAgICAgICAgIHdoZXJlOiBlcShwcm9qZWN0cy5pZCwgaW5wdXQucHJvamVjdElkKSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKCFwcm9qZWN0IHx8IHByb2plY3QudXNlcklkICE9PSBjdHguc2Vzc2lvbi51c2VyLmlkKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFRSUENFcnJvcih7IGNvZGU6IFwiRk9SQklEREVOXCIsIG1lc3NhZ2U6IFwiUHJvamVjdCBub3QgZm91bmQgb3IgYWNjZXNzIGRlbmllZC5cIiB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IG1lc3NhZ2VIaXN0b3J5ID0gYXdhaXQgY3R4LmRiLnF1ZXJ5Lm1lc3NhZ2VzLmZpbmRNYW55KHtcbiAgICAgICAgICAgICAgICB3aGVyZTogZXEobWVzc2FnZXMucHJvamVjdElkLCBpbnB1dC5wcm9qZWN0SWQpLFxuICAgICAgICAgICAgICAgIG9yZGVyQnk6IFtkZXNjKG1lc3NhZ2VzLnNlcXVlbmNlKV0sXG4gICAgICAgICAgICAgICAgbGltaXQ6IGlucHV0LmxpbWl0LFxuICAgICAgICAgICAgICAgIGNvbHVtbnM6IHtcbiAgICAgICAgICAgICAgICAgICAgaWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIHByb2plY3RJZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgY29udGVudDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgcm9sZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAga2luZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgaW1hZ2VVcmxzOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBjcmVhdGVkQXQ6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIHNlcXVlbmNlOiB0cnVlLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBtZXNzYWdlSGlzdG9yeS5yZXZlcnNlKCk7XG4gICAgICAgIH0pLFxufSk7Il0sIm5hbWVzIjpbInoiLCJjcmVhdGVUUlBDUm91dGVyIiwicHJvdGVjdGVkUHJvY2VkdXJlIiwiVFJQQ0Vycm9yIiwicHJvamVjdHMiLCJtZXNzYWdlcyIsImVxIiwiZGVzYyIsImNoYXRSb3V0ZXIiLCJnZXRNZXNzYWdlcyIsImlucHV0Iiwib2JqZWN0IiwicHJvamVjdElkIiwic3RyaW5nIiwidXVpZCIsImxpbWl0IiwibnVtYmVyIiwiaW50IiwibWluIiwibWF4Iiwib3B0aW9uYWwiLCJkZWZhdWx0IiwicXVlcnkiLCJjdHgiLCJwcm9qZWN0IiwiZGIiLCJmaW5kRmlyc3QiLCJjb2x1bW5zIiwiaWQiLCJ1c2VySWQiLCJ3aGVyZSIsInNlc3Npb24iLCJ1c2VyIiwiY29kZSIsIm1lc3NhZ2UiLCJtZXNzYWdlSGlzdG9yeSIsImZpbmRNYW55Iiwib3JkZXJCeSIsInNlcXVlbmNlIiwiY29udGVudCIsInJvbGUiLCJraW5kIiwiaW1hZ2VVcmxzIiwiY3JlYXRlZEF0IiwicmV2ZXJzZSJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./src/server/api/routers/chat.ts\n");

/***/ }),

/***/ "(rsc)/./src/server/api/routers/emailSubscriber.ts":
/*!***************************************************!*\
  !*** ./src/server/api/routers/emailSubscriber.ts ***!
  \***************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   emailSubscriberInputSchema: () => (/* binding */ emailSubscriberInputSchema),\n/* harmony export */   emailSubscriberRouter: () => (/* binding */ emailSubscriberRouter)\n/* harmony export */ });\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! zod */ \"(rsc)/../../node_modules/zod/lib/index.mjs\");\n/* harmony import */ var _server_api_trpc__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ~/server/api/trpc */ \"(rsc)/./src/server/api/trpc.ts\");\n/* harmony import */ var _bazaar_database__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @bazaar/database */ \"(rsc)/../../packages/database/index.ts\");\n/* harmony import */ var drizzle_orm__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! drizzle-orm */ \"drizzle-orm\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_server_api_trpc__WEBPACK_IMPORTED_MODULE_0__, _bazaar_database__WEBPACK_IMPORTED_MODULE_1__, drizzle_orm__WEBPACK_IMPORTED_MODULE_2__]);\n([_server_api_trpc__WEBPACK_IMPORTED_MODULE_0__, _bazaar_database__WEBPACK_IMPORTED_MODULE_1__, drizzle_orm__WEBPACK_IMPORTED_MODULE_2__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n// src/server/api/routers/emailSubscriber.ts\n\n\n\n\n\nconst emailSubscriberInputSchema = zod__WEBPACK_IMPORTED_MODULE_3__.z.object({\n    email: zod__WEBPACK_IMPORTED_MODULE_3__.z.string().email({\n        message: \"Please enter a valid email address\"\n    }),\n    source: zod__WEBPACK_IMPORTED_MODULE_3__.z.string().default('homepage')\n});\nconst emailSubscriberRouter = (0,_server_api_trpc__WEBPACK_IMPORTED_MODULE_0__.createTRPCRouter)({\n    subscribe: _server_api_trpc__WEBPACK_IMPORTED_MODULE_0__.publicProcedure.input(emailSubscriberInputSchema).mutation(async ({ ctx, input })=>{\n        try {\n            // Check if email already exists using direct query\n            const existingSubscriber = await _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.db.select().from(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.emailSubscribers).where((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.eq)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.emailSubscribers.email, input.email)).limit(1);\n            if (existingSubscriber.length > 0) {\n                // Email already exists\n                const subscriber = existingSubscriber[0];\n                if (subscriber?.status === 'active') {\n                    throw new Error('Email address already signed up for updates');\n                } else if (subscriber?.status === 'unsubscribed') {\n                    // Reactivate subscription\n                    await _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.db.update(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.emailSubscribers).set({\n                        status: 'active',\n                        subscribedAt: new Date(),\n                        source: input.source,\n                        userId: ctx.session?.user?.id || null\n                    }).where((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.eq)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.emailSubscribers.email, input.email));\n                    return {\n                        success: true,\n                        message: 'Successfully resubscribed to updates!',\n                        isResubscription: true\n                    };\n                }\n            }\n            // Create new subscription\n            const newSubscriber = await _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.db.insert(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.emailSubscribers).values({\n                email: input.email,\n                source: input.source,\n                status: 'active',\n                userId: ctx.session?.user?.id || null\n            }).returning();\n            console.log('Email subscription created:', newSubscriber[0]?.id);\n            return {\n                success: true,\n                message: 'Successfully subscribed to updates!',\n                isResubscription: false\n            };\n        } catch (error) {\n            console.error('Email subscription error:', error);\n            // Handle specific error messages\n            if (error instanceof Error) {\n                if (error.message.includes('already signed up')) {\n                    throw new Error('Email address already signed up for updates');\n                }\n                if (error.message.includes('unique constraint')) {\n                    throw new Error('Email address already signed up for updates');\n                }\n            }\n            throw new Error('Failed to subscribe. Please try again later.');\n        }\n    })\n});\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvc2VydmVyL2FwaS9yb3V0ZXJzL2VtYWlsU3Vic2NyaWJlci50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBQSw0Q0FBNEM7QUFDcEI7QUFDOEM7QUFDaEM7QUFDYztBQUNuQjtBQUUxQixNQUFNTSw2QkFBNkJOLGtDQUFDQSxDQUFDTyxNQUFNLENBQUM7SUFDakRDLE9BQU9SLGtDQUFDQSxDQUFDUyxNQUFNLEdBQUdELEtBQUssQ0FBQztRQUN0QkUsU0FBUztJQUNYO0lBQ0FDLFFBQVFYLGtDQUFDQSxDQUFDUyxNQUFNLEdBQUdHLE9BQU8sQ0FBQztBQUM3QixHQUFHO0FBRUksTUFBTUMsd0JBQXdCWixrRUFBZ0JBLENBQUM7SUFDcERhLFdBQVdaLDZEQUFlQSxDQUN2QmEsS0FBSyxDQUFDVCw0QkFDTlUsUUFBUSxDQUFDLE9BQU8sRUFBRUMsR0FBRyxFQUFFRixLQUFLLEVBQUU7UUFDN0IsSUFBSTtZQUNGLG1EQUFtRDtZQUNuRCxNQUFNRyxxQkFBcUIsTUFBTWYsZ0RBQUVBLENBQ2hDZ0IsTUFBTSxHQUNOQyxJQUFJLENBQUNoQiw4REFBZ0JBLEVBQ3JCaUIsS0FBSyxDQUFDaEIsK0NBQUVBLENBQUNELDhEQUFnQkEsQ0FBQ0ksS0FBSyxFQUFFTyxNQUFNUCxLQUFLLEdBQzVDYyxLQUFLLENBQUM7WUFFVCxJQUFJSixtQkFBbUJLLE1BQU0sR0FBRyxHQUFHO2dCQUNqQyx1QkFBdUI7Z0JBQ3ZCLE1BQU1DLGFBQWFOLGtCQUFrQixDQUFDLEVBQUU7Z0JBQ3hDLElBQUlNLFlBQVlDLFdBQVcsVUFBVTtvQkFDbkMsTUFBTSxJQUFJQyxNQUFNO2dCQUNsQixPQUFPLElBQUlGLFlBQVlDLFdBQVcsZ0JBQWdCO29CQUNoRCwwQkFBMEI7b0JBQzFCLE1BQU10QixnREFBRUEsQ0FDTHdCLE1BQU0sQ0FBQ3ZCLDhEQUFnQkEsRUFDdkJ3QixHQUFHLENBQUM7d0JBQ0hILFFBQVE7d0JBQ1JJLGNBQWMsSUFBSUM7d0JBQ2xCbkIsUUFBUUksTUFBTUosTUFBTTt3QkFDcEJvQixRQUFRZCxJQUFJZSxPQUFPLEVBQUVDLE1BQU1DLE1BQU07b0JBQ25DLEdBQ0NiLEtBQUssQ0FBQ2hCLCtDQUFFQSxDQUFDRCw4REFBZ0JBLENBQUNJLEtBQUssRUFBRU8sTUFBTVAsS0FBSztvQkFFL0MsT0FBTzt3QkFDTDJCLFNBQVM7d0JBQ1R6QixTQUFTO3dCQUNUMEIsa0JBQWtCO29CQUNwQjtnQkFDRjtZQUNGO1lBRUEsMEJBQTBCO1lBQzFCLE1BQU1DLGdCQUFnQixNQUFNbEMsZ0RBQUVBLENBQzNCbUMsTUFBTSxDQUFDbEMsOERBQWdCQSxFQUN2Qm1DLE1BQU0sQ0FBQztnQkFDTi9CLE9BQU9PLE1BQU1QLEtBQUs7Z0JBQ2xCRyxRQUFRSSxNQUFNSixNQUFNO2dCQUNwQmMsUUFBUTtnQkFDUk0sUUFBUWQsSUFBSWUsT0FBTyxFQUFFQyxNQUFNQyxNQUFNO1lBQ25DLEdBQ0NNLFNBQVM7WUFFWkMsUUFBUUMsR0FBRyxDQUFDLCtCQUErQkwsYUFBYSxDQUFDLEVBQUUsRUFBRUg7WUFFN0QsT0FBTztnQkFDTEMsU0FBUztnQkFDVHpCLFNBQVM7Z0JBQ1QwQixrQkFBa0I7WUFDcEI7UUFDRixFQUFFLE9BQU9PLE9BQU87WUFDZEYsUUFBUUUsS0FBSyxDQUFDLDZCQUE2QkE7WUFFM0MsaUNBQWlDO1lBQ2pDLElBQUlBLGlCQUFpQmpCLE9BQU87Z0JBQzFCLElBQUlpQixNQUFNakMsT0FBTyxDQUFDa0MsUUFBUSxDQUFDLHNCQUFzQjtvQkFDL0MsTUFBTSxJQUFJbEIsTUFBTTtnQkFDbEI7Z0JBQ0EsSUFBSWlCLE1BQU1qQyxPQUFPLENBQUNrQyxRQUFRLENBQUMsc0JBQXNCO29CQUMvQyxNQUFNLElBQUlsQixNQUFNO2dCQUNsQjtZQUNGO1lBRUEsTUFBTSxJQUFJQSxNQUFNO1FBQ2xCO0lBQ0Y7QUFDSixHQUFHIiwic291cmNlcyI6WyIvVXNlcnMvbWFya3VzaG9nbmUvRG9jdW1lbnRzL0FQUFMvYmF6YWFyLXZpZC9iYXphYXItdmlkL2FwcHMvbWFpbi9zcmMvc2VydmVyL2FwaS9yb3V0ZXJzL2VtYWlsU3Vic2NyaWJlci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBzcmMvc2VydmVyL2FwaS9yb3V0ZXJzL2VtYWlsU3Vic2NyaWJlci50c1xuaW1wb3J0IHsgeiB9IGZyb20gXCJ6b2RcIjtcbmltcG9ydCB7IGNyZWF0ZVRSUENSb3V0ZXIsIHB1YmxpY1Byb2NlZHVyZSB9IGZyb20gXCJ+L3NlcnZlci9hcGkvdHJwY1wiO1xuaW1wb3J0IHsgZGIgfSBmcm9tIFwiQGJhemFhci9kYXRhYmFzZVwiO1xuaW1wb3J0IHsgZW1haWxTdWJzY3JpYmVycyB9IGZyb20gXCJAYmF6YWFyL2RhdGFiYXNlXCI7XG5pbXBvcnQgeyBlcSB9IGZyb20gXCJkcml6emxlLW9ybVwiO1xuXG5leHBvcnQgY29uc3QgZW1haWxTdWJzY3JpYmVySW5wdXRTY2hlbWEgPSB6Lm9iamVjdCh7XG4gIGVtYWlsOiB6LnN0cmluZygpLmVtYWlsKHtcbiAgICBtZXNzYWdlOiBcIlBsZWFzZSBlbnRlciBhIHZhbGlkIGVtYWlsIGFkZHJlc3NcIlxuICB9KSxcbiAgc291cmNlOiB6LnN0cmluZygpLmRlZmF1bHQoJ2hvbWVwYWdlJyksXG59KTtcblxuZXhwb3J0IGNvbnN0IGVtYWlsU3Vic2NyaWJlclJvdXRlciA9IGNyZWF0ZVRSUENSb3V0ZXIoe1xuICBzdWJzY3JpYmU6IHB1YmxpY1Byb2NlZHVyZVxuICAgIC5pbnB1dChlbWFpbFN1YnNjcmliZXJJbnB1dFNjaGVtYSlcbiAgICAubXV0YXRpb24oYXN5bmMgKHsgY3R4LCBpbnB1dCB9KSA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICAvLyBDaGVjayBpZiBlbWFpbCBhbHJlYWR5IGV4aXN0cyB1c2luZyBkaXJlY3QgcXVlcnlcbiAgICAgICAgY29uc3QgZXhpc3RpbmdTdWJzY3JpYmVyID0gYXdhaXQgZGJcbiAgICAgICAgICAuc2VsZWN0KClcbiAgICAgICAgICAuZnJvbShlbWFpbFN1YnNjcmliZXJzKVxuICAgICAgICAgIC53aGVyZShlcShlbWFpbFN1YnNjcmliZXJzLmVtYWlsLCBpbnB1dC5lbWFpbCkpXG4gICAgICAgICAgLmxpbWl0KDEpO1xuXG4gICAgICAgIGlmIChleGlzdGluZ1N1YnNjcmliZXIubGVuZ3RoID4gMCkge1xuICAgICAgICAgIC8vIEVtYWlsIGFscmVhZHkgZXhpc3RzXG4gICAgICAgICAgY29uc3Qgc3Vic2NyaWJlciA9IGV4aXN0aW5nU3Vic2NyaWJlclswXTtcbiAgICAgICAgICBpZiAoc3Vic2NyaWJlcj8uc3RhdHVzID09PSAnYWN0aXZlJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdFbWFpbCBhZGRyZXNzIGFscmVhZHkgc2lnbmVkIHVwIGZvciB1cGRhdGVzJyk7XG4gICAgICAgICAgfSBlbHNlIGlmIChzdWJzY3JpYmVyPy5zdGF0dXMgPT09ICd1bnN1YnNjcmliZWQnKSB7XG4gICAgICAgICAgICAvLyBSZWFjdGl2YXRlIHN1YnNjcmlwdGlvblxuICAgICAgICAgICAgYXdhaXQgZGJcbiAgICAgICAgICAgICAgLnVwZGF0ZShlbWFpbFN1YnNjcmliZXJzKVxuICAgICAgICAgICAgICAuc2V0KHsgXG4gICAgICAgICAgICAgICAgc3RhdHVzOiAnYWN0aXZlJyxcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVkQXQ6IG5ldyBEYXRlKCksXG4gICAgICAgICAgICAgICAgc291cmNlOiBpbnB1dC5zb3VyY2UsXG4gICAgICAgICAgICAgICAgdXNlcklkOiBjdHguc2Vzc2lvbj8udXNlcj8uaWQgfHwgbnVsbFxuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAud2hlcmUoZXEoZW1haWxTdWJzY3JpYmVycy5lbWFpbCwgaW5wdXQuZW1haWwpKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgcmV0dXJuIHsgXG4gICAgICAgICAgICAgIHN1Y2Nlc3M6IHRydWUsIFxuICAgICAgICAgICAgICBtZXNzYWdlOiAnU3VjY2Vzc2Z1bGx5IHJlc3Vic2NyaWJlZCB0byB1cGRhdGVzIScsXG4gICAgICAgICAgICAgIGlzUmVzdWJzY3JpcHRpb246IHRydWUgXG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIENyZWF0ZSBuZXcgc3Vic2NyaXB0aW9uXG4gICAgICAgIGNvbnN0IG5ld1N1YnNjcmliZXIgPSBhd2FpdCBkYlxuICAgICAgICAgIC5pbnNlcnQoZW1haWxTdWJzY3JpYmVycylcbiAgICAgICAgICAudmFsdWVzKHtcbiAgICAgICAgICAgIGVtYWlsOiBpbnB1dC5lbWFpbCxcbiAgICAgICAgICAgIHNvdXJjZTogaW5wdXQuc291cmNlLFxuICAgICAgICAgICAgc3RhdHVzOiAnYWN0aXZlJyxcbiAgICAgICAgICAgIHVzZXJJZDogY3R4LnNlc3Npb24/LnVzZXI/LmlkIHx8IG51bGwsXG4gICAgICAgICAgfSlcbiAgICAgICAgICAucmV0dXJuaW5nKCk7XG5cbiAgICAgICAgY29uc29sZS5sb2coJ0VtYWlsIHN1YnNjcmlwdGlvbiBjcmVhdGVkOicsIG5ld1N1YnNjcmliZXJbMF0/LmlkKTtcblxuICAgICAgICByZXR1cm4geyBcbiAgICAgICAgICBzdWNjZXNzOiB0cnVlLCBcbiAgICAgICAgICBtZXNzYWdlOiAnU3VjY2Vzc2Z1bGx5IHN1YnNjcmliZWQgdG8gdXBkYXRlcyEnLFxuICAgICAgICAgIGlzUmVzdWJzY3JpcHRpb246IGZhbHNlIFxuICAgICAgICB9O1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignRW1haWwgc3Vic2NyaXB0aW9uIGVycm9yOicsIGVycm9yKTtcbiAgICAgICAgXG4gICAgICAgIC8vIEhhbmRsZSBzcGVjaWZpYyBlcnJvciBtZXNzYWdlc1xuICAgICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICAgIGlmIChlcnJvci5tZXNzYWdlLmluY2x1ZGVzKCdhbHJlYWR5IHNpZ25lZCB1cCcpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0VtYWlsIGFkZHJlc3MgYWxyZWFkeSBzaWduZWQgdXAgZm9yIHVwZGF0ZXMnKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGVycm9yLm1lc3NhZ2UuaW5jbHVkZXMoJ3VuaXF1ZSBjb25zdHJhaW50JykpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignRW1haWwgYWRkcmVzcyBhbHJlYWR5IHNpZ25lZCB1cCBmb3IgdXBkYXRlcycpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdGYWlsZWQgdG8gc3Vic2NyaWJlLiBQbGVhc2UgdHJ5IGFnYWluIGxhdGVyLicpO1xuICAgICAgfVxuICAgIH0pLFxufSk7ICJdLCJuYW1lcyI6WyJ6IiwiY3JlYXRlVFJQQ1JvdXRlciIsInB1YmxpY1Byb2NlZHVyZSIsImRiIiwiZW1haWxTdWJzY3JpYmVycyIsImVxIiwiZW1haWxTdWJzY3JpYmVySW5wdXRTY2hlbWEiLCJvYmplY3QiLCJlbWFpbCIsInN0cmluZyIsIm1lc3NhZ2UiLCJzb3VyY2UiLCJkZWZhdWx0IiwiZW1haWxTdWJzY3JpYmVyUm91dGVyIiwic3Vic2NyaWJlIiwiaW5wdXQiLCJtdXRhdGlvbiIsImN0eCIsImV4aXN0aW5nU3Vic2NyaWJlciIsInNlbGVjdCIsImZyb20iLCJ3aGVyZSIsImxpbWl0IiwibGVuZ3RoIiwic3Vic2NyaWJlciIsInN0YXR1cyIsIkVycm9yIiwidXBkYXRlIiwic2V0Iiwic3Vic2NyaWJlZEF0IiwiRGF0ZSIsInVzZXJJZCIsInNlc3Npb24iLCJ1c2VyIiwiaWQiLCJzdWNjZXNzIiwiaXNSZXN1YnNjcmlwdGlvbiIsIm5ld1N1YnNjcmliZXIiLCJpbnNlcnQiLCJ2YWx1ZXMiLCJyZXR1cm5pbmciLCJjb25zb2xlIiwibG9nIiwiZXJyb3IiLCJpbmNsdWRlcyJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./src/server/api/routers/emailSubscriber.ts\n");

/***/ }),

/***/ "(rsc)/./src/server/api/routers/feedback.ts":
/*!********************************************!*\
  !*** ./src/server/api/routers/feedback.ts ***!
  \********************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   feedbackInputSchema: () => (/* binding */ feedbackInputSchema),\n/* harmony export */   feedbackRouter: () => (/* binding */ feedbackRouter)\n/* harmony export */ });\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! zod */ \"(rsc)/../../node_modules/zod/lib/index.mjs\");\n/* harmony import */ var _server_api_trpc__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ~/server/api/trpc */ \"(rsc)/./src/server/api/trpc.ts\");\n/* harmony import */ var _bazaar_database__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @bazaar/database */ \"(rsc)/../../packages/database/index.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_server_api_trpc__WEBPACK_IMPORTED_MODULE_0__, _bazaar_database__WEBPACK_IMPORTED_MODULE_1__]);\n([_server_api_trpc__WEBPACK_IMPORTED_MODULE_0__, _bazaar_database__WEBPACK_IMPORTED_MODULE_1__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n// src/server/api/routers/feedback.ts\n\n\n\n\nconst feedbackInputSchema = zod__WEBPACK_IMPORTED_MODULE_2__.z.object({\n    name: zod__WEBPACK_IMPORTED_MODULE_2__.z.string().optional(),\n    email: zod__WEBPACK_IMPORTED_MODULE_2__.z.string().email({\n        message: \"Invalid email address\"\n    }).optional().or(zod__WEBPACK_IMPORTED_MODULE_2__.z.literal('')),\n    content: zod__WEBPACK_IMPORTED_MODULE_2__.z.string().optional(),\n    prioritizedFeatures: zod__WEBPACK_IMPORTED_MODULE_2__.z.array(zod__WEBPACK_IMPORTED_MODULE_2__.z.string()).optional()\n});\nconst feedbackRouter = (0,_server_api_trpc__WEBPACK_IMPORTED_MODULE_0__.createTRPCRouter)({\n    submit: _server_api_trpc__WEBPACK_IMPORTED_MODULE_0__.publicProcedure.input(feedbackInputSchema).mutation(async ({ ctx, input })=>{\n        const userId = ctx.session?.user?.id;\n        try {\n            await _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.db.insert(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.feedback).values({\n                name: input.name,\n                // Treat empty string email as null\n                email: input.email === '' ? undefined : input.email,\n                content: input.content,\n                prioritizedFeatures: input.prioritizedFeatures,\n                userId: userId ?? null,\n                status: 'new'\n            });\n            return {\n                success: true,\n                message: \"Feedback submitted successfully.\"\n            };\n        } catch (error) {\n            console.error(\"Failed to submit feedback:\", error);\n            // Consider throwing a TRPCError for client-side handling\n            // For now, returning a generic error message or rethrowing\n            throw new Error(\"Failed to submit feedback. Please try again later.\");\n        }\n    })\n});\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvc2VydmVyL2FwaS9yb3V0ZXJzL2ZlZWRiYWNrLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUEscUNBQXFDO0FBQ2I7QUFDOEM7QUFDaEM7QUFDdUI7QUFFdEQsTUFBTU0sc0JBQXNCTixrQ0FBQ0EsQ0FBQ08sTUFBTSxDQUFDO0lBQzFDQyxNQUFNUixrQ0FBQ0EsQ0FBQ1MsTUFBTSxHQUFHQyxRQUFRO0lBQ3pCQyxPQUFPWCxrQ0FBQ0EsQ0FBQ1MsTUFBTSxHQUFHRSxLQUFLLENBQUM7UUFDdEJDLFNBQVM7SUFDWCxHQUFHRixRQUFRLEdBQUdHLEVBQUUsQ0FBQ2Isa0NBQUNBLENBQUNjLE9BQU8sQ0FBQztJQUMzQkMsU0FBU2Ysa0NBQUNBLENBQUNTLE1BQU0sR0FBR0MsUUFBUTtJQUM1Qk0scUJBQXFCaEIsa0NBQUNBLENBQUNpQixLQUFLLENBQUNqQixrQ0FBQ0EsQ0FBQ1MsTUFBTSxJQUFJQyxRQUFRO0FBQ25ELEdBQUc7QUFFSSxNQUFNUSxpQkFBaUJqQixrRUFBZ0JBLENBQUM7SUFDN0NrQixRQUFRakIsNkRBQWVBLENBQ3BCa0IsS0FBSyxDQUFDZCxxQkFDTmUsUUFBUSxDQUFDLE9BQU8sRUFBRUMsR0FBRyxFQUFFRixLQUFLLEVBQUU7UUFDN0IsTUFBTUcsU0FBU0QsSUFBSUUsT0FBTyxFQUFFQyxNQUFNQztRQUVsQyxJQUFJO1lBQ0YsTUFBTXZCLGdEQUFFQSxDQUFDd0IsTUFBTSxDQUFDdEIsc0RBQWFBLEVBQUV1QixNQUFNLENBQUM7Z0JBQ3BDcEIsTUFBTVksTUFBTVosSUFBSTtnQkFDaEIsbUNBQW1DO2dCQUNuQ0csT0FBT1MsTUFBTVQsS0FBSyxLQUFLLEtBQUtrQixZQUFZVCxNQUFNVCxLQUFLO2dCQUNuREksU0FBU0ssTUFBTUwsT0FBTztnQkFDdEJDLHFCQUFxQkksTUFBTUosbUJBQW1CO2dCQUM5Q08sUUFBUUEsVUFBVTtnQkFDbEJPLFFBQVE7WUFDVjtZQUNBLE9BQU87Z0JBQUVDLFNBQVM7Z0JBQU1uQixTQUFTO1lBQW1DO1FBQ3RFLEVBQUUsT0FBT29CLE9BQU87WUFDZEMsUUFBUUQsS0FBSyxDQUFDLDhCQUE4QkE7WUFDNUMseURBQXlEO1lBQ3pELDJEQUEyRDtZQUMzRCxNQUFNLElBQUlFLE1BQU07UUFDbEI7SUFDRjtBQUNKLEdBQUciLCJzb3VyY2VzIjpbIi9Vc2Vycy9tYXJrdXNob2duZS9Eb2N1bWVudHMvQVBQUy9iYXphYXItdmlkL2JhemFhci12aWQvYXBwcy9tYWluL3NyYy9zZXJ2ZXIvYXBpL3JvdXRlcnMvZmVlZGJhY2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gc3JjL3NlcnZlci9hcGkvcm91dGVycy9mZWVkYmFjay50c1xuaW1wb3J0IHsgeiB9IGZyb20gXCJ6b2RcIjtcbmltcG9ydCB7IGNyZWF0ZVRSUENSb3V0ZXIsIHB1YmxpY1Byb2NlZHVyZSB9IGZyb20gXCJ+L3NlcnZlci9hcGkvdHJwY1wiO1xuaW1wb3J0IHsgZGIgfSBmcm9tIFwiQGJhemFhci9kYXRhYmFzZVwiO1xuaW1wb3J0IHsgZmVlZGJhY2sgYXMgZmVlZGJhY2tUYWJsZSB9IGZyb20gXCJAYmF6YWFyL2RhdGFiYXNlXCI7XG5cbmV4cG9ydCBjb25zdCBmZWVkYmFja0lucHV0U2NoZW1hID0gei5vYmplY3Qoe1xuICBuYW1lOiB6LnN0cmluZygpLm9wdGlvbmFsKCksXG4gIGVtYWlsOiB6LnN0cmluZygpLmVtYWlsKHtcbiAgICBtZXNzYWdlOiBcIkludmFsaWQgZW1haWwgYWRkcmVzc1wiXG4gIH0pLm9wdGlvbmFsKCkub3Ioei5saXRlcmFsKCcnKSksIC8vIEFsbG93IGVtcHR5IHN0cmluZyBhbmQgdHJlYXQgYXMgdW5kZWZpbmVkIGxhdGVyXG4gIGNvbnRlbnQ6IHouc3RyaW5nKCkub3B0aW9uYWwoKSxcbiAgcHJpb3JpdGl6ZWRGZWF0dXJlczogei5hcnJheSh6LnN0cmluZygpKS5vcHRpb25hbCgpLFxufSk7XG5cbmV4cG9ydCBjb25zdCBmZWVkYmFja1JvdXRlciA9IGNyZWF0ZVRSUENSb3V0ZXIoe1xuICBzdWJtaXQ6IHB1YmxpY1Byb2NlZHVyZVxuICAgIC5pbnB1dChmZWVkYmFja0lucHV0U2NoZW1hKVxuICAgIC5tdXRhdGlvbihhc3luYyAoeyBjdHgsIGlucHV0IH0pID0+IHtcbiAgICAgIGNvbnN0IHVzZXJJZCA9IGN0eC5zZXNzaW9uPy51c2VyPy5pZDtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgYXdhaXQgZGIuaW5zZXJ0KGZlZWRiYWNrVGFibGUpLnZhbHVlcyh7XG4gICAgICAgICAgbmFtZTogaW5wdXQubmFtZSxcbiAgICAgICAgICAvLyBUcmVhdCBlbXB0eSBzdHJpbmcgZW1haWwgYXMgbnVsbFxuICAgICAgICAgIGVtYWlsOiBpbnB1dC5lbWFpbCA9PT0gJycgPyB1bmRlZmluZWQgOiBpbnB1dC5lbWFpbCxcbiAgICAgICAgICBjb250ZW50OiBpbnB1dC5jb250ZW50LFxuICAgICAgICAgIHByaW9yaXRpemVkRmVhdHVyZXM6IGlucHV0LnByaW9yaXRpemVkRmVhdHVyZXMsXG4gICAgICAgICAgdXNlcklkOiB1c2VySWQgPz8gbnVsbCwgLy8gTGluayB0byB1c2VyIGlmIGxvZ2dlZCBpbiwgb3RoZXJ3aXNlIG51bGxcbiAgICAgICAgICBzdGF0dXM6ICduZXcnLFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogdHJ1ZSwgbWVzc2FnZTogXCJGZWVkYmFjayBzdWJtaXR0ZWQgc3VjY2Vzc2Z1bGx5LlwiIH07XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiRmFpbGVkIHRvIHN1Ym1pdCBmZWVkYmFjazpcIiwgZXJyb3IpO1xuICAgICAgICAvLyBDb25zaWRlciB0aHJvd2luZyBhIFRSUENFcnJvciBmb3IgY2xpZW50LXNpZGUgaGFuZGxpbmdcbiAgICAgICAgLy8gRm9yIG5vdywgcmV0dXJuaW5nIGEgZ2VuZXJpYyBlcnJvciBtZXNzYWdlIG9yIHJldGhyb3dpbmdcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRmFpbGVkIHRvIHN1Ym1pdCBmZWVkYmFjay4gUGxlYXNlIHRyeSBhZ2FpbiBsYXRlci5cIik7XG4gICAgICB9XG4gICAgfSksXG59KTtcbiJdLCJuYW1lcyI6WyJ6IiwiY3JlYXRlVFJQQ1JvdXRlciIsInB1YmxpY1Byb2NlZHVyZSIsImRiIiwiZmVlZGJhY2siLCJmZWVkYmFja1RhYmxlIiwiZmVlZGJhY2tJbnB1dFNjaGVtYSIsIm9iamVjdCIsIm5hbWUiLCJzdHJpbmciLCJvcHRpb25hbCIsImVtYWlsIiwibWVzc2FnZSIsIm9yIiwibGl0ZXJhbCIsImNvbnRlbnQiLCJwcmlvcml0aXplZEZlYXR1cmVzIiwiYXJyYXkiLCJmZWVkYmFja1JvdXRlciIsInN1Ym1pdCIsImlucHV0IiwibXV0YXRpb24iLCJjdHgiLCJ1c2VySWQiLCJzZXNzaW9uIiwidXNlciIsImlkIiwiaW5zZXJ0IiwidmFsdWVzIiwidW5kZWZpbmVkIiwic3RhdHVzIiwic3VjY2VzcyIsImVycm9yIiwiY29uc29sZSIsIkVycm9yIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./src/server/api/routers/feedback.ts\n");

/***/ }),

/***/ "(rsc)/./src/server/api/routers/generation.universal.ts":
/*!********************************************************!*\
  !*** ./src/server/api/routers/generation.universal.ts ***!
  \********************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   generationUniversalRouter: () => (/* binding */ generationUniversalRouter)\n/* harmony export */ });\n/* harmony import */ var _server_api_trpc__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ~/server/api/trpc */ \"(rsc)/./src/server/api/trpc.ts\");\n/* harmony import */ var _generation_scene_operations__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./generation/scene-operations */ \"(rsc)/./src/server/api/routers/generation/scene-operations.ts\");\n/* harmony import */ var _generation_project_operations__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./generation/project-operations */ \"(rsc)/./src/server/api/routers/generation/project-operations.ts\");\n/* harmony import */ var _generation_iteration_operations__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./generation/iteration-operations */ \"(rsc)/./src/server/api/routers/generation/iteration-operations.ts\");\n/* harmony import */ var _generation_template_operations__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./generation/template-operations */ \"(rsc)/./src/server/api/routers/generation/template-operations.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_server_api_trpc__WEBPACK_IMPORTED_MODULE_0__, _generation_scene_operations__WEBPACK_IMPORTED_MODULE_1__, _generation_project_operations__WEBPACK_IMPORTED_MODULE_2__, _generation_iteration_operations__WEBPACK_IMPORTED_MODULE_3__, _generation_template_operations__WEBPACK_IMPORTED_MODULE_4__]);\n([_server_api_trpc__WEBPACK_IMPORTED_MODULE_0__, _generation_scene_operations__WEBPACK_IMPORTED_MODULE_1__, _generation_project_operations__WEBPACK_IMPORTED_MODULE_2__, _generation_iteration_operations__WEBPACK_IMPORTED_MODULE_3__, _generation_template_operations__WEBPACK_IMPORTED_MODULE_4__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n/**\n * Generation Router with Universal Response Format\n * Modularized version - imports operations from subdirectory\n */ \n// Import all operations from modular files\n\n\n\n\nconst generationUniversalRouter = (0,_server_api_trpc__WEBPACK_IMPORTED_MODULE_0__.createTRPCRouter)({\n    // Scene operations\n    generateScene: _generation_scene_operations__WEBPACK_IMPORTED_MODULE_1__.generateScene,\n    removeScene: _generation_scene_operations__WEBPACK_IMPORTED_MODULE_1__.removeScene,\n    // Project operations\n    getProjectScenes: _generation_project_operations__WEBPACK_IMPORTED_MODULE_2__.getProjectScenes,\n    // Iteration operations\n    getMessageIterations: _generation_iteration_operations__WEBPACK_IMPORTED_MODULE_3__.getMessageIterations,\n    getBatchMessageIterations: _generation_iteration_operations__WEBPACK_IMPORTED_MODULE_3__.getBatchMessageIterations,\n    revertToIteration: _generation_iteration_operations__WEBPACK_IMPORTED_MODULE_3__.revertToIteration,\n    // Template operations\n    addTemplate: _generation_template_operations__WEBPACK_IMPORTED_MODULE_4__.addTemplate\n});\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvc2VydmVyL2FwaS9yb3V0ZXJzL2dlbmVyYXRpb24udW5pdmVyc2FsLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBOzs7Q0FHQyxHQUVvRDtBQUVyRCwyQ0FBMkM7QUFDZ0M7QUFDUjtBQUt4QjtBQUNvQjtBQUV4RCxNQUFNUSw0QkFBNEJSLGtFQUFnQkEsQ0FBQztJQUN4RCxtQkFBbUI7SUFDbkJDLGFBQWFBLHlFQUFBQTtJQUNiQyxXQUFXQSx1RUFBQUE7SUFFWCxxQkFBcUI7SUFDckJDLGdCQUFnQkEsOEVBQUFBO0lBRWhCLHVCQUF1QjtJQUN2QkMsb0JBQW9CQSxvRkFBQUE7SUFDcEJDLHlCQUF5QkEseUZBQUFBO0lBQ3pCQyxpQkFBaUJBLGlGQUFBQTtJQUVqQixzQkFBc0I7SUFDdEJDLFdBQVdBLDBFQUFBQTtBQUNiLEdBQUciLCJzb3VyY2VzIjpbIi9Vc2Vycy9tYXJrdXNob2duZS9Eb2N1bWVudHMvQVBQUy9iYXphYXItdmlkL2JhemFhci12aWQvYXBwcy9tYWluL3NyYy9zZXJ2ZXIvYXBpL3JvdXRlcnMvZ2VuZXJhdGlvbi51bml2ZXJzYWwudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBHZW5lcmF0aW9uIFJvdXRlciB3aXRoIFVuaXZlcnNhbCBSZXNwb25zZSBGb3JtYXRcbiAqIE1vZHVsYXJpemVkIHZlcnNpb24gLSBpbXBvcnRzIG9wZXJhdGlvbnMgZnJvbSBzdWJkaXJlY3RvcnlcbiAqL1xuXG5pbXBvcnQgeyBjcmVhdGVUUlBDUm91dGVyIH0gZnJvbSBcIn4vc2VydmVyL2FwaS90cnBjXCI7XG5cbi8vIEltcG9ydCBhbGwgb3BlcmF0aW9ucyBmcm9tIG1vZHVsYXIgZmlsZXNcbmltcG9ydCB7IGdlbmVyYXRlU2NlbmUsIHJlbW92ZVNjZW5lIH0gZnJvbSBcIi4vZ2VuZXJhdGlvbi9zY2VuZS1vcGVyYXRpb25zXCI7XG5pbXBvcnQgeyBnZXRQcm9qZWN0U2NlbmVzIH0gZnJvbSBcIi4vZ2VuZXJhdGlvbi9wcm9qZWN0LW9wZXJhdGlvbnNcIjtcbmltcG9ydCB7IFxuICBnZXRNZXNzYWdlSXRlcmF0aW9ucywgXG4gIGdldEJhdGNoTWVzc2FnZUl0ZXJhdGlvbnMsIFxuICByZXZlcnRUb0l0ZXJhdGlvbiBcbn0gZnJvbSBcIi4vZ2VuZXJhdGlvbi9pdGVyYXRpb24tb3BlcmF0aW9uc1wiO1xuaW1wb3J0IHsgYWRkVGVtcGxhdGUgfSBmcm9tIFwiLi9nZW5lcmF0aW9uL3RlbXBsYXRlLW9wZXJhdGlvbnNcIjtcblxuZXhwb3J0IGNvbnN0IGdlbmVyYXRpb25Vbml2ZXJzYWxSb3V0ZXIgPSBjcmVhdGVUUlBDUm91dGVyKHtcbiAgLy8gU2NlbmUgb3BlcmF0aW9uc1xuICBnZW5lcmF0ZVNjZW5lLFxuICByZW1vdmVTY2VuZSxcbiAgXG4gIC8vIFByb2plY3Qgb3BlcmF0aW9uc1xuICBnZXRQcm9qZWN0U2NlbmVzLFxuICBcbiAgLy8gSXRlcmF0aW9uIG9wZXJhdGlvbnNcbiAgZ2V0TWVzc2FnZUl0ZXJhdGlvbnMsXG4gIGdldEJhdGNoTWVzc2FnZUl0ZXJhdGlvbnMsXG4gIHJldmVydFRvSXRlcmF0aW9uLFxuICBcbiAgLy8gVGVtcGxhdGUgb3BlcmF0aW9uc1xuICBhZGRUZW1wbGF0ZSxcbn0pOyJdLCJuYW1lcyI6WyJjcmVhdGVUUlBDUm91dGVyIiwiZ2VuZXJhdGVTY2VuZSIsInJlbW92ZVNjZW5lIiwiZ2V0UHJvamVjdFNjZW5lcyIsImdldE1lc3NhZ2VJdGVyYXRpb25zIiwiZ2V0QmF0Y2hNZXNzYWdlSXRlcmF0aW9ucyIsInJldmVydFRvSXRlcmF0aW9uIiwiYWRkVGVtcGxhdGUiLCJnZW5lcmF0aW9uVW5pdmVyc2FsUm91dGVyIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./src/server/api/routers/generation.universal.ts\n");

/***/ }),

/***/ "(rsc)/./src/server/api/routers/generation/helpers.ts":
/*!******************************************************!*\
  !*** ./src/server/api/routers/generation/helpers.ts ***!
  \******************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   executeToolFromDecision: () => (/* binding */ executeToolFromDecision)\n/* harmony export */ });\n/* harmony import */ var _bazaar_database__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @bazaar/database */ \"(rsc)/../../packages/database/index.ts\");\n/* harmony import */ var drizzle_orm__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! drizzle-orm */ \"drizzle-orm\");\n/* harmony import */ var _tools_add_add__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ~/tools/add/add */ \"(rsc)/./src/tools/add/add.ts\");\n/* harmony import */ var _tools_edit_edit__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ~/tools/edit/edit */ \"(rsc)/./src/tools/edit/edit.ts\");\n/* harmony import */ var _tools_delete_delete__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ~/tools/delete/delete */ \"(rsc)/./src/tools/delete/delete.ts\");\n/* harmony import */ var _tools_trim_trim__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ~/tools/trim/trim */ \"(rsc)/./src/tools/trim/trim.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_bazaar_database__WEBPACK_IMPORTED_MODULE_0__, drizzle_orm__WEBPACK_IMPORTED_MODULE_1__]);\n([_bazaar_database__WEBPACK_IMPORTED_MODULE_0__, drizzle_orm__WEBPACK_IMPORTED_MODULE_1__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n\n\n\n\n\n// Helper function for tool execution and database save\nasync function executeToolFromDecision(decision, projectId, userId, storyboard, messageId) {\n    const startTime = Date.now(); // Track generation time\n    if (!decision.toolName || !decision.toolContext) {\n        throw new Error(\"Invalid decision - missing tool name or context\");\n    }\n    let toolInput;\n    // Prepare tool input based on tool type\n    switch(decision.toolName){\n        case 'addScene':\n            // Get reference scenes if specified by Brain for cross-scene style matching\n            let referenceScenes = [];\n            if (decision.toolContext?.referencedSceneIds?.length && decision.toolContext.referencedSceneIds.length > 0) {\n                // Safety: Only include scenes that exist in storyboard\n                referenceScenes = storyboard.filter((s)=>decision.toolContext.referencedSceneIds.includes(s.id));\n                console.log(`📝 [ROUTER] Including ${referenceScenes.length} reference scenes for ADD operation`);\n            }\n            toolInput = {\n                userPrompt: decision.toolContext.userPrompt,\n                projectId,\n                userId,\n                sceneNumber: storyboard.length + 1,\n                storyboardSoFar: storyboard,\n                imageUrls: decision.toolContext.imageUrls,\n                visionAnalysis: decision.toolContext.visionAnalysis,\n                // Pass previous scene for style continuity\n                previousSceneContext: storyboard.length > 0 ? {\n                    tsxCode: storyboard[storyboard.length - 1].tsxCode,\n                    style: undefined\n                } : undefined,\n                // NEW: Pass reference scenes for cross-scene style matching\n                referenceScenes: referenceScenes.length > 0 ? referenceScenes.map((s)=>({\n                        id: s.id,\n                        name: s.name,\n                        tsxCode: s.tsxCode\n                    })) : undefined,\n                // NEW: Pass web context for brand-matching\n                webContext: decision.toolContext.webContext\n            };\n            const addResult = await _tools_add_add__WEBPACK_IMPORTED_MODULE_2__.addTool.run(toolInput);\n            console.log('📥 [ROUTER] Received from ADD tool:', {\n                success: addResult.success,\n                hasData: !!addResult.data,\n                dataKeys: addResult.data ? Object.keys(addResult.data) : [],\n                name: addResult.data?.name,\n                codeLength: addResult.data?.tsxCode?.length\n            });\n            if (!addResult.success || !addResult.data) {\n                throw new Error(addResult.error?.message || 'Add operation failed');\n            }\n            // Trust the duration from the ADD tool - it already analyzes the code\n            let addFinalDuration = addResult.data.duration || 150;\n            // Save to database\n            console.log('💾 [ROUTER] Saving to database:', {\n                projectId,\n                name: addResult.data.name,\n                order: storyboard.length,\n                duration: addFinalDuration\n            });\n            const [newScene] = await _bazaar_database__WEBPACK_IMPORTED_MODULE_0__.db.insert(_bazaar_database__WEBPACK_IMPORTED_MODULE_0__.scenes).values({\n                projectId,\n                name: addResult.data.name,\n                tsxCode: addResult.data.tsxCode,\n                duration: addFinalDuration || 150,\n                order: storyboard.length,\n                props: addResult.data.props || {},\n                layoutJson: addResult.data.layoutJson || null\n            }).returning();\n            if (!newScene) {\n                throw new Error('Failed to save scene to database');\n            }\n            console.log('✅ [ROUTER] Scene saved to database:', {\n                id: newScene.id,\n                name: newScene.name,\n                duration: newScene.duration,\n                order: newScene.order\n            });\n            // Track this iteration if we have a messageId\n            if (messageId) {\n                const endTime = Date.now();\n                const generationTimeMs = endTime - startTime;\n                // Create scene iteration record\n                await _bazaar_database__WEBPACK_IMPORTED_MODULE_0__.db.insert(_bazaar_database__WEBPACK_IMPORTED_MODULE_0__.sceneIterations).values({\n                    sceneId: newScene.id,\n                    projectId,\n                    operationType: 'create',\n                    userPrompt: decision.toolContext.userPrompt,\n                    brainReasoning: decision.reasoning,\n                    codeAfter: newScene.tsxCode,\n                    generationTimeMs,\n                    modelUsed: null,\n                    temperature: null,\n                    userEditedAgain: false,\n                    messageId\n                });\n                console.log('📊 [ROUTER] Created scene iteration record:', {\n                    sceneId: newScene.id,\n                    operationType: 'create',\n                    generationTimeMs\n                });\n            }\n            return {\n                success: true,\n                scene: newScene\n            };\n        case 'editScene':\n            if (!decision.toolContext.targetSceneId) {\n                throw new Error(\"No target scene ID for edit operation\");\n            }\n            const sceneToEdit = await _bazaar_database__WEBPACK_IMPORTED_MODULE_0__.db.query.scenes.findFirst({\n                where: (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_1__.eq)(_bazaar_database__WEBPACK_IMPORTED_MODULE_0__.scenes.id, decision.toolContext.targetSceneId)\n            });\n            if (!sceneToEdit) {\n                throw new Error(\"Scene not found for editing\");\n            }\n            // Get reference scenes if specified by Brain\n            let editReferenceScenes = [];\n            if (decision.toolContext?.referencedSceneIds?.length && decision.toolContext.referencedSceneIds.length > 0) {\n                // Safety: Only include scenes that exist in storyboard\n                editReferenceScenes = storyboard.filter((s)=>decision.toolContext.referencedSceneIds.includes(s.id));\n                console.log(`📝 [ROUTER] Including ${editReferenceScenes.length} reference scenes for edit`);\n            }\n            toolInput = {\n                userPrompt: decision.toolContext.userPrompt,\n                projectId,\n                userId,\n                sceneId: decision.toolContext.targetSceneId,\n                tsxCode: sceneToEdit.tsxCode,\n                currentDuration: sceneToEdit.duration,\n                // Include reference scenes if any\n                referenceScenes: editReferenceScenes.length > 0 ? editReferenceScenes.map((s)=>({\n                        id: s.id,\n                        name: s.name,\n                        tsxCode: s.tsxCode\n                    })) : undefined,\n                imageUrls: decision.toolContext.imageUrls,\n                visionAnalysis: decision.toolContext.visionAnalysis,\n                errorDetails: decision.toolContext.errorDetails,\n                // NEW: Pass web context for brand-matching\n                webContext: decision.toolContext.webContext\n            };\n            const editResult = await _tools_edit_edit__WEBPACK_IMPORTED_MODULE_3__.editTool.run(toolInput);\n            console.log('📥 [ROUTER] Received from EDIT tool:', {\n                success: editResult.success,\n                hasData: !!editResult.data,\n                dataKeys: editResult.data ? Object.keys(editResult.data) : [],\n                error: editResult.error\n            });\n            if (!editResult.success || !editResult.data || !editResult.data.tsxCode) {\n                const errorMessage = typeof editResult.error === 'string' ? editResult.error : editResult.error?.message || 'Edit operation failed - no code returned';\n                throw new Error(errorMessage);\n            }\n            // Use duration from edit result if provided, otherwise keep existing\n            let editFinalDuration = editResult.data.duration;\n            // Update database\n            console.log('💾 [ROUTER] Updating scene in database:', {\n                sceneId: decision.toolContext.targetSceneId,\n                codeChanged: editResult.data.tsxCode !== sceneToEdit.tsxCode,\n                durationChanged: editFinalDuration && editFinalDuration !== sceneToEdit.duration\n            });\n            const [updatedScene] = await _bazaar_database__WEBPACK_IMPORTED_MODULE_0__.db.update(_bazaar_database__WEBPACK_IMPORTED_MODULE_0__.scenes).set({\n                tsxCode: editResult.data.tsxCode,\n                duration: editFinalDuration || sceneToEdit.duration,\n                props: editResult.data.props || sceneToEdit.props,\n                updatedAt: new Date()\n            }).where((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_1__.eq)(_bazaar_database__WEBPACK_IMPORTED_MODULE_0__.scenes.id, decision.toolContext.targetSceneId)).returning();\n            if (!updatedScene) {\n                throw new Error('Failed to update scene in database');\n            }\n            // Track this iteration if we have a messageId\n            if (messageId) {\n                const endTime = Date.now();\n                const generationTimeMs = endTime - startTime;\n                // Create scene iteration record\n                await _bazaar_database__WEBPACK_IMPORTED_MODULE_0__.db.insert(_bazaar_database__WEBPACK_IMPORTED_MODULE_0__.sceneIterations).values({\n                    sceneId: decision.toolContext.targetSceneId,\n                    projectId,\n                    operationType: 'edit',\n                    userPrompt: decision.toolContext.userPrompt,\n                    brainReasoning: decision.reasoning,\n                    codeBefore: sceneToEdit.tsxCode,\n                    codeAfter: editResult.data.tsxCode,\n                    generationTimeMs,\n                    modelUsed: null,\n                    temperature: null,\n                    userEditedAgain: false,\n                    messageId\n                });\n                console.log('📊 [ROUTER] Created scene iteration record:', {\n                    sceneId: decision.toolContext.targetSceneId,\n                    operationType: 'edit',\n                    generationTimeMs\n                });\n            }\n            return {\n                success: true,\n                scene: updatedScene\n            };\n        case 'trimScene':\n            if (!decision.toolContext.targetSceneId) {\n                throw new Error(\"No target scene ID for trim operation\");\n            }\n            const sceneToTrim = await _bazaar_database__WEBPACK_IMPORTED_MODULE_0__.db.query.scenes.findFirst({\n                where: (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_1__.eq)(_bazaar_database__WEBPACK_IMPORTED_MODULE_0__.scenes.id, decision.toolContext.targetSceneId)\n            });\n            if (!sceneToTrim) {\n                throw new Error(\"Scene not found for trimming\");\n            }\n            toolInput = {\n                userPrompt: decision.toolContext.userPrompt,\n                projectId,\n                userId,\n                sceneId: decision.toolContext.targetSceneId,\n                currentDuration: sceneToTrim.duration,\n                newDuration: decision.toolContext.targetDuration\n            };\n            const trimResult = await _tools_trim_trim__WEBPACK_IMPORTED_MODULE_5__.trimTool.run(toolInput);\n            console.log('📥 [ROUTER] Received from TRIM tool:', {\n                success: trimResult.success,\n                hasData: !!trimResult.data,\n                newDuration: trimResult.data?.duration,\n                trimmedFrames: trimResult.data?.trimmedFrames\n            });\n            if (!trimResult.success || !trimResult.data || !trimResult.data.duration) {\n                throw new Error(trimResult.error?.message || 'Trim operation failed');\n            }\n            // Update only the duration in database\n            console.log('💾 [ROUTER] Updating scene duration in database:', {\n                sceneId: decision.toolContext.targetSceneId,\n                oldDuration: sceneToTrim.duration,\n                newDuration: trimResult.data.duration\n            });\n            const [trimmedScene] = await _bazaar_database__WEBPACK_IMPORTED_MODULE_0__.db.update(_bazaar_database__WEBPACK_IMPORTED_MODULE_0__.scenes).set({\n                duration: trimResult.data.duration,\n                updatedAt: new Date()\n            }).where((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_1__.eq)(_bazaar_database__WEBPACK_IMPORTED_MODULE_0__.scenes.id, decision.toolContext.targetSceneId)).returning();\n            if (!trimmedScene) {\n                throw new Error('Failed to update scene duration in database');\n            }\n            // Track this iteration if we have a messageId\n            if (messageId) {\n                const endTime = Date.now();\n                const generationTimeMs = endTime - startTime;\n                // Create scene iteration record for trim\n                await _bazaar_database__WEBPACK_IMPORTED_MODULE_0__.db.insert(_bazaar_database__WEBPACK_IMPORTED_MODULE_0__.sceneIterations).values({\n                    sceneId: decision.toolContext.targetSceneId,\n                    projectId,\n                    operationType: 'edit',\n                    userPrompt: decision.toolContext.userPrompt,\n                    brainReasoning: decision.reasoning,\n                    codeBefore: sceneToTrim.tsxCode,\n                    codeAfter: sceneToTrim.tsxCode,\n                    generationTimeMs,\n                    modelUsed: null,\n                    temperature: null,\n                    userEditedAgain: false,\n                    messageId\n                });\n                console.log('📊 [ROUTER] Created scene iteration record for trim:', {\n                    sceneId: decision.toolContext.targetSceneId,\n                    operationType: 'trim',\n                    oldDuration: sceneToTrim.duration,\n                    newDuration: trimResult.data.duration,\n                    generationTimeMs\n                });\n            }\n            return {\n                success: true,\n                scene: trimmedScene\n            };\n        case 'deleteScene':\n            if (!decision.toolContext.targetSceneId) {\n                throw new Error(\"No target scene ID for delete operation\");\n            }\n            toolInput = {\n                userPrompt: decision.toolContext.userPrompt,\n                projectId,\n                sceneId: decision.toolContext.targetSceneId\n            };\n            // For delete, get the scene first for the response\n            const sceneToDelete = await _bazaar_database__WEBPACK_IMPORTED_MODULE_0__.db.query.scenes.findFirst({\n                where: (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_1__.eq)(_bazaar_database__WEBPACK_IMPORTED_MODULE_0__.scenes.id, decision.toolContext.targetSceneId)\n            });\n            if (!sceneToDelete) {\n                throw new Error(\"Scene not found for deletion\");\n            }\n            const deleteResult = await _tools_delete_delete__WEBPACK_IMPORTED_MODULE_4__.deleteTool.run(toolInput);\n            if (!deleteResult.success) {\n                throw new Error(deleteResult.error?.message || 'Delete operation failed');\n            }\n            // Delete from database\n            await _bazaar_database__WEBPACK_IMPORTED_MODULE_0__.db.delete(_bazaar_database__WEBPACK_IMPORTED_MODULE_0__.scenes).where((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_1__.eq)(_bazaar_database__WEBPACK_IMPORTED_MODULE_0__.scenes.id, decision.toolContext.targetSceneId));\n            // Track this iteration if we have a messageId\n            if (messageId) {\n                const endTime = Date.now();\n                const generationTimeMs = endTime - startTime;\n                // Create scene iteration record\n                await _bazaar_database__WEBPACK_IMPORTED_MODULE_0__.db.insert(_bazaar_database__WEBPACK_IMPORTED_MODULE_0__.sceneIterations).values({\n                    sceneId: decision.toolContext.targetSceneId,\n                    projectId,\n                    operationType: 'delete',\n                    userPrompt: decision.toolContext.userPrompt,\n                    brainReasoning: decision.reasoning,\n                    codeBefore: sceneToDelete.tsxCode,\n                    generationTimeMs,\n                    modelUsed: null,\n                    temperature: null,\n                    userEditedAgain: false,\n                    messageId\n                });\n                console.log('📊 [ROUTER] Created scene iteration record:', {\n                    sceneId: decision.toolContext.targetSceneId,\n                    operationType: 'delete',\n                    generationTimeMs\n                });\n            }\n            return {\n                success: true,\n                scene: sceneToDelete\n            };\n        default:\n            throw new Error(`Unknown tool: ${decision.toolName}`);\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/server/api/routers/generation/helpers.ts\n");

/***/ }),

/***/ "(rsc)/./src/server/api/routers/generation/iteration-operations.ts":
/*!*******************************************************************!*\
  !*** ./src/server/api/routers/generation/iteration-operations.ts ***!
  \*******************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getBatchMessageIterations: () => (/* binding */ getBatchMessageIterations),\n/* harmony export */   getMessageIterations: () => (/* binding */ getMessageIterations),\n/* harmony export */   revertToIteration: () => (/* binding */ revertToIteration)\n/* harmony export */ });\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! zod */ \"(rsc)/../../node_modules/zod/lib/index.mjs\");\n/* harmony import */ var _server_api_trpc__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ~/server/api/trpc */ \"(rsc)/./src/server/api/trpc.ts\");\n/* harmony import */ var _bazaar_database__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @bazaar/database */ \"(rsc)/../../packages/database/index.ts\");\n/* harmony import */ var drizzle_orm__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! drizzle-orm */ \"drizzle-orm\");\n/* harmony import */ var _server_services_data_message_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ~/server/services/data/message.service */ \"(rsc)/./src/server/services/data/message.service.ts\");\n/* harmony import */ var _lib_api_response_helpers__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ~/lib/api/response-helpers */ \"(rsc)/./src/lib/api/response-helpers.ts\");\n/* harmony import */ var _lib_types_api_universal__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ~/lib/types/api/universal */ \"(rsc)/./src/lib/types/api/universal.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_server_api_trpc__WEBPACK_IMPORTED_MODULE_0__, _bazaar_database__WEBPACK_IMPORTED_MODULE_1__, drizzle_orm__WEBPACK_IMPORTED_MODULE_2__, _server_services_data_message_service__WEBPACK_IMPORTED_MODULE_3__]);\n([_server_api_trpc__WEBPACK_IMPORTED_MODULE_0__, _bazaar_database__WEBPACK_IMPORTED_MODULE_1__, drizzle_orm__WEBPACK_IMPORTED_MODULE_2__, _server_services_data_message_service__WEBPACK_IMPORTED_MODULE_3__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n\n\n\n\n\n\n/**\n * GET ITERATIONS BY MESSAGE - Query all scene iterations linked to a message\n */ const getMessageIterations = _server_api_trpc__WEBPACK_IMPORTED_MODULE_0__.protectedProcedure.input(zod__WEBPACK_IMPORTED_MODULE_6__.z.object({\n    messageId: zod__WEBPACK_IMPORTED_MODULE_6__.z.string()\n})).query(async ({ input, ctx })=>{\n    const { messageId } = input;\n    // Get all iterations linked to this message\n    const iterations = await _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.db.query.sceneIterations.findMany({\n        where: (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.eq)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.sceneIterations.messageId, messageId),\n        orderBy: [\n            _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.sceneIterations.createdAt\n        ]\n    });\n    // For each iteration, get the current scene info\n    const iterationsWithScenes = await Promise.all(iterations.map(async (iteration)=>{\n        const scene = await _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.db.query.scenes.findFirst({\n            where: (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.eq)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.scenes.id, iteration.sceneId)\n        });\n        return {\n            ...iteration,\n            currentSceneName: scene?.name || 'Deleted Scene',\n            sceneExists: !!scene\n        };\n    }));\n    return iterationsWithScenes;\n});\n/**\n * GET BATCH MESSAGE ITERATIONS - Efficiently check multiple messages for iterations\n */ const getBatchMessageIterations = _server_api_trpc__WEBPACK_IMPORTED_MODULE_0__.protectedProcedure.input(zod__WEBPACK_IMPORTED_MODULE_6__.z.object({\n    messageIds: zod__WEBPACK_IMPORTED_MODULE_6__.z.array(zod__WEBPACK_IMPORTED_MODULE_6__.z.string())\n})).query(async ({ input, ctx })=>{\n    const { messageIds } = input;\n    if (messageIds.length === 0) {\n        return {};\n    }\n    // Get all iterations for these messages in one query\n    const iterations = await _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.db.query.sceneIterations.findMany({\n        where: (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.inArray)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.sceneIterations.messageId, messageIds),\n        orderBy: [\n            _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.sceneIterations.createdAt\n        ]\n    });\n    // Group by messageId for easy lookup\n    const iterationsByMessage = {};\n    for (const iteration of iterations){\n        if (iteration.messageId) {\n            if (!iterationsByMessage[iteration.messageId]) {\n                iterationsByMessage[iteration.messageId] = [];\n            }\n            iterationsByMessage[iteration.messageId].push(iteration);\n        }\n    }\n    return iterationsByMessage;\n});\n/**\n * REVERT TO ITERATION - Restore a scene to a previous version\n */ const revertToIteration = _server_api_trpc__WEBPACK_IMPORTED_MODULE_0__.protectedProcedure.input(zod__WEBPACK_IMPORTED_MODULE_6__.z.object({\n    projectId: zod__WEBPACK_IMPORTED_MODULE_6__.z.string(),\n    iterationId: zod__WEBPACK_IMPORTED_MODULE_6__.z.string(),\n    messageId: zod__WEBPACK_IMPORTED_MODULE_6__.z.string()\n})).mutation(async ({ input, ctx })=>{\n    const response = new _lib_api_response_helpers__WEBPACK_IMPORTED_MODULE_4__.ResponseBuilder();\n    const { projectId, iterationId, messageId } = input;\n    const userId = ctx.session.user.id;\n    console.log(`[${response.getRequestId()}] Reverting to iteration`, {\n        iterationId,\n        messageId\n    });\n    try {\n        // 1. Verify project ownership\n        const project = await _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.db.query.projects.findFirst({\n            where: (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.and)((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.eq)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects.id, projectId), (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.eq)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects.userId, userId))\n        });\n        if (!project) {\n            return response.error(_lib_types_api_universal__WEBPACK_IMPORTED_MODULE_5__.ErrorCode.NOT_FOUND, \"Project not found or access denied\", 'scene.update', 'scene');\n        }\n        // 2. Get the iteration\n        const iteration = await _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.db.query.sceneIterations.findFirst({\n            where: (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.and)((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.eq)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.sceneIterations.id, iterationId), (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.eq)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.sceneIterations.projectId, projectId))\n        });\n        if (!iteration) {\n            return response.error(_lib_types_api_universal__WEBPACK_IMPORTED_MODULE_5__.ErrorCode.NOT_FOUND, \"Iteration not found\", 'scene.update', 'scene');\n        }\n        // 3. Handle based on operation type\n        let revertedScene;\n        if (iteration.operationType === 'delete') {\n            // Restore deleted scene\n            if (!iteration.codeBefore) {\n                throw new Error(\"Cannot restore deleted scene - no code history\");\n            }\n            // Find the original order by looking at other scenes\n            const allScenes = await _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.db.query.scenes.findMany({\n                where: (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.eq)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.scenes.projectId, projectId),\n                orderBy: [\n                    _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.scenes.order\n                ]\n            });\n            // Insert at the end\n            const maxOrder = allScenes.length;\n            [revertedScene] = await _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.db.insert(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.scenes).values({\n                id: iteration.sceneId,\n                projectId,\n                name: `Restored Scene`,\n                tsxCode: iteration.codeBefore,\n                duration: 150,\n                order: maxOrder,\n                props: {}\n            }).returning();\n        } else if (iteration.operationType === 'create') {\n            // For create operations, use codeAfter (the created state)\n            const scene = await _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.db.query.scenes.findFirst({\n                where: (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.eq)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.scenes.id, iteration.sceneId)\n            });\n            if (!scene) {\n                throw new Error(\"Scene not found\");\n            }\n            [revertedScene] = await _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.db.update(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.scenes).set({\n                tsxCode: iteration.codeAfter,\n                updatedAt: new Date()\n            }).where((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.eq)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.scenes.id, iteration.sceneId)).returning();\n        } else {\n            // For edit operations, revert to the state after this edit\n            const scene = await _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.db.query.scenes.findFirst({\n                where: (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.eq)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.scenes.id, iteration.sceneId)\n            });\n            if (!scene) {\n                throw new Error(\"Scene not found\");\n            }\n            const codeToRevertTo = iteration.codeAfter || iteration.codeBefore;\n            if (!codeToRevertTo) {\n                throw new Error(\"No code history available for this iteration\");\n            }\n            [revertedScene] = await _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.db.update(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.scenes).set({\n                tsxCode: codeToRevertTo,\n                updatedAt: new Date()\n            }).where((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.eq)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.scenes.id, iteration.sceneId)).returning();\n        }\n        if (!revertedScene) {\n            throw new Error(\"Failed to revert scene\");\n        }\n        // 4. Create a new iteration to track the revert\n        await _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.db.insert(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.sceneIterations).values({\n            sceneId: iteration.sceneId,\n            projectId,\n            operationType: 'edit',\n            userPrompt: `Reverted to version from: \"${iteration.userPrompt}\"`,\n            codeBefore: iteration.operationType === 'delete' ? null : revertedScene.tsxCode,\n            codeAfter: iteration.codeAfter || iteration.codeBefore,\n            generationTimeMs: 0,\n            modelUsed: null,\n            userEditedAgain: false,\n            messageId: null\n        });\n        // 5. Create a message about the revert\n        await _server_services_data_message_service__WEBPACK_IMPORTED_MODULE_3__.messageService.createMessage({\n            projectId,\n            content: `Reverted scene to version from: \"${iteration.userPrompt}\"`,\n            role: 'assistant',\n            kind: 'message'\n        });\n        return response.success(revertedScene, iteration.operationType === 'delete' ? 'scene.create' : 'scene.update', 'scene', [\n            revertedScene.id\n        ]);\n    } catch (error) {\n        console.error(`[${response.getRequestId()}] Revert error:`, error);\n        const errorCode = (0,_lib_api_response_helpers__WEBPACK_IMPORTED_MODULE_4__.getErrorCode)(error);\n        const errorMessage = error instanceof Error ? error.message : 'Failed to revert';\n        return response.error(errorCode, errorMessage, 'scene.update', 'scene');\n    }\n});\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/server/api/routers/generation/iteration-operations.ts\n");

/***/ }),

/***/ "(rsc)/./src/server/api/routers/generation/project-operations.ts":
/*!*****************************************************************!*\
  !*** ./src/server/api/routers/generation/project-operations.ts ***!
  \*****************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getProjectScenes: () => (/* binding */ getProjectScenes)\n/* harmony export */ });\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! zod */ \"(rsc)/../../node_modules/zod/lib/index.mjs\");\n/* harmony import */ var _server_api_trpc__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ~/server/api/trpc */ \"(rsc)/./src/server/api/trpc.ts\");\n/* harmony import */ var _bazaar_database__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @bazaar/database */ \"(rsc)/../../packages/database/index.ts\");\n/* harmony import */ var drizzle_orm__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! drizzle-orm */ \"drizzle-orm\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_server_api_trpc__WEBPACK_IMPORTED_MODULE_0__, _bazaar_database__WEBPACK_IMPORTED_MODULE_1__, drizzle_orm__WEBPACK_IMPORTED_MODULE_2__]);\n([_server_api_trpc__WEBPACK_IMPORTED_MODULE_0__, _bazaar_database__WEBPACK_IMPORTED_MODULE_1__, drizzle_orm__WEBPACK_IMPORTED_MODULE_2__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n\n\n\n/**\n * GET PROJECT SCENES - Query all scenes for a project\n */ const getProjectScenes = _server_api_trpc__WEBPACK_IMPORTED_MODULE_0__.protectedProcedure.input(zod__WEBPACK_IMPORTED_MODULE_3__.z.object({\n    projectId: zod__WEBPACK_IMPORTED_MODULE_3__.z.string()\n})).query(async ({ input, ctx })=>{\n    const { projectId } = input;\n    const userId = ctx.session.user.id;\n    // Verify project ownership\n    const project = await _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.db.query.projects.findFirst({\n        where: (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.and)((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.eq)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects.id, projectId), (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.eq)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects.userId, userId))\n    });\n    if (!project) {\n        throw new Error(\"Project not found or access denied\");\n    }\n    // Get scenes\n    const projectScenes = await _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.db.query.scenes.findMany({\n        where: (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.eq)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.scenes.projectId, projectId),\n        orderBy: [\n            _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.scenes.order\n        ]\n    });\n    return projectScenes;\n});\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvc2VydmVyL2FwaS9yb3V0ZXJzL2dlbmVyYXRpb24vcHJvamVjdC1vcGVyYXRpb25zLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQXdCO0FBQytCO0FBQ2pCO0FBQ2M7QUFDZDtBQUV0Qzs7Q0FFQyxHQUNNLE1BQU1PLG1CQUFtQk4sZ0VBQWtCQSxDQUMvQ08sS0FBSyxDQUFDUixrQ0FBQ0EsQ0FBQ1MsTUFBTSxDQUFDO0lBQ2RDLFdBQVdWLGtDQUFDQSxDQUFDVyxNQUFNO0FBQ3JCLElBQ0NDLEtBQUssQ0FBQyxPQUFPLEVBQUVKLEtBQUssRUFBRUssR0FBRyxFQUFFO0lBQzFCLE1BQU0sRUFBRUgsU0FBUyxFQUFFLEdBQUdGO0lBQ3RCLE1BQU1NLFNBQVNELElBQUlFLE9BQU8sQ0FBQ0MsSUFBSSxDQUFDQyxFQUFFO0lBRWxDLDJCQUEyQjtJQUMzQixNQUFNQyxVQUFVLE1BQU1oQixnREFBRUEsQ0FBQ1UsS0FBSyxDQUFDUixRQUFRLENBQUNlLFNBQVMsQ0FBQztRQUNoREMsT0FBT2QsZ0RBQUdBLENBQ1JELCtDQUFFQSxDQUFDRCxzREFBUUEsQ0FBQ2EsRUFBRSxFQUFFUCxZQUNoQkwsK0NBQUVBLENBQUNELHNEQUFRQSxDQUFDVSxNQUFNLEVBQUVBO0lBRXhCO0lBRUEsSUFBSSxDQUFDSSxTQUFTO1FBQ1osTUFBTSxJQUFJRyxNQUFNO0lBQ2xCO0lBRUEsYUFBYTtJQUNiLE1BQU1DLGdCQUFnQixNQUFNcEIsZ0RBQUVBLENBQUNVLEtBQUssQ0FBQ1QsTUFBTSxDQUFDb0IsUUFBUSxDQUFDO1FBQ25ESCxPQUFPZiwrQ0FBRUEsQ0FBQ0Ysb0RBQU1BLENBQUNPLFNBQVMsRUFBRUE7UUFDNUJjLFNBQVM7WUFBQ3JCLG9EQUFNQSxDQUFDc0IsS0FBSztTQUFDO0lBQ3pCO0lBRUEsT0FBT0g7QUFDVCxHQUFHIiwic291cmNlcyI6WyIvVXNlcnMvbWFya3VzaG9nbmUvRG9jdW1lbnRzL0FQUFMvYmF6YWFyLXZpZC9iYXphYXItdmlkL2FwcHMvbWFpbi9zcmMvc2VydmVyL2FwaS9yb3V0ZXJzL2dlbmVyYXRpb24vcHJvamVjdC1vcGVyYXRpb25zLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHogfSBmcm9tIFwiem9kXCI7XG5pbXBvcnQgeyBwcm90ZWN0ZWRQcm9jZWR1cmUgfSBmcm9tIFwifi9zZXJ2ZXIvYXBpL3RycGNcIjtcbmltcG9ydCB7IGRiIH0gZnJvbSBcIkBiYXphYXIvZGF0YWJhc2VcIjtcbmltcG9ydCB7IHNjZW5lcywgcHJvamVjdHMgfSBmcm9tIFwiQGJhemFhci9kYXRhYmFzZVwiO1xuaW1wb3J0IHsgZXEsIGFuZCB9IGZyb20gXCJkcml6emxlLW9ybVwiO1xuXG4vKipcbiAqIEdFVCBQUk9KRUNUIFNDRU5FUyAtIFF1ZXJ5IGFsbCBzY2VuZXMgZm9yIGEgcHJvamVjdFxuICovXG5leHBvcnQgY29uc3QgZ2V0UHJvamVjdFNjZW5lcyA9IHByb3RlY3RlZFByb2NlZHVyZVxuICAuaW5wdXQoei5vYmplY3Qoe1xuICAgIHByb2plY3RJZDogei5zdHJpbmcoKSxcbiAgfSkpXG4gIC5xdWVyeShhc3luYyAoeyBpbnB1dCwgY3R4IH0pID0+IHtcbiAgICBjb25zdCB7IHByb2plY3RJZCB9ID0gaW5wdXQ7XG4gICAgY29uc3QgdXNlcklkID0gY3R4LnNlc3Npb24udXNlci5pZDtcblxuICAgIC8vIFZlcmlmeSBwcm9qZWN0IG93bmVyc2hpcFxuICAgIGNvbnN0IHByb2plY3QgPSBhd2FpdCBkYi5xdWVyeS5wcm9qZWN0cy5maW5kRmlyc3Qoe1xuICAgICAgd2hlcmU6IGFuZChcbiAgICAgICAgZXEocHJvamVjdHMuaWQsIHByb2plY3RJZCksXG4gICAgICAgIGVxKHByb2plY3RzLnVzZXJJZCwgdXNlcklkKVxuICAgICAgKSxcbiAgICB9KTtcblxuICAgIGlmICghcHJvamVjdCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUHJvamVjdCBub3QgZm91bmQgb3IgYWNjZXNzIGRlbmllZFwiKTtcbiAgICB9XG5cbiAgICAvLyBHZXQgc2NlbmVzXG4gICAgY29uc3QgcHJvamVjdFNjZW5lcyA9IGF3YWl0IGRiLnF1ZXJ5LnNjZW5lcy5maW5kTWFueSh7XG4gICAgICB3aGVyZTogZXEoc2NlbmVzLnByb2plY3RJZCwgcHJvamVjdElkKSxcbiAgICAgIG9yZGVyQnk6IFtzY2VuZXMub3JkZXJdLFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHByb2plY3RTY2VuZXM7XG4gIH0pOyJdLCJuYW1lcyI6WyJ6IiwicHJvdGVjdGVkUHJvY2VkdXJlIiwiZGIiLCJzY2VuZXMiLCJwcm9qZWN0cyIsImVxIiwiYW5kIiwiZ2V0UHJvamVjdFNjZW5lcyIsImlucHV0Iiwib2JqZWN0IiwicHJvamVjdElkIiwic3RyaW5nIiwicXVlcnkiLCJjdHgiLCJ1c2VySWQiLCJzZXNzaW9uIiwidXNlciIsImlkIiwicHJvamVjdCIsImZpbmRGaXJzdCIsIndoZXJlIiwiRXJyb3IiLCJwcm9qZWN0U2NlbmVzIiwiZmluZE1hbnkiLCJvcmRlckJ5Iiwib3JkZXIiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./src/server/api/routers/generation/project-operations.ts\n");

/***/ }),

/***/ "(rsc)/./src/server/api/routers/generation/scene-operations.ts":
/*!***************************************************************!*\
  !*** ./src/server/api/routers/generation/scene-operations.ts ***!
  \***************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   generateScene: () => (/* binding */ generateScene),\n/* harmony export */   removeScene: () => (/* binding */ removeScene)\n/* harmony export */ });\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! zod */ \"(rsc)/../../node_modules/zod/lib/index.mjs\");\n/* harmony import */ var _server_api_trpc__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ~/server/api/trpc */ \"(rsc)/./src/server/api/trpc.ts\");\n/* harmony import */ var _bazaar_database__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @bazaar/database */ \"(rsc)/../../packages/database/index.ts\");\n/* harmony import */ var drizzle_orm__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! drizzle-orm */ \"drizzle-orm\");\n/* harmony import */ var _server_services_data_message_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ~/server/services/data/message.service */ \"(rsc)/./src/server/services/data/message.service.ts\");\n/* harmony import */ var _brain_orchestratorNEW__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ~/brain/orchestratorNEW */ \"(rsc)/./src/brain/orchestratorNEW.ts\");\n/* harmony import */ var _lib_types_ai_brain_types__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ~/lib/types/ai/brain.types */ \"(rsc)/./src/lib/types/ai/brain.types.ts\");\n/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./helpers */ \"(rsc)/./src/server/api/routers/generation/helpers.ts\");\n/* harmony import */ var _lib_api_response_helpers__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ~/lib/api/response-helpers */ \"(rsc)/./src/lib/api/response-helpers.ts\");\n/* harmony import */ var _lib_types_api_universal__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ~/lib/types/api/universal */ \"(rsc)/./src/lib/types/api/universal.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_server_api_trpc__WEBPACK_IMPORTED_MODULE_0__, _bazaar_database__WEBPACK_IMPORTED_MODULE_1__, drizzle_orm__WEBPACK_IMPORTED_MODULE_2__, _server_services_data_message_service__WEBPACK_IMPORTED_MODULE_3__, _brain_orchestratorNEW__WEBPACK_IMPORTED_MODULE_4__, _helpers__WEBPACK_IMPORTED_MODULE_6__]);\n([_server_api_trpc__WEBPACK_IMPORTED_MODULE_0__, _bazaar_database__WEBPACK_IMPORTED_MODULE_1__, drizzle_orm__WEBPACK_IMPORTED_MODULE_2__, _server_services_data_message_service__WEBPACK_IMPORTED_MODULE_3__, _brain_orchestratorNEW__WEBPACK_IMPORTED_MODULE_4__, _helpers__WEBPACK_IMPORTED_MODULE_6__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n\n\n\n\n\n\n\n// Import universal response types and helpers\n\n\n/**\n * UNIFIED SCENE GENERATION with Universal Response\n */ const generateScene = _server_api_trpc__WEBPACK_IMPORTED_MODULE_0__.protectedProcedure.input(zod__WEBPACK_IMPORTED_MODULE_9__.z.object({\n    projectId: zod__WEBPACK_IMPORTED_MODULE_9__.z.string(),\n    userMessage: zod__WEBPACK_IMPORTED_MODULE_9__.z.string(),\n    userContext: zod__WEBPACK_IMPORTED_MODULE_9__.z.object({\n        imageUrls: zod__WEBPACK_IMPORTED_MODULE_9__.z.array(zod__WEBPACK_IMPORTED_MODULE_9__.z.string()).optional()\n    }).optional(),\n    assistantMessageId: zod__WEBPACK_IMPORTED_MODULE_9__.z.string().optional()\n})).mutation(async ({ input, ctx })=>{\n    const response = new _lib_api_response_helpers__WEBPACK_IMPORTED_MODULE_7__.ResponseBuilder();\n    const { projectId, userMessage, userContext } = input;\n    const userId = ctx.session.user.id;\n    console.log(`[${response.getRequestId()}] Starting scene generation`, {\n        projectId,\n        userMessage\n    });\n    try {\n        // 1. Verify project ownership\n        const project = await _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.db.query.projects.findFirst({\n            where: (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.and)((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.eq)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects.id, projectId), (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.eq)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects.userId, userId))\n        });\n        if (!project) {\n            return response.error(_lib_types_api_universal__WEBPACK_IMPORTED_MODULE_8__.ErrorCode.NOT_FOUND, \"Project not found or access denied\", 'scene.create', 'scene');\n        }\n        // 2. Build storyboard context\n        let storyboardForBrain = [];\n        // Get existing scenes first\n        const existingScenes = await _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.db.query.scenes.findMany({\n            where: (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.eq)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.scenes.projectId, projectId),\n            orderBy: [\n                _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.scenes.order\n            ]\n        });\n        if (project.isWelcome && existingScenes.length === 0) {\n            // First real scene - clear welcome flag\n            console.log(`[${response.getRequestId()}] First real scene - clearing welcome flag`);\n            await _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.db.update(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects).set({\n                isWelcome: false\n            }).where((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.eq)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects.id, projectId));\n            storyboardForBrain = [];\n        } else if (project.isWelcome && existingScenes.length > 0) {\n            // Welcome project but has scenes already - just clear the flag\n            console.log(`[${response.getRequestId()}] Welcome project with scenes - clearing flag only`);\n            await _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.db.update(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects).set({\n                isWelcome: false\n            }).where((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.eq)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects.id, projectId));\n            storyboardForBrain = existingScenes.map((scene)=>({\n                    id: scene.id,\n                    name: scene.name,\n                    duration: scene.duration,\n                    order: scene.order,\n                    tsxCode: scene.tsxCode\n                }));\n        } else {\n            // Normal project with scenes\n            storyboardForBrain = existingScenes.map((scene)=>({\n                    id: scene.id,\n                    name: scene.name,\n                    duration: scene.duration,\n                    order: scene.order,\n                    tsxCode: scene.tsxCode\n                }));\n        }\n        // 3. Get chat history\n        const recentMessages = await _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.db.query.messages.findMany({\n            where: (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.eq)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.messages.projectId, projectId),\n            orderBy: [\n                (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.desc)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.messages.sequence)\n            ],\n            limit: 10\n        });\n        const chatHistory = recentMessages.reverse().map((msg)=>({\n                role: msg.role,\n                content: msg.content\n            }));\n        // 4. Store user message\n        await _server_services_data_message_service__WEBPACK_IMPORTED_MODULE_3__.messageService.createMessage({\n            projectId,\n            content: userMessage,\n            role: \"user\",\n            imageUrls: userContext?.imageUrls || []\n        });\n        // 5. Get decision from brain\n        console.log(`[${response.getRequestId()}] Getting decision from brain...`);\n        const orchestratorResponse = await _brain_orchestratorNEW__WEBPACK_IMPORTED_MODULE_4__.orchestrator.processUserInput({\n            prompt: userMessage,\n            projectId,\n            userId,\n            storyboardSoFar: storyboardForBrain,\n            chatHistory,\n            userContext: {\n                imageUrls: userContext?.imageUrls\n            }\n        });\n        if (!orchestratorResponse.success || !orchestratorResponse.result) {\n            return response.error(_lib_types_api_universal__WEBPACK_IMPORTED_MODULE_8__.ErrorCode.AI_ERROR, orchestratorResponse.error || \"Failed to get decision from brain\", 'scene.create', 'scene');\n        }\n        const decision = {\n            success: true,\n            toolName: orchestratorResponse.result.toolName,\n            toolContext: orchestratorResponse.result.toolContext,\n            reasoning: orchestratorResponse.reasoning,\n            chatResponse: orchestratorResponse.chatResponse\n        };\n        // 6. Create assistant's response FIRST (before tool execution)\n        // This ensures proper message ordering in the database\n        let assistantMessageId;\n        if (decision.chatResponse) {\n            const newAssistantMessage = await _server_services_data_message_service__WEBPACK_IMPORTED_MODULE_3__.messageService.createMessage({\n                id: input.assistantMessageId,\n                projectId,\n                content: decision.chatResponse,\n                role: \"assistant\",\n                status: \"pending\"\n            });\n            assistantMessageId = newAssistantMessage?.id;\n        }\n        // 7. Execute the tool\n        console.log(`[${response.getRequestId()}] Executing tool: ${decision.toolName}`);\n        const toolResult = await (0,_helpers__WEBPACK_IMPORTED_MODULE_6__.executeToolFromDecision)(decision, projectId, userId, storyboardForBrain, assistantMessageId // Pass the actual message ID for iteration tracking\n        );\n        console.log(`[${response.getRequestId()}] Tool execution result:`, {\n            success: toolResult.success,\n            hasScene: !!toolResult.scene,\n            sceneId: toolResult.scene?.id,\n            sceneName: toolResult.scene?.name\n        });\n        // 8. Update assistant message status after execution\n        if (assistantMessageId && toolResult.success) {\n            await _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.db.update(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.messages).set({\n                status: 'success',\n                updatedAt: new Date()\n            }).where((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.eq)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.messages.id, assistantMessageId));\n        }\n        // 9. Return universal response\n        if (!toolResult.scene) {\n            return response.error(_lib_types_api_universal__WEBPACK_IMPORTED_MODULE_8__.ErrorCode.INTERNAL_ERROR, \"Tool execution succeeded but no scene was created\", 'scene.create', 'scene');\n        }\n        // Scene is already a proper SceneEntity from the database\n        // Determine the correct operation based on the tool used\n        const operation = decision.toolName ? _lib_types_ai_brain_types__WEBPACK_IMPORTED_MODULE_5__.TOOL_OPERATION_MAP[decision.toolName] : 'scene.create';\n        const successResponse = response.success(toolResult.scene, operation, 'scene', [\n            toolResult.scene.id\n        ]);\n        // Add context to the response\n        return {\n            ...successResponse,\n            context: {\n                reasoning: decision.reasoning,\n                chatResponse: decision.chatResponse\n            }\n        };\n    } catch (error) {\n        console.error(`[${response.getRequestId()}] Scene generation error:`, error);\n        // If we have an assistant message that was pending, mark it as failed\n        if (input.assistantMessageId) {\n            try {\n                await _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.db.update(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.messages).set({\n                    status: 'error',\n                    updatedAt: new Date()\n                }).where((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.eq)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.messages.id, input.assistantMessageId));\n            } catch (updateError) {\n                console.error(`[${response.getRequestId()}] Failed to update message status:`, updateError);\n            }\n        }\n        const errorCode = (0,_lib_api_response_helpers__WEBPACK_IMPORTED_MODULE_7__.getErrorCode)(error);\n        const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred';\n        return response.error(errorCode, errorMessage, 'scene.create', 'scene');\n    }\n});\n/**\n * SCENE REMOVAL with Universal Response\n */ const removeScene = _server_api_trpc__WEBPACK_IMPORTED_MODULE_0__.protectedProcedure.input(zod__WEBPACK_IMPORTED_MODULE_9__.z.object({\n    projectId: zod__WEBPACK_IMPORTED_MODULE_9__.z.string(),\n    sceneId: zod__WEBPACK_IMPORTED_MODULE_9__.z.string()\n})).mutation(async ({ input, ctx })=>{\n    const response = new _lib_api_response_helpers__WEBPACK_IMPORTED_MODULE_7__.ResponseBuilder();\n    const { projectId, sceneId } = input;\n    const userId = ctx.session.user.id;\n    console.log(`[${response.getRequestId()}] Starting scene removal`, {\n        projectId,\n        sceneId\n    });\n    try {\n        // 1. Verify project ownership and scene existence\n        const scene = await _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.db.query.scenes.findFirst({\n            where: (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.eq)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.scenes.id, sceneId),\n            with: {\n                project: true\n            }\n        });\n        if (!scene || scene.project.userId !== userId) {\n            return response.error(_lib_types_api_universal__WEBPACK_IMPORTED_MODULE_8__.ErrorCode.NOT_FOUND, \"Scene not found or access denied\", 'scene.delete', 'scene');\n        }\n        // 2. Delete the scene\n        await _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.db.delete(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.scenes).where((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.eq)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.scenes.id, sceneId));\n        console.log(`[${response.getRequestId()}] Scene deleted successfully`);\n        // 3. Return success response\n        return response.success({\n            deletedId: sceneId\n        }, 'scene.delete', 'scene', [\n            sceneId\n        ]);\n    } catch (error) {\n        console.error(`[${response.getRequestId()}] Scene removal error:`, error);\n        const errorCode = (0,_lib_api_response_helpers__WEBPACK_IMPORTED_MODULE_7__.getErrorCode)(error);\n        const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred';\n        return response.error(errorCode, errorMessage, 'scene.delete', 'scene');\n    }\n});\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/server/api/routers/generation/scene-operations.ts\n");

/***/ }),

/***/ "(rsc)/./src/server/api/routers/generation/template-operations.ts":
/*!******************************************************************!*\
  !*** ./src/server/api/routers/generation/template-operations.ts ***!
  \******************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addTemplate: () => (/* binding */ addTemplate)\n/* harmony export */ });\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! zod */ \"(rsc)/../../node_modules/zod/lib/index.mjs\");\n/* harmony import */ var _server_api_trpc__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ~/server/api/trpc */ \"(rsc)/./src/server/api/trpc.ts\");\n/* harmony import */ var _bazaar_database__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @bazaar/database */ \"(rsc)/../../packages/database/index.ts\");\n/* harmony import */ var drizzle_orm__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! drizzle-orm */ \"drizzle-orm\");\n/* harmony import */ var _server_services_data_message_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ~/server/services/data/message.service */ \"(rsc)/./src/server/services/data/message.service.ts\");\n/* harmony import */ var _lib_api_response_helpers__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ~/lib/api/response-helpers */ \"(rsc)/./src/lib/api/response-helpers.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_server_api_trpc__WEBPACK_IMPORTED_MODULE_0__, _bazaar_database__WEBPACK_IMPORTED_MODULE_1__, drizzle_orm__WEBPACK_IMPORTED_MODULE_2__, _server_services_data_message_service__WEBPACK_IMPORTED_MODULE_3__]);\n([_server_api_trpc__WEBPACK_IMPORTED_MODULE_0__, _bazaar_database__WEBPACK_IMPORTED_MODULE_1__, drizzle_orm__WEBPACK_IMPORTED_MODULE_2__, _server_services_data_message_service__WEBPACK_IMPORTED_MODULE_3__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n\n\n\n\n\n/**\n * ADD TEMPLATE - Add a pre-made template as a new scene\n */ const addTemplate = _server_api_trpc__WEBPACK_IMPORTED_MODULE_0__.protectedProcedure.input(zod__WEBPACK_IMPORTED_MODULE_5__.z.object({\n    projectId: zod__WEBPACK_IMPORTED_MODULE_5__.z.string(),\n    templateId: zod__WEBPACK_IMPORTED_MODULE_5__.z.string(),\n    templateName: zod__WEBPACK_IMPORTED_MODULE_5__.z.string(),\n    templateCode: zod__WEBPACK_IMPORTED_MODULE_5__.z.string(),\n    templateDuration: zod__WEBPACK_IMPORTED_MODULE_5__.z.number()\n})).mutation(async ({ input, ctx })=>{\n    const response = new _lib_api_response_helpers__WEBPACK_IMPORTED_MODULE_4__.ResponseBuilder();\n    const { projectId, templateId, templateName, templateCode, templateDuration } = input;\n    const userId = ctx.session.user.id;\n    console.log(`[${response.getRequestId()}] Adding template`, {\n        projectId,\n        templateId,\n        templateName\n    });\n    try {\n        // 1. Verify project ownership\n        const project = await _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.db.query.projects.findFirst({\n            where: (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.and)((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.eq)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects.id, projectId), (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.eq)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects.userId, userId))\n        });\n        if (!project) {\n            return {\n                success: false,\n                message: \"Project not found or access denied\"\n            };\n        }\n        // 2. Get current scene count for order\n        const existingScenes = await _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.db.query.scenes.findMany({\n            where: (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.eq)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.scenes.projectId, projectId)\n        });\n        const sceneOrder = existingScenes.length;\n        // 3. Generate a unique scene name\n        const sceneName = `${templateName}-${Date.now().toString(36)}`;\n        // 4. Save template as a new scene\n        console.log(`[${response.getRequestId()}] Saving template to database`, {\n            name: sceneName,\n            order: sceneOrder,\n            duration: templateDuration\n        });\n        const [newScene] = await _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.db.insert(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.scenes).values({\n            projectId,\n            name: sceneName,\n            tsxCode: templateCode,\n            duration: templateDuration,\n            order: sceneOrder,\n            props: {},\n            layoutJson: null\n        }).returning();\n        if (!newScene) {\n            return {\n                success: false,\n                message: \"Failed to save template to database\"\n            };\n        }\n        console.log(`[${response.getRequestId()}] Template saved successfully`, {\n            sceneId: newScene.id,\n            name: newScene.name\n        });\n        // 5. Clear welcome flag if this is the first scene\n        if (project.isWelcome && existingScenes.length === 0) {\n            await _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.db.update(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects).set({\n                isWelcome: false\n            }).where((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.eq)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects.id, projectId));\n        }\n        // 6. Add chat message for context\n        await _server_services_data_message_service__WEBPACK_IMPORTED_MODULE_3__.messageService.createMessage({\n            projectId,\n            content: `Added template: ${templateName}`,\n            role: \"assistant\"\n        });\n        return {\n            success: true,\n            message: `Added ${templateName} template`,\n            scene: newScene\n        };\n    } catch (error) {\n        console.error(`[${response.getRequestId()}] Template addition error:`, error);\n        return {\n            success: false,\n            message: error instanceof Error ? error.message : 'Failed to add template'\n        };\n    }\n});\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/server/api/routers/generation/template-operations.ts\n");

/***/ }),

/***/ "(rsc)/./src/server/api/routers/project.ts":
/*!*******************************************!*\
  !*** ./src/server/api/routers/project.ts ***!
  \*******************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   projectRouter: () => (/* binding */ projectRouter)\n/* harmony export */ });\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! zod */ \"(rsc)/../../node_modules/zod/lib/index.mjs\");\n/* harmony import */ var _server_api_trpc__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ~/server/api/trpc */ \"(rsc)/./src/server/api/trpc.ts\");\n/* harmony import */ var _bazaar_database__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @bazaar/database */ \"(rsc)/../../packages/database/index.ts\");\n/* harmony import */ var drizzle_orm__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! drizzle-orm */ \"drizzle-orm\");\n/* harmony import */ var _trpc_server__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @trpc/server */ \"(rsc)/../../node_modules/@trpc/server/dist/index.mjs\");\n/* harmony import */ var _lib_types_video_remotion_constants__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ~/lib/types/video/remotion-constants */ \"(rsc)/./src/lib/types/video/remotion-constants.ts\");\n/* harmony import */ var _lib_types_shared_json_patch__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ~/lib/types/shared/json-patch */ \"(rsc)/./src/lib/types/shared/json-patch.ts\");\n/* harmony import */ var fast_json_patch__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! fast-json-patch */ \"(rsc)/../../node_modules/fast-json-patch/lib/duplex.js\");\n/* harmony import */ var _lib_utils_nameGenerator__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ~/lib/utils/nameGenerator */ \"(rsc)/./src/lib/utils/nameGenerator.ts\");\n/* harmony import */ var _server_services_ai_titleGenerator_service__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ~/server/services/ai/titleGenerator.service */ \"(rsc)/./src/server/services/ai/titleGenerator.service.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_server_api_trpc__WEBPACK_IMPORTED_MODULE_0__, _bazaar_database__WEBPACK_IMPORTED_MODULE_1__, drizzle_orm__WEBPACK_IMPORTED_MODULE_2__]);\n([_server_api_trpc__WEBPACK_IMPORTED_MODULE_0__, _bazaar_database__WEBPACK_IMPORTED_MODULE_1__, drizzle_orm__WEBPACK_IMPORTED_MODULE_2__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n// src/server/api/routers/project.ts\n\n\n\n\n\n\n\n\n\n\n\nconst projectRouter = (0,_server_api_trpc__WEBPACK_IMPORTED_MODULE_0__.createTRPCRouter)({\n    getById: _server_api_trpc__WEBPACK_IMPORTED_MODULE_0__.protectedProcedure.input(zod__WEBPACK_IMPORTED_MODULE_9__.z.object({\n        id: zod__WEBPACK_IMPORTED_MODULE_9__.z.string().uuid()\n    })).query(async ({ ctx, input })=>{\n        const [project] = await ctx.db.select().from(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects).where((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.eq)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects.id, input.id));\n        if (!project) {\n            throw new _trpc_server__WEBPACK_IMPORTED_MODULE_3__.TRPCError({\n                code: \"NOT_FOUND\",\n                message: \"Project not found\"\n            });\n        }\n        // Ensure the user has access to this project\n        if (project.userId !== ctx.session.user.id) {\n            throw new _trpc_server__WEBPACK_IMPORTED_MODULE_3__.TRPCError({\n                code: \"FORBIDDEN\",\n                message: \"You don't have access to this project\"\n            });\n        }\n        return project;\n    }),\n    list: _server_api_trpc__WEBPACK_IMPORTED_MODULE_0__.protectedProcedure.query(async ({ ctx })=>{\n        // Fetch all projects for the current user, sorted by most recently updated\n        const userProjects = await ctx.db.select().from(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects).where((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.eq)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects.userId, ctx.session.user.id)).orderBy((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.desc)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects.updatedAt));\n        return userProjects;\n    }),\n    create: _server_api_trpc__WEBPACK_IMPORTED_MODULE_0__.protectedProcedure.input(zod__WEBPACK_IMPORTED_MODULE_9__.z.object({\n        initialMessage: zod__WEBPACK_IMPORTED_MODULE_9__.z.string().min(1).max(2000).optional()\n    }).optional()).mutation(async ({ ctx, input })=>{\n        try {\n            // Generate title based on initialMessage if available\n            console.log('[project.create] Mutation called. Input:', JSON.stringify(input));\n            let title = \"Untitled Video\";\n            if (input?.initialMessage) {\n                try {\n                    // Use AI to generate a title from the initialMessage\n                    const result = await (0,_server_services_ai_titleGenerator_service__WEBPACK_IMPORTED_MODULE_8__.generateTitle)({\n                        prompt: input.initialMessage,\n                        contextId: \"project-create\"\n                    });\n                    title = result.title || \"Untitled Video\";\n                } catch (titleError) {\n                    console.error(\"Error generating AI title:\", titleError);\n                // Fall back to default naming scheme on error\n                }\n            }\n            // If AI title generation failed or no initialMessage was provided,\n            // use the existing incremental naming scheme\n            if (title === \"Untitled Video\" || title === \"New Project\") {\n                // Get a list of all \"Untitled Video\" projects with their numbers\n                const userProjects = await (0,_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.executeWithRetry)(()=>ctx.db.select({\n                        title: _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects.title\n                    }).from(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects).where((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.and)((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.eq)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects.userId, ctx.session?.user?.id || 'system'), (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.like)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects.title, 'Untitled Video%'))));\n                // Find the highest number used in \"Untitled Video X\" titles\n                let highestNumber = 0;\n                for (const project of userProjects){\n                    const match = /^Untitled Video (\\d+)$/.exec(project.title);\n                    if (match?.[1]) {\n                        const num = parseInt(match[1], 10);\n                        if (!isNaN(num) && num > highestNumber) {\n                            highestNumber = num;\n                        }\n                    }\n                }\n                // Generate a unique title with the next available number\n                const nextNumber = highestNumber + 1;\n                title = userProjects.length === 0 ? \"Untitled Video\" : `Untitled Video ${nextNumber}`;\n            }\n            // Create a new project for the logged-in user with returning clause\n            // Use executeWithRetry to handle potential database connection issues\n            const inserted = await (0,_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.executeWithRetry)(()=>ctx.db.insert(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects).values({\n                    userId: ctx.session?.user?.id || 'system',\n                    title,\n                    props: (0,_lib_types_video_remotion_constants__WEBPACK_IMPORTED_MODULE_4__.createDefaultProjectProps)()\n                }).returning());\n            const insertResult = inserted[0];\n            if (!insertResult) {\n                throw new _trpc_server__WEBPACK_IMPORTED_MODULE_3__.TRPCError({\n                    code: \"INTERNAL_SERVER_ERROR\",\n                    message: \"Failed to create project\"\n                });\n            }\n            // NO WELCOME MESSAGE CREATION - Let UI show the nice default instead\n            // TODO: Initial message processing now handled via generation router\n            // Legacy processUserMessageInProject removed during cleanup\n            return {\n                projectId: insertResult.id\n            };\n        } catch (error) {\n            console.error(\"Error creating project:\", error);\n            throw new _trpc_server__WEBPACK_IMPORTED_MODULE_3__.TRPCError({\n                code: \"INTERNAL_SERVER_ERROR\",\n                message: \"Failed to create project\",\n                cause: error\n            });\n        }\n    }),\n    rename: _server_api_trpc__WEBPACK_IMPORTED_MODULE_0__.protectedProcedure.input(zod__WEBPACK_IMPORTED_MODULE_9__.z.object({\n        id: zod__WEBPACK_IMPORTED_MODULE_9__.z.string().uuid(),\n        title: zod__WEBPACK_IMPORTED_MODULE_9__.z.string().min(1).max(255)\n    })).mutation(async ({ ctx, input })=>{\n        try {\n            // First check if the project exists and belongs to the user\n            const [project] = await ctx.db.select().from(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects).where((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.eq)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects.id, input.id));\n            if (!project) {\n                throw new _trpc_server__WEBPACK_IMPORTED_MODULE_3__.TRPCError({\n                    code: \"NOT_FOUND\",\n                    message: \"Project not found\"\n                });\n            }\n            // Ensure the user has access to this project\n            if (project.userId !== ctx.session.user.id) {\n                throw new _trpc_server__WEBPACK_IMPORTED_MODULE_3__.TRPCError({\n                    code: \"FORBIDDEN\",\n                    message: \"You don't have access to this project\"\n                });\n            }\n            // Check if another project with this title already exists for this user\n            const [existingProject] = await ctx.db.select().from(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects).where((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.and)((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.eq)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects.userId, ctx.session.user.id), (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.eq)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects.title, input.title), (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.ne)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects.id, input.id) // Not the current project\n            ));\n            if (existingProject) {\n                throw new _trpc_server__WEBPACK_IMPORTED_MODULE_3__.TRPCError({\n                    code: \"CONFLICT\",\n                    message: \"A project with this title already exists\"\n                });\n            }\n            // Update the project title\n            const updated = await ctx.db.update(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects).set({\n                title: input.title,\n                updatedAt: new Date()\n            }).where((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.eq)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects.id, input.id)).returning();\n            return updated[0];\n        } catch (error) {\n            console.error(\"Error renaming project:\", error);\n            if (error instanceof _trpc_server__WEBPACK_IMPORTED_MODULE_3__.TRPCError) {\n                throw error; // Re-throw TRPC errors\n            }\n            throw new _trpc_server__WEBPACK_IMPORTED_MODULE_3__.TRPCError({\n                code: \"INTERNAL_SERVER_ERROR\",\n                message: \"Failed to rename project\"\n            });\n        }\n    }),\n    patch: _server_api_trpc__WEBPACK_IMPORTED_MODULE_0__.protectedProcedure.input(zod__WEBPACK_IMPORTED_MODULE_9__.z.object({\n        projectId: zod__WEBPACK_IMPORTED_MODULE_9__.z.string().uuid(),\n        patch: _lib_types_shared_json_patch__WEBPACK_IMPORTED_MODULE_5__.jsonPatchSchema\n    })).mutation(async ({ ctx, input })=>{\n        try {\n            // First check if the project exists and belongs to the user\n            const [project] = await ctx.db.select().from(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects).where((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.eq)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects.id, input.projectId));\n            if (!project) {\n                throw new _trpc_server__WEBPACK_IMPORTED_MODULE_3__.TRPCError({\n                    code: \"NOT_FOUND\",\n                    message: \"Project not found\"\n                });\n            }\n            // Ensure the user has access to this project\n            if (project.userId !== ctx.session.user.id) {\n                throw new _trpc_server__WEBPACK_IMPORTED_MODULE_3__.TRPCError({\n                    code: \"FORBIDDEN\",\n                    message: \"You don't have access to this project\"\n                });\n            }\n            // Apply the JSON patch\n            const patchOperations = input.patch;\n            const nextProps = (0,fast_json_patch__WEBPACK_IMPORTED_MODULE_6__.applyPatch)(structuredClone(project.props), patchOperations, true, false).newDocument;\n            // Save the new props and the patch\n            const updated = await ctx.db.update(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects).set({\n                props: nextProps,\n                updatedAt: new Date()\n            }).where((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.eq)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects.id, input.projectId)).returning();\n            // Save the patch for history\n            await ctx.db.insert(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.patches).values({\n                projectId: input.projectId,\n                patch: input.patch\n            });\n            return updated[0];\n        } catch (error) {\n            console.error(\"Error patching project:\", error);\n            throw new _trpc_server__WEBPACK_IMPORTED_MODULE_3__.TRPCError({\n                code: \"INTERNAL_SERVER_ERROR\",\n                message: error instanceof Error ? error.message : \"Failed to patch project\"\n            });\n        }\n    }),\n    /**\n   * Fetches all scene plans for a given project.\n   */ listScenePlans: _server_api_trpc__WEBPACK_IMPORTED_MODULE_0__.protectedProcedure.input(zod__WEBPACK_IMPORTED_MODULE_9__.z.object({\n        projectId: zod__WEBPACK_IMPORTED_MODULE_9__.z.string().uuid()\n    })).query(async ({ ctx, input })=>{\n        // First, verify project ownership (similar to getById)\n        const project = await ctx.db.query.projects.findFirst({\n            columns: {\n                id: true,\n                userId: true\n            },\n            where: (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.eq)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects.id, input.projectId)\n        });\n        if (!project) {\n            throw new _trpc_server__WEBPACK_IMPORTED_MODULE_3__.TRPCError({\n                code: \"NOT_FOUND\",\n                message: \"Project not found\"\n            });\n        }\n        if (project.userId !== ctx.session.user.id) {\n            throw new _trpc_server__WEBPACK_IMPORTED_MODULE_3__.TRPCError({\n                code: \"FORBIDDEN\",\n                message: \"You don't have access to this project's scene plans.\"\n            });\n        }\n        // Fetch scene plans for the project, ordered by creation or a specific order if available\n        const plans = await ctx.db.query.scenePlans.findMany({\n            where: (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.eq)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.scenePlans.projectId, input.projectId),\n            orderBy: [\n                (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.desc)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.scenePlans.createdAt)\n            ]\n        });\n        return plans;\n    }),\n    delete: _server_api_trpc__WEBPACK_IMPORTED_MODULE_0__.protectedProcedure.input(zod__WEBPACK_IMPORTED_MODULE_9__.z.object({\n        id: zod__WEBPACK_IMPORTED_MODULE_9__.z.string().uuid()\n    })).mutation(async ({ ctx, input })=>{\n        try {\n            // First check if the project exists and belongs to the user\n            const [project] = await ctx.db.select().from(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects).where((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.eq)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects.id, input.id));\n            if (!project) {\n                throw new _trpc_server__WEBPACK_IMPORTED_MODULE_3__.TRPCError({\n                    code: \"NOT_FOUND\",\n                    message: \"Project not found\"\n                });\n            }\n            // Ensure the user has access to this project\n            if (project.userId !== ctx.session.user.id) {\n                throw new _trpc_server__WEBPACK_IMPORTED_MODULE_3__.TRPCError({\n                    code: \"FORBIDDEN\",\n                    message: \"You don't have access to this project\"\n                });\n            }\n            // Delete the project (this will cascade delete related data due to foreign key constraints)\n            const deleted = await ctx.db.delete(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects).where((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.eq)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects.id, input.id)).returning();\n            if (!deleted[0]) {\n                throw new _trpc_server__WEBPACK_IMPORTED_MODULE_3__.TRPCError({\n                    code: \"INTERNAL_SERVER_ERROR\",\n                    message: \"Failed to delete project\"\n                });\n            }\n            return {\n                success: true,\n                deletedProject: deleted[0]\n            };\n        } catch (error) {\n            console.error(\"Error deleting project:\", error);\n            if (error instanceof _trpc_server__WEBPACK_IMPORTED_MODULE_3__.TRPCError) {\n                throw error; // Re-throw TRPC errors\n            }\n            throw new _trpc_server__WEBPACK_IMPORTED_MODULE_3__.TRPCError({\n                code: \"INTERNAL_SERVER_ERROR\",\n                message: \"Failed to delete project\"\n            });\n        }\n    }),\n    // New procedure for generating AI titles\n    generateAITitle: _server_api_trpc__WEBPACK_IMPORTED_MODULE_0__.protectedProcedure.input(zod__WEBPACK_IMPORTED_MODULE_9__.z.object({\n        prompt: zod__WEBPACK_IMPORTED_MODULE_9__.z.string(),\n        contextId: zod__WEBPACK_IMPORTED_MODULE_9__.z.string().optional()\n    })).mutation(async ({ input })=>{\n        try {\n            // Call the AI title generator service\n            const result = await (0,_server_services_ai_titleGenerator_service__WEBPACK_IMPORTED_MODULE_8__.generateTitle)({\n                prompt: input.prompt,\n                contextId: input.contextId || \"api-call\"\n            });\n            // Return the generated title\n            return {\n                title: result.title || (0,_lib_utils_nameGenerator__WEBPACK_IMPORTED_MODULE_7__.generateNameFromPrompt)(input.prompt),\n                reasoning: result.reasoning\n            };\n        } catch (error) {\n            console.error(\"Error generating AI project title:\", error);\n            // Fall back to the regex-based approach on error\n            return {\n                title: (0,_lib_utils_nameGenerator__WEBPACK_IMPORTED_MODULE_7__.generateNameFromPrompt)(input.prompt),\n                error: error instanceof Error ? error.message : \"Unknown error\"\n            };\n        }\n    })\n});\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/server/api/routers/project.ts\n");

/***/ }),

/***/ "(rsc)/./src/server/api/routers/render.ts":
/*!******************************************!*\
  !*** ./src/server/api/routers/render.ts ***!
  \******************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   renderRouter: () => (/* binding */ renderRouter)\n/* harmony export */ });\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! zod */ \"(rsc)/../../node_modules/zod/lib/index.mjs\");\n/* harmony import */ var _server_api_trpc__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ~/server/api/trpc */ \"(rsc)/./src/server/api/trpc.ts\");\n/* harmony import */ var _bazaar_database__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @bazaar/database */ \"(rsc)/../../packages/database/index.ts\");\n/* harmony import */ var drizzle_orm__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! drizzle-orm */ \"drizzle-orm\");\n/* harmony import */ var _trpc_server__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @trpc/server */ \"(rsc)/../../node_modules/@trpc/server/dist/index.mjs\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_server_api_trpc__WEBPACK_IMPORTED_MODULE_0__, _bazaar_database__WEBPACK_IMPORTED_MODULE_1__, drizzle_orm__WEBPACK_IMPORTED_MODULE_2__]);\n([_server_api_trpc__WEBPACK_IMPORTED_MODULE_0__, _bazaar_database__WEBPACK_IMPORTED_MODULE_1__, drizzle_orm__WEBPACK_IMPORTED_MODULE_2__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n\n\n\nconst renderRouter = (0,_server_api_trpc__WEBPACK_IMPORTED_MODULE_0__.createTRPCRouter)({\n    // Basic start procedure to initiate rendering\n    start: _server_api_trpc__WEBPACK_IMPORTED_MODULE_0__.protectedProcedure.input(zod__WEBPACK_IMPORTED_MODULE_4__.z.object({\n        projectId: zod__WEBPACK_IMPORTED_MODULE_4__.z.string().uuid()\n    })).mutation(async ({ ctx, input })=>{\n        // First check if the project exists and belongs to the user\n        const [project] = await ctx.db.select().from(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects).where((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_2__.eq)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.projects.id, input.projectId));\n        if (!project) {\n            throw new _trpc_server__WEBPACK_IMPORTED_MODULE_3__.TRPCError({\n                code: \"NOT_FOUND\",\n                message: \"Project not found\"\n            });\n        }\n        // Ensure the user has access to this project\n        if (project.userId !== ctx.session.user.id) {\n            throw new _trpc_server__WEBPACK_IMPORTED_MODULE_3__.TRPCError({\n                code: \"FORBIDDEN\",\n                message: \"You don't have access to this project\"\n            });\n        }\n        // For now, just return success - this will be replaced with actual Remotion Lambda rendering logic\n        return {\n            success: true,\n            message: \"Render started successfully\"\n        };\n    })\n});\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvc2VydmVyL2FwaS9yb3V0ZXJzL3JlbmRlci50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBd0I7QUFDaUQ7QUFDN0I7QUFDWDtBQUNRO0FBRWxDLE1BQU1NLGVBQWVMLGtFQUFnQkEsQ0FBQztJQUMzQyw4Q0FBOEM7SUFDOUNNLE9BQU9MLGdFQUFrQkEsQ0FDdEJNLEtBQUssQ0FBQ1Isa0NBQUNBLENBQUNTLE1BQU0sQ0FBQztRQUNkQyxXQUFXVixrQ0FBQ0EsQ0FBQ1csTUFBTSxHQUFHQyxJQUFJO0lBQzVCLElBQ0NDLFFBQVEsQ0FBQyxPQUFPLEVBQUVDLEdBQUcsRUFBRU4sS0FBSyxFQUFFO1FBQzdCLDREQUE0RDtRQUM1RCxNQUFNLENBQUNPLFFBQVEsR0FBRyxNQUFNRCxJQUFJRSxFQUFFLENBQzNCQyxNQUFNLEdBQ05DLElBQUksQ0FBQ2Ysc0RBQVFBLEVBQ2JnQixLQUFLLENBQUNmLCtDQUFFQSxDQUFDRCxzREFBUUEsQ0FBQ2lCLEVBQUUsRUFBRVosTUFBTUUsU0FBUztRQUV4QyxJQUFJLENBQUNLLFNBQVM7WUFDWixNQUFNLElBQUlWLG1EQUFTQSxDQUFDO2dCQUNsQmdCLE1BQU07Z0JBQ05DLFNBQVM7WUFDWDtRQUNGO1FBRUEsNkNBQTZDO1FBQzdDLElBQUlQLFFBQVFRLE1BQU0sS0FBS1QsSUFBSVUsT0FBTyxDQUFDQyxJQUFJLENBQUNMLEVBQUUsRUFBRTtZQUMxQyxNQUFNLElBQUlmLG1EQUFTQSxDQUFDO2dCQUNsQmdCLE1BQU07Z0JBQ05DLFNBQVM7WUFDWDtRQUNGO1FBRUEsbUdBQW1HO1FBQ25HLE9BQU87WUFDTEksU0FBUztZQUNUSixTQUFTO1FBRVg7SUFDRjtBQUNKLEdBQUciLCJzb3VyY2VzIjpbIi9Vc2Vycy9tYXJrdXNob2duZS9Eb2N1bWVudHMvQVBQUy9iYXphYXItdmlkL2JhemFhci12aWQvYXBwcy9tYWluL3NyYy9zZXJ2ZXIvYXBpL3JvdXRlcnMvcmVuZGVyLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHogfSBmcm9tIFwiem9kXCI7XG5pbXBvcnQgeyBjcmVhdGVUUlBDUm91dGVyLCBwcm90ZWN0ZWRQcm9jZWR1cmUgfSBmcm9tIFwifi9zZXJ2ZXIvYXBpL3RycGNcIjtcbmltcG9ydCB7IHByb2plY3RzIH0gZnJvbSBcIkBiYXphYXIvZGF0YWJhc2VcIjtcbmltcG9ydCB7IGVxIH0gZnJvbSBcImRyaXp6bGUtb3JtXCI7XG5pbXBvcnQgeyBUUlBDRXJyb3IgfSBmcm9tIFwiQHRycGMvc2VydmVyXCI7XG5cbmV4cG9ydCBjb25zdCByZW5kZXJSb3V0ZXIgPSBjcmVhdGVUUlBDUm91dGVyKHtcbiAgLy8gQmFzaWMgc3RhcnQgcHJvY2VkdXJlIHRvIGluaXRpYXRlIHJlbmRlcmluZ1xuICBzdGFydDogcHJvdGVjdGVkUHJvY2VkdXJlXG4gICAgLmlucHV0KHoub2JqZWN0KHtcbiAgICAgIHByb2plY3RJZDogei5zdHJpbmcoKS51dWlkKCksXG4gICAgfSkpXG4gICAgLm11dGF0aW9uKGFzeW5jICh7IGN0eCwgaW5wdXQgfSkgPT4ge1xuICAgICAgLy8gRmlyc3QgY2hlY2sgaWYgdGhlIHByb2plY3QgZXhpc3RzIGFuZCBiZWxvbmdzIHRvIHRoZSB1c2VyXG4gICAgICBjb25zdCBbcHJvamVjdF0gPSBhd2FpdCBjdHguZGJcbiAgICAgICAgLnNlbGVjdCgpXG4gICAgICAgIC5mcm9tKHByb2plY3RzKVxuICAgICAgICAud2hlcmUoZXEocHJvamVjdHMuaWQsIGlucHV0LnByb2plY3RJZCkpO1xuICAgICAgXG4gICAgICBpZiAoIXByb2plY3QpIHtcbiAgICAgICAgdGhyb3cgbmV3IFRSUENFcnJvcih7XG4gICAgICAgICAgY29kZTogXCJOT1RfRk9VTkRcIixcbiAgICAgICAgICBtZXNzYWdlOiBcIlByb2plY3Qgbm90IGZvdW5kXCIsXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgXG4gICAgICAvLyBFbnN1cmUgdGhlIHVzZXIgaGFzIGFjY2VzcyB0byB0aGlzIHByb2plY3RcbiAgICAgIGlmIChwcm9qZWN0LnVzZXJJZCAhPT0gY3R4LnNlc3Npb24udXNlci5pZCkge1xuICAgICAgICB0aHJvdyBuZXcgVFJQQ0Vycm9yKHtcbiAgICAgICAgICBjb2RlOiBcIkZPUkJJRERFTlwiLFxuICAgICAgICAgIG1lc3NhZ2U6IFwiWW91IGRvbid0IGhhdmUgYWNjZXNzIHRvIHRoaXMgcHJvamVjdFwiLFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgLy8gRm9yIG5vdywganVzdCByZXR1cm4gc3VjY2VzcyAtIHRoaXMgd2lsbCBiZSByZXBsYWNlZCB3aXRoIGFjdHVhbCBSZW1vdGlvbiBMYW1iZGEgcmVuZGVyaW5nIGxvZ2ljXG4gICAgICByZXR1cm4ge1xuICAgICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgICBtZXNzYWdlOiBcIlJlbmRlciBzdGFydGVkIHN1Y2Nlc3NmdWxseVwiLFxuICAgICAgICAvLyBUaGlzIHdvdWxkIGluY2x1ZGUgdGhlIGpvYiBJRCwgc3RhdHVzIFVSTCwgZXRjLiBvbmNlIGltcGxlbWVudGVkXG4gICAgICB9O1xuICAgIH0pLFxufSk7ICJdLCJuYW1lcyI6WyJ6IiwiY3JlYXRlVFJQQ1JvdXRlciIsInByb3RlY3RlZFByb2NlZHVyZSIsInByb2plY3RzIiwiZXEiLCJUUlBDRXJyb3IiLCJyZW5kZXJSb3V0ZXIiLCJzdGFydCIsImlucHV0Iiwib2JqZWN0IiwicHJvamVjdElkIiwic3RyaW5nIiwidXVpZCIsIm11dGF0aW9uIiwiY3R4IiwicHJvamVjdCIsImRiIiwic2VsZWN0IiwiZnJvbSIsIndoZXJlIiwiaWQiLCJjb2RlIiwibWVzc2FnZSIsInVzZXJJZCIsInNlc3Npb24iLCJ1c2VyIiwic3VjY2VzcyJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./src/server/api/routers/render.ts\n");

/***/ }),

/***/ "(rsc)/./src/server/api/routers/scenes.ts":
/*!******************************************!*\
  !*** ./src/server/api/routers/scenes.ts ***!
  \******************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   scenesRouter: () => (/* binding */ scenesRouter)\n/* harmony export */ });\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! zod */ \"(rsc)/../../node_modules/zod/lib/index.mjs\");\n/* harmony import */ var _server_api_trpc__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ~/server/api/trpc */ \"(rsc)/./src/server/api/trpc.ts\");\n/* harmony import */ var drizzle_orm__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! drizzle-orm */ \"drizzle-orm\");\n/* harmony import */ var _bazaar_database__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @bazaar/database */ \"(rsc)/../../packages/database/index.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_server_api_trpc__WEBPACK_IMPORTED_MODULE_0__, drizzle_orm__WEBPACK_IMPORTED_MODULE_1__, _bazaar_database__WEBPACK_IMPORTED_MODULE_2__]);\n([_server_api_trpc__WEBPACK_IMPORTED_MODULE_0__, drizzle_orm__WEBPACK_IMPORTED_MODULE_1__, _bazaar_database__WEBPACK_IMPORTED_MODULE_2__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n//src/server/api/routers/scenes.ts\n\n\n\n\nconst scenesRouter = (0,_server_api_trpc__WEBPACK_IMPORTED_MODULE_0__.createTRPCRouter)({\n    updateSceneCode: _server_api_trpc__WEBPACK_IMPORTED_MODULE_0__.protectedProcedure.input(zod__WEBPACK_IMPORTED_MODULE_3__.z.object({\n        projectId: zod__WEBPACK_IMPORTED_MODULE_3__.z.string(),\n        sceneId: zod__WEBPACK_IMPORTED_MODULE_3__.z.string(),\n        code: zod__WEBPACK_IMPORTED_MODULE_3__.z.string()\n    })).mutation(async ({ ctx, input })=>{\n        console.log(`[scenes.updateSceneCode] Updating scene ${input.sceneId} in project ${input.projectId}`);\n        // Verify project ownership\n        const existingScene = await ctx.db.query.scenes.findFirst({\n            where: (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_1__.and)((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_1__.eq)(_bazaar_database__WEBPACK_IMPORTED_MODULE_2__.scenes.id, input.sceneId), (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_1__.eq)(_bazaar_database__WEBPACK_IMPORTED_MODULE_2__.scenes.projectId, input.projectId)),\n            with: {\n                project: true\n            }\n        });\n        if (!existingScene) {\n            throw new Error(\"Scene not found\");\n        }\n        if (existingScene.project.userId !== ctx.session.user.id) {\n            throw new Error(\"Unauthorized: You don't own this project\");\n        }\n        // Store the \"before\" code for tracking changes\n        const codeBefore = existingScene.tsxCode;\n        // Update scene code\n        const updatedScenes = await ctx.db.update(_bazaar_database__WEBPACK_IMPORTED_MODULE_2__.scenes).set({\n            tsxCode: input.code,\n            updatedAt: new Date()\n        }).where((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_1__.eq)(_bazaar_database__WEBPACK_IMPORTED_MODULE_2__.scenes.id, input.sceneId)).returning();\n        console.log(`[scenes.updateSceneCode] ✅ Scene code updated successfully`);\n        return {\n            success: true,\n            scene: updatedScenes[0]\n        };\n    })\n});\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvc2VydmVyL2FwaS9yb3V0ZXJzL3NjZW5lcy50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBLGtDQUFrQztBQUNWO0FBQ2lEO0FBQ25DO0FBQ3FCO0FBRXBELE1BQU1NLGVBQWVMLGtFQUFnQkEsQ0FBQztJQUMzQ00saUJBQWlCTCxnRUFBa0JBLENBQ2hDTSxLQUFLLENBQUNSLGtDQUFDQSxDQUFDUyxNQUFNLENBQUM7UUFDZEMsV0FBV1Ysa0NBQUNBLENBQUNXLE1BQU07UUFDbkJDLFNBQVNaLGtDQUFDQSxDQUFDVyxNQUFNO1FBQ2pCRSxNQUFNYixrQ0FBQ0EsQ0FBQ1csTUFBTTtJQUNoQixJQUNDRyxRQUFRLENBQUMsT0FBTyxFQUFFQyxHQUFHLEVBQUVQLEtBQUssRUFBRTtRQUM3QlEsUUFBUUMsR0FBRyxDQUFDLENBQUMsd0NBQXdDLEVBQUVULE1BQU1JLE9BQU8sQ0FBQyxZQUFZLEVBQUVKLE1BQU1FLFNBQVMsRUFBRTtRQUVwRywyQkFBMkI7UUFDM0IsTUFBTVEsZ0JBQWdCLE1BQU1ILElBQUlJLEVBQUUsQ0FBQ0MsS0FBSyxDQUFDZixNQUFNLENBQUNnQixTQUFTLENBQUM7WUFDeERDLE9BQU9sQixnREFBR0EsQ0FDUkQsK0NBQUVBLENBQUNFLG9EQUFNQSxDQUFDa0IsRUFBRSxFQUFFZixNQUFNSSxPQUFPLEdBQzNCVCwrQ0FBRUEsQ0FBQ0Usb0RBQU1BLENBQUNLLFNBQVMsRUFBRUYsTUFBTUUsU0FBUztZQUV0Q2MsTUFBTTtnQkFDSkMsU0FBUztZQUNYO1FBQ0Y7UUFFQSxJQUFJLENBQUNQLGVBQWU7WUFDbEIsTUFBTSxJQUFJUSxNQUFNO1FBQ2xCO1FBRUEsSUFBSVIsY0FBY08sT0FBTyxDQUFDRSxNQUFNLEtBQUtaLElBQUlhLE9BQU8sQ0FBQ0MsSUFBSSxDQUFDTixFQUFFLEVBQUU7WUFDeEQsTUFBTSxJQUFJRyxNQUFNO1FBQ2xCO1FBRUEsK0NBQStDO1FBQy9DLE1BQU1JLGFBQWFaLGNBQWNhLE9BQU87UUFFeEMsb0JBQW9CO1FBQ3BCLE1BQU1DLGdCQUFnQixNQUFNakIsSUFBSUksRUFBRSxDQUMvQmMsTUFBTSxDQUFDNUIsb0RBQU1BLEVBQ2I2QixHQUFHLENBQUM7WUFDSEgsU0FBU3ZCLE1BQU1LLElBQUk7WUFDbkJzQixXQUFXLElBQUlDO1FBQ2pCLEdBQ0NkLEtBQUssQ0FBQ25CLCtDQUFFQSxDQUFDRSxvREFBTUEsQ0FBQ2tCLEVBQUUsRUFBRWYsTUFBTUksT0FBTyxHQUNqQ3lCLFNBQVM7UUFJWnJCLFFBQVFDLEdBQUcsQ0FBQyxDQUFDLDBEQUEwRCxDQUFDO1FBRXhFLE9BQU87WUFDTHFCLFNBQVM7WUFDVEMsT0FBT1AsYUFBYSxDQUFDLEVBQUU7UUFDekI7SUFDRjtBQUNKLEdBQUciLCJzb3VyY2VzIjpbIi9Vc2Vycy9tYXJrdXNob2duZS9Eb2N1bWVudHMvQVBQUy9iYXphYXItdmlkL2JhemFhci12aWQvYXBwcy9tYWluL3NyYy9zZXJ2ZXIvYXBpL3JvdXRlcnMvc2NlbmVzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vc3JjL3NlcnZlci9hcGkvcm91dGVycy9zY2VuZXMudHNcbmltcG9ydCB7IHogfSBmcm9tIFwiem9kXCI7XG5pbXBvcnQgeyBjcmVhdGVUUlBDUm91dGVyLCBwcm90ZWN0ZWRQcm9jZWR1cmUgfSBmcm9tIFwifi9zZXJ2ZXIvYXBpL3RycGNcIjtcbmltcG9ydCB7IGVxLCBhbmQgfSBmcm9tIFwiZHJpenpsZS1vcm1cIjtcbmltcG9ydCB7IHNjZW5lcywgc2NlbmVJdGVyYXRpb25zIH0gZnJvbSBcIkBiYXphYXIvZGF0YWJhc2VcIjtcblxuZXhwb3J0IGNvbnN0IHNjZW5lc1JvdXRlciA9IGNyZWF0ZVRSUENSb3V0ZXIoe1xuICB1cGRhdGVTY2VuZUNvZGU6IHByb3RlY3RlZFByb2NlZHVyZVxuICAgIC5pbnB1dCh6Lm9iamVjdCh7XG4gICAgICBwcm9qZWN0SWQ6IHouc3RyaW5nKCksXG4gICAgICBzY2VuZUlkOiB6LnN0cmluZygpLFxuICAgICAgY29kZTogei5zdHJpbmcoKSxcbiAgICB9KSlcbiAgICAubXV0YXRpb24oYXN5bmMgKHsgY3R4LCBpbnB1dCB9KSA9PiB7XG4gICAgICBjb25zb2xlLmxvZyhgW3NjZW5lcy51cGRhdGVTY2VuZUNvZGVdIFVwZGF0aW5nIHNjZW5lICR7aW5wdXQuc2NlbmVJZH0gaW4gcHJvamVjdCAke2lucHV0LnByb2plY3RJZH1gKTtcbiAgICAgIFxuICAgICAgLy8gVmVyaWZ5IHByb2plY3Qgb3duZXJzaGlwXG4gICAgICBjb25zdCBleGlzdGluZ1NjZW5lID0gYXdhaXQgY3R4LmRiLnF1ZXJ5LnNjZW5lcy5maW5kRmlyc3Qoe1xuICAgICAgICB3aGVyZTogYW5kKFxuICAgICAgICAgIGVxKHNjZW5lcy5pZCwgaW5wdXQuc2NlbmVJZCksXG4gICAgICAgICAgZXEoc2NlbmVzLnByb2plY3RJZCwgaW5wdXQucHJvamVjdElkKVxuICAgICAgICApLFxuICAgICAgICB3aXRoOiB7XG4gICAgICAgICAgcHJvamVjdDogdHJ1ZVxuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgaWYgKCFleGlzdGluZ1NjZW5lKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlNjZW5lIG5vdCBmb3VuZFwiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGV4aXN0aW5nU2NlbmUucHJvamVjdC51c2VySWQgIT09IGN0eC5zZXNzaW9uLnVzZXIuaWQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVW5hdXRob3JpemVkOiBZb3UgZG9uJ3Qgb3duIHRoaXMgcHJvamVjdFwiKTtcbiAgICAgIH1cblxuICAgICAgLy8gU3RvcmUgdGhlIFwiYmVmb3JlXCIgY29kZSBmb3IgdHJhY2tpbmcgY2hhbmdlc1xuICAgICAgY29uc3QgY29kZUJlZm9yZSA9IGV4aXN0aW5nU2NlbmUudHN4Q29kZTtcblxuICAgICAgLy8gVXBkYXRlIHNjZW5lIGNvZGVcbiAgICAgIGNvbnN0IHVwZGF0ZWRTY2VuZXMgPSBhd2FpdCBjdHguZGJcbiAgICAgICAgLnVwZGF0ZShzY2VuZXMpXG4gICAgICAgIC5zZXQoe1xuICAgICAgICAgIHRzeENvZGU6IGlucHV0LmNvZGUsXG4gICAgICAgICAgdXBkYXRlZEF0OiBuZXcgRGF0ZSgpLFxuICAgICAgICB9KVxuICAgICAgICAud2hlcmUoZXEoc2NlbmVzLmlkLCBpbnB1dC5zY2VuZUlkKSlcbiAgICAgICAgLnJldHVybmluZygpO1xuXG5cblxuICAgICAgY29uc29sZS5sb2coYFtzY2VuZXMudXBkYXRlU2NlbmVDb2RlXSDinIUgU2NlbmUgY29kZSB1cGRhdGVkIHN1Y2Nlc3NmdWxseWApO1xuICAgICAgXG4gICAgICByZXR1cm4ge1xuICAgICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgICBzY2VuZTogdXBkYXRlZFNjZW5lc1swXVxuICAgICAgfTtcbiAgICB9KSxcbn0pO1xuIl0sIm5hbWVzIjpbInoiLCJjcmVhdGVUUlBDUm91dGVyIiwicHJvdGVjdGVkUHJvY2VkdXJlIiwiZXEiLCJhbmQiLCJzY2VuZXMiLCJzY2VuZXNSb3V0ZXIiLCJ1cGRhdGVTY2VuZUNvZGUiLCJpbnB1dCIsIm9iamVjdCIsInByb2plY3RJZCIsInN0cmluZyIsInNjZW5lSWQiLCJjb2RlIiwibXV0YXRpb24iLCJjdHgiLCJjb25zb2xlIiwibG9nIiwiZXhpc3RpbmdTY2VuZSIsImRiIiwicXVlcnkiLCJmaW5kRmlyc3QiLCJ3aGVyZSIsImlkIiwid2l0aCIsInByb2plY3QiLCJFcnJvciIsInVzZXJJZCIsInNlc3Npb24iLCJ1c2VyIiwiY29kZUJlZm9yZSIsInRzeENvZGUiLCJ1cGRhdGVkU2NlbmVzIiwidXBkYXRlIiwic2V0IiwidXBkYXRlZEF0IiwiRGF0ZSIsInJldHVybmluZyIsInN1Y2Nlc3MiLCJzY2VuZSJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./src/server/api/routers/scenes.ts\n");

/***/ }),

/***/ "(rsc)/./src/server/api/routers/share.ts":
/*!*****************************************!*\
  !*** ./src/server/api/routers/share.ts ***!
  \*****************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   shareRouter: () => (/* binding */ shareRouter)\n/* harmony export */ });\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! zod */ \"(rsc)/../../node_modules/zod/lib/index.mjs\");\n/* harmony import */ var drizzle_orm__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! drizzle-orm */ \"drizzle-orm\");\n/* harmony import */ var _server_api_trpc__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ~/server/api/trpc */ \"(rsc)/./src/server/api/trpc.ts\");\n/* harmony import */ var _bazaar_database__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @bazaar/database */ \"(rsc)/../../packages/database/index.ts\");\n/* harmony import */ var _trpc_server__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @trpc/server */ \"(rsc)/../../node_modules/@trpc/server/dist/index.mjs\");\n/* harmony import */ var _lib_utils_url__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ~/lib/utils/url */ \"(rsc)/./src/lib/utils/url.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([drizzle_orm__WEBPACK_IMPORTED_MODULE_0__, _server_api_trpc__WEBPACK_IMPORTED_MODULE_1__, _bazaar_database__WEBPACK_IMPORTED_MODULE_2__]);\n([drizzle_orm__WEBPACK_IMPORTED_MODULE_0__, _server_api_trpc__WEBPACK_IMPORTED_MODULE_1__, _bazaar_database__WEBPACK_IMPORTED_MODULE_2__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n//src/server/api/routers/share.ts\n\n\n\n\n\n\n\n\nconst shareRouter = (0,_server_api_trpc__WEBPACK_IMPORTED_MODULE_1__.createTRPCRouter)({\n    // Create a shared video link\n    createShare: _server_api_trpc__WEBPACK_IMPORTED_MODULE_1__.protectedProcedure.input(zod__WEBPACK_IMPORTED_MODULE_5__.z.object({\n        projectId: zod__WEBPACK_IMPORTED_MODULE_5__.z.string().uuid(),\n        title: zod__WEBPACK_IMPORTED_MODULE_5__.z.string().optional(),\n        description: zod__WEBPACK_IMPORTED_MODULE_5__.z.string().optional()\n    })).mutation(async ({ ctx, input })=>{\n        const { projectId, title, description } = input;\n        const userId = ctx.session.user.id;\n        const project = await _bazaar_database__WEBPACK_IMPORTED_MODULE_2__.db.query.projects.findFirst({\n            where: (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_0__.and)((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_0__.eq)(_bazaar_database__WEBPACK_IMPORTED_MODULE_2__.projects.id, projectId), (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_0__.eq)(_bazaar_database__WEBPACK_IMPORTED_MODULE_2__.projects.userId, userId))\n        });\n        if (!project) {\n            throw new _trpc_server__WEBPACK_IMPORTED_MODULE_3__.TRPCError({\n                code: \"NOT_FOUND\",\n                message: \"Project not found or you don't have permission to share it\"\n            });\n        }\n        const projectScenes = await _bazaar_database__WEBPACK_IMPORTED_MODULE_2__.db.query.scenes.findMany({\n            where: (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_0__.eq)(_bazaar_database__WEBPACK_IMPORTED_MODULE_2__.scenes.projectId, projectId)\n        });\n        if (projectScenes.length === 0) {\n            throw new _trpc_server__WEBPACK_IMPORTED_MODULE_3__.TRPCError({\n                code: \"NOT_FOUND\",\n                message: \"No scenes found for this project. Please create some content first.\"\n            });\n        }\n        const existingShare = await _bazaar_database__WEBPACK_IMPORTED_MODULE_2__.db.query.sharedVideos.findFirst({\n            where: (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_0__.and)((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_0__.eq)(_bazaar_database__WEBPACK_IMPORTED_MODULE_2__.sharedVideos.projectId, projectId), (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_0__.eq)(_bazaar_database__WEBPACK_IMPORTED_MODULE_2__.sharedVideos.userId, userId))\n        });\n        let shareId;\n        if (existingShare) {\n            await _bazaar_database__WEBPACK_IMPORTED_MODULE_2__.db.update(_bazaar_database__WEBPACK_IMPORTED_MODULE_2__.sharedVideos).set({\n                title: title || project.title,\n                description,\n                videoUrl: null,\n                isPublic: true\n            }).where((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_0__.eq)(_bazaar_database__WEBPACK_IMPORTED_MODULE_2__.sharedVideos.id, existingShare.id));\n            shareId = existingShare.id;\n        } else {\n            const newShare = await _bazaar_database__WEBPACK_IMPORTED_MODULE_2__.db.insert(_bazaar_database__WEBPACK_IMPORTED_MODULE_2__.sharedVideos).values({\n                projectId,\n                userId,\n                title: title || project.title,\n                description,\n                videoUrl: null,\n                isPublic: true\n            }).returning({\n                id: _bazaar_database__WEBPACK_IMPORTED_MODULE_2__.sharedVideos.id\n            });\n            shareId = newShare[0].id;\n        }\n        return {\n            shareId,\n            shareUrl: (0,_lib_utils_url__WEBPACK_IMPORTED_MODULE_4__.getShareUrl)(shareId)\n        };\n    }),\n    // Get shared video by ID (public endpoint)\n    getSharedVideo: _server_api_trpc__WEBPACK_IMPORTED_MODULE_1__.publicProcedure.input(zod__WEBPACK_IMPORTED_MODULE_5__.z.object({\n        shareId: zod__WEBPACK_IMPORTED_MODULE_5__.z.string().uuid()\n    })).query(async ({ input })=>{\n        const { shareId } = input;\n        const sharedVideo = await _bazaar_database__WEBPACK_IMPORTED_MODULE_2__.db.query.sharedVideos.findFirst({\n            where: (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_0__.and)((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_0__.eq)(_bazaar_database__WEBPACK_IMPORTED_MODULE_2__.sharedVideos.id, shareId), (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_0__.eq)(_bazaar_database__WEBPACK_IMPORTED_MODULE_2__.sharedVideos.isPublic, true), (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_0__.or)((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_0__.isNull)(_bazaar_database__WEBPACK_IMPORTED_MODULE_2__.sharedVideos.expiresAt), (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_0__.sql)`${_bazaar_database__WEBPACK_IMPORTED_MODULE_2__.sharedVideos.expiresAt} > NOW()`)),\n            with: {\n                project: {\n                    columns: {\n                        id: true,\n                        title: true,\n                        props: true\n                    },\n                    with: {\n                        scenes: {\n                            orderBy: (scenesTable, { asc })=>[\n                                    asc(scenesTable.order)\n                                ],\n                            columns: {\n                                id: true,\n                                tsxCode: true,\n                                duration: true,\n                                name: true,\n                                props: true,\n                                order: true\n                            }\n                        }\n                    }\n                },\n                user: {\n                    columns: {\n                        id: true,\n                        name: true\n                    }\n                }\n            }\n        });\n        if (!sharedVideo || !sharedVideo.project) {\n            throw new _trpc_server__WEBPACK_IMPORTED_MODULE_3__.TRPCError({\n                code: \"NOT_FOUND\",\n                message: \"Shared video or associated project not found or no longer available\"\n            });\n        }\n        await _bazaar_database__WEBPACK_IMPORTED_MODULE_2__.db.update(_bazaar_database__WEBPACK_IMPORTED_MODULE_2__.sharedVideos).set({\n            viewCount: (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_0__.sql)`COALESCE(\"viewCount\", 0) + 1`\n        }).where((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_0__.eq)(_bazaar_database__WEBPACK_IMPORTED_MODULE_2__.sharedVideos.id, shareId));\n        const allProjectScenes = sharedVideo.project.scenes;\n        let currentStart = 0;\n        // Map scenes to format compatible with DynamicVideo composition\n        const formattedScenes = allProjectScenes.map((dbScene, index)=>{\n            const sceneDuration = dbScene.duration || 180; // Default if null\n            const sceneToAdd = {\n                id: dbScene.id,\n                type: 'custom',\n                start: currentStart,\n                duration: sceneDuration,\n                data: {\n                    code: dbScene.tsxCode,\n                    name: dbScene.name || `Scene ${(dbScene.order ?? index) + 1}`,\n                    componentId: dbScene.id,\n                    props: dbScene.props || {}\n                }\n            };\n            currentStart += sceneDuration;\n            return sceneToAdd;\n        });\n        const projectInputProps = {\n            meta: {\n                title: sharedVideo.title || sharedVideo.project.title || \"Untitled Video\",\n                duration: currentStart,\n                backgroundColor: sharedVideo.project.props?.meta?.backgroundColor || '#000000'\n            },\n            scenes: formattedScenes\n        };\n        return {\n            id: sharedVideo.id,\n            projectId: sharedVideo.projectId,\n            userId: sharedVideo.userId,\n            title: sharedVideo.title,\n            description: sharedVideo.description,\n            videoUrl: sharedVideo.videoUrl,\n            thumbnailUrl: sharedVideo.thumbnailUrl,\n            isPublic: sharedVideo.isPublic,\n            viewCount: sharedVideo.viewCount,\n            createdAt: sharedVideo.createdAt,\n            expiresAt: sharedVideo.expiresAt,\n            creator: sharedVideo.user,\n            project: {\n                id: sharedVideo.project.id,\n                title: sharedVideo.project.title,\n                inputProps: projectInputProps\n            }\n        };\n    }),\n    // Get user's shared videos\n    getMyShares: _server_api_trpc__WEBPACK_IMPORTED_MODULE_1__.protectedProcedure.query(async ({ ctx })=>{\n        const userId = ctx.session.user.id;\n        const shares = await _bazaar_database__WEBPACK_IMPORTED_MODULE_2__.db.query.sharedVideos.findMany({\n            where: (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_0__.eq)(_bazaar_database__WEBPACK_IMPORTED_MODULE_2__.sharedVideos.userId, userId),\n            with: {\n                project: {\n                    columns: {\n                        title: true\n                    }\n                }\n            },\n            orderBy: (sharedVideos, { desc })=>[\n                    desc(sharedVideos.createdAt)\n                ]\n        });\n        return shares.map((share)=>({\n                id: share.id,\n                title: share.title,\n                description: share.description,\n                viewCount: share.viewCount ?? 0,\n                createdAt: share.createdAt,\n                shareUrl: (0,_lib_utils_url__WEBPACK_IMPORTED_MODULE_4__.getShareUrl)(share.id),\n                project: share.project\n            }));\n    }),\n    // Delete shared video\n    deleteShare: _server_api_trpc__WEBPACK_IMPORTED_MODULE_1__.protectedProcedure.input(zod__WEBPACK_IMPORTED_MODULE_5__.z.object({\n        shareId: zod__WEBPACK_IMPORTED_MODULE_5__.z.string().uuid()\n    })).mutation(async ({ ctx, input })=>{\n        const { shareId } = input;\n        const userId = ctx.session.user.id;\n        const result = await _bazaar_database__WEBPACK_IMPORTED_MODULE_2__.db.delete(_bazaar_database__WEBPACK_IMPORTED_MODULE_2__.sharedVideos).where((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_0__.and)((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_0__.eq)(_bazaar_database__WEBPACK_IMPORTED_MODULE_2__.sharedVideos.id, shareId), (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_0__.eq)(_bazaar_database__WEBPACK_IMPORTED_MODULE_2__.sharedVideos.userId, userId))).returning({\n            id: _bazaar_database__WEBPACK_IMPORTED_MODULE_2__.sharedVideos.id\n        });\n        if (result.length === 0) {\n            throw new _trpc_server__WEBPACK_IMPORTED_MODULE_3__.TRPCError({\n                code: \"NOT_FOUND\",\n                message: \"Shared video not found or you don't have permission to delete it\"\n            });\n        }\n        return {\n            success: true\n        };\n    })\n});\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/server/api/routers/share.ts\n");

/***/ }),

/***/ "(rsc)/./src/server/api/routers/voice.ts":
/*!*****************************************!*\
  !*** ./src/server/api/routers/voice.ts ***!
  \*****************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   voiceRouter: () => (/* binding */ voiceRouter)\n/* harmony export */ });\n/* harmony import */ var openai_shims_node__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! openai/shims/node */ \"(rsc)/../../node_modules/openai/shims/node.mjs\");\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! zod */ \"(rsc)/../../node_modules/zod/lib/index.mjs\");\n/* harmony import */ var _server_api_trpc__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ~/server/api/trpc */ \"(rsc)/./src/server/api/trpc.ts\");\n/* harmony import */ var _server_lib_openai__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ~/server/lib/openai */ \"(rsc)/./src/server/lib/openai.ts\");\n/* harmony import */ var openai_uploads__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! openai/uploads */ \"(rsc)/../../node_modules/openai/uploads.mjs\");\n/* harmony import */ var _lib_utils_logger__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ~/lib/utils/logger */ \"(rsc)/./src/lib/utils/logger.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_server_api_trpc__WEBPACK_IMPORTED_MODULE_1__]);\n_server_api_trpc__WEBPACK_IMPORTED_MODULE_1__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n// src/server/api/routers/voice.ts\n\n\n\n\n\n\n// Map MIME types to appropriate file extensions for Whisper API\nconst mimeToExtension = {\n    'audio/webm': 'webm',\n    'audio/webm;codecs=opus': 'webm',\n    'audio/mp4': 'mp4',\n    'audio/mpeg': 'mp3',\n    'audio/mp3': 'mp3',\n    'audio/ogg': 'ogg',\n    'audio/ogg;codecs=opus': 'ogg',\n    'audio/wav': 'wav',\n    'audio/x-wav': 'wav'\n};\nconst voiceRouter = (0,_server_api_trpc__WEBPACK_IMPORTED_MODULE_1__.createTRPCRouter)({\n    transcribe: _server_api_trpc__WEBPACK_IMPORTED_MODULE_1__.protectedProcedure.input(zod__WEBPACK_IMPORTED_MODULE_4__.z.object({\n        audio: zod__WEBPACK_IMPORTED_MODULE_4__.z.string(),\n        mimeType: zod__WEBPACK_IMPORTED_MODULE_4__.z.string().optional()\n    })).mutation(async ({ input, ctx })=>{\n        try {\n            // Extract base64 data and determine appropriate file extension\n            const base64 = input.audio.replace(/^data:.*?;base64,/, '');\n            const mimeType = input.mimeType ?? 'audio/webm';\n            // Get appropriate extension or default to mp3\n            const extension = mimeToExtension[mimeType] || 'mp3';\n            const filename = `audio.${extension}`;\n            _lib_utils_logger__WEBPACK_IMPORTED_MODULE_3__.logger.info(`Processing audio transcription with format: ${mimeType} -> ${extension}`);\n            // Convert to buffer and create file\n            const buffer = Buffer.from(base64, 'base64');\n            const file = await (0,openai_uploads__WEBPACK_IMPORTED_MODULE_5__.toFile)(buffer, filename, {\n                type: mimeType\n            });\n            // Send to OpenAI Whisper API\n            const result = await _server_lib_openai__WEBPACK_IMPORTED_MODULE_2__.openai.audio.transcriptions.create({\n                file,\n                model: 'whisper-1',\n                response_format: 'text'\n            });\n            // Handle the response based on response_format: 'text'\n            // When response_format is 'text', result will be a string\n            let text;\n            if (typeof result === 'string') {\n                // Direct string response (expected with response_format: 'text')\n                text = result;\n            } else if (result && typeof result === 'object' && 'text' in result) {\n                // Object with text property\n                text = result.text;\n            } else {\n                // Fallback for unexpected formats\n                _lib_utils_logger__WEBPACK_IMPORTED_MODULE_3__.logger.warn('Unexpected response format from Whisper API:', result);\n                text = String(result);\n            }\n            _lib_utils_logger__WEBPACK_IMPORTED_MODULE_3__.logger.info(`Transcription successful: ${text.substring(0, 50)}${text.length > 50 ? '...' : ''}`);\n            return {\n                text\n            };\n        } catch (error) {\n            _lib_utils_logger__WEBPACK_IMPORTED_MODULE_3__.logger.error('Transcription error:', error);\n            throw error;\n        }\n    })\n});\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvc2VydmVyL2FwaS9yb3V0ZXJzL3ZvaWNlLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBQSxrQ0FBa0M7QUFDUDtBQUNIO0FBQ2lEO0FBQzVCO0FBQ0w7QUFDSTtBQVE1QyxnRUFBZ0U7QUFDaEUsTUFBTU0sa0JBQWtCO0lBQ3RCLGNBQWM7SUFDZCwwQkFBMEI7SUFDMUIsYUFBYTtJQUNiLGNBQWM7SUFDZCxhQUFhO0lBQ2IsYUFBYTtJQUNiLHlCQUF5QjtJQUN6QixhQUFhO0lBQ2IsZUFBZTtBQUNqQjtBQUVPLE1BQU1DLGNBQWNOLGtFQUFnQkEsQ0FBQztJQUMxQ08sWUFBWU4sZ0VBQWtCQSxDQUMzQk8sS0FBSyxDQUNKVCxrQ0FBQ0EsQ0FBQ1UsTUFBTSxDQUFDO1FBQ1BDLE9BQU9YLGtDQUFDQSxDQUFDWSxNQUFNO1FBQ2ZDLFVBQVViLGtDQUFDQSxDQUFDWSxNQUFNLEdBQUdFLFFBQVE7SUFDL0IsSUFFREMsUUFBUSxDQUFDLE9BQU8sRUFBRU4sS0FBSyxFQUFFTyxHQUFHLEVBQUU7UUFDN0IsSUFBSTtZQUNGLCtEQUErRDtZQUMvRCxNQUFNQyxTQUFTUixNQUFNRSxLQUFLLENBQUNPLE9BQU8sQ0FBQyxxQkFBcUI7WUFDeEQsTUFBTUwsV0FBV0osTUFBTUksUUFBUSxJQUFJO1lBRW5DLDhDQUE4QztZQUM5QyxNQUFNTSxZQUFZYixlQUFlLENBQUNPLFNBQXlDLElBQUk7WUFDL0UsTUFBTU8sV0FBVyxDQUFDLE1BQU0sRUFBRUQsV0FBVztZQUVyQ2QscURBQU1BLENBQUNnQixJQUFJLENBQUMsQ0FBQyw0Q0FBNEMsRUFBRVIsU0FBUyxJQUFJLEVBQUVNLFdBQVc7WUFFckYsb0NBQW9DO1lBQ3BDLE1BQU1HLFNBQVNDLE9BQU9DLElBQUksQ0FBQ1AsUUFBUTtZQUNuQyxNQUFNUSxPQUFPLE1BQU1yQixzREFBTUEsQ0FBQ2tCLFFBQVFGLFVBQVU7Z0JBQUVNLE1BQU1iO1lBQVM7WUFFN0QsNkJBQTZCO1lBQzdCLE1BQU1jLFNBQVMsTUFBTXhCLHNEQUFNQSxDQUFDUSxLQUFLLENBQUNpQixjQUFjLENBQUNDLE1BQU0sQ0FBQztnQkFDdERKO2dCQUNBSyxPQUFPO2dCQUNQQyxpQkFBaUI7WUFDbkI7WUFFQSx1REFBdUQ7WUFDdkQsMERBQTBEO1lBQzFELElBQUlDO1lBRUosSUFBSSxPQUFPTCxXQUFXLFVBQVU7Z0JBQzlCLGlFQUFpRTtnQkFDakVLLE9BQU9MO1lBQ1QsT0FBTyxJQUFJQSxVQUFVLE9BQU9BLFdBQVcsWUFBWSxVQUFVQSxRQUFRO2dCQUNuRSw0QkFBNEI7Z0JBQzVCSyxPQUFPLE9BQXdDQSxJQUFJO1lBQ3JELE9BQU87Z0JBQ0wsa0NBQWtDO2dCQUNsQzNCLHFEQUFNQSxDQUFDNEIsSUFBSSxDQUFDLGdEQUFnRE47Z0JBQzVESyxPQUFPRSxPQUFPUDtZQUNoQjtZQUVBdEIscURBQU1BLENBQUNnQixJQUFJLENBQUMsQ0FBQywwQkFBMEIsRUFBRVcsS0FBS0csU0FBUyxDQUFDLEdBQUcsTUFBTUgsS0FBS0ksTUFBTSxHQUFHLEtBQUssUUFBUSxJQUFJO1lBRWhHLE9BQU87Z0JBQUVKO1lBQUs7UUFDaEIsRUFBRSxPQUFPSyxPQUFPO1lBQ2RoQyxxREFBTUEsQ0FBQ2dDLEtBQUssQ0FBQyx3QkFBd0JBO1lBQ3JDLE1BQU1BO1FBQ1I7SUFDRjtBQUNKLEdBQUciLCJzb3VyY2VzIjpbIi9Vc2Vycy9tYXJrdXNob2duZS9Eb2N1bWVudHMvQVBQUy9iYXphYXItdmlkL2JhemFhci12aWQvYXBwcy9tYWluL3NyYy9zZXJ2ZXIvYXBpL3JvdXRlcnMvdm9pY2UudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gc3JjL3NlcnZlci9hcGkvcm91dGVycy92b2ljZS50c1xuaW1wb3J0IFwib3BlbmFpL3NoaW1zL25vZGVcIjtcbmltcG9ydCB7IHogfSBmcm9tICd6b2QnO1xuaW1wb3J0IHsgY3JlYXRlVFJQQ1JvdXRlciwgcHJvdGVjdGVkUHJvY2VkdXJlIH0gZnJvbSAnfi9zZXJ2ZXIvYXBpL3RycGMnO1xuaW1wb3J0IHsgb3BlbmFpIH0gZnJvbSAnfi9zZXJ2ZXIvbGliL29wZW5haSc7XG5pbXBvcnQgeyB0b0ZpbGUgfSBmcm9tICdvcGVuYWkvdXBsb2Fkcyc7XG5pbXBvcnQgeyBsb2dnZXIgfSBmcm9tICd+L2xpYi91dGlscy9sb2dnZXInO1xuXG4vLyBEZWZpbmUgcG9zc2libGUgcmVzcG9uc2UgdHlwZXMgZnJvbSBXaGlzcGVyIEFQSVxuaW50ZXJmYWNlIFRyYW5zY3JpcHRpb25SZXNwb25zZU9iamVjdCB7XG4gIHRleHQ6IHN0cmluZztcbiAgW2tleTogc3RyaW5nXTogdW5rbm93bjtcbn1cblxuLy8gTWFwIE1JTUUgdHlwZXMgdG8gYXBwcm9wcmlhdGUgZmlsZSBleHRlbnNpb25zIGZvciBXaGlzcGVyIEFQSVxuY29uc3QgbWltZVRvRXh0ZW5zaW9uID0ge1xuICAnYXVkaW8vd2VibSc6ICd3ZWJtJyxcbiAgJ2F1ZGlvL3dlYm07Y29kZWNzPW9wdXMnOiAnd2VibScsXG4gICdhdWRpby9tcDQnOiAnbXA0JyxcbiAgJ2F1ZGlvL21wZWcnOiAnbXAzJyxcbiAgJ2F1ZGlvL21wMyc6ICdtcDMnLFxuICAnYXVkaW8vb2dnJzogJ29nZycsXG4gICdhdWRpby9vZ2c7Y29kZWNzPW9wdXMnOiAnb2dnJyxcbiAgJ2F1ZGlvL3dhdic6ICd3YXYnLFxuICAnYXVkaW8veC13YXYnOiAnd2F2Jyxcbn07XG5cbmV4cG9ydCBjb25zdCB2b2ljZVJvdXRlciA9IGNyZWF0ZVRSUENSb3V0ZXIoe1xuICB0cmFuc2NyaWJlOiBwcm90ZWN0ZWRQcm9jZWR1cmVcbiAgICAuaW5wdXQoXG4gICAgICB6Lm9iamVjdCh7XG4gICAgICAgIGF1ZGlvOiB6LnN0cmluZygpLFxuICAgICAgICBtaW1lVHlwZTogei5zdHJpbmcoKS5vcHRpb25hbCgpLFxuICAgICAgfSlcbiAgICApXG4gICAgLm11dGF0aW9uKGFzeW5jICh7IGlucHV0LCBjdHggfSkgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gRXh0cmFjdCBiYXNlNjQgZGF0YSBhbmQgZGV0ZXJtaW5lIGFwcHJvcHJpYXRlIGZpbGUgZXh0ZW5zaW9uXG4gICAgICAgIGNvbnN0IGJhc2U2NCA9IGlucHV0LmF1ZGlvLnJlcGxhY2UoL15kYXRhOi4qPztiYXNlNjQsLywgJycpO1xuICAgICAgICBjb25zdCBtaW1lVHlwZSA9IGlucHV0Lm1pbWVUeXBlID8/ICdhdWRpby93ZWJtJztcbiAgICAgICAgXG4gICAgICAgIC8vIEdldCBhcHByb3ByaWF0ZSBleHRlbnNpb24gb3IgZGVmYXVsdCB0byBtcDNcbiAgICAgICAgY29uc3QgZXh0ZW5zaW9uID0gbWltZVRvRXh0ZW5zaW9uW21pbWVUeXBlIGFzIGtleW9mIHR5cGVvZiBtaW1lVG9FeHRlbnNpb25dIHx8ICdtcDMnO1xuICAgICAgICBjb25zdCBmaWxlbmFtZSA9IGBhdWRpby4ke2V4dGVuc2lvbn1gO1xuICAgICAgICBcbiAgICAgICAgbG9nZ2VyLmluZm8oYFByb2Nlc3NpbmcgYXVkaW8gdHJhbnNjcmlwdGlvbiB3aXRoIGZvcm1hdDogJHttaW1lVHlwZX0gLT4gJHtleHRlbnNpb259YCk7XG4gICAgICAgIFxuICAgICAgICAvLyBDb252ZXJ0IHRvIGJ1ZmZlciBhbmQgY3JlYXRlIGZpbGVcbiAgICAgICAgY29uc3QgYnVmZmVyID0gQnVmZmVyLmZyb20oYmFzZTY0LCAnYmFzZTY0Jyk7XG4gICAgICAgIGNvbnN0IGZpbGUgPSBhd2FpdCB0b0ZpbGUoYnVmZmVyLCBmaWxlbmFtZSwgeyB0eXBlOiBtaW1lVHlwZSB9KTtcbiAgICAgICAgXG4gICAgICAgIC8vIFNlbmQgdG8gT3BlbkFJIFdoaXNwZXIgQVBJXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IG9wZW5haS5hdWRpby50cmFuc2NyaXB0aW9ucy5jcmVhdGUoe1xuICAgICAgICAgIGZpbGUsXG4gICAgICAgICAgbW9kZWw6ICd3aGlzcGVyLTEnLFxuICAgICAgICAgIHJlc3BvbnNlX2Zvcm1hdDogJ3RleHQnLFxuICAgICAgICB9KTtcbiAgICAgICAgXG4gICAgICAgIC8vIEhhbmRsZSB0aGUgcmVzcG9uc2UgYmFzZWQgb24gcmVzcG9uc2VfZm9ybWF0OiAndGV4dCdcbiAgICAgICAgLy8gV2hlbiByZXNwb25zZV9mb3JtYXQgaXMgJ3RleHQnLCByZXN1bHQgd2lsbCBiZSBhIHN0cmluZ1xuICAgICAgICBsZXQgdGV4dDogc3RyaW5nO1xuICAgICAgICBcbiAgICAgICAgaWYgKHR5cGVvZiByZXN1bHQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgLy8gRGlyZWN0IHN0cmluZyByZXNwb25zZSAoZXhwZWN0ZWQgd2l0aCByZXNwb25zZV9mb3JtYXQ6ICd0ZXh0JylcbiAgICAgICAgICB0ZXh0ID0gcmVzdWx0O1xuICAgICAgICB9IGVsc2UgaWYgKHJlc3VsdCAmJiB0eXBlb2YgcmVzdWx0ID09PSAnb2JqZWN0JyAmJiAndGV4dCcgaW4gcmVzdWx0KSB7XG4gICAgICAgICAgLy8gT2JqZWN0IHdpdGggdGV4dCBwcm9wZXJ0eVxuICAgICAgICAgIHRleHQgPSAocmVzdWx0IGFzIFRyYW5zY3JpcHRpb25SZXNwb25zZU9iamVjdCkudGV4dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBGYWxsYmFjayBmb3IgdW5leHBlY3RlZCBmb3JtYXRzXG4gICAgICAgICAgbG9nZ2VyLndhcm4oJ1VuZXhwZWN0ZWQgcmVzcG9uc2UgZm9ybWF0IGZyb20gV2hpc3BlciBBUEk6JywgcmVzdWx0KTtcbiAgICAgICAgICB0ZXh0ID0gU3RyaW5nKHJlc3VsdCk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGxvZ2dlci5pbmZvKGBUcmFuc2NyaXB0aW9uIHN1Y2Nlc3NmdWw6ICR7dGV4dC5zdWJzdHJpbmcoMCwgNTApfSR7dGV4dC5sZW5ndGggPiA1MCA/ICcuLi4nIDogJyd9YCk7XG4gICAgICAgIFxuICAgICAgICByZXR1cm4geyB0ZXh0IH07XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBsb2dnZXIuZXJyb3IoJ1RyYW5zY3JpcHRpb24gZXJyb3I6JywgZXJyb3IpO1xuICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgIH1cbiAgICB9KSxcbn0pO1xuIl0sIm5hbWVzIjpbInoiLCJjcmVhdGVUUlBDUm91dGVyIiwicHJvdGVjdGVkUHJvY2VkdXJlIiwib3BlbmFpIiwidG9GaWxlIiwibG9nZ2VyIiwibWltZVRvRXh0ZW5zaW9uIiwidm9pY2VSb3V0ZXIiLCJ0cmFuc2NyaWJlIiwiaW5wdXQiLCJvYmplY3QiLCJhdWRpbyIsInN0cmluZyIsIm1pbWVUeXBlIiwib3B0aW9uYWwiLCJtdXRhdGlvbiIsImN0eCIsImJhc2U2NCIsInJlcGxhY2UiLCJleHRlbnNpb24iLCJmaWxlbmFtZSIsImluZm8iLCJidWZmZXIiLCJCdWZmZXIiLCJmcm9tIiwiZmlsZSIsInR5cGUiLCJyZXN1bHQiLCJ0cmFuc2NyaXB0aW9ucyIsImNyZWF0ZSIsIm1vZGVsIiwicmVzcG9uc2VfZm9ybWF0IiwidGV4dCIsIndhcm4iLCJTdHJpbmciLCJzdWJzdHJpbmciLCJsZW5ndGgiLCJlcnJvciJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./src/server/api/routers/voice.ts\n");

/***/ }),

/***/ "(rsc)/./src/server/api/trpc.ts":
/*!********************************!*\
  !*** ./src/server/api/trpc.ts ***!
  \********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createCallerFactory: () => (/* binding */ createCallerFactory),\n/* harmony export */   createTRPCContext: () => (/* binding */ createTRPCContext),\n/* harmony export */   createTRPCRouter: () => (/* binding */ createTRPCRouter),\n/* harmony export */   protectedProcedure: () => (/* binding */ protectedProcedure),\n/* harmony export */   publicProcedure: () => (/* binding */ publicProcedure)\n/* harmony export */ });\n/* harmony import */ var _trpc_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @trpc/server */ \"(rsc)/../../node_modules/@trpc/server/dist/index.mjs\");\n/* harmony import */ var superjson__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! superjson */ \"(rsc)/../../node_modules/superjson/dist/index.js\");\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! zod */ \"(rsc)/../../node_modules/zod/lib/index.mjs\");\n/* harmony import */ var _bazaar_auth__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @bazaar/auth */ \"(rsc)/../../packages/auth/index.ts\");\n/* harmony import */ var _bazaar_database__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @bazaar/database */ \"(rsc)/../../packages/database/index.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_bazaar_auth__WEBPACK_IMPORTED_MODULE_2__, _bazaar_database__WEBPACK_IMPORTED_MODULE_3__]);\n([_bazaar_auth__WEBPACK_IMPORTED_MODULE_2__, _bazaar_database__WEBPACK_IMPORTED_MODULE_3__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n// src/server/api/trpc.ts\n/**\n * YOU PROBABLY DON'T NEED TO EDIT THIS FILE, UNLESS:\n * 1. You want to modify request context (see Part 1).\n * 2. You want to create a new middleware or type of procedure (see Part 3).\n *\n * TL;DR - This is where all the tRPC server stuff is created and plugged in. The pieces you will\n * need to use are documented accordingly near the end.\n */ \n\n\n\n\n/**\n * 1. CONTEXT\n *\n * This section defines the \"contexts\" that are available in the backend API.\n *\n * These allow you to access things when processing a request, like the database, the session, etc.\n *\n * This helper generates the \"internals\" for a tRPC context. The API handler and RSC clients each\n * wrap this and provides the required context.\n *\n * @see https://trpc.io/docs/server/context\n */ const createTRPCContext = async (opts)=>{\n    const session = await (0,_bazaar_auth__WEBPACK_IMPORTED_MODULE_2__.auth)();\n    return {\n        db: _bazaar_database__WEBPACK_IMPORTED_MODULE_3__.db,\n        session,\n        ...opts\n    };\n};\n/**\n * 2. INITIALIZATION\n *\n * This is where the tRPC API is initialized, connecting the context and transformer. We also parse\n * ZodErrors so that you get typesafety on the frontend if your procedure fails due to validation\n * errors on the backend.\n */ const t = _trpc_server__WEBPACK_IMPORTED_MODULE_0__.initTRPC.context().create({\n    transformer: superjson__WEBPACK_IMPORTED_MODULE_1__[\"default\"],\n    errorFormatter ({ shape, error }) {\n        return {\n            ...shape,\n            data: {\n                ...shape.data,\n                zodError: error.cause instanceof zod__WEBPACK_IMPORTED_MODULE_4__.ZodError ? error.cause.flatten() : null\n            }\n        };\n    }\n});\n/**\n * Create a server-side caller.\n *\n * @see https://trpc.io/docs/server/server-side-calls\n */ const createCallerFactory = t.createCallerFactory;\n/**\n * 3. ROUTER & PROCEDURE (THE IMPORTANT BIT)\n *\n * These are the pieces you use to build your tRPC API. You should import these a lot in the\n * \"/src/server/api/routers\" directory.\n */ /**\n * This is how you create new routers and sub-routers in your tRPC API.\n *\n * @see https://trpc.io/docs/router\n */ const createTRPCRouter = t.router;\n/**\n * Middleware for timing procedure execution and adding an artificial delay in development.\n *\n * You can remove this if you don't like it, but it can help catch unwanted waterfalls by simulating\n * network latency that would occur in production but not in local development.\n */ const timingMiddleware = t.middleware(async ({ next, path })=>{\n    const start = Date.now();\n    if (t._config.isDev) {\n        // artificial delay in dev\n        const waitMs = Math.floor(Math.random() * 400) + 100;\n        await new Promise((resolve)=>setTimeout(resolve, waitMs));\n    }\n    const result = await next();\n    const end = Date.now();\n    // Only log timing if TRPC_DEBUG environment variable is set or for extremely slow requests\n    const shouldLog = process.env.TRPC_DEBUG === 'true' || end - start > 5000;\n    const executionTime = end - start;\n    if (shouldLog) {\n    // console.log(`[TRPC] ${path} took ${executionTime}ms to execute`);\n    } else if (executionTime > 3000) {\n    // Only log very slow requests (>3s) with a different prefix so they don't get filtered\n    // console.log(`⚠️ Slow procedure: ${path} took ${executionTime}ms to execute`);\n    }\n    return result;\n});\n/**\n * Public (unauthenticated) procedure\n *\n * This is the base piece you use to build new queries and mutations on your tRPC API. It does not\n * guarantee that a user querying is authorized, but you can still access user session data if they\n * are logged in.\n */ const publicProcedure = t.procedure.use(timingMiddleware);\n/**\n * Protected (authenticated) procedure\n *\n * If you want a query or mutation to ONLY be accessible to logged in users, use this. It verifies\n * the session is valid and guarantees `ctx.session.user` is not null.\n *\n * @see https://trpc.io/docs/procedures\n */ const protectedProcedure = t.procedure.use(timingMiddleware).use({\n    \"use[protectedProcedure]\": ({ ctx, next })=>{\n        if (!ctx.session?.user) {\n            throw new _trpc_server__WEBPACK_IMPORTED_MODULE_0__.TRPCError({\n                code: \"UNAUTHORIZED\"\n            });\n        }\n        return next({\n            ctx: {\n                // infers the `session` as non-nullable\n                session: {\n                    ...ctx.session,\n                    user: ctx.session.user\n                }\n            }\n        });\n    }\n}[\"use[protectedProcedure]\"]);\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/server/api/trpc.ts\n");

/***/ }),

/***/ "(rsc)/./src/server/init.ts":
/*!****************************!*\
  !*** ./src/server/init.ts ***!
  \****************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   cleanupServer: () => (/* binding */ cleanupServer),\n/* harmony export */   initializeServer: () => (/* binding */ initializeServer)\n/* harmony export */ });\n/* harmony import */ var _server_services_data_dataLifecycle_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ~/server/services/data/dataLifecycle.service */ \"(rsc)/./src/server/services/data/dataLifecycle.service.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_server_services_data_dataLifecycle_service__WEBPACK_IMPORTED_MODULE_0__]);\n_server_services_data_dataLifecycle_service__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n// src/server/init.ts\n\n// Initialize global state if it doesn't exist\nif (typeof global.__SERVER_INITIALIZED === 'undefined') {\n    global.__SERVER_INITIALIZED = false;\n}\n// Initialize global cleanup functions array if it doesn't exist\nif (!global.__SERVER_CLEANUP_FUNCTIONS) {\n    global.__SERVER_CLEANUP_FUNCTIONS = [];\n}\n// Use global references for initialization state and cleanup functions\nconst isInitialized = global.__SERVER_INITIALIZED;\nconst workerCleanupFunctions = global.__SERVER_CLEANUP_FUNCTIONS;\n/**\n * Initialize server-side background processes.\n * This is called from the Next.js instrumentation hook to ensure\n * background workers are running only once in development and production.\n * \n * Uses a singleton pattern to prevent multiple initializations.\n */ function initializeServer() {\n    if (false) {}\n    if (isInitialized) {\n        console.log('⏭️ Server already initialized, skipping duplicate initialization');\n        return;\n    }\n    console.log('🚀 Initializing server background processes...');\n    // Start Data Lifecycle Management\n    try {\n        _server_services_data_dataLifecycle_service__WEBPACK_IMPORTED_MODULE_0__.dataLifecycleService.startAutomatedCleanup({\n            imageAnalysisRetentionDays: 30,\n            conversationContextRetentionDays: 90,\n            sceneIterationsRetentionDays: 60,\n            projectMemoryRetentionDays: 180,\n            enableAutoCleanup: \"development\" === 'production',\n            cleanupIntervalHours: 24\n        });\n        workerCleanupFunctions.push(()=>_server_services_data_dataLifecycle_service__WEBPACK_IMPORTED_MODULE_0__.dataLifecycleService.stopAutomatedCleanup());\n        console.log('🗂️ Data lifecycle management service started');\n    } catch (error) {\n        console.error('❌ Failed to start data lifecycle management:', error);\n    }\n    // Mark as initialized in the global state\n    global.__SERVER_INITIALIZED = true;\n    // Clean up on process exit\n    process.on('beforeExit', cleanupServer);\n    process.on('SIGINT', ()=>{\n        cleanupServer();\n        process.exit(0);\n    });\n    process.on('SIGTERM', ()=>{\n        cleanupServer();\n        process.exit(0);\n    });\n}\n/**\n * Cleanup function for server shutdown\n */ function cleanupServer() {\n    console.log('🧹 Cleaning up server resources...');\n    // Call all registered cleanup functions\n    for (const cleanupFn of workerCleanupFunctions){\n        try {\n            cleanupFn();\n        } catch (e) {\n            console.error('Error during worker cleanup:', e);\n        }\n    }\n    workerCleanupFunctions.length = 0; // Clear the array\n    global.__SERVER_INITIALIZED = false;\n}\n// Export the cleanup function for manual use if needed\n // REMOVED: Do not initialize on import anymore\n // initializeServer();\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvc2VydmVyL2luaXQudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUEscUJBQXFCO0FBQytEO0FBVXBGLDhDQUE4QztBQUM5QyxJQUFJLE9BQU9DLE9BQU9DLG9CQUFvQixLQUFLLGFBQWE7SUFDdERELE9BQU9DLG9CQUFvQixHQUFHO0FBQ2hDO0FBRUEsZ0VBQWdFO0FBQ2hFLElBQUksQ0FBQ0QsT0FBT0UsMEJBQTBCLEVBQUU7SUFDdENGLE9BQU9FLDBCQUEwQixHQUFHLEVBQUU7QUFDeEM7QUFFQSx1RUFBdUU7QUFDdkUsTUFBTUMsZ0JBQWdCSCxPQUFPQyxvQkFBb0I7QUFDakQsTUFBTUcseUJBQXlCSixPQUFPRSwwQkFBMEI7QUFFaEU7Ozs7OztDQU1DLEdBQ00sU0FBU0c7SUFDZCxJQUFJLEtBQTZCLEVBQUUsRUFHbEM7SUFFRCxJQUFJRixlQUFlO1FBQ2pCRyxRQUFRQyxHQUFHLENBQUM7UUFDWjtJQUNGO0lBRUFELFFBQVFDLEdBQUcsQ0FBQztJQUVaLGtDQUFrQztJQUNsQyxJQUFJO1FBQ0ZSLDZGQUFvQkEsQ0FBQ1MscUJBQXFCLENBQUM7WUFDekNDLDRCQUE0QjtZQUM1QkMsa0NBQWtDO1lBQ2xDQyw4QkFBOEI7WUFDOUJDLDRCQUE0QjtZQUM1QkMsbUJBQW1CQyxrQkFBeUI7WUFDNUNDLHNCQUFzQjtRQUN4QjtRQUNBWCx1QkFBdUJZLElBQUksQ0FBQyxJQUFNakIsNkZBQW9CQSxDQUFDa0Isb0JBQW9CO1FBQzNFWCxRQUFRQyxHQUFHLENBQUM7SUFDZCxFQUFFLE9BQU9XLE9BQU87UUFDZFosUUFBUVksS0FBSyxDQUFDLGdEQUFnREE7SUFDaEU7SUFFQSwwQ0FBMEM7SUFDMUNsQixPQUFPQyxvQkFBb0IsR0FBRztJQUU5QiwyQkFBMkI7SUFDM0JhLFFBQVFLLEVBQUUsQ0FBQyxjQUFjQztJQUN6Qk4sUUFBUUssRUFBRSxDQUFDLFVBQVU7UUFDbkJDO1FBQ0FOLFFBQVFPLElBQUksQ0FBQztJQUNmO0lBQ0FQLFFBQVFLLEVBQUUsQ0FBQyxXQUFXO1FBQ3BCQztRQUNBTixRQUFRTyxJQUFJLENBQUM7SUFDZjtBQUNGO0FBRUE7O0NBRUMsR0FDRCxTQUFTRDtJQUNQZCxRQUFRQyxHQUFHLENBQUM7SUFDWix3Q0FBd0M7SUFDeEMsS0FBSyxNQUFNZSxhQUFhbEIsdUJBQXdCO1FBQzlDLElBQUk7WUFDRmtCO1FBQ0YsRUFBRSxPQUFPQyxHQUFHO1lBQ1ZqQixRQUFRWSxLQUFLLENBQUMsZ0NBQWdDSztRQUNoRDtJQUNGO0lBQ0FuQix1QkFBdUJvQixNQUFNLEdBQUcsR0FBRyxrQkFBa0I7SUFDckR4QixPQUFPQyxvQkFBb0IsR0FBRztBQUNoQztBQUVBLHVEQUF1RDtBQUM5QixDQUV6QiwrQ0FBK0M7Q0FDL0Msc0JBQXNCIiwic291cmNlcyI6WyIvVXNlcnMvbWFya3VzaG9nbmUvRG9jdW1lbnRzL0FQUFMvYmF6YWFyLXZpZC9iYXphYXItdmlkL2FwcHMvbWFpbi9zcmMvc2VydmVyL2luaXQudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gc3JjL3NlcnZlci9pbml0LnRzXG5pbXBvcnQgeyBkYXRhTGlmZWN5Y2xlU2VydmljZSB9IGZyb20gJ34vc2VydmVyL3NlcnZpY2VzL2RhdGEvZGF0YUxpZmVjeWNsZS5zZXJ2aWNlJztcblxuLy8gQ3JlYXRlIGEgZ2xvYmFsIG9iamVjdCBmb3IgdHJ1bHkgcGVyc2lzdGluZyBzdGF0ZSBhY3Jvc3MgSE1SIGN5Y2xlc1xuZGVjbGFyZSBnbG9iYWwge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdmFyXG4gIHZhciBfX1NFUlZFUl9JTklUSUFMSVpFRDogYm9vbGVhbjtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXZhclxuICB2YXIgX19TRVJWRVJfQ0xFQU5VUF9GVU5DVElPTlM6ICgoKSA9PiB2b2lkKVtdO1xufVxuXG4vLyBJbml0aWFsaXplIGdsb2JhbCBzdGF0ZSBpZiBpdCBkb2Vzbid0IGV4aXN0XG5pZiAodHlwZW9mIGdsb2JhbC5fX1NFUlZFUl9JTklUSUFMSVpFRCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgZ2xvYmFsLl9fU0VSVkVSX0lOSVRJQUxJWkVEID0gZmFsc2U7XG59XG5cbi8vIEluaXRpYWxpemUgZ2xvYmFsIGNsZWFudXAgZnVuY3Rpb25zIGFycmF5IGlmIGl0IGRvZXNuJ3QgZXhpc3RcbmlmICghZ2xvYmFsLl9fU0VSVkVSX0NMRUFOVVBfRlVOQ1RJT05TKSB7XG4gIGdsb2JhbC5fX1NFUlZFUl9DTEVBTlVQX0ZVTkNUSU9OUyA9IFtdO1xufVxuXG4vLyBVc2UgZ2xvYmFsIHJlZmVyZW5jZXMgZm9yIGluaXRpYWxpemF0aW9uIHN0YXRlIGFuZCBjbGVhbnVwIGZ1bmN0aW9uc1xuY29uc3QgaXNJbml0aWFsaXplZCA9IGdsb2JhbC5fX1NFUlZFUl9JTklUSUFMSVpFRDtcbmNvbnN0IHdvcmtlckNsZWFudXBGdW5jdGlvbnMgPSBnbG9iYWwuX19TRVJWRVJfQ0xFQU5VUF9GVU5DVElPTlM7XG5cbi8qKlxuICogSW5pdGlhbGl6ZSBzZXJ2ZXItc2lkZSBiYWNrZ3JvdW5kIHByb2Nlc3Nlcy5cbiAqIFRoaXMgaXMgY2FsbGVkIGZyb20gdGhlIE5leHQuanMgaW5zdHJ1bWVudGF0aW9uIGhvb2sgdG8gZW5zdXJlXG4gKiBiYWNrZ3JvdW5kIHdvcmtlcnMgYXJlIHJ1bm5pbmcgb25seSBvbmNlIGluIGRldmVsb3BtZW50IGFuZCBwcm9kdWN0aW9uLlxuICogXG4gKiBVc2VzIGEgc2luZ2xldG9uIHBhdHRlcm4gdG8gcHJldmVudCBtdWx0aXBsZSBpbml0aWFsaXphdGlvbnMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpbml0aWFsaXplU2VydmVyKCkge1xuICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAvLyBTa2lwIGlmIGNsaWVudC1zaWRlXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKGlzSW5pdGlhbGl6ZWQpIHtcbiAgICBjb25zb2xlLmxvZygn4o+t77iPIFNlcnZlciBhbHJlYWR5IGluaXRpYWxpemVkLCBza2lwcGluZyBkdXBsaWNhdGUgaW5pdGlhbGl6YXRpb24nKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zb2xlLmxvZygn8J+agCBJbml0aWFsaXppbmcgc2VydmVyIGJhY2tncm91bmQgcHJvY2Vzc2VzLi4uJyk7XG5cbiAgLy8gU3RhcnQgRGF0YSBMaWZlY3ljbGUgTWFuYWdlbWVudFxuICB0cnkge1xuICAgIGRhdGFMaWZlY3ljbGVTZXJ2aWNlLnN0YXJ0QXV0b21hdGVkQ2xlYW51cCh7XG4gICAgICBpbWFnZUFuYWx5c2lzUmV0ZW50aW9uRGF5czogMzAsXG4gICAgICBjb252ZXJzYXRpb25Db250ZXh0UmV0ZW50aW9uRGF5czogOTAsXG4gICAgICBzY2VuZUl0ZXJhdGlvbnNSZXRlbnRpb25EYXlzOiA2MCxcbiAgICAgIHByb2plY3RNZW1vcnlSZXRlbnRpb25EYXlzOiAxODAsXG4gICAgICBlbmFibGVBdXRvQ2xlYW51cDogcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJyxcbiAgICAgIGNsZWFudXBJbnRlcnZhbEhvdXJzOiAyNFxuICAgIH0pO1xuICAgIHdvcmtlckNsZWFudXBGdW5jdGlvbnMucHVzaCgoKSA9PiBkYXRhTGlmZWN5Y2xlU2VydmljZS5zdG9wQXV0b21hdGVkQ2xlYW51cCgpKTtcbiAgICBjb25zb2xlLmxvZygn8J+Xgu+4jyBEYXRhIGxpZmVjeWNsZSBtYW5hZ2VtZW50IHNlcnZpY2Ugc3RhcnRlZCcpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ+KdjCBGYWlsZWQgdG8gc3RhcnQgZGF0YSBsaWZlY3ljbGUgbWFuYWdlbWVudDonLCBlcnJvcik7XG4gIH1cblxuICAvLyBNYXJrIGFzIGluaXRpYWxpemVkIGluIHRoZSBnbG9iYWwgc3RhdGVcbiAgZ2xvYmFsLl9fU0VSVkVSX0lOSVRJQUxJWkVEID0gdHJ1ZTtcblxuICAvLyBDbGVhbiB1cCBvbiBwcm9jZXNzIGV4aXRcbiAgcHJvY2Vzcy5vbignYmVmb3JlRXhpdCcsIGNsZWFudXBTZXJ2ZXIpO1xuICBwcm9jZXNzLm9uKCdTSUdJTlQnLCAoKSA9PiB7XG4gICAgY2xlYW51cFNlcnZlcigpO1xuICAgIHByb2Nlc3MuZXhpdCgwKTtcbiAgfSk7XG4gIHByb2Nlc3Mub24oJ1NJR1RFUk0nLCAoKSA9PiB7XG4gICAgY2xlYW51cFNlcnZlcigpO1xuICAgIHByb2Nlc3MuZXhpdCgwKTtcbiAgfSk7XG59XG5cbi8qKlxuICogQ2xlYW51cCBmdW5jdGlvbiBmb3Igc2VydmVyIHNodXRkb3duXG4gKi9cbmZ1bmN0aW9uIGNsZWFudXBTZXJ2ZXIoKSB7XG4gIGNvbnNvbGUubG9nKCfwn6e5IENsZWFuaW5nIHVwIHNlcnZlciByZXNvdXJjZXMuLi4nKTtcbiAgLy8gQ2FsbCBhbGwgcmVnaXN0ZXJlZCBjbGVhbnVwIGZ1bmN0aW9uc1xuICBmb3IgKGNvbnN0IGNsZWFudXBGbiBvZiB3b3JrZXJDbGVhbnVwRnVuY3Rpb25zKSB7XG4gICAgdHJ5IHtcbiAgICAgIGNsZWFudXBGbigpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGR1cmluZyB3b3JrZXIgY2xlYW51cDonLCBlKTtcbiAgICB9XG4gIH1cbiAgd29ya2VyQ2xlYW51cEZ1bmN0aW9ucy5sZW5ndGggPSAwOyAvLyBDbGVhciB0aGUgYXJyYXlcbiAgZ2xvYmFsLl9fU0VSVkVSX0lOSVRJQUxJWkVEID0gZmFsc2U7XG59XG5cbi8vIEV4cG9ydCB0aGUgY2xlYW51cCBmdW5jdGlvbiBmb3IgbWFudWFsIHVzZSBpZiBuZWVkZWRcbmV4cG9ydCB7IGNsZWFudXBTZXJ2ZXIgfTtcblxuLy8gUkVNT1ZFRDogRG8gbm90IGluaXRpYWxpemUgb24gaW1wb3J0IGFueW1vcmVcbi8vIGluaXRpYWxpemVTZXJ2ZXIoKTtcbiJdLCJuYW1lcyI6WyJkYXRhTGlmZWN5Y2xlU2VydmljZSIsImdsb2JhbCIsIl9fU0VSVkVSX0lOSVRJQUxJWkVEIiwiX19TRVJWRVJfQ0xFQU5VUF9GVU5DVElPTlMiLCJpc0luaXRpYWxpemVkIiwid29ya2VyQ2xlYW51cEZ1bmN0aW9ucyIsImluaXRpYWxpemVTZXJ2ZXIiLCJjb25zb2xlIiwibG9nIiwic3RhcnRBdXRvbWF0ZWRDbGVhbnVwIiwiaW1hZ2VBbmFseXNpc1JldGVudGlvbkRheXMiLCJjb252ZXJzYXRpb25Db250ZXh0UmV0ZW50aW9uRGF5cyIsInNjZW5lSXRlcmF0aW9uc1JldGVudGlvbkRheXMiLCJwcm9qZWN0TWVtb3J5UmV0ZW50aW9uRGF5cyIsImVuYWJsZUF1dG9DbGVhbnVwIiwicHJvY2VzcyIsImNsZWFudXBJbnRlcnZhbEhvdXJzIiwicHVzaCIsInN0b3BBdXRvbWF0ZWRDbGVhbnVwIiwiZXJyb3IiLCJvbiIsImNsZWFudXBTZXJ2ZXIiLCJleGl0IiwiY2xlYW51cEZuIiwiZSIsImxlbmd0aCJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./src/server/init.ts\n");

/***/ }),

/***/ "(rsc)/./src/server/lib/openai.ts":
/*!**********************************!*\
  !*** ./src/server/lib/openai.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   openai: () => (/* binding */ openai)\n/* harmony export */ });\n/* harmony import */ var openai_shims_node__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! openai/shims/node */ \"(rsc)/../../node_modules/openai/shims/node.mjs\");\n/* harmony import */ var openai__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! openai */ \"(rsc)/../../node_modules/openai/index.mjs\");\n/* harmony import */ var _env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ~/env */ \"(rsc)/./src/env.js\");\n\n\n\n/**\n * OpenAI API client for server-side operations\n * Used primarily for chatbot interactions and JSON Patch generation\n */ const openai = new openai__WEBPACK_IMPORTED_MODULE_2__[\"default\"]({\n    apiKey: _env__WEBPACK_IMPORTED_MODULE_1__.env.OPENAI_API_KEY\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvc2VydmVyL2xpYi9vcGVuYWkudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUEyQjtBQUNDO0FBQ0E7QUFFNUI7OztDQUdDLEdBQ00sTUFBTUUsU0FBUyxJQUFJRiw4Q0FBTUEsQ0FBQztJQUMvQkcsUUFBUUYscUNBQUdBLENBQUNHLGNBQWM7QUFDNUIsR0FBRyIsInNvdXJjZXMiOlsiL1VzZXJzL21hcmt1c2hvZ25lL0RvY3VtZW50cy9BUFBTL2JhemFhci12aWQvYmF6YWFyLXZpZC9hcHBzL21haW4vc3JjL3NlcnZlci9saWIvb3BlbmFpLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBcIm9wZW5haS9zaGltcy9ub2RlXCI7XG5pbXBvcnQgT3BlbkFJIGZyb20gXCJvcGVuYWlcIjtcbmltcG9ydCB7IGVudiB9IGZyb20gXCJ+L2VudlwiO1xuXG4vKipcbiAqIE9wZW5BSSBBUEkgY2xpZW50IGZvciBzZXJ2ZXItc2lkZSBvcGVyYXRpb25zXG4gKiBVc2VkIHByaW1hcmlseSBmb3IgY2hhdGJvdCBpbnRlcmFjdGlvbnMgYW5kIEpTT04gUGF0Y2ggZ2VuZXJhdGlvblxuICovXG5leHBvcnQgY29uc3Qgb3BlbmFpID0gbmV3IE9wZW5BSSh7XG4gIGFwaUtleTogZW52Lk9QRU5BSV9BUElfS0VZLFxufSk7ICJdLCJuYW1lcyI6WyJPcGVuQUkiLCJlbnYiLCJvcGVuYWkiLCJhcGlLZXkiLCJPUEVOQUlfQVBJX0tFWSJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./src/server/lib/openai.ts\n");

/***/ }),

/***/ "(rsc)/./src/server/services/ai/aiClient.service.ts":
/*!****************************************************!*\
  !*** ./src/server/services/ai/aiClient.service.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AIClientService: () => (/* binding */ AIClientService),\n/* harmony export */   createLegacyOpenAIClient: () => (/* binding */ createLegacyOpenAIClient)\n/* harmony export */ });\n/* harmony import */ var openai_shims_node__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! openai/shims/node */ \"(rsc)/../../node_modules/openai/shims/node.mjs\");\n/* harmony import */ var openai__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! openai */ \"(rsc)/../../node_modules/openai/index.mjs\");\n/* harmony import */ var _anthropic_ai_sdk__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @anthropic-ai/sdk */ \"(rsc)/../../node_modules/@anthropic-ai/sdk/index.mjs\");\n// src/server/services/ai/aiClient.service.ts\n\n\n\nclass AIClientService {\n    static{\n        this.openaiClient = null;\n    }\n    static{\n        this.anthropicClient = null;\n    }\n    // Initialize clients lazily\n    static getOpenAIClient() {\n        if (!this.openaiClient) {\n            this.openaiClient = new openai__WEBPACK_IMPORTED_MODULE_2__[\"default\"]({\n                apiKey: process.env.OPENAI_API_KEY\n            });\n        }\n        return this.openaiClient;\n    }\n    static getAnthropicClient() {\n        if (!this.anthropicClient) {\n            this.anthropicClient = new _anthropic_ai_sdk__WEBPACK_IMPORTED_MODULE_1__[\"default\"]({\n                apiKey: process.env.ANTHROPIC_API_KEY\n            });\n        }\n        return this.anthropicClient;\n    }\n    // =============================================================================\n    // MAIN API METHOD\n    // =============================================================================\n    static async generateResponse(config, messages, systemPrompt, options) {\n        // Add system prompt if provided\n        const fullMessages = systemPrompt ? [\n            systemPrompt,\n            ...messages.filter((m)=>m.role !== 'system')\n        ] : messages;\n        switch(config.provider){\n            case 'openai':\n                return this.callOpenAI(config, fullMessages, options);\n            case 'anthropic':\n                return this.callAnthropic(config, fullMessages);\n            default:\n                throw new Error(`Unsupported AI provider: ${config.provider}`);\n        }\n    }\n    // =============================================================================\n    // OPENAI IMPLEMENTATION\n    // =============================================================================\n    static async callOpenAI(config, messages, options) {\n        const client = this.getOpenAIClient();\n        try {\n            // Handle O1 models (different API structure)\n            const isO1Model = config.model.includes('o1');\n            if (isO1Model) {\n                // O1 models don't support temperature and have different message structure\n                const response = await client.chat.completions.create({\n                    model: config.model,\n                    messages: messages.map((msg)=>({\n                            role: msg.role === 'system' ? 'user' : msg.role,\n                            content: msg.content\n                        })),\n                    max_completion_tokens: config.maxTokens\n                });\n                return {\n                    content: response.choices[0]?.message?.content || '',\n                    usage: {\n                        promptTokens: response.usage?.prompt_tokens,\n                        completionTokens: response.usage?.completion_tokens,\n                        totalTokens: response.usage?.total_tokens\n                    }\n                };\n            } else {\n                // Standard GPT models\n                const response = await client.chat.completions.create({\n                    model: config.model,\n                    messages: messages,\n                    temperature: config.temperature ?? 0.7,\n                    max_tokens: config.maxTokens,\n                    ...options?.responseFormat && {\n                        response_format: options.responseFormat\n                    }\n                });\n                return {\n                    content: response.choices[0]?.message?.content || '',\n                    usage: {\n                        promptTokens: response.usage?.prompt_tokens,\n                        completionTokens: response.usage?.completion_tokens,\n                        totalTokens: response.usage?.total_tokens\n                    }\n                };\n            }\n        } catch (error) {\n            console.error('OpenAI API Error:', error);\n            throw new Error(`OpenAI API call failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n        }\n    }\n    // =============================================================================\n    // ANTHROPIC IMPLEMENTATION\n    // =============================================================================\n    static async callAnthropic(config, messages) {\n        const client = this.getAnthropicClient();\n        try {\n            // Anthropic has different message structure - system message is separate\n            const systemMessage = messages.find((m)=>m.role === 'system');\n            const conversationMessages = messages.filter((m)=>m.role !== 'system');\n            // Handle messages - Claude Sonnet 4 supports vision\n            const processedMessages = conversationMessages.map((msg)=>{\n                if (typeof msg.content === 'string') {\n                    return {\n                        role: msg.role,\n                        content: msg.content\n                    };\n                } else if (Array.isArray(msg.content)) {\n                    // Convert OpenAI format to Claude format for vision content\n                    const claudeContent = msg.content.map((item)=>{\n                        if (item.type === 'text') {\n                            return {\n                                type: 'text',\n                                text: item.text || ''\n                            };\n                        } else if (item.type === 'image_url' && item.image_url?.url) {\n                            return {\n                                type: 'image',\n                                source: {\n                                    type: 'url',\n                                    url: item.image_url.url\n                                }\n                            };\n                        }\n                        return null;\n                    }).filter(Boolean);\n                    return {\n                        role: msg.role,\n                        content: claudeContent.length > 0 ? claudeContent : ''\n                    };\n                }\n                return {\n                    role: msg.role,\n                    content: String(msg.content)\n                };\n            });\n            const response = await client.messages.create({\n                model: config.model,\n                system: typeof systemMessage?.content === 'string' ? systemMessage.content : undefined,\n                messages: processedMessages,\n                temperature: config.temperature ?? 0.7,\n                max_tokens: config.maxTokens ?? 4096\n            });\n            const content = response.content.filter((block)=>block.type === 'text').map((block)=>block.text).join('');\n            return {\n                content,\n                usage: {\n                    promptTokens: response.usage.input_tokens,\n                    completionTokens: response.usage.output_tokens,\n                    totalTokens: response.usage.input_tokens + response.usage.output_tokens\n                }\n            };\n        } catch (error) {\n            console.error('Anthropic API Error:', error);\n            // Check for image download timeout specifically\n            if (error?.error?.message?.includes('timed out while trying to download the file')) {\n                throw new Error('Image download timeout - The AI couldn\\'t fetch the uploaded image. Please try again in a moment.');\n            }\n            // Check for other timeout errors\n            if (error?.error?.message?.includes('timeout') || error?.message?.includes('timeout')) {\n                throw new Error('Request timeout - The AI service is temporarily slow. Please try again.');\n            }\n            throw new Error(`Anthropic API call failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n        }\n    }\n    // =============================================================================\n    // VISION API SUPPORT\n    // =============================================================================\n    /**\n   * Generate response with vision support (images + text)\n   * Now supports both OpenAI and Claude vision models\n   */ static async generateVisionResponse(config, content, systemPrompt, options) {\n        switch(config.provider){\n            case 'openai':\n                return this.callOpenAIVision(config, content, systemPrompt, options);\n            case 'anthropic':\n                return this.callAnthropicVision(config, content, systemPrompt);\n            default:\n                throw new Error(`Vision API not supported for provider: ${config.provider}`);\n        }\n    }\n    /**\n   * OpenAI Vision API implementation\n   */ static async callOpenAIVision(config, content, systemPrompt, options) {\n        const client = this.getOpenAIClient();\n        try {\n            const messages = [];\n            // Add system message if provided\n            if (systemPrompt) {\n                messages.push({\n                    role: 'system',\n                    content: systemPrompt\n                });\n            }\n            // Add user message with vision content\n            messages.push({\n                role: 'user',\n                content: content\n            });\n            const response = await client.chat.completions.create({\n                model: config.model,\n                messages: messages,\n                temperature: config.temperature ?? 0.4,\n                max_tokens: config.maxTokens ?? 4000,\n                ...options?.responseFormat && {\n                    response_format: options.responseFormat\n                }\n            });\n            return {\n                content: response.choices[0]?.message?.content || '',\n                usage: {\n                    promptTokens: response.usage?.prompt_tokens,\n                    completionTokens: response.usage?.completion_tokens,\n                    totalTokens: response.usage?.total_tokens\n                }\n            };\n        } catch (error) {\n            console.error('OpenAI Vision API Error:', error);\n            throw new Error(`OpenAI Vision API call failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n        }\n    }\n    /**\n   * Claude Vision API implementation (NEW)\n   * Claude 3.5 Haiku and Sonnet support vision\n   */ static async callAnthropicVision(config, content, systemPrompt) {\n        const client = this.getAnthropicClient();\n        try {\n            // Convert OpenAI vision format to Claude format\n            const claudeContent = content.map((item)=>{\n                if (item.type === 'text') {\n                    return {\n                        type: 'text',\n                        text: item.text || ''\n                    };\n                } else if (item.type === 'image_url' && item.image_url?.url) {\n                    return {\n                        type: 'image',\n                        source: {\n                            type: 'url',\n                            url: item.image_url.url\n                        }\n                    };\n                }\n                return null;\n            }).filter(Boolean);\n            const response = await client.messages.create({\n                model: config.model,\n                system: systemPrompt,\n                messages: [\n                    {\n                        role: 'user',\n                        content: claudeContent\n                    }\n                ],\n                temperature: config.temperature ?? 0.4,\n                max_tokens: config.maxTokens ?? 4000\n            });\n            const responseContent = response.content.filter((block)=>block.type === 'text').map((block)=>block.text).join('');\n            return {\n                content: responseContent,\n                usage: {\n                    promptTokens: response.usage.input_tokens,\n                    completionTokens: response.usage.output_tokens,\n                    totalTokens: response.usage.input_tokens + response.usage.output_tokens\n                }\n            };\n        } catch (error) {\n            console.error('Claude Vision API Error:', error);\n            throw new Error(`Claude Vision API call failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n        }\n    }\n    /**\n   * Helper method for image-to-code generation\n   */ static async generateCodeFromImages(config, imageUrls, prompt, systemPrompt) {\n        const content = [\n            {\n                type: 'text',\n                text: prompt\n            },\n            ...imageUrls.map((url)=>({\n                    type: 'image_url',\n                    image_url: {\n                        url,\n                        detail: 'high'\n                    }\n                }))\n        ];\n        return this.generateVisionResponse(config, content, systemPrompt);\n    }\n    // =============================================================================\n    // CONVENIENCE METHODS\n    // =============================================================================\n    static async generateCompletion(config, userPrompt, systemPrompt) {\n        const messages = [\n            {\n                role: 'user',\n                content: userPrompt\n            }\n        ];\n        const response = await this.generateResponse(config, messages, systemPrompt);\n        return response.content;\n    }\n    static async generateWithContext(config, userPrompt, context, systemPrompt) {\n        const messages = [\n            {\n                role: 'user',\n                content: context\n            },\n            {\n                role: 'user',\n                content: userPrompt\n            }\n        ];\n        const response = await this.generateResponse(config, messages, systemPrompt);\n        return response.content;\n    }\n    // =============================================================================\n    // DEVELOPMENT HELPERS\n    // =============================================================================\n    static logModelUsage(config, usage) {\n        if (true) {\n            console.log(`🤖 AI Call: ${config.provider}/${config.model}`);\n            if (usage) {\n                console.log(`📊 Tokens: ${usage.totalTokens} (${usage.promptTokens} + ${usage.completionTokens})`);\n            }\n        }\n    }\n}\n// =============================================================================\n// LEGACY COMPATIBILITY HELPERS\n// =============================================================================\n// Helper to create OpenAI-compatible client for existing code\nfunction createLegacyOpenAIClient(config) {\n    return {\n        chat: {\n            completions: {\n                create: async (params)=>{\n                    const messages = params.messages;\n                    const systemMessage = messages.find((m)=>m.role === 'system');\n                    const userMessages = messages.filter((m)=>m.role !== 'system');\n                    const response = await AIClientService.generateResponse(config, userMessages, systemMessage);\n                    // Return OpenAI-compatible format\n                    return {\n                        choices: [\n                            {\n                                message: {\n                                    content: response.content\n                                }\n                            }\n                        ],\n                        usage: {\n                            prompt_tokens: response.usage?.promptTokens,\n                            completion_tokens: response.usage?.completionTokens,\n                            total_tokens: response.usage?.totalTokens\n                        }\n                    };\n                }\n            }\n        }\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/server/services/ai/aiClient.service.ts\n");

/***/ }),

/***/ "(rsc)/./src/server/services/ai/titleGenerator.service.ts":
/*!**********************************************************!*\
  !*** ./src/server/services/ai/titleGenerator.service.ts ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   generateTitle: () => (/* binding */ generateTitle)\n/* harmony export */ });\n/* harmony import */ var _lib_utils_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ~/lib/utils/logger */ \"(rsc)/./src/lib/utils/logger.ts\");\n/* harmony import */ var _server_services_ai_aiClient_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ~/server/services/ai/aiClient.service */ \"(rsc)/./src/server/services/ai/aiClient.service.ts\");\n/* harmony import */ var _config_models_config__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ~/config/models.config */ \"(rsc)/./src/config/models.config.ts\");\n/* harmony import */ var _config_prompts_config__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ~/config/prompts.config */ \"(rsc)/./src/config/prompts.config.ts\");\n// src/server/services/ai/titleGenerator.service.ts\n\n\n\n\n// Create a logger for title generation\nconst titleLogger = {\n    start: (contextId, message, meta = {})=>{\n        _lib_utils_logger__WEBPACK_IMPORTED_MODULE_0__[\"default\"].debug(`[TITLE:START][CTX:${contextId}] ${message}`, {\n            ...meta,\n            titleGenerator: true\n        });\n    },\n    prompt: (contextId, message, meta = {})=>{\n        _lib_utils_logger__WEBPACK_IMPORTED_MODULE_0__[\"default\"].debug(`[TITLE:PROMPT][CTX:${contextId}] ${message}`, {\n            ...meta,\n            titleGenerator: true\n        });\n    },\n    llm: (contextId, message, meta = {})=>{\n        _lib_utils_logger__WEBPACK_IMPORTED_MODULE_0__[\"default\"].debug(`[TITLE:LLM][CTX:${contextId}] ${message}`, {\n            ...meta,\n            titleGenerator: true\n        });\n    },\n    error: (contextId, message, meta = {})=>{\n        _lib_utils_logger__WEBPACK_IMPORTED_MODULE_0__[\"default\"].error(`[TITLE:ERROR][CTX:${contextId}] ${message}`, {\n            ...meta,\n            titleGenerator: true\n        });\n    },\n    success: (contextId, message, meta = {})=>{\n        _lib_utils_logger__WEBPACK_IMPORTED_MODULE_0__[\"default\"].info(`[TITLE:SUCCESS][CTX:${contextId}] ${message}`, {\n            ...meta,\n            titleGenerator: true\n        });\n    }\n};\n/**\n * Generate a concise, descriptive video project title based on the user's initial prompt\n * using LLM capabilities.\n *\n * @param params The parameters for title generation\n * @returns A promise resolving to the generated title\n */ async function generateTitle(params) {\n    const { prompt, contextId = \"unknown\" } = params;\n    const startTime = Date.now();\n    titleLogger.start(contextId, `Generating title for prompt: \"${prompt.substring(0, 50)}...\"`);\n    try {\n        // Use centralized model and prompt configuration\n        const titleModelConfig = (0,_config_models_config__WEBPACK_IMPORTED_MODULE_2__.getModel)('titleGenerator');\n        const systemPromptConfig = (0,_config_prompts_config__WEBPACK_IMPORTED_MODULE_3__.getSystemPrompt)('TITLE_GENERATOR');\n        titleLogger.prompt(contextId, \"Sending title generation prompt to LLM\", {\n            promptLength: prompt.length,\n            model: `${titleModelConfig.provider}/${titleModelConfig.model}`\n        });\n        const llmStartTime = Date.now();\n        const messages = [\n            {\n                role: \"user\",\n                content: prompt\n            }\n        ];\n        const aiResponse = await _server_services_ai_aiClient_service__WEBPACK_IMPORTED_MODULE_1__.AIClientService.generateResponse(titleModelConfig, messages, systemPromptConfig, {\n            responseFormat: {\n                type: \"json_object\"\n            }\n        });\n        const llmDuration = Date.now() - llmStartTime;\n        titleLogger.llm(contextId, `Received LLM response in ${llmDuration}ms`, {\n            duration: llmDuration,\n            model: titleModelConfig.model,\n            usage: aiResponse.usage\n        });\n        let args;\n        try {\n            if (!aiResponse.content) {\n                throw new Error(\"LLM response content is empty.\");\n            }\n            args = JSON.parse(aiResponse.content);\n            if (!args.title || typeof args.title !== 'string' || args.title.trim() === \"\") {\n                throw new Error(\"Parsed title is empty, not a string, or invalid.\");\n            }\n        } catch (error) {\n            const errMessage = error instanceof Error ? error.message : String(error);\n            titleLogger.error(contextId, \"Failed to parse LLM JSON response or invalid format\", {\n                error: errMessage,\n                responseContent: aiResponse.content\n            });\n            return {\n                title: \"New Video Project\"\n            }; // Fallback\n        }\n        const duration = Date.now() - startTime;\n        titleLogger.success(contextId, `Title generated in ${duration}ms: \"${args.title}\"`, {\n            title: args.title,\n            duration,\n            hasReasoning: !!args.reasoning\n        });\n        return {\n            title: args.title,\n            reasoning: args.reasoning\n        };\n    } catch (error) {\n        const errorMessage = error instanceof Error ? error.message : \"Unknown error\";\n        titleLogger.error(contextId, `Failed to generate title: ${errorMessage}`, {\n            error\n        });\n        return {\n            title: \"New Video Project\"\n        }; // Fallback\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/server/services/ai/titleGenerator.service.ts\n");

/***/ }),

/***/ "(rsc)/./src/server/services/data/dataLifecycle.service.ts":
/*!***********************************************************!*\
  !*** ./src/server/services/data/dataLifecycle.service.ts ***!
  \***********************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DataLifecycleService: () => (/* binding */ DataLifecycleService),\n/* harmony export */   dataLifecycleService: () => (/* binding */ dataLifecycleService)\n/* harmony export */ });\n/* harmony import */ var _bazaar_database__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @bazaar/database */ \"(rsc)/../../packages/database/index.ts\");\n/* harmony import */ var drizzle_orm__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! drizzle-orm */ \"drizzle-orm\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_bazaar_database__WEBPACK_IMPORTED_MODULE_0__, drizzle_orm__WEBPACK_IMPORTED_MODULE_1__]);\n([_bazaar_database__WEBPACK_IMPORTED_MODULE_0__, drizzle_orm__WEBPACK_IMPORTED_MODULE_1__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n// src/server/services/data/dataLifecycle.service.ts\n\n\n\nclass DataLifecycleService {\n    /**\n   * Start automated cleanup service\n   */ startAutomatedCleanup(config = {}) {\n        const fullConfig = {\n            ...this.defaultConfig,\n            ...config\n        };\n        if (!fullConfig.enableAutoCleanup) {\n            console.log('🗂️ [DataLifecycle] Automated cleanup disabled');\n            return;\n        }\n        // Clear any existing interval\n        if (this.cleanupInterval) {\n            clearInterval(this.cleanupInterval);\n        }\n        const intervalMs = fullConfig.cleanupIntervalHours * 60 * 60 * 1000;\n        this.cleanupInterval = setInterval(async ()=>{\n            try {\n                console.log('🗂️ [DataLifecycle] Starting automated cleanup...');\n                const result = await this.performCleanup(fullConfig);\n                this.logCleanupResult(result);\n            } catch (error) {\n                console.error('❌ [DataLifecycle] Automated cleanup failed:', error);\n            }\n        }, intervalMs);\n        console.log(`🗂️ [DataLifecycle] Automated cleanup started (every ${fullConfig.cleanupIntervalHours}h)`);\n    }\n    /**\n   * Stop automated cleanup service\n   */ stopAutomatedCleanup() {\n        if (this.cleanupInterval) {\n            clearInterval(this.cleanupInterval);\n            this.cleanupInterval = null;\n            console.log('🗂️ [DataLifecycle] Automated cleanup stopped');\n        }\n    }\n    /**\n   * Perform comprehensive data cleanup\n   */ async performCleanup(config = {}) {\n        const fullConfig = {\n            ...this.defaultConfig,\n            ...config\n        };\n        const startTime = performance.now();\n        const cleanupStartTime = Date.now();\n        console.log('🗂️ [DataLifecycle] Starting comprehensive cleanup...');\n        console.log(`📅 Retention periods: Images(${fullConfig.imageAnalysisRetentionDays}d), Context(${fullConfig.conversationContextRetentionDays}d), Iterations(${fullConfig.sceneIterationsRetentionDays}d), Memory(${fullConfig.projectMemoryRetentionDays}d)`);\n        try {\n            // Cleanup old image analysis records\n            const imageAnalysisDeleted = await this.cleanupImageAnalysis(fullConfig.imageAnalysisRetentionDays);\n            // Cleanup old conversation context\n            const conversationDeleted = await this.cleanupConversationContext(fullConfig.conversationContextRetentionDays);\n            // Cleanup old scene iterations  \n            const sceneIterationsDeleted = await this.cleanupSceneIterations(fullConfig.sceneIterationsRetentionDays);\n            // Cleanup old project memory records\n            const projectMemoryDeleted = await this.cleanupProjectMemory(fullConfig.projectMemoryRetentionDays);\n            const cleanupDuration = Date.now() - cleanupStartTime;\n            const result = {\n                imageAnalysisRecordsDeleted: imageAnalysisDeleted,\n                conversationRecordsDeleted: conversationDeleted,\n                sceneIterationsDeleted: sceneIterationsDeleted,\n                projectMemoryRecordsDeleted: projectMemoryDeleted,\n                totalSpaceReclaimed: this.estimateSpaceReclaimed(imageAnalysisDeleted + conversationDeleted + sceneIterationsDeleted + projectMemoryDeleted),\n                cleanupDurationMs: cleanupDuration\n            };\n            console.log('✅ [DataLifecycle] Cleanup completed successfully');\n            return result;\n        } catch (error) {\n            // Cleanup ended\n            console.error('❌ [DataLifecycle] Cleanup failed:', error);\n            throw error;\n        }\n    }\n    /**\n   * Cleanup old image analysis records\n   */ async cleanupImageAnalysis(retentionDays) {\n        const cutoffDate = new Date();\n        cutoffDate.setDate(cutoffDate.getDate() - retentionDays);\n        if (this.DEBUG) {\n            console.log(`🖼️ [DataLifecycle] Cleaning image analysis older than ${cutoffDate.toISOString()}`);\n        }\n        try {\n            const result = await _bazaar_database__WEBPACK_IMPORTED_MODULE_0__.db.delete(_bazaar_database__WEBPACK_IMPORTED_MODULE_0__.imageAnalysis).where((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_1__.lt)(_bazaar_database__WEBPACK_IMPORTED_MODULE_0__.imageAnalysis.createdAt, cutoffDate));\n            const deletedCount = result.rowCount || 0;\n            console.log(`🖼️ [DataLifecycle] Deleted ${deletedCount} old image analysis records`);\n            return deletedCount;\n        } catch (error) {\n            console.error('❌ [DataLifecycle] Image analysis cleanup failed:', error);\n            return 0;\n        }\n    }\n    /**\n   * Cleanup old conversation context from project memory\n   */ async cleanupConversationContext(retentionDays) {\n        const cutoffDate = new Date();\n        cutoffDate.setDate(cutoffDate.getDate() - retentionDays);\n        if (this.DEBUG) {\n            console.log(`💬 [DataLifecycle] Cleaning conversation context older than ${cutoffDate.toISOString()}`);\n        }\n        try {\n            const result = await _bazaar_database__WEBPACK_IMPORTED_MODULE_0__.db.delete(_bazaar_database__WEBPACK_IMPORTED_MODULE_0__.projectMemory).where((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_1__.and)((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_1__.eq)(_bazaar_database__WEBPACK_IMPORTED_MODULE_0__.projectMemory.memoryType, 'conversation_context'), (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_1__.lt)(_bazaar_database__WEBPACK_IMPORTED_MODULE_0__.projectMemory.updatedAt, cutoffDate)));\n            const deletedCount = result.rowCount || 0;\n            console.log(`💬 [DataLifecycle] Deleted ${deletedCount} old conversation context records`);\n            return deletedCount;\n        } catch (error) {\n            console.error('❌ [DataLifecycle] Conversation context cleanup failed:', error);\n            return 0;\n        }\n    }\n    /**\n   * Cleanup old scene iterations\n   */ async cleanupSceneIterations(retentionDays) {\n        const cutoffDate = new Date();\n        cutoffDate.setDate(cutoffDate.getDate() - retentionDays);\n        if (this.DEBUG) {\n            console.log(`🎬 [DataLifecycle] Cleaning scene iterations older than ${cutoffDate.toISOString()}`);\n        }\n        try {\n            const result = await _bazaar_database__WEBPACK_IMPORTED_MODULE_0__.db.delete(_bazaar_database__WEBPACK_IMPORTED_MODULE_0__.sceneIterations).where((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_1__.lt)(_bazaar_database__WEBPACK_IMPORTED_MODULE_0__.sceneIterations.createdAt, cutoffDate));\n            const deletedCount = result.rowCount || 0;\n            console.log(`🎬 [DataLifecycle] Deleted ${deletedCount} old scene iteration records`);\n            return deletedCount;\n        } catch (error) {\n            console.error('❌ [DataLifecycle] Scene iterations cleanup failed:', error);\n            return 0;\n        }\n    }\n    /**\n   * Cleanup old project memory records (keep user preferences, clean temporary data)\n   */ async cleanupProjectMemory(retentionDays) {\n        const cutoffDate = new Date();\n        cutoffDate.setDate(cutoffDate.getDate() - retentionDays);\n        if (this.DEBUG) {\n            console.log(`🧠 [DataLifecycle] Cleaning temporary project memory older than ${cutoffDate.toISOString()}`);\n        }\n        try {\n            // Only delete temporary/transient memory types, keep user preferences\n            const temporaryTypes = [\n                'conversation_context',\n                'temporary_note',\n                'session_data'\n            ];\n            let totalDeleted = 0;\n            for (const memoryType of temporaryTypes){\n                const result = await _bazaar_database__WEBPACK_IMPORTED_MODULE_0__.db.delete(_bazaar_database__WEBPACK_IMPORTED_MODULE_0__.projectMemory).where((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_1__.and)((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_1__.eq)(_bazaar_database__WEBPACK_IMPORTED_MODULE_0__.projectMemory.memoryType, memoryType), (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_1__.lt)(_bazaar_database__WEBPACK_IMPORTED_MODULE_0__.projectMemory.updatedAt, cutoffDate)));\n                totalDeleted += result.rowCount || 0;\n            }\n            console.log(`🧠 [DataLifecycle] Deleted ${totalDeleted} old temporary project memory records`);\n            return totalDeleted;\n        } catch (error) {\n            console.error('❌ [DataLifecycle] Project memory cleanup failed:', error);\n            return 0;\n        }\n    }\n    /**\n   * Estimate space reclaimed from cleanup\n   */ estimateSpaceReclaimed(totalRecords) {\n        // Rough estimates for record sizes\n        const avgRecordSizeKB = 2; // Conservative estimate\n        const totalKB = totalRecords * avgRecordSizeKB;\n        if (totalKB < 1024) {\n            return `${totalKB.toFixed(1)} KB`;\n        } else if (totalKB < 1024 * 1024) {\n            return `${(totalKB / 1024).toFixed(1)} MB`;\n        } else {\n            return `${(totalKB / (1024 * 1024)).toFixed(1)} GB`;\n        }\n    }\n    /**\n   * Get data lifecycle statistics\n   */ async getLifecycleStats() {\n        try {\n            // Get counts from each table\n            const [imageCount] = await _bazaar_database__WEBPACK_IMPORTED_MODULE_0__.db.select().from(_bazaar_database__WEBPACK_IMPORTED_MODULE_0__.imageAnalysis);\n            const [conversationCount] = await _bazaar_database__WEBPACK_IMPORTED_MODULE_0__.db.select().from(_bazaar_database__WEBPACK_IMPORTED_MODULE_0__.projectMemory).where((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_1__.eq)(_bazaar_database__WEBPACK_IMPORTED_MODULE_0__.projectMemory.memoryType, 'conversation_context'));\n            const [iterationsCount] = await _bazaar_database__WEBPACK_IMPORTED_MODULE_0__.db.select().from(_bazaar_database__WEBPACK_IMPORTED_MODULE_0__.sceneIterations);\n            const [memoryCount] = await _bazaar_database__WEBPACK_IMPORTED_MODULE_0__.db.select().from(_bazaar_database__WEBPACK_IMPORTED_MODULE_0__.projectMemory);\n            // Find oldest record\n            const oldestImage = await _bazaar_database__WEBPACK_IMPORTED_MODULE_0__.db.select().from(_bazaar_database__WEBPACK_IMPORTED_MODULE_0__.imageAnalysis).orderBy(_bazaar_database__WEBPACK_IMPORTED_MODULE_0__.imageAnalysis.createdAt).limit(1);\n            const oldestAge = oldestImage.length > 0 ? this.formatAge(oldestImage[0].createdAt) : 'No records';\n            return {\n                imageAnalysisCount: imageCount ? 1 : 0,\n                conversationContextCount: conversationCount ? 1 : 0,\n                sceneIterationsCount: iterationsCount ? 1 : 0,\n                projectMemoryCount: memoryCount ? 1 : 0,\n                oldestRecordAge: oldestAge\n            };\n        } catch (error) {\n            console.error('❌ [DataLifecycle] Failed to get stats:', error);\n            throw error;\n        }\n    }\n    /**\n   * Format age of record for display\n   */ formatAge(date) {\n        const now = new Date();\n        const diffMs = now.getTime() - date.getTime();\n        const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));\n        if (diffDays < 1) {\n            return 'Less than 1 day';\n        } else if (diffDays < 30) {\n            return `${diffDays} days`;\n        } else if (diffDays < 365) {\n            const months = Math.floor(diffDays / 30);\n            return `${months} month${months === 1 ? '' : 's'}`;\n        } else {\n            const years = Math.floor(diffDays / 365);\n            return `${years} year${years === 1 ? '' : 's'}`;\n        }\n    }\n    /**\n   * Log cleanup results\n   */ logCleanupResult(result) {\n        console.log(`\\n🗂️ [DataLifecycle] Cleanup Results:`);\n        console.log(`  📊 Records deleted:`);\n        console.log(`    🖼️  Image analysis: ${result.imageAnalysisRecordsDeleted}`);\n        console.log(`    💬 Conversation context: ${result.conversationRecordsDeleted}`);\n        console.log(`    🎬 Scene iterations: ${result.sceneIterationsDeleted}`);\n        console.log(`    🧠 Project memory: ${result.projectMemoryRecordsDeleted}`);\n        console.log(`  💾 Space reclaimed: ${result.totalSpaceReclaimed}`);\n        console.log(`  ⏱️  Duration: ${result.cleanupDurationMs.toFixed(2)}ms`);\n    }\n    /**\n   * Force immediate cleanup (for testing/admin)\n   */ async forceCleanup(config = {}) {\n        console.log('🗂️ [DataLifecycle] Force cleanup requested');\n        return await this.performCleanup(config);\n    }\n    constructor(){\n        this.DEBUG = \"development\" === 'development';\n        this.cleanupInterval = null;\n        this.defaultConfig = {\n            imageAnalysisRetentionDays: 30,\n            conversationContextRetentionDays: 90,\n            sceneIterationsRetentionDays: 60,\n            projectMemoryRetentionDays: 180,\n            enableAutoCleanup: true,\n            cleanupIntervalHours: 24\n        };\n    }\n}\n// Export singleton instance\nconst dataLifecycleService = new DataLifecycleService();\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/server/services/data/dataLifecycle.service.ts\n");

/***/ }),

/***/ "(rsc)/./src/server/services/data/message.service.ts":
/*!*****************************************************!*\
  !*** ./src/server/services/data/message.service.ts ***!
  \*****************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MessageService: () => (/* binding */ MessageService),\n/* harmony export */   messageService: () => (/* binding */ messageService)\n/* harmony export */ });\n/* harmony import */ var drizzle_orm__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! drizzle-orm */ \"drizzle-orm\");\n/* harmony import */ var _bazaar_database__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @bazaar/database */ \"(rsc)/../../packages/database/index.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([drizzle_orm__WEBPACK_IMPORTED_MODULE_0__, _bazaar_database__WEBPACK_IMPORTED_MODULE_1__]);\n([drizzle_orm__WEBPACK_IMPORTED_MODULE_0__, _bazaar_database__WEBPACK_IMPORTED_MODULE_1__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n// src/server/services/data/message.service.ts\n\n\n\nclass MessageService {\n    /**\n   * Get the next sequence number for a project's messages\n   * This ensures proper message ordering even with concurrent requests\n   */ async getNextSequenceNumber(projectId) {\n        // Use a single query to get the max sequence number\n        const result = await _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.db.select({\n            maxSequence: (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_0__.sql)`COALESCE(MAX(${_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.messages.sequence}), 0)`\n        }).from(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.messages).where((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_0__.eq)(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.messages.projectId, projectId));\n        const maxSequence = result[0]?.maxSequence ?? 0;\n        return maxSequence + 1;\n    }\n    /**\n   * Create a message with proper sequence number\n   */ async createMessage(data) {\n        const sequence = await this.getNextSequenceNumber(data.projectId);\n        const messageData = {\n            id: data.id,\n            projectId: data.projectId,\n            content: data.content,\n            role: data.role,\n            sequence,\n            createdAt: new Date(),\n            imageUrls: data.imageUrls,\n            status: data.status,\n            kind: data.kind\n        };\n        const [newMessage] = await _bazaar_database__WEBPACK_IMPORTED_MODULE_1__.db.insert(_bazaar_database__WEBPACK_IMPORTED_MODULE_1__.messages).values(messageData).returning();\n        return newMessage;\n    }\n}\n// Export singleton instance\nconst messageService = new MessageService();\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvc2VydmVyL3NlcnZpY2VzL2RhdGEvbWVzc2FnZS5zZXJ2aWNlLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQSw4Q0FBOEM7QUFDRjtBQUNOO0FBQ007QUFFckMsTUFBTUk7SUFDWDs7O0dBR0MsR0FDRCxNQUFNQyxzQkFBc0JDLFNBQWlCLEVBQW1CO1FBQzlELG9EQUFvRDtRQUNwRCxNQUFNQyxTQUFTLE1BQU1MLGdEQUFFQSxDQUNwQk0sTUFBTSxDQUFDO1lBQUVDLGFBQWFSLGdEQUFXLENBQUMsYUFBYSxFQUFFRSxzREFBUUEsQ0FBQ08sUUFBUSxDQUFDLEtBQUssQ0FBQztRQUFDLEdBQzFFQyxJQUFJLENBQUNSLHNEQUFRQSxFQUNiUyxLQUFLLENBQUNaLCtDQUFFQSxDQUFDRyxzREFBUUEsQ0FBQ0csU0FBUyxFQUFFQTtRQUVoQyxNQUFNRyxjQUFjRixNQUFNLENBQUMsRUFBRSxFQUFFRSxlQUFlO1FBQzlDLE9BQU9BLGNBQWM7SUFDdkI7SUFFQTs7R0FFQyxHQUNELE1BQU1JLGNBQWNDLElBUW5CLEVBQUU7UUFDRCxNQUFNSixXQUFXLE1BQU0sSUFBSSxDQUFDTCxxQkFBcUIsQ0FBQ1MsS0FBS1IsU0FBUztRQUVoRSxNQUFNUyxjQUFjO1lBQ2xCQyxJQUFJRixLQUFLRSxFQUFFO1lBQ1hWLFdBQVdRLEtBQUtSLFNBQVM7WUFDekJXLFNBQVNILEtBQUtHLE9BQU87WUFDckJDLE1BQU1KLEtBQUtJLElBQUk7WUFDZlI7WUFDQVMsV0FBVyxJQUFJQztZQUNmQyxXQUFXUCxLQUFLTyxTQUFTO1lBQ3pCQyxRQUFRUixLQUFLUSxNQUFNO1lBQ25CQyxNQUFNVCxLQUFLUyxJQUFJO1FBQ2pCO1FBRUEsTUFBTSxDQUFDQyxXQUFXLEdBQUcsTUFBTXRCLGdEQUFFQSxDQUFDdUIsTUFBTSxDQUFDdEIsc0RBQVFBLEVBQUV1QixNQUFNLENBQUNYLGFBQWFZLFNBQVM7UUFFNUUsT0FBT0g7SUFDVDtBQUNGO0FBRUEsNEJBQTRCO0FBQ3JCLE1BQU1JLGlCQUFpQixJQUFJeEIsaUJBQWlCIiwic291cmNlcyI6WyIvVXNlcnMvbWFya3VzaG9nbmUvRG9jdW1lbnRzL0FQUFMvYmF6YWFyLXZpZC9iYXphYXItdmlkL2FwcHMvbWFpbi9zcmMvc2VydmVyL3NlcnZpY2VzL2RhdGEvbWVzc2FnZS5zZXJ2aWNlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHNyYy9zZXJ2ZXIvc2VydmljZXMvZGF0YS9tZXNzYWdlLnNlcnZpY2UudHNcbmltcG9ydCB7IGVxLCBkZXNjLCBzcWwgfSBmcm9tIFwiZHJpenpsZS1vcm1cIjtcbmltcG9ydCB7IGRiIH0gZnJvbSBcIkBiYXphYXIvZGF0YWJhc2VcIjtcbmltcG9ydCB7IG1lc3NhZ2VzIH0gZnJvbSBcIkBiYXphYXIvZGF0YWJhc2VcIjtcblxuZXhwb3J0IGNsYXNzIE1lc3NhZ2VTZXJ2aWNlIHtcbiAgLyoqXG4gICAqIEdldCB0aGUgbmV4dCBzZXF1ZW5jZSBudW1iZXIgZm9yIGEgcHJvamVjdCdzIG1lc3NhZ2VzXG4gICAqIFRoaXMgZW5zdXJlcyBwcm9wZXIgbWVzc2FnZSBvcmRlcmluZyBldmVuIHdpdGggY29uY3VycmVudCByZXF1ZXN0c1xuICAgKi9cbiAgYXN5bmMgZ2V0TmV4dFNlcXVlbmNlTnVtYmVyKHByb2plY3RJZDogc3RyaW5nKTogUHJvbWlzZTxudW1iZXI+IHtcbiAgICAvLyBVc2UgYSBzaW5nbGUgcXVlcnkgdG8gZ2V0IHRoZSBtYXggc2VxdWVuY2UgbnVtYmVyXG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgZGJcbiAgICAgIC5zZWxlY3QoeyBtYXhTZXF1ZW5jZTogc3FsPG51bWJlcj5gQ09BTEVTQ0UoTUFYKCR7bWVzc2FnZXMuc2VxdWVuY2V9KSwgMClgIH0pXG4gICAgICAuZnJvbShtZXNzYWdlcylcbiAgICAgIC53aGVyZShlcShtZXNzYWdlcy5wcm9qZWN0SWQsIHByb2plY3RJZCkpO1xuICAgIFxuICAgIGNvbnN0IG1heFNlcXVlbmNlID0gcmVzdWx0WzBdPy5tYXhTZXF1ZW5jZSA/PyAwO1xuICAgIHJldHVybiBtYXhTZXF1ZW5jZSArIDE7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIGEgbWVzc2FnZSB3aXRoIHByb3BlciBzZXF1ZW5jZSBudW1iZXJcbiAgICovXG4gIGFzeW5jIGNyZWF0ZU1lc3NhZ2UoZGF0YToge1xuICAgIHByb2plY3RJZDogc3RyaW5nO1xuICAgIGNvbnRlbnQ6IHN0cmluZztcbiAgICByb2xlOiAndXNlcicgfCAnYXNzaXN0YW50JztcbiAgICBpbWFnZVVybHM/OiBzdHJpbmdbXTtcbiAgICBzdGF0dXM/OiBzdHJpbmc7XG4gICAga2luZD86IHN0cmluZztcbiAgICBpZD86IHN0cmluZztcbiAgfSkge1xuICAgIGNvbnN0IHNlcXVlbmNlID0gYXdhaXQgdGhpcy5nZXROZXh0U2VxdWVuY2VOdW1iZXIoZGF0YS5wcm9qZWN0SWQpO1xuICAgIFxuICAgIGNvbnN0IG1lc3NhZ2VEYXRhID0ge1xuICAgICAgaWQ6IGRhdGEuaWQsXG4gICAgICBwcm9qZWN0SWQ6IGRhdGEucHJvamVjdElkLFxuICAgICAgY29udGVudDogZGF0YS5jb250ZW50LFxuICAgICAgcm9sZTogZGF0YS5yb2xlLFxuICAgICAgc2VxdWVuY2UsXG4gICAgICBjcmVhdGVkQXQ6IG5ldyBEYXRlKCksXG4gICAgICBpbWFnZVVybHM6IGRhdGEuaW1hZ2VVcmxzLFxuICAgICAgc3RhdHVzOiBkYXRhLnN0YXR1cyxcbiAgICAgIGtpbmQ6IGRhdGEua2luZCxcbiAgICB9O1xuXG4gICAgY29uc3QgW25ld01lc3NhZ2VdID0gYXdhaXQgZGIuaW5zZXJ0KG1lc3NhZ2VzKS52YWx1ZXMobWVzc2FnZURhdGEpLnJldHVybmluZygpO1xuICAgIFxuICAgIHJldHVybiBuZXdNZXNzYWdlO1xuICB9XG59XG5cbi8vIEV4cG9ydCBzaW5nbGV0b24gaW5zdGFuY2VcbmV4cG9ydCBjb25zdCBtZXNzYWdlU2VydmljZSA9IG5ldyBNZXNzYWdlU2VydmljZSgpOyJdLCJuYW1lcyI6WyJlcSIsInNxbCIsImRiIiwibWVzc2FnZXMiLCJNZXNzYWdlU2VydmljZSIsImdldE5leHRTZXF1ZW5jZU51bWJlciIsInByb2plY3RJZCIsInJlc3VsdCIsInNlbGVjdCIsIm1heFNlcXVlbmNlIiwic2VxdWVuY2UiLCJmcm9tIiwid2hlcmUiLCJjcmVhdGVNZXNzYWdlIiwiZGF0YSIsIm1lc3NhZ2VEYXRhIiwiaWQiLCJjb250ZW50Iiwicm9sZSIsImNyZWF0ZWRBdCIsIkRhdGUiLCJpbWFnZVVybHMiLCJzdGF0dXMiLCJraW5kIiwibmV3TWVzc2FnZSIsImluc2VydCIsInZhbHVlcyIsInJldHVybmluZyIsIm1lc3NhZ2VTZXJ2aWNlIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./src/server/services/data/message.service.ts\n");

/***/ }),

/***/ "(rsc)/./src/tools/add/add.ts":
/*!******************************!*\
  !*** ./src/tools/add/add.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AddTool: () => (/* binding */ AddTool),\n/* harmony export */   addTool: () => (/* binding */ addTool)\n/* harmony export */ });\n/* harmony import */ var _tools_helpers_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ~/tools/helpers/base */ \"(rsc)/./src/tools/helpers/base.ts\");\n/* harmony import */ var _add_helpers_CodeGeneratorNEW__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./add_helpers/CodeGeneratorNEW */ \"(rsc)/./src/tools/add/add_helpers/CodeGeneratorNEW.ts\");\n/* harmony import */ var _tools_helpers_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ~/tools/helpers/types */ \"(rsc)/./src/tools/helpers/types.ts\");\n\n\n\n/**\n * ADD Tool - Pure function that generates scene content\n * NO DATABASE ACCESS - only generation\n * Sprint 42: Refactored to pure function\n */ class AddTool extends _tools_helpers_base__WEBPACK_IMPORTED_MODULE_0__.BaseMCPTool {\n    async execute(input) {\n        console.log('\\n🔨 [ADD TOOL - PURE FUNCTION] === EXECUTING ===');\n        console.log('🔨 [ADD TOOL] Input:', {\n            prompt: input.userPrompt.substring(0, 50) + '...',\n            hasImages: !!input.imageUrls?.length,\n            hasWebContext: !!input.webContext,\n            sceneNumber: input.sceneNumber,\n            hasPreviousScene: !!input.previousSceneContext\n        });\n        console.log('🔨 [ADD TOOL] NOTE: This is a PURE FUNCTION - no database access!');\n        try {\n            // Handle web context + image-based scene creation\n            if (input.webContext && (input.imageUrls?.length || 0) > 0) {\n                console.log('🔨 [ADD TOOL] Using web context + images generation');\n                return await this.generateFromWebAndImages(input);\n            }\n            // Handle web context only\n            if (input.webContext) {\n                console.log('🔨 [ADD TOOL] Using web context generation for', input.webContext.originalUrl);\n                return await this.generateFromWebContext(input);\n            }\n            // Handle image-based scene creation\n            if (input.imageUrls && input.imageUrls.length > 0) {\n                console.log('🔨 [ADD TOOL] Using image-based generation for', input.imageUrls.length, 'images');\n                return await this.generateFromImages(input);\n            }\n            // Handle text-based scene creation\n            console.log('🔨 [ADD TOOL] Using text-based generation');\n            return await this.generateFromText(input);\n        } catch (error) {\n            return {\n                success: false,\n                reasoning: `Failed to generate scene: ${error instanceof Error ? error.message : 'Unknown error'}`,\n                error: error instanceof Error ? error.message : 'Unknown error'\n            };\n        }\n    }\n    /**\n   * Generate scene from text prompt\n   * PURE FUNCTION - no side effects\n   */ async generateFromText(input) {\n        // Generate function name (deterministic based on input)\n        const functionName = this.generateFunctionName(input.projectId, input.sceneNumber);\n        // If we have a previous scene with code, use it as reference\n        if (input.previousSceneContext?.tsxCode) {\n            console.log('🔨 [ADD TOOL] Previous scene detected - using code reference');\n            // Generate code directly using previous scene as reference\n            const codeResult = await _add_helpers_CodeGeneratorNEW__WEBPACK_IMPORTED_MODULE_1__.codeGenerator.generateCodeWithReference({\n                userPrompt: input.userPrompt,\n                functionName: functionName,\n                projectId: input.projectId,\n                previousSceneCode: input.previousSceneContext.tsxCode\n            });\n            const result = {\n                success: true,\n                tsxCode: codeResult.code,\n                name: codeResult.name,\n                duration: codeResult.duration,\n                reasoning: `Generated new scene based on previous scene: ${codeResult.reasoning}`,\n                chatResponse: `I've created a new scene based on the previous scene style`,\n                scene: {\n                    tsxCode: codeResult.code,\n                    name: codeResult.name,\n                    duration: codeResult.duration\n                },\n                debug: {\n                    usedPreviousScene: true,\n                    codeGeneration: codeResult.debug\n                }\n            };\n            console.log('✅ [ADD TOOL] Finished with reference - returning result:', {\n                name: result.name,\n                duration: result.duration,\n                codeLength: result.tsxCode.length,\n                firstLine: result.tsxCode.split('\\n')[0]\n            });\n            return result;\n        }\n        // DIRECT CODE GENERATION - Skip layout entirely!\n        console.log('⚡ [ADD TOOL] Using DIRECT code generation - no layout step!');\n        const codeResult = await _add_helpers_CodeGeneratorNEW__WEBPACK_IMPORTED_MODULE_1__.codeGenerator.generateCodeDirect({\n            userPrompt: input.userPrompt,\n            functionName: functionName,\n            projectId: input.projectId\n        });\n        // Return generated content - NO DATABASE!\n        const result = {\n            success: true,\n            tsxCode: codeResult.code,\n            name: codeResult.name,\n            duration: codeResult.duration,\n            reasoning: `Generated ${codeResult.name}: ${codeResult.reasoning}`,\n            chatResponse: `I've created ${codeResult.name}`,\n            scene: {\n                tsxCode: codeResult.code,\n                name: codeResult.name,\n                duration: codeResult.duration\n            },\n            debug: {\n                method: 'direct',\n                codeGeneration: codeResult.debug\n            }\n        };\n        console.log('✅ [ADD TOOL] Finished direct generation - returning result:', {\n            name: result.name,\n            duration: result.duration,\n            codeLength: result.tsxCode.length,\n            firstLine: result.tsxCode.split('\\n')[0]\n        });\n        return result;\n    }\n    /**\n   * Generate scene from images\n   * PURE FUNCTION - no side effects\n   */ async generateFromImages(input) {\n        if (!input.imageUrls || input.imageUrls.length === 0) {\n            throw new Error(\"No images provided\");\n        }\n        const functionName = this.generateFunctionName(input.projectId, input.sceneNumber);\n        // Generate code directly from images\n        const codeResult = await _add_helpers_CodeGeneratorNEW__WEBPACK_IMPORTED_MODULE_1__.codeGenerator.generateCodeFromImage({\n            imageUrls: input.imageUrls,\n            userPrompt: input.userPrompt,\n            functionName: functionName,\n            visionAnalysis: input.visionAnalysis\n        });\n        // Return generated content - NO DATABASE!\n        const result = {\n            success: true,\n            tsxCode: codeResult.code,\n            name: codeResult.name,\n            duration: codeResult.duration,\n            reasoning: `Generated from ${input.imageUrls.length} image(s): ${codeResult.reasoning}`,\n            chatResponse: `I've created ${codeResult.name} based on your image(s)`,\n            scene: {\n                tsxCode: codeResult.code,\n                name: codeResult.name,\n                duration: codeResult.duration\n            },\n            debug: {\n                imageGeneration: codeResult.debug\n            }\n        };\n        console.log('✅ [ADD TOOL] Finished image generation - returning result:', {\n            name: result.name,\n            duration: result.duration,\n            codeLength: result.tsxCode.length,\n            imageCount: input.imageUrls.length\n        });\n        return result;\n    }\n    /**\n   * Generate scene from web context screenshots\n   * PURE FUNCTION - no side effects\n   */ async generateFromWebContext(input) {\n        if (!input.webContext) {\n            throw new Error(\"No web context provided\");\n        }\n        const functionName = this.generateFunctionName(input.projectId, input.sceneNumber);\n        // Create combined image list with web screenshots\n        const allImageUrls = [\n            input.webContext.screenshotUrls.desktop,\n            input.webContext.screenshotUrls.mobile\n        ];\n        // Enhanced prompt for web context\n        const enhancedPrompt = `${input.userPrompt}\n\nWEBSITE CONTEXT:\n- URL: ${input.webContext.originalUrl}\n- Title: ${input.webContext.pageData.title}\n- Description: ${input.webContext.pageData.description || 'Not available'}\n- Key headings: ${input.webContext.pageData.headings.slice(0, 5).join(', ')}\n\nBRAND MATCHING INSTRUCTIONS:\n- Use the website screenshots to match the brand's visual identity\n- Extract colors, fonts, and design patterns from the screenshots\n- Maintain brand consistency in the motion graphics\n- The desktop screenshot shows the full layout, mobile shows the mobile design`;\n        // Generate code using website screenshots\n        const codeResult = await _add_helpers_CodeGeneratorNEW__WEBPACK_IMPORTED_MODULE_1__.codeGenerator.generateCodeFromImage({\n            imageUrls: allImageUrls,\n            userPrompt: enhancedPrompt,\n            functionName: functionName,\n            visionAnalysis: {\n                webContext: input.webContext,\n                analysisType: 'website_brand_matching'\n            }\n        });\n        const result = {\n            success: true,\n            tsxCode: codeResult.code,\n            name: codeResult.name,\n            duration: codeResult.duration,\n            reasoning: `Generated scene based on website ${input.webContext.pageData.title}: ${codeResult.reasoning}`,\n            chatResponse: `I've created a scene inspired by the ${input.webContext.pageData.title} website, matching their brand identity`,\n            scene: {\n                tsxCode: codeResult.code,\n                name: codeResult.name,\n                duration: codeResult.duration\n            },\n            debug: {\n                webContextGeneration: codeResult.debug,\n                websiteUrl: input.webContext.originalUrl,\n                pageTitle: input.webContext.pageData.title\n            }\n        };\n        console.log('✅ [ADD TOOL] Finished web context generation - returning result:', {\n            name: result.name,\n            duration: result.duration,\n            codeLength: result.tsxCode.length,\n            websiteUrl: input.webContext.originalUrl\n        });\n        return result;\n    }\n    /**\n   * Generate scene from web context + additional images\n   * PURE FUNCTION - no side effects\n   */ async generateFromWebAndImages(input) {\n        if (!input.webContext || !input.imageUrls?.length) {\n            throw new Error(\"No web context or images provided\");\n        }\n        const functionName = this.generateFunctionName(input.projectId, input.sceneNumber);\n        // Combine website screenshots with user images\n        const allImageUrls = [\n            input.webContext.screenshotUrls.desktop,\n            input.webContext.screenshotUrls.mobile,\n            ...input.imageUrls\n        ];\n        // Enhanced prompt combining web context with user images\n        const enhancedPrompt = `${input.userPrompt}\n\nWEBSITE BRAND CONTEXT:\n- URL: ${input.webContext.originalUrl}\n- Title: ${input.webContext.pageData.title}\n- Description: ${input.webContext.pageData.description || 'Not available'}\n\nCOMBINED CONTEXT INSTRUCTIONS:\n- Use the website screenshots (first 2 images) to understand the brand identity\n- Use the additional user images for specific content requirements\n- Blend the brand's visual style with the user's image content\n- Maintain brand consistency while incorporating user image elements`;\n        // Generate code using combined context\n        const codeResult = await _add_helpers_CodeGeneratorNEW__WEBPACK_IMPORTED_MODULE_1__.codeGenerator.generateCodeFromImage({\n            imageUrls: allImageUrls,\n            userPrompt: enhancedPrompt,\n            functionName: functionName,\n            visionAnalysis: {\n                webContext: input.webContext,\n                userImageCount: input.imageUrls.length,\n                analysisType: 'website_plus_images'\n            }\n        });\n        const result = {\n            success: true,\n            tsxCode: codeResult.code,\n            name: codeResult.name,\n            duration: codeResult.duration,\n            reasoning: `Generated scene combining ${input.webContext.pageData.title} brand with ${input.imageUrls.length} user image(s): ${codeResult.reasoning}`,\n            chatResponse: `I've created a scene that combines the ${input.webContext.pageData.title} brand style with your images`,\n            scene: {\n                tsxCode: codeResult.code,\n                name: codeResult.name,\n                duration: codeResult.duration\n            },\n            debug: {\n                webAndImageGeneration: codeResult.debug,\n                websiteUrl: input.webContext.originalUrl,\n                userImageCount: input.imageUrls.length\n            }\n        };\n        console.log('✅ [ADD TOOL] Finished web+images generation - returning result:', {\n            name: result.name,\n            duration: result.duration,\n            codeLength: result.tsxCode.length,\n            websiteUrl: input.webContext.originalUrl,\n            userImageCount: input.imageUrls.length\n        });\n        return result;\n    }\n    /**\n   * Generate unique component name using a stable ID\n   * This prevents naming collisions when scenes are deleted/reordered\n   */ generateFunctionName(projectId, sceneNumber) {\n        // Generate a unique 8-character ID for this scene\n        // This ensures component names never collide, even after deletions\n        const uniqueId = this.generateUniqueId();\n        return `Scene_${uniqueId}`;\n    }\n    /**\n   * Generate a unique 8-character ID\n   */ generateUniqueId() {\n        // Use timestamp + random for uniqueness\n        const timestamp = Date.now().toString(36);\n        const random = Math.random().toString(36).substring(2, 6);\n        return (timestamp + random).substring(0, 8);\n    }\n    constructor(...args){\n        super(...args), this.name = \"ADD\", this.description = \"Generate new motion graphics scene content\", this.inputSchema = _tools_helpers_types__WEBPACK_IMPORTED_MODULE_2__.addToolInputSchema;\n    }\n}\n// Export singleton instance\nconst addTool = new AddTool();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/tools/add/add.ts\n");

/***/ }),

/***/ "(rsc)/./src/tools/add/add_helpers/CodeGeneratorNEW.ts":
/*!*******************************************************!*\
  !*** ./src/tools/add/add_helpers/CodeGeneratorNEW.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CodeGeneratorService: () => (/* binding */ CodeGeneratorService),\n/* harmony export */   codeGenerator: () => (/* binding */ codeGenerator)\n/* harmony export */ });\n/* harmony import */ var _server_services_ai_aiClient_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ~/server/services/ai/aiClient.service */ \"(rsc)/./src/server/services/ai/aiClient.service.ts\");\n/* harmony import */ var _config_models_config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ~/config/models.config */ \"(rsc)/./src/config/models.config.ts\");\n/* harmony import */ var _config_prompts_config__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ~/config/prompts.config */ \"(rsc)/./src/config/prompts.config.ts\");\n/* harmony import */ var _lib_utils_codeDurationExtractor__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ~/lib/utils/codeDurationExtractor */ \"(rsc)/./src/lib/utils/codeDurationExtractor.ts\");\n\n\n\n\n/**\n * Code Generator Service - converts JSON specifications to React/Remotion code\n * Second step of the two-step pipeline: JSON Spec → React Code\n */ class CodeGeneratorService {\n    /**\n   * Generate code directly from prompt (FASTEST PATH - no layout)\n   */ async generateCodeDirect(input) {\n        const config = (0,_config_models_config__WEBPACK_IMPORTED_MODULE_1__.getModel)('codeGenerator');\n        console.log('⚡ [CODE GENERATOR] DIRECT PATH: Generating code from prompt only');\n        try {\n            const systemPrompt = (0,_config_prompts_config__WEBPACK_IMPORTED_MODULE_2__.getParameterizedPrompt)('CODE_GENERATOR', {\n                FUNCTION_NAME: input.functionName\n            });\n            const userPrompt = `USER REQUEST: \"${input.userPrompt}\"\n\nFUNCTION NAME: ${input.functionName}\n\nGenerate a complete Remotion component based on the user's request.\n- Create engaging motion graphics\n- Use modern animations with Framer Motion\n- Ensure it's a complete, self-contained component\n- Default duration: 5 seconds (150 frames at 30fps)`;\n            const messages = [\n                {\n                    role: 'user',\n                    content: userPrompt\n                }\n            ];\n            const response = await _server_services_ai_aiClient_service__WEBPACK_IMPORTED_MODULE_0__.AIClientService.generateResponse(config, messages, {\n                role: 'system',\n                content: systemPrompt.content\n            });\n            const rawOutput = response?.content;\n            if (!rawOutput) {\n                throw new Error(\"No response from CodeGenerator LLM\");\n            }\n            // Clean and process code\n            let cleanCode = rawOutput.trim();\n            cleanCode = cleanCode.replace(/^```(?:javascript|tsx|ts|js)?\\n?/i, '').replace(/\\n?```$/i, '');\n            // Extract duration\n            const durationAnalysis = (0,_lib_utils_codeDurationExtractor__WEBPACK_IMPORTED_MODULE_3__.analyzeDuration)(cleanCode);\n            return {\n                code: cleanCode,\n                name: \"Scene\",\n                duration: durationAnalysis.frames,\n                reasoning: `Generated scene directly from prompt (${durationAnalysis.frames} frames)`,\n                debug: {\n                    method: 'direct',\n                    promptLength: userPrompt.length,\n                    responseLength: rawOutput.length,\n                    durationAnalysis\n                }\n            };\n        } catch (error) {\n            console.error('[CODE GENERATOR] Direct path failed:', error);\n            throw error;\n        }\n    }\n    /**\n   * Generate code using previous scene as reference (FAST PATH)\n   */ async generateCodeWithReference(input) {\n        const config = (0,_config_models_config__WEBPACK_IMPORTED_MODULE_1__.getModel)('codeGenerator');\n        console.log('🚀 [CODE GENERATOR] FAST PATH: Using previous scene as reference');\n        try {\n            const systemPrompt = (0,_config_prompts_config__WEBPACK_IMPORTED_MODULE_2__.getParameterizedPrompt)('CODE_GENERATOR', {\n                FUNCTION_NAME: input.functionName\n            });\n            const userPrompt = `PREVIOUS SCENE CODE:\n\\`\\`\\`tsx\n${input.previousSceneCode}\n\\`\\`\\`\n\nUSER REQUEST: \"${input.userPrompt}\"\n\nFUNCTION NAME: ${input.functionName}\n\nGenerate a NEW scene based on the user's request, using the previous scene's code as a style reference. \n- Keep the same visual style, colors, fonts, and animation patterns\n- Create NEW content based on the user's request\n- Ensure it's a complete, self-contained Remotion component`;\n            const messages = [\n                {\n                    role: 'user',\n                    content: userPrompt\n                }\n            ];\n            const response = await _server_services_ai_aiClient_service__WEBPACK_IMPORTED_MODULE_0__.AIClientService.generateResponse(config, messages, {\n                role: 'system',\n                content: systemPrompt.content\n            });\n            const rawOutput = response?.content;\n            if (!rawOutput) {\n                throw new Error(\"No response from CodeGenerator LLM\");\n            }\n            // Clean and process code\n            let cleanCode = rawOutput.trim();\n            cleanCode = cleanCode.replace(/^```(?:javascript|tsx|ts|js)?\\n?/i, '').replace(/\\n?```$/i, '');\n            // Extract duration\n            const durationAnalysis = (0,_lib_utils_codeDurationExtractor__WEBPACK_IMPORTED_MODULE_3__.analyzeDuration)(cleanCode);\n            return {\n                code: cleanCode,\n                name: \"Scene\",\n                duration: durationAnalysis.frames,\n                reasoning: `Generated new scene using previous scene style (${durationAnalysis.frames} frames)`,\n                debug: {\n                    method: 'withReference',\n                    promptLength: userPrompt.length,\n                    responseLength: rawOutput.length,\n                    durationAnalysis\n                }\n            };\n        } catch (error) {\n            console.error('[CODE GENERATOR] Fast path failed:', error);\n            throw error;\n        }\n    }\n    /**\n   * Generate React code from layout JSON\n   */ async generateCode(input) {\n        const config = (0,_config_models_config__WEBPACK_IMPORTED_MODULE_1__.getModel)('codeGenerator');\n        const prompt = this.buildCodePrompt(input);\n        console.log('==================== codeGenerator reached:');\n        console.log('==================== generateCode reached:');\n        try {\n            const messages = [\n                {\n                    role: 'user',\n                    content: prompt.user\n                }\n            ];\n            const response = await _server_services_ai_aiClient_service__WEBPACK_IMPORTED_MODULE_0__.AIClientService.generateResponse(config, messages, {\n                role: 'system',\n                content: prompt.system\n            });\n            const rawOutput = response?.content;\n            if (!rawOutput) {\n                throw new Error(\"No response from CodeGenerator LLM\");\n            }\n            // Remove markdown code fences if present\n            let cleanCode = rawOutput.trim();\n            cleanCode = cleanCode.replace(/^```(?:javascript|tsx|ts|js)?\\n?/i, '').replace(/\\n?```$/i, '');\n            // Ensure single export default only\n            if (cleanCode.includes('export default function') && cleanCode.includes('function SingleSceneComposition')) {\n                const sceneMatch = cleanCode.match(/const \\{[^}]+\\} = window\\.Remotion;[\\s\\S]*?export default function \\w+\\(\\)[^{]*\\{[\\s\\S]*?\\n\\}/);\n                if (sceneMatch) {\n                    cleanCode = sceneMatch[0];\n                }\n            }\n            // Extract actual duration from generated code\n            const durationAnalysis = (0,_lib_utils_codeDurationExtractor__WEBPACK_IMPORTED_MODULE_3__.analyzeDuration)(cleanCode);\n            return {\n                code: cleanCode,\n                name: \"Scene\",\n                duration: durationAnalysis.frames,\n                reasoning: `Code generated with ${durationAnalysis.frames} frames duration (${durationAnalysis.confidence} confidence from ${durationAnalysis.source})`,\n                debug: {\n                    prompt,\n                    response: rawOutput,\n                    parsed: {\n                        code: cleanCode,\n                        validated: false,\n                        durationAnalysis\n                    }\n                }\n            };\n        } catch (error) {\n            // Return error code that auto-fix can work with\n            const errorCode = `const { AbsoluteFill } = window.Remotion;\n// CodeGenerator error: ${error instanceof Error ? error.message : 'Unknown error'}\n// Layout JSON was: ${JSON.stringify(input.layoutJson, null, 2)}\n// User wanted: ${input.userPrompt}\n\nexport default function ${input.functionName}() {\n  return (\n    <AbsoluteFill style={{ backgroundColor: \"#ff0000\" }}>\n      <div>CodeGenerator Error - Auto Fix Available</div>\n    </AbsoluteFill>\n  );\n}`;\n            const fallbackDuration = (0,_lib_utils_codeDurationExtractor__WEBPACK_IMPORTED_MODULE_3__.extractDurationFromCode)(errorCode);\n            return {\n                code: errorCode,\n                name: \"Scene\",\n                duration: fallbackDuration,\n                reasoning: \"CodeGenerator encountered an error - auto-fix can restore from layout JSON\",\n                debug: {\n                    error: `${error instanceof Error ? error.message : 'Unknown error'}. Fallback duration: ${fallbackDuration} frames. Layout: ${JSON.stringify(input.layoutJson, null, 2)}. User prompt: ${input.userPrompt}`\n                }\n            };\n        }\n    }\n    /**\n   * Generate code directly from images\n   */ async generateCodeFromImage(input) {\n        try {\n            const config = (0,_config_models_config__WEBPACK_IMPORTED_MODULE_1__.getModel)('codeGenerator');\n            console.log('==================== codeGenerator reached:');\n            console.log('==================== generateCodeFromImage reached:');\n            // Get the IMAGE_CODE_GENERATOR prompt specifically for image-based generation\n            const systemPrompt = (0,_config_prompts_config__WEBPACK_IMPORTED_MODULE_2__.getParameterizedPrompt)('CODE_GENERATOR', {\n                FUNCTION_NAME: input.functionName\n            });\n            // Build user message for vision API - include the actual user prompt!\n            const userPrompt = `USER REQUEST: \"${input.userPrompt}\"\n\nIMPORTANT: Recreate the UI/layout shown in the image as accurately as possible. Match colors, text, positioning, and visual hierarchy exactly. Then add appropriate animations based on the user's request.\n${input.visionAnalysis ? `Vision analysis: ${JSON.stringify(input.visionAnalysis, null, 2)}` : ''}`;\n            // Use centralized vision API with proper message format\n            const visionMessagesContent = [\n                {\n                    type: 'text',\n                    text: userPrompt\n                }\n            ];\n            for (const url of input.imageUrls){\n                visionMessagesContent.push({\n                    type: 'image_url',\n                    image_url: {\n                        url\n                    }\n                });\n            }\n            const response = await _server_services_ai_aiClient_service__WEBPACK_IMPORTED_MODULE_0__.AIClientService.generateResponse(config, [\n                {\n                    role: 'user',\n                    content: visionMessagesContent\n                }\n            ], {\n                role: 'system',\n                content: systemPrompt.content\n            });\n            // Clean up code\n            let cleanCode = response?.content?.trim() || '';\n            cleanCode = cleanCode.replace(/^```(?:javascript|tsx|ts|js)?\\n?/i, '').replace(/\\n?```$/i, '');\n            // Extract duration from image-generated code\n            const durationAnalysis = (0,_lib_utils_codeDurationExtractor__WEBPACK_IMPORTED_MODULE_3__.analyzeDuration)(cleanCode);\n            return {\n                code: cleanCode,\n                name: \"Scene\",\n                duration: durationAnalysis.frames,\n                reasoning: `Generated motion graphics directly from image analysis with ${durationAnalysis.frames} frames duration`,\n                debug: {\n                    prompt: {\n                        system: 'Vision-based generation',\n                        user: `${input.imageUrls.length} images provided`\n                    },\n                    response: response?.content || '',\n                    parsed: {\n                        code: cleanCode,\n                        imageCount: input.imageUrls.length,\n                        durationAnalysis\n                    }\n                }\n            };\n        } catch (error) {\n            const errorCode = `const { AbsoluteFill } = window.Remotion;\n// Image-to-code generation error: ${error instanceof Error ? error.message : 'Unknown error'}\n// User wanted: ${input.userPrompt}\n// Images provided: ${input.imageUrls.length}\n\nexport default function ${input.functionName}() {\n  return (\n    <AbsoluteFill style={{ backgroundColor: \"#1a1a2e\", display: \"flex\", alignItems: \"center\", justifyContent: \"center\" }}>\n      <div style={{ color: \"#ffffff\", fontSize: \"2rem\", textAlign: \"center\" }}>\n        <div>Image Analysis Error</div>\n        <div style={{ fontSize: \"1rem\", opacity: 0.7, marginTop: \"1rem\" }}>Auto-fix available</div>\n      </div>\n    </AbsoluteFill>\n  );\n}`;\n            const fallbackDuration = (0,_lib_utils_codeDurationExtractor__WEBPACK_IMPORTED_MODULE_3__.extractDurationFromCode)(errorCode);\n            return {\n                code: errorCode,\n                name: \"Scene\",\n                duration: fallbackDuration,\n                reasoning: \"Image-to-code generation failed - auto-fix available\",\n                debug: {\n                    error: `${error instanceof Error ? error.message : 'Unknown error'}. Fallback duration: ${fallbackDuration} frames. Images: ${input.imageUrls.length}. User prompt: ${input.userPrompt}`\n                }\n            };\n        }\n    }\n    buildCodePrompt(input) {\n        const { layoutJson, userPrompt, functionName } = input;\n        console.log('==================== codeGenerator reached:');\n        console.log('==================== buildCodePrompt reached:');\n        const systemPrompt = (0,_config_prompts_config__WEBPACK_IMPORTED_MODULE_2__.getParameterizedPrompt)('CODE_GENERATOR', {\n            FUNCTION_NAME: functionName,\n            USER_PROMPT: userPrompt\n        });\n        const user = JSON.stringify(layoutJson, null, 2);\n        return {\n            system: systemPrompt.content,\n            user\n        };\n    }\n    constructor(){\n        this.DEBUG = \"development\" === 'development';\n    }\n}\n// Export singleton instance\nconst codeGenerator = new CodeGeneratorService();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/tools/add/add_helpers/CodeGeneratorNEW.ts\n");

/***/ }),

/***/ "(rsc)/./src/tools/delete/delete.ts":
/*!************************************!*\
  !*** ./src/tools/delete/delete.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DeleteTool: () => (/* binding */ DeleteTool),\n/* harmony export */   deleteTool: () => (/* binding */ deleteTool)\n/* harmony export */ });\n/* harmony import */ var _tools_helpers_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ~/tools/helpers/base */ \"(rsc)/./src/tools/helpers/base.ts\");\n/* harmony import */ var _tools_helpers_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ~/tools/helpers/types */ \"(rsc)/./src/tools/helpers/types.ts\");\n\n\n/**\n * DELETE Tool - Pure function that validates deletion\n * NO DATABASE ACCESS - only returns deletion confirmation\n * Sprint 42: Refactored to pure function\n */ class DeleteTool extends _tools_helpers_base__WEBPACK_IMPORTED_MODULE_0__.BaseMCPTool {\n    async execute(input) {\n        try {\n            // Validate deletion request\n            if (!input.sceneId) {\n                throw new Error(\"No scene ID provided for deletion\");\n            }\n            if (!input.confirmDeletion) {\n                return {\n                    success: false,\n                    reasoning: \"Deletion not confirmed by user\",\n                    chatResponse: \"Please confirm you want to delete this scene\"\n                };\n            }\n            // Return deletion confirmation - NO DATABASE!\n            return {\n                success: true,\n                deletedSceneId: input.sceneId,\n                reasoning: `Scene ${input.sceneId} marked for deletion`,\n                chatResponse: \"I'll remove that scene for you\"\n            };\n        } catch (error) {\n            return {\n                success: false,\n                reasoning: `Delete validation failed: ${error instanceof Error ? error.message : 'Unknown error'}`,\n                error: error instanceof Error ? error.message : 'Unknown error'\n            };\n        }\n    }\n    constructor(...args){\n        super(...args), this.name = \"DELETE\", this.description = \"Validate scene deletion request\", this.inputSchema = _tools_helpers_types__WEBPACK_IMPORTED_MODULE_1__.deleteToolInputSchema;\n    }\n}\n// Export singleton instance\nconst deleteTool = new DeleteTool();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvdG9vbHMvZGVsZXRlL2RlbGV0ZS50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQW1EO0FBRVc7QUFFOUQ7Ozs7Q0FJQyxHQUNNLE1BQU1FLG1CQUFtQkYsNERBQVdBO0lBS3pDLE1BQWdCRyxRQUFRQyxLQUFzQixFQUE2QjtRQUN6RSxJQUFJO1lBQ0YsNEJBQTRCO1lBQzVCLElBQUksQ0FBQ0EsTUFBTUMsT0FBTyxFQUFFO2dCQUNsQixNQUFNLElBQUlDLE1BQU07WUFDbEI7WUFFQSxJQUFJLENBQUNGLE1BQU1HLGVBQWUsRUFBRTtnQkFDMUIsT0FBTztvQkFDTEMsU0FBUztvQkFDVEMsV0FBVztvQkFDWEMsY0FBYztnQkFDaEI7WUFDRjtZQUVBLDhDQUE4QztZQUM5QyxPQUFPO2dCQUNMRixTQUFTO2dCQUNURyxnQkFBZ0JQLE1BQU1DLE9BQU87Z0JBQzdCSSxXQUFXLENBQUMsTUFBTSxFQUFFTCxNQUFNQyxPQUFPLENBQUMsb0JBQW9CLENBQUM7Z0JBQ3ZESyxjQUFjO1lBQ2hCO1FBQ0YsRUFBRSxPQUFPRSxPQUFPO1lBQ2QsT0FBTztnQkFDTEosU0FBUztnQkFDVEMsV0FBVyxDQUFDLDBCQUEwQixFQUFFRyxpQkFBaUJOLFFBQVFNLE1BQU1DLE9BQU8sR0FBRyxpQkFBaUI7Z0JBQ2xHRCxPQUFPQSxpQkFBaUJOLFFBQVFNLE1BQU1DLE9BQU8sR0FBRztZQUNsRDtRQUNGO0lBQ0Y7O1FBbENLLHFCQUNMQyxPQUFPLGVBQ1BDLGNBQWMsd0NBQ2RDLGNBQWNmLHVFQUFxQkE7O0FBZ0NyQztBQUVBLDRCQUE0QjtBQUNyQixNQUFNZ0IsYUFBYSxJQUFJZixhQUFhIiwic291cmNlcyI6WyIvVXNlcnMvbWFya3VzaG9nbmUvRG9jdW1lbnRzL0FQUFMvYmF6YWFyLXZpZC9iYXphYXItdmlkL2FwcHMvbWFpbi9zcmMvdG9vbHMvZGVsZXRlL2RlbGV0ZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCYXNlTUNQVG9vbCB9IGZyb20gXCJ+L3Rvb2xzL2hlbHBlcnMvYmFzZVwiO1xuaW1wb3J0IHR5cGUgeyBEZWxldGVUb29sSW5wdXQsIERlbGV0ZVRvb2xPdXRwdXQgfSBmcm9tIFwifi90b29scy9oZWxwZXJzL3R5cGVzXCI7XG5pbXBvcnQgeyBkZWxldGVUb29sSW5wdXRTY2hlbWEgfSBmcm9tIFwifi90b29scy9oZWxwZXJzL3R5cGVzXCI7XG5cbi8qKlxuICogREVMRVRFIFRvb2wgLSBQdXJlIGZ1bmN0aW9uIHRoYXQgdmFsaWRhdGVzIGRlbGV0aW9uXG4gKiBOTyBEQVRBQkFTRSBBQ0NFU1MgLSBvbmx5IHJldHVybnMgZGVsZXRpb24gY29uZmlybWF0aW9uXG4gKiBTcHJpbnQgNDI6IFJlZmFjdG9yZWQgdG8gcHVyZSBmdW5jdGlvblxuICovXG5leHBvcnQgY2xhc3MgRGVsZXRlVG9vbCBleHRlbmRzIEJhc2VNQ1BUb29sPERlbGV0ZVRvb2xJbnB1dCwgRGVsZXRlVG9vbE91dHB1dD4ge1xuICBuYW1lID0gXCJERUxFVEVcIjtcbiAgZGVzY3JpcHRpb24gPSBcIlZhbGlkYXRlIHNjZW5lIGRlbGV0aW9uIHJlcXVlc3RcIjtcbiAgaW5wdXRTY2hlbWEgPSBkZWxldGVUb29sSW5wdXRTY2hlbWE7XG5cbiAgcHJvdGVjdGVkIGFzeW5jIGV4ZWN1dGUoaW5wdXQ6IERlbGV0ZVRvb2xJbnB1dCk6IFByb21pc2U8RGVsZXRlVG9vbE91dHB1dD4ge1xuICAgIHRyeSB7XG4gICAgICAvLyBWYWxpZGF0ZSBkZWxldGlvbiByZXF1ZXN0XG4gICAgICBpZiAoIWlucHV0LnNjZW5lSWQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTm8gc2NlbmUgSUQgcHJvdmlkZWQgZm9yIGRlbGV0aW9uXCIpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWlucHV0LmNvbmZpcm1EZWxldGlvbikge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICAgIHJlYXNvbmluZzogXCJEZWxldGlvbiBub3QgY29uZmlybWVkIGJ5IHVzZXJcIixcbiAgICAgICAgICBjaGF0UmVzcG9uc2U6IFwiUGxlYXNlIGNvbmZpcm0geW91IHdhbnQgdG8gZGVsZXRlIHRoaXMgc2NlbmVcIixcbiAgICAgICAgfSBhcyBEZWxldGVUb29sT3V0cHV0O1xuICAgICAgfVxuXG4gICAgICAvLyBSZXR1cm4gZGVsZXRpb24gY29uZmlybWF0aW9uIC0gTk8gREFUQUJBU0UhXG4gICAgICByZXR1cm4ge1xuICAgICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgICBkZWxldGVkU2NlbmVJZDogaW5wdXQuc2NlbmVJZCxcbiAgICAgICAgcmVhc29uaW5nOiBgU2NlbmUgJHtpbnB1dC5zY2VuZUlkfSBtYXJrZWQgZm9yIGRlbGV0aW9uYCxcbiAgICAgICAgY2hhdFJlc3BvbnNlOiBcIkknbGwgcmVtb3ZlIHRoYXQgc2NlbmUgZm9yIHlvdVwiLFxuICAgICAgfTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgIHJlYXNvbmluZzogYERlbGV0ZSB2YWxpZGF0aW9uIGZhaWxlZDogJHtlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6ICdVbmtub3duIGVycm9yJ31gLFxuICAgICAgICBlcnJvcjogZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiAnVW5rbm93biBlcnJvcicsXG4gICAgICB9IGFzIERlbGV0ZVRvb2xPdXRwdXQ7XG4gICAgfVxuICB9XG59XG5cbi8vIEV4cG9ydCBzaW5nbGV0b24gaW5zdGFuY2VcbmV4cG9ydCBjb25zdCBkZWxldGVUb29sID0gbmV3IERlbGV0ZVRvb2woKTtcbiJdLCJuYW1lcyI6WyJCYXNlTUNQVG9vbCIsImRlbGV0ZVRvb2xJbnB1dFNjaGVtYSIsIkRlbGV0ZVRvb2wiLCJleGVjdXRlIiwiaW5wdXQiLCJzY2VuZUlkIiwiRXJyb3IiLCJjb25maXJtRGVsZXRpb24iLCJzdWNjZXNzIiwicmVhc29uaW5nIiwiY2hhdFJlc3BvbnNlIiwiZGVsZXRlZFNjZW5lSWQiLCJlcnJvciIsIm1lc3NhZ2UiLCJuYW1lIiwiZGVzY3JpcHRpb24iLCJpbnB1dFNjaGVtYSIsImRlbGV0ZVRvb2wiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./src/tools/delete/delete.ts\n");

/***/ }),

/***/ "(rsc)/./src/tools/edit/edit.ts":
/*!********************************!*\
  !*** ./src/tools/edit/edit.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EditTool: () => (/* binding */ EditTool),\n/* harmony export */   editTool: () => (/* binding */ editTool)\n/* harmony export */ });\n/* harmony import */ var _tools_helpers_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ~/tools/helpers/base */ \"(rsc)/./src/tools/helpers/base.ts\");\n/* harmony import */ var _server_services_ai_aiClient_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ~/server/services/ai/aiClient.service */ \"(rsc)/./src/server/services/ai/aiClient.service.ts\");\n/* harmony import */ var _config_models_config__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ~/config/models.config */ \"(rsc)/./src/config/models.config.ts\");\n/* harmony import */ var _config_prompts_config__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ~/config/prompts.config */ \"(rsc)/./src/config/prompts.config.ts\");\n/* harmony import */ var _tools_helpers_types__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ~/tools/helpers/types */ \"(rsc)/./src/tools/helpers/types.ts\");\n\n\n\n\n\n/**\n * EDIT Tool - Pure function that transforms scene content\n * NO DATABASE ACCESS - only transformation\n * Sprint 42: Refactored to pure function\n */ class EditTool extends _tools_helpers_base__WEBPACK_IMPORTED_MODULE_0__.BaseMCPTool {\n    async execute(input) {\n        try {\n            // Validate input\n            if (!input.tsxCode) {\n                throw new Error(\"No scene code provided\");\n            }\n            console.log('✏️ [EDIT TOOL] Executing edit:', {\n                prompt: input.userPrompt,\n                hasErrorDetails: !!input.errorDetails,\n                codeLength: input.tsxCode.length\n            });\n            // Just edit the code - one unified approach\n            console.log('✏️ [EDIT TOOL] Processing edit request');\n            return await this.performEdit(input);\n        } catch (error) {\n            console.error('✏️ [EDIT TOOL] Error:', error);\n            return {\n                success: false,\n                reasoning: `Edit failed: ${error instanceof Error ? error.message : 'Unknown error'}`,\n                error: error instanceof Error ? error.message : 'Unknown error'\n            };\n        }\n    }\n    async performEdit(input) {\n        try {\n            const functionName = this.extractFunctionName(input.tsxCode);\n            // Build context for the AI\n            let context = `USER REQUEST: \"${input.userPrompt}\"`;\n            if (input.errorDetails) {\n                context += `\\n\\nERROR TO FIX:\\n${input.errorDetails}`;\n            }\n            if (input.webContext) {\n                context += `\\n\\nWEBSITE BRAND CONTEXT:\n- URL: ${input.webContext.originalUrl}\n- Title: ${input.webContext.pageData.title}\n- Description: ${input.webContext.pageData.description || 'Not available'}\n- Key headings: ${input.webContext.pageData.headings.slice(0, 5).join(', ')}\n\nBRAND MATCHING INSTRUCTIONS:\n- Use the website screenshots to match the brand's visual identity\n- Extract and apply colors, fonts, and design patterns from the screenshots\n- Maintain brand consistency in your edits`;\n            }\n            if (input.imageUrls?.length) {\n                context += `\\n\\nIMAGE CONTEXT: User provided ${input.imageUrls.length} image(s)`;\n            }\n            if (input.visionAnalysis) {\n                context += `\\n\\nVISION ANALYSIS:\\n${JSON.stringify(input.visionAnalysis, null, 2)}`;\n            }\n            // Add reference scenes for style/color matching\n            if (input.referenceScenes?.length) {\n                context += `\\n\\nREFERENCE SCENES FOR STYLE/COLOR MATCHING:`;\n                input.referenceScenes.forEach((scene)=>{\n                    context += `\\n\\n${scene.name} (ID: ${scene.id}):\\n\\`\\`\\`tsx\\n${scene.tsxCode}\\n\\`\\`\\``;\n                });\n                context += `\\n\\nIMPORTANT: Extract the specific colors, styles, animations, or patterns from the reference scenes that the user wants to apply. Be precise in matching the requested elements.`;\n            }\n            // Build message content based on available context\n            let messageContent;\n            // Prepare all available images (web screenshots + user images)\n            const allImageUrls = [];\n            if (input.webContext) {\n                allImageUrls.push(input.webContext.screenshotUrls.desktop);\n                allImageUrls.push(input.webContext.screenshotUrls.mobile);\n            }\n            if (input.imageUrls?.length) {\n                allImageUrls.push(...input.imageUrls);\n            }\n            if (allImageUrls.length > 0) {\n                // Build vision content array for image-based edits\n                const contextInstructions = input.webContext ? 'IMPORTANT: The first two images are website screenshots for brand matching. Use them to understand the brand\\'s visual identity, colors, and design patterns. ' + (input.imageUrls?.length ? `The additional ${input.imageUrls.length} image(s) show specific content requirements. ` : '') + 'Apply the brand style while incorporating any specific visual requirements from additional images.' : 'IMPORTANT: Look at the provided image(s) and recreate the visual elements from the image in the scene code. Match colors, layout, text, and visual hierarchy as closely as possible.';\n                messageContent = [\n                    {\n                        type: 'text',\n                        text: `${context}\n\nEXISTING CODE:\n\\`\\`\\`tsx\n${input.tsxCode}\n\\`\\`\\`\n\n${contextInstructions} Return the complete modified code.`\n                    }\n                ];\n                // Add all images (web screenshots first, then user images)\n                for (const imageUrl of allImageUrls){\n                    messageContent.push({\n                        type: 'image_url',\n                        image_url: {\n                            url: imageUrl\n                        }\n                    });\n                }\n            } else {\n                // Text-only edit\n                messageContent = `${context}\n\nEXISTING CODE:\n\\`\\`\\`tsx\n${input.tsxCode}\n\\`\\`\\`\n\nPlease edit the code according to the user request. Return the complete modified code.`;\n            }\n            console.log('🔍 [EDIT TOOL] Making edit with context:', {\n                userPrompt: input.userPrompt,\n                hasError: !!input.errorDetails,\n                hasImages: !!input.imageUrls?.length,\n                hasWebContext: !!input.webContext,\n                totalImages: allImageUrls.length,\n                codeLength: input.tsxCode.length,\n                codePreview: input.tsxCode.substring(0, 200),\n                websiteUrl: input.webContext?.originalUrl\n            });\n            // Use the AI to edit the code\n            const modelConfig = (0,_config_models_config__WEBPACK_IMPORTED_MODULE_2__.getModel)('editScene');\n            const systemPrompt = (0,_config_prompts_config__WEBPACK_IMPORTED_MODULE_3__.getSystemPrompt)('CODE_EDITOR');\n            const response = await _server_services_ai_aiClient_service__WEBPACK_IMPORTED_MODULE_1__.AIClientService.generateResponse(modelConfig, [\n                {\n                    role: \"user\",\n                    content: messageContent\n                }\n            ], {\n                role: 'system',\n                content: systemPrompt\n            }, {\n                responseFormat: {\n                    type: \"json_object\"\n                }\n            });\n            const content = response?.content;\n            if (!content) {\n                throw new Error(\"No response from AI editor\");\n            }\n            const parsed = this.extractJsonFromResponse(content);\n            // Validate that we got valid code\n            if (!parsed.code || typeof parsed.code !== 'string' || parsed.code.trim().length < 100) {\n                throw new Error(`Invalid code returned`);\n            }\n            console.log('✅ [EDIT TOOL] Edit completed:', {\n                originalLength: input.tsxCode.length,\n                newLength: parsed.code.length,\n                changed: parsed.code !== input.tsxCode\n            });\n            return {\n                success: true,\n                tsxCode: parsed.code,\n                duration: parsed.newDurationFrames || undefined,\n                reasoning: parsed.reasoning || `Applied edit: ${input.userPrompt}`,\n                chatResponse: parsed.reasoning || `I've updated the scene as requested`,\n                changesApplied: parsed.changes || [\n                    `Applied edit: ${input.userPrompt}`\n                ]\n            };\n        } catch (error) {\n            console.error('[EDIT TOOL] Edit failed:', error);\n            throw error;\n        }\n    }\n    extractFunctionName(tsxCode) {\n        const match = tsxCode.match(/function\\s+(\\w+)|const\\s+(\\w+)\\s*=/);\n        return match?.[1] || match?.[2] || 'Scene';\n    }\n    extractJsonFromResponse(content) {\n        try {\n            // Try direct JSON parse first\n            return JSON.parse(content);\n        } catch  {\n            // Try to extract JSON from markdown code blocks\n            const jsonMatch = content.match(/```(?:json)?\\s*({[\\s\\S]*?})\\s*```/);\n            if (jsonMatch?.[1]) {\n                return JSON.parse(jsonMatch[1]);\n            }\n            // Try to find JSON object in the content\n            const objectMatch = content.match(/{[\\s\\S]*}/);\n            if (objectMatch?.[0]) {\n                return JSON.parse(objectMatch[0]);\n            }\n            throw new Error('Could not extract JSON from response');\n        }\n    }\n    constructor(...args){\n        super(...args), this.name = \"EDIT\", this.description = \"Transform existing scene content based on user prompt\", this.inputSchema = _tools_helpers_types__WEBPACK_IMPORTED_MODULE_4__.editToolInputSchema;\n    }\n}\n// Export singleton instance\nconst editTool = new EditTool();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/tools/edit/edit.ts\n");

/***/ }),

/***/ "(rsc)/./src/tools/helpers/base.ts":
/*!***********************************!*\
  !*** ./src/tools/helpers/base.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseMCPTool: () => (/* binding */ BaseMCPTool)\n/* harmony export */ });\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! zod */ \"(rsc)/../../node_modules/zod/lib/index.mjs\");\n\n/**\n * Base tool implementation with common functionality\n */ class BaseMCPTool {\n    async run(input) {\n        const startTime = Date.now();\n        try {\n            // Validate input\n            const validatedInput = this.inputSchema.parse(input);\n            // Execute tool logic\n            const result = await this.execute(validatedInput);\n            const executionTime = Date.now() - startTime;\n            return {\n                success: true,\n                data: result,\n                metadata: {\n                    executionTime,\n                    toolName: this.name,\n                    timestamp: new Date().toISOString()\n                }\n            };\n        } catch (error) {\n            const executionTime = Date.now() - startTime;\n            return {\n                success: false,\n                error: {\n                    code: error instanceof zod__WEBPACK_IMPORTED_MODULE_0__.z.ZodError ? 'VALIDATION_ERROR' : 'EXECUTION_ERROR',\n                    message: error instanceof Error ? error.message : 'Unknown error',\n                    details: error instanceof zod__WEBPACK_IMPORTED_MODULE_0__.z.ZodError ? {\n                        issues: error.issues\n                    } : undefined\n                },\n                metadata: {\n                    executionTime,\n                    toolName: this.name,\n                    timestamp: new Date().toISOString()\n                }\n            };\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvdG9vbHMvaGVscGVycy9iYXNlLnRzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQXdCO0FBK0N4Qjs7Q0FFQyxHQUNNLE1BQWVDO0lBS3BCLE1BQU1DLElBQUlDLEtBQWEsRUFBK0I7UUFDcEQsTUFBTUMsWUFBWUMsS0FBS0MsR0FBRztRQUUxQixJQUFJO1lBQ0YsaUJBQWlCO1lBQ2pCLE1BQU1DLGlCQUFpQixJQUFJLENBQUNDLFdBQVcsQ0FBQ0MsS0FBSyxDQUFDTjtZQUU5QyxxQkFBcUI7WUFDckIsTUFBTU8sU0FBUyxNQUFNLElBQUksQ0FBQ0MsT0FBTyxDQUFDSjtZQUVsQyxNQUFNSyxnQkFBZ0JQLEtBQUtDLEdBQUcsS0FBS0Y7WUFFbkMsT0FBTztnQkFDTFMsU0FBUztnQkFDVEMsTUFBTUo7Z0JBQ05LLFVBQVU7b0JBQ1JIO29CQUNBSSxVQUFVLElBQUksQ0FBQ0MsSUFBSTtvQkFDbkJDLFdBQVcsSUFBSWIsT0FBT2MsV0FBVztnQkFDbkM7WUFDRjtRQUNGLEVBQUUsT0FBT0MsT0FBTztZQUNkLE1BQU1SLGdCQUFnQlAsS0FBS0MsR0FBRyxLQUFLRjtZQUVuQyxPQUFPO2dCQUNMUyxTQUFTO2dCQUNUTyxPQUFPO29CQUNMQyxNQUFNRCxpQkFBaUJwQixrQ0FBQ0EsQ0FBQ3NCLFFBQVEsR0FBRyxxQkFBcUI7b0JBQ3pEQyxTQUFTSCxpQkFBaUJJLFFBQVFKLE1BQU1HLE9BQU8sR0FBRztvQkFDbERFLFNBQVNMLGlCQUFpQnBCLGtDQUFDQSxDQUFDc0IsUUFBUSxHQUFHO3dCQUFFSSxRQUFRTixNQUFNTSxNQUFNO29CQUFDLElBQUlDO2dCQUNwRTtnQkFDQVosVUFBVTtvQkFDUkg7b0JBQ0FJLFVBQVUsSUFBSSxDQUFDQyxJQUFJO29CQUNuQkMsV0FBVyxJQUFJYixPQUFPYyxXQUFXO2dCQUNuQztZQUNGO1FBQ0Y7SUFDRjtBQU1GIiwic291cmNlcyI6WyIvVXNlcnMvbWFya3VzaG9nbmUvRG9jdW1lbnRzL0FQUFMvYmF6YWFyLXZpZC9iYXphYXItdmlkL2FwcHMvbWFpbi9zcmMvdG9vbHMvaGVscGVycy9iYXNlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHogfSBmcm9tIFwiem9kXCI7XG5cbi8qKlxuICogQmFzZSBNQ1AgVG9vbCBpbnRlcmZhY2UgZm9sbG93aW5nIE1vZGVsIENvbnRleHQgUHJvdG9jb2wgcGF0dGVybnNcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBNQ1BUb29sPFRJbnB1dCA9IHVua25vd24sIFRPdXRwdXQgPSB1bmtub3duPiB7XG4gIC8qKiBUb29sIG5hbWUgZm9yIExMTSBmdW5jdGlvbiBjYWxsaW5nICovXG4gIG5hbWU6IHN0cmluZztcbiAgXG4gIC8qKiBUb29sIGRlc2NyaXB0aW9uIGZvciBMTE0gY29udGV4dCAqL1xuICBkZXNjcmlwdGlvbjogc3RyaW5nO1xuICBcbiAgLyoqIElucHV0IHNjaGVtYSBmb3IgdmFsaWRhdGlvbiAqL1xuICBpbnB1dFNjaGVtYTogei5ab2RTY2hlbWE8VElucHV0PjtcbiAgXG4gIC8qKiBFeGVjdXRlIHRoZSB0b29sIHdpdGggdmFsaWRhdGVkIGlucHV0ICovXG4gIHJ1bihpbnB1dDogVElucHV0KTogUHJvbWlzZTxNQ1BSZXN1bHQ8VE91dHB1dD4+O1xufVxuXG4vKipcbiAqIFN0YW5kYXJkaXplZCByZXN1bHQgZm9ybWF0IGZvciBhbGwgTUNQIHRvb2xzXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgTUNQUmVzdWx0PFQgPSB1bmtub3duPiB7XG4gIHN1Y2Nlc3M6IGJvb2xlYW47XG4gIGRhdGE/OiBUO1xuICBlcnJvcj86IHtcbiAgICBjb2RlOiBzdHJpbmc7XG4gICAgbWVzc2FnZTogc3RyaW5nO1xuICAgIGRldGFpbHM/OiBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPjtcbiAgfTtcbiAgbWV0YWRhdGE/OiB7XG4gICAgZXhlY3V0aW9uVGltZTogbnVtYmVyO1xuICAgIHRvb2xOYW1lOiBzdHJpbmc7XG4gICAgdGltZXN0YW1wOiBzdHJpbmc7XG4gIH07XG59XG5cbi8qKlxuICogVG9vbCBleGVjdXRpb24gY29udGV4dFxuICovXG5leHBvcnQgaW50ZXJmYWNlIE1DUENvbnRleHQge1xuICB1c2VySWQ6IHN0cmluZztcbiAgcHJvamVjdElkOiBzdHJpbmc7XG4gIHNlc3Npb25JZDogc3RyaW5nO1xuICB1c2VyQ29udGV4dD86IFJlY29yZDxzdHJpbmcsIHVua25vd24+O1xufVxuXG4vKipcbiAqIEJhc2UgdG9vbCBpbXBsZW1lbnRhdGlvbiB3aXRoIGNvbW1vbiBmdW5jdGlvbmFsaXR5XG4gKi9cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBCYXNlTUNQVG9vbDxUSW5wdXQsIFRPdXRwdXQ+IGltcGxlbWVudHMgTUNQVG9vbDxUSW5wdXQsIFRPdXRwdXQ+IHtcbiAgYWJzdHJhY3QgbmFtZTogc3RyaW5nO1xuICBhYnN0cmFjdCBkZXNjcmlwdGlvbjogc3RyaW5nO1xuICBhYnN0cmFjdCBpbnB1dFNjaGVtYTogei5ab2RTY2hlbWE8VElucHV0PjtcbiAgXG4gIGFzeW5jIHJ1bihpbnB1dDogVElucHV0KTogUHJvbWlzZTxNQ1BSZXN1bHQ8VE91dHB1dD4+IHtcbiAgICBjb25zdCBzdGFydFRpbWUgPSBEYXRlLm5vdygpO1xuICAgIFxuICAgIHRyeSB7XG4gICAgICAvLyBWYWxpZGF0ZSBpbnB1dFxuICAgICAgY29uc3QgdmFsaWRhdGVkSW5wdXQgPSB0aGlzLmlucHV0U2NoZW1hLnBhcnNlKGlucHV0KTtcbiAgICAgIFxuICAgICAgLy8gRXhlY3V0ZSB0b29sIGxvZ2ljXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLmV4ZWN1dGUodmFsaWRhdGVkSW5wdXQpO1xuICAgICAgXG4gICAgICBjb25zdCBleGVjdXRpb25UaW1lID0gRGF0ZS5ub3coKSAtIHN0YXJ0VGltZTtcbiAgICAgIFxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgICAgZGF0YTogcmVzdWx0LFxuICAgICAgICBtZXRhZGF0YToge1xuICAgICAgICAgIGV4ZWN1dGlvblRpbWUsXG4gICAgICAgICAgdG9vbE5hbWU6IHRoaXMubmFtZSxcbiAgICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcbiAgICAgICAgfSxcbiAgICAgIH07XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnN0IGV4ZWN1dGlvblRpbWUgPSBEYXRlLm5vdygpIC0gc3RhcnRUaW1lO1xuICAgICAgXG4gICAgICByZXR1cm4ge1xuICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgZXJyb3I6IHtcbiAgICAgICAgICBjb2RlOiBlcnJvciBpbnN0YW5jZW9mIHouWm9kRXJyb3IgPyAnVkFMSURBVElPTl9FUlJPUicgOiAnRVhFQ1VUSU9OX0VSUk9SJyxcbiAgICAgICAgICBtZXNzYWdlOiBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6ICdVbmtub3duIGVycm9yJyxcbiAgICAgICAgICBkZXRhaWxzOiBlcnJvciBpbnN0YW5jZW9mIHouWm9kRXJyb3IgPyB7IGlzc3VlczogZXJyb3IuaXNzdWVzIH0gOiB1bmRlZmluZWQsXG4gICAgICAgIH0sXG4gICAgICAgIG1ldGFkYXRhOiB7XG4gICAgICAgICAgZXhlY3V0aW9uVGltZSxcbiAgICAgICAgICB0b29sTmFtZTogdGhpcy5uYW1lLFxuICAgICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxuICAgICAgICB9LFxuICAgICAgfTtcbiAgICB9XG4gIH1cbiAgXG4gIC8qKlxuICAgKiBUb29sLXNwZWNpZmljIGV4ZWN1dGlvbiBsb2dpYyAtIGltcGxlbWVudGVkIGJ5IHN1YmNsYXNzZXNcbiAgICovXG4gIHByb3RlY3RlZCBhYnN0cmFjdCBleGVjdXRlKGlucHV0OiBUSW5wdXQpOiBQcm9taXNlPFRPdXRwdXQ+O1xufSAiXSwibmFtZXMiOlsieiIsIkJhc2VNQ1BUb29sIiwicnVuIiwiaW5wdXQiLCJzdGFydFRpbWUiLCJEYXRlIiwibm93IiwidmFsaWRhdGVkSW5wdXQiLCJpbnB1dFNjaGVtYSIsInBhcnNlIiwicmVzdWx0IiwiZXhlY3V0ZSIsImV4ZWN1dGlvblRpbWUiLCJzdWNjZXNzIiwiZGF0YSIsIm1ldGFkYXRhIiwidG9vbE5hbWUiLCJuYW1lIiwidGltZXN0YW1wIiwidG9JU09TdHJpbmciLCJlcnJvciIsImNvZGUiLCJab2RFcnJvciIsIm1lc3NhZ2UiLCJFcnJvciIsImRldGFpbHMiLCJpc3N1ZXMiLCJ1bmRlZmluZWQiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./src/tools/helpers/base.ts\n");

/***/ }),

/***/ "(rsc)/./src/tools/helpers/types.ts":
/*!************************************!*\
  !*** ./src/tools/helpers/types.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addToolInputSchema: () => (/* binding */ addToolInputSchema),\n/* harmony export */   baseToolInputSchema: () => (/* binding */ baseToolInputSchema),\n/* harmony export */   deleteToolInputSchema: () => (/* binding */ deleteToolInputSchema),\n/* harmony export */   editToolInputSchema: () => (/* binding */ editToolInputSchema),\n/* harmony export */   trimToolInputSchema: () => (/* binding */ trimToolInputSchema)\n/* harmony export */ });\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! zod */ \"(rsc)/../../node_modules/zod/lib/index.mjs\");\n\n// ============================================================================\n// ZOD SCHEMAS FOR VALIDATION\n// ============================================================================\nconst baseToolInputSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    userPrompt: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().describe(\"User's description of what they want\"),\n    projectId: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().describe(\"Project ID for context only\"),\n    userId: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().optional().describe(\"User ID for context only\")\n});\nconst addToolInputSchema = baseToolInputSchema.extend({\n    sceneNumber: zod__WEBPACK_IMPORTED_MODULE_0__.z.number().optional().describe(\"Optional scene number/position\"),\n    previousSceneContext: zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n        tsxCode: zod__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n        style: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().optional()\n    }).optional().describe(\"Previous scene for style consistency\"),\n    visionAnalysis: zod__WEBPACK_IMPORTED_MODULE_0__.z.any().optional().describe(\"Vision analysis from image analysis\"),\n    imageUrls: zod__WEBPACK_IMPORTED_MODULE_0__.z.array(zod__WEBPACK_IMPORTED_MODULE_0__.z.string()).optional().describe(\"Image URLs for reference\"),\n    webContext: zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n        originalUrl: zod__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n        screenshotUrls: zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n            desktop: zod__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n            mobile: zod__WEBPACK_IMPORTED_MODULE_0__.z.string()\n        }),\n        pageData: zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n            title: zod__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n            description: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n            headings: zod__WEBPACK_IMPORTED_MODULE_0__.z.array(zod__WEBPACK_IMPORTED_MODULE_0__.z.string()),\n            url: zod__WEBPACK_IMPORTED_MODULE_0__.z.string()\n        }),\n        analyzedAt: zod__WEBPACK_IMPORTED_MODULE_0__.z.string()\n    }).optional().describe(\"Web analysis context with screenshots for brand matching\")\n});\nconst editToolInputSchema = baseToolInputSchema.extend({\n    sceneId: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().describe(\"ID of the scene to edit (reference only)\"),\n    tsxCode: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().describe(\"Current scene TSX code\"),\n    currentDuration: zod__WEBPACK_IMPORTED_MODULE_0__.z.number().optional().describe(\"Current duration in frames\"),\n    imageUrls: zod__WEBPACK_IMPORTED_MODULE_0__.z.array(zod__WEBPACK_IMPORTED_MODULE_0__.z.string()).optional().describe(\"Image URLs for reference\"),\n    visionAnalysis: zod__WEBPACK_IMPORTED_MODULE_0__.z.any().optional().describe(\"Vision analysis from image analysis\"),\n    errorDetails: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().optional().describe(\"Error details if fixing errors\"),\n    webContext: zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n        originalUrl: zod__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n        screenshotUrls: zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n            desktop: zod__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n            mobile: zod__WEBPACK_IMPORTED_MODULE_0__.z.string()\n        }),\n        pageData: zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n            title: zod__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n            description: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n            headings: zod__WEBPACK_IMPORTED_MODULE_0__.z.array(zod__WEBPACK_IMPORTED_MODULE_0__.z.string()),\n            url: zod__WEBPACK_IMPORTED_MODULE_0__.z.string()\n        }),\n        analyzedAt: zod__WEBPACK_IMPORTED_MODULE_0__.z.string()\n    }).optional().describe(\"Web analysis context with screenshots for brand matching\")\n});\nconst deleteToolInputSchema = baseToolInputSchema.extend({\n    sceneId: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().describe(\"ID of the scene to delete\"),\n    confirmDeletion: zod__WEBPACK_IMPORTED_MODULE_0__.z.boolean().optional().describe(\"Confirmation flag for deletion\")\n});\nconst trimToolInputSchema = baseToolInputSchema.extend({\n    sceneId: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().describe(\"ID of the scene to trim\"),\n    currentDuration: zod__WEBPACK_IMPORTED_MODULE_0__.z.number().describe(\"Current duration in frames\"),\n    newDuration: zod__WEBPACK_IMPORTED_MODULE_0__.z.number().optional().describe(\"Target duration in frames\"),\n    trimFrames: zod__WEBPACK_IMPORTED_MODULE_0__.z.number().optional().describe(\"Frames to add (positive) or remove (negative)\"),\n    trimType: zod__WEBPACK_IMPORTED_MODULE_0__.z.enum([\n        'start',\n        'end'\n    ]).optional().default('end').describe(\"Where to trim from\")\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/tools/helpers/types.ts\n");

/***/ }),

/***/ "(rsc)/./src/tools/trim/trim.ts":
/*!********************************!*\
  !*** ./src/tools/trim/trim.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TrimTool: () => (/* binding */ TrimTool),\n/* harmony export */   trimTool: () => (/* binding */ trimTool)\n/* harmony export */ });\n/* harmony import */ var _tools_helpers_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ~/tools/helpers/base */ \"(rsc)/./src/tools/helpers/base.ts\");\n/* harmony import */ var _tools_helpers_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ~/tools/helpers/types */ \"(rsc)/./src/tools/helpers/types.ts\");\n\n\n/**\n * TRIM Tool - Fast duration adjustment without AI\n * Used for simple cuts, extensions, or duration changes\n * NO AI PROCESSING - just metadata update\n */ class TrimTool extends _tools_helpers_base__WEBPACK_IMPORTED_MODULE_0__.BaseMCPTool {\n    async execute(input) {\n        try {\n            console.log('✂️ [TRIM TOOL] Executing trim:', {\n                prompt: input.userPrompt,\n                sceneId: input.sceneId,\n                newDuration: input.newDuration,\n                trimFrames: input.trimFrames,\n                trimType: input.trimType\n            });\n            // Parse the user prompt to extract duration intent\n            const durationInfo = this.parseDurationFromPrompt(input.userPrompt);\n            // Determine the new duration\n            let newDuration;\n            const currentDuration = input.currentDuration;\n            if (input.newDuration) {\n                newDuration = input.newDuration;\n            } else if (input.trimFrames) {\n                newDuration = Math.max(1, currentDuration + input.trimFrames);\n            } else if (durationInfo) {\n                newDuration = durationInfo.frames;\n            } else {\n                throw new Error(\"Could not determine new duration from input\");\n            }\n            const trimmedFrames = currentDuration - newDuration;\n            console.log('✂️ [TRIM TOOL] Duration change:', {\n                from: currentDuration,\n                to: newDuration,\n                trimmed: trimmedFrames\n            });\n            // Return the trim instruction - NO CODE GENERATION\n            return {\n                success: true,\n                duration: newDuration,\n                trimmedFrames: trimmedFrames,\n                reasoning: `${trimmedFrames > 0 ? 'Trimmed' : 'Extended'} scene by ${Math.abs(trimmedFrames)} frames`,\n                chatResponse: trimmedFrames > 0 ? `I'll cut ${Math.abs(trimmedFrames / 30).toFixed(1)} seconds from the ${input.trimType} of the scene` : `I'll extend the scene by ${Math.abs(trimmedFrames / 30).toFixed(1)} seconds`\n            };\n        } catch (error) {\n            console.error('✂️ [TRIM TOOL] Error:', error);\n            return {\n                success: false,\n                reasoning: `Trim failed: ${error instanceof Error ? error.message : 'Unknown error'}`,\n                error: error instanceof Error ? error.message : 'Unknown error'\n            };\n        }\n    }\n    parseDurationFromPrompt(prompt) {\n        // Match patterns like \"3 seconds\", \"90 frames\", \"make it 5s\"\n        const secondsMatch = prompt.match(/(\\d+(?:\\.\\d+)?)\\s*(?:seconds?|secs?|s)/i);\n        const framesMatch = prompt.match(/(\\d+)\\s*(?:frames?|f)/i);\n        if (secondsMatch && secondsMatch[1]) {\n            const seconds = parseFloat(secondsMatch[1]);\n            return {\n                seconds,\n                frames: Math.round(seconds * 30)\n            }; // 30fps\n        }\n        if (framesMatch && framesMatch[1]) {\n            const frames = parseInt(framesMatch[1]);\n            return {\n                frames,\n                seconds: frames / 30\n            };\n        }\n        return null;\n    }\n    constructor(...args){\n        super(...args), this.name = \"TRIM\", this.description = \"Fast duration adjustment for scenes without modifying animations\", this.inputSchema = _tools_helpers_types__WEBPACK_IMPORTED_MODULE_1__.trimToolInputSchema;\n    }\n}\n// Export singleton instance\nconst trimTool = new TrimTool();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvdG9vbHMvdHJpbS90cmltLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBbUQ7QUFFUztBQUU1RDs7OztDQUlDLEdBRU0sTUFBTUUsaUJBQWlCRiw0REFBV0E7SUFLdkMsTUFBZ0JHLFFBQVFDLEtBQW9CLEVBQTJCO1FBQ3JFLElBQUk7WUFDRkMsUUFBUUMsR0FBRyxDQUFDLGtDQUFrQztnQkFDNUNDLFFBQVFILE1BQU1JLFVBQVU7Z0JBQ3hCQyxTQUFTTCxNQUFNSyxPQUFPO2dCQUN0QkMsYUFBYU4sTUFBTU0sV0FBVztnQkFDOUJDLFlBQVlQLE1BQU1PLFVBQVU7Z0JBQzVCQyxVQUFVUixNQUFNUSxRQUFRO1lBQzFCO1lBRUEsbURBQW1EO1lBQ25ELE1BQU1DLGVBQWUsSUFBSSxDQUFDQyx1QkFBdUIsQ0FBQ1YsTUFBTUksVUFBVTtZQUVsRSw2QkFBNkI7WUFDN0IsSUFBSUU7WUFDSixNQUFNSyxrQkFBa0JYLE1BQU1XLGVBQWU7WUFFN0MsSUFBSVgsTUFBTU0sV0FBVyxFQUFFO2dCQUNyQkEsY0FBY04sTUFBTU0sV0FBVztZQUNqQyxPQUFPLElBQUlOLE1BQU1PLFVBQVUsRUFBRTtnQkFDM0JELGNBQWNNLEtBQUtDLEdBQUcsQ0FBQyxHQUFHRixrQkFBa0JYLE1BQU1PLFVBQVU7WUFDOUQsT0FBTyxJQUFJRSxjQUFjO2dCQUN2QkgsY0FBY0csYUFBYUssTUFBTTtZQUNuQyxPQUFPO2dCQUNMLE1BQU0sSUFBSUMsTUFBTTtZQUNsQjtZQUVBLE1BQU1DLGdCQUFnQkwsa0JBQWtCTDtZQUV4Q0wsUUFBUUMsR0FBRyxDQUFDLG1DQUFtQztnQkFDN0NlLE1BQU1OO2dCQUNOTyxJQUFJWjtnQkFDSmEsU0FBU0g7WUFDWDtZQUVBLG1EQUFtRDtZQUNuRCxPQUFPO2dCQUNMSSxTQUFTO2dCQUNUQyxVQUFVZjtnQkFDVlUsZUFBZUE7Z0JBQ2ZNLFdBQVcsR0FBR04sZ0JBQWdCLElBQUksWUFBWSxXQUFXLFVBQVUsRUFBRUosS0FBS1csR0FBRyxDQUFDUCxlQUFlLE9BQU8sQ0FBQztnQkFDckdRLGNBQWNSLGdCQUFnQixJQUMxQixDQUFDLFNBQVMsRUFBRUosS0FBS1csR0FBRyxDQUFDUCxnQkFBZ0IsSUFBSVMsT0FBTyxDQUFDLEdBQUcsa0JBQWtCLEVBQUV6QixNQUFNUSxRQUFRLENBQUMsYUFBYSxDQUFDLEdBQ3JHLENBQUMseUJBQXlCLEVBQUVJLEtBQUtXLEdBQUcsQ0FBQ1AsZ0JBQWdCLElBQUlTLE9BQU8sQ0FBQyxHQUFHLFFBQVEsQ0FBQztZQUNuRjtRQUVGLEVBQUUsT0FBT0MsT0FBTztZQUNkekIsUUFBUXlCLEtBQUssQ0FBQyx5QkFBeUJBO1lBQ3ZDLE9BQU87Z0JBQ0xOLFNBQVM7Z0JBQ1RFLFdBQVcsQ0FBQyxhQUFhLEVBQUVJLGlCQUFpQlgsUUFBUVcsTUFBTUMsT0FBTyxHQUFHLGlCQUFpQjtnQkFDckZELE9BQU9BLGlCQUFpQlgsUUFBUVcsTUFBTUMsT0FBTyxHQUFHO1lBQ2xEO1FBQ0Y7SUFDRjtJQUVRakIsd0JBQXdCUCxNQUFjLEVBQThDO1FBQzFGLDZEQUE2RDtRQUM3RCxNQUFNeUIsZUFBZXpCLE9BQU8wQixLQUFLLENBQUM7UUFDbEMsTUFBTUMsY0FBYzNCLE9BQU8wQixLQUFLLENBQUM7UUFFakMsSUFBSUQsZ0JBQWdCQSxZQUFZLENBQUMsRUFBRSxFQUFFO1lBQ25DLE1BQU1HLFVBQVVDLFdBQVdKLFlBQVksQ0FBQyxFQUFFO1lBQzFDLE9BQU87Z0JBQUVHO2dCQUFTakIsUUFBUUYsS0FBS3FCLEtBQUssQ0FBQ0YsVUFBVTtZQUFJLEdBQUcsUUFBUTtRQUNoRTtRQUVBLElBQUlELGVBQWVBLFdBQVcsQ0FBQyxFQUFFLEVBQUU7WUFDakMsTUFBTWhCLFNBQVNvQixTQUFTSixXQUFXLENBQUMsRUFBRTtZQUN0QyxPQUFPO2dCQUFFaEI7Z0JBQVFpQixTQUFTakIsU0FBUztZQUFHO1FBQ3hDO1FBRUEsT0FBTztJQUNUOztRQTdFSyxxQkFDTHFCLE9BQU8sYUFDUEMsY0FBYyx5RUFDZEMsY0FBY3hDLHFFQUFtQkE7O0FBMkVuQztBQUVBLDRCQUE0QjtBQUNyQixNQUFNeUMsV0FBVyxJQUFJeEMsV0FBVyIsInNvdXJjZXMiOlsiL1VzZXJzL21hcmt1c2hvZ25lL0RvY3VtZW50cy9BUFBTL2JhemFhci12aWQvYmF6YWFyLXZpZC9hcHBzL21haW4vc3JjL3Rvb2xzL3RyaW0vdHJpbS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCYXNlTUNQVG9vbCB9IGZyb20gXCJ+L3Rvb2xzL2hlbHBlcnMvYmFzZVwiO1xuaW1wb3J0IHR5cGUgeyBUcmltVG9vbElucHV0LCBUcmltVG9vbE91dHB1dCB9IGZyb20gXCJ+L3Rvb2xzL2hlbHBlcnMvdHlwZXNcIjtcbmltcG9ydCB7IHRyaW1Ub29sSW5wdXRTY2hlbWEgfSBmcm9tIFwifi90b29scy9oZWxwZXJzL3R5cGVzXCI7XG5cbi8qKlxuICogVFJJTSBUb29sIC0gRmFzdCBkdXJhdGlvbiBhZGp1c3RtZW50IHdpdGhvdXQgQUlcbiAqIFVzZWQgZm9yIHNpbXBsZSBjdXRzLCBleHRlbnNpb25zLCBvciBkdXJhdGlvbiBjaGFuZ2VzXG4gKiBOTyBBSSBQUk9DRVNTSU5HIC0ganVzdCBtZXRhZGF0YSB1cGRhdGVcbiAqL1xuXG5leHBvcnQgY2xhc3MgVHJpbVRvb2wgZXh0ZW5kcyBCYXNlTUNQVG9vbDxUcmltVG9vbElucHV0LCBUcmltVG9vbE91dHB1dD4ge1xuICBuYW1lID0gXCJUUklNXCI7XG4gIGRlc2NyaXB0aW9uID0gXCJGYXN0IGR1cmF0aW9uIGFkanVzdG1lbnQgZm9yIHNjZW5lcyB3aXRob3V0IG1vZGlmeWluZyBhbmltYXRpb25zXCI7XG4gIGlucHV0U2NoZW1hID0gdHJpbVRvb2xJbnB1dFNjaGVtYTtcblxuICBwcm90ZWN0ZWQgYXN5bmMgZXhlY3V0ZShpbnB1dDogVHJpbVRvb2xJbnB1dCk6IFByb21pc2U8VHJpbVRvb2xPdXRwdXQ+IHtcbiAgICB0cnkge1xuICAgICAgY29uc29sZS5sb2coJ+Kcgu+4jyBbVFJJTSBUT09MXSBFeGVjdXRpbmcgdHJpbTonLCB7XG4gICAgICAgIHByb21wdDogaW5wdXQudXNlclByb21wdCxcbiAgICAgICAgc2NlbmVJZDogaW5wdXQuc2NlbmVJZCxcbiAgICAgICAgbmV3RHVyYXRpb246IGlucHV0Lm5ld0R1cmF0aW9uLFxuICAgICAgICB0cmltRnJhbWVzOiBpbnB1dC50cmltRnJhbWVzLFxuICAgICAgICB0cmltVHlwZTogaW5wdXQudHJpbVR5cGVcbiAgICAgIH0pO1xuXG4gICAgICAvLyBQYXJzZSB0aGUgdXNlciBwcm9tcHQgdG8gZXh0cmFjdCBkdXJhdGlvbiBpbnRlbnRcbiAgICAgIGNvbnN0IGR1cmF0aW9uSW5mbyA9IHRoaXMucGFyc2VEdXJhdGlvbkZyb21Qcm9tcHQoaW5wdXQudXNlclByb21wdCk7XG4gICAgICBcbiAgICAgIC8vIERldGVybWluZSB0aGUgbmV3IGR1cmF0aW9uXG4gICAgICBsZXQgbmV3RHVyYXRpb246IG51bWJlcjtcbiAgICAgIGNvbnN0IGN1cnJlbnREdXJhdGlvbiA9IGlucHV0LmN1cnJlbnREdXJhdGlvbjtcbiAgICAgIFxuICAgICAgaWYgKGlucHV0Lm5ld0R1cmF0aW9uKSB7XG4gICAgICAgIG5ld0R1cmF0aW9uID0gaW5wdXQubmV3RHVyYXRpb247XG4gICAgICB9IGVsc2UgaWYgKGlucHV0LnRyaW1GcmFtZXMpIHtcbiAgICAgICAgbmV3RHVyYXRpb24gPSBNYXRoLm1heCgxLCBjdXJyZW50RHVyYXRpb24gKyBpbnB1dC50cmltRnJhbWVzKTtcbiAgICAgIH0gZWxzZSBpZiAoZHVyYXRpb25JbmZvKSB7XG4gICAgICAgIG5ld0R1cmF0aW9uID0gZHVyYXRpb25JbmZvLmZyYW1lcztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkIG5vdCBkZXRlcm1pbmUgbmV3IGR1cmF0aW9uIGZyb20gaW5wdXRcIik7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHRyaW1tZWRGcmFtZXMgPSBjdXJyZW50RHVyYXRpb24gLSBuZXdEdXJhdGlvbjtcblxuICAgICAgY29uc29sZS5sb2coJ+Kcgu+4jyBbVFJJTSBUT09MXSBEdXJhdGlvbiBjaGFuZ2U6Jywge1xuICAgICAgICBmcm9tOiBjdXJyZW50RHVyYXRpb24sXG4gICAgICAgIHRvOiBuZXdEdXJhdGlvbixcbiAgICAgICAgdHJpbW1lZDogdHJpbW1lZEZyYW1lc1xuICAgICAgfSk7XG5cbiAgICAgIC8vIFJldHVybiB0aGUgdHJpbSBpbnN0cnVjdGlvbiAtIE5PIENPREUgR0VORVJBVElPTlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgICAgZHVyYXRpb246IG5ld0R1cmF0aW9uLFxuICAgICAgICB0cmltbWVkRnJhbWVzOiB0cmltbWVkRnJhbWVzLFxuICAgICAgICByZWFzb25pbmc6IGAke3RyaW1tZWRGcmFtZXMgPiAwID8gJ1RyaW1tZWQnIDogJ0V4dGVuZGVkJ30gc2NlbmUgYnkgJHtNYXRoLmFicyh0cmltbWVkRnJhbWVzKX0gZnJhbWVzYCxcbiAgICAgICAgY2hhdFJlc3BvbnNlOiB0cmltbWVkRnJhbWVzID4gMCBcbiAgICAgICAgICA/IGBJJ2xsIGN1dCAke01hdGguYWJzKHRyaW1tZWRGcmFtZXMgLyAzMCkudG9GaXhlZCgxKX0gc2Vjb25kcyBmcm9tIHRoZSAke2lucHV0LnRyaW1UeXBlfSBvZiB0aGUgc2NlbmVgXG4gICAgICAgICAgOiBgSSdsbCBleHRlbmQgdGhlIHNjZW5lIGJ5ICR7TWF0aC5hYnModHJpbW1lZEZyYW1lcyAvIDMwKS50b0ZpeGVkKDEpfSBzZWNvbmRzYCxcbiAgICAgIH07XG4gICAgICBcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcign4pyC77iPIFtUUklNIFRPT0xdIEVycm9yOicsIGVycm9yKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICByZWFzb25pbmc6IGBUcmltIGZhaWxlZDogJHtlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6ICdVbmtub3duIGVycm9yJ31gLFxuICAgICAgICBlcnJvcjogZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiAnVW5rbm93biBlcnJvcicsXG4gICAgICB9IGFzIFRyaW1Ub29sT3V0cHV0O1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgcGFyc2VEdXJhdGlvbkZyb21Qcm9tcHQocHJvbXB0OiBzdHJpbmcpOiB7IGZyYW1lczogbnVtYmVyOyBzZWNvbmRzOiBudW1iZXIgfSB8IG51bGwge1xuICAgIC8vIE1hdGNoIHBhdHRlcm5zIGxpa2UgXCIzIHNlY29uZHNcIiwgXCI5MCBmcmFtZXNcIiwgXCJtYWtlIGl0IDVzXCJcbiAgICBjb25zdCBzZWNvbmRzTWF0Y2ggPSBwcm9tcHQubWF0Y2goLyhcXGQrKD86XFwuXFxkKyk/KVxccyooPzpzZWNvbmRzP3xzZWNzP3xzKS9pKTtcbiAgICBjb25zdCBmcmFtZXNNYXRjaCA9IHByb21wdC5tYXRjaCgvKFxcZCspXFxzKig/OmZyYW1lcz98ZikvaSk7XG4gICAgXG4gICAgaWYgKHNlY29uZHNNYXRjaCAmJiBzZWNvbmRzTWF0Y2hbMV0pIHtcbiAgICAgIGNvbnN0IHNlY29uZHMgPSBwYXJzZUZsb2F0KHNlY29uZHNNYXRjaFsxXSk7XG4gICAgICByZXR1cm4geyBzZWNvbmRzLCBmcmFtZXM6IE1hdGgucm91bmQoc2Vjb25kcyAqIDMwKSB9OyAvLyAzMGZwc1xuICAgIH1cbiAgICBcbiAgICBpZiAoZnJhbWVzTWF0Y2ggJiYgZnJhbWVzTWF0Y2hbMV0pIHtcbiAgICAgIGNvbnN0IGZyYW1lcyA9IHBhcnNlSW50KGZyYW1lc01hdGNoWzFdKTtcbiAgICAgIHJldHVybiB7IGZyYW1lcywgc2Vjb25kczogZnJhbWVzIC8gMzAgfTtcbiAgICB9XG4gICAgXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbn1cblxuLy8gRXhwb3J0IHNpbmdsZXRvbiBpbnN0YW5jZVxuZXhwb3J0IGNvbnN0IHRyaW1Ub29sID0gbmV3IFRyaW1Ub29sKCk7Il0sIm5hbWVzIjpbIkJhc2VNQ1BUb29sIiwidHJpbVRvb2xJbnB1dFNjaGVtYSIsIlRyaW1Ub29sIiwiZXhlY3V0ZSIsImlucHV0IiwiY29uc29sZSIsImxvZyIsInByb21wdCIsInVzZXJQcm9tcHQiLCJzY2VuZUlkIiwibmV3RHVyYXRpb24iLCJ0cmltRnJhbWVzIiwidHJpbVR5cGUiLCJkdXJhdGlvbkluZm8iLCJwYXJzZUR1cmF0aW9uRnJvbVByb21wdCIsImN1cnJlbnREdXJhdGlvbiIsIk1hdGgiLCJtYXgiLCJmcmFtZXMiLCJFcnJvciIsInRyaW1tZWRGcmFtZXMiLCJmcm9tIiwidG8iLCJ0cmltbWVkIiwic3VjY2VzcyIsImR1cmF0aW9uIiwicmVhc29uaW5nIiwiYWJzIiwiY2hhdFJlc3BvbnNlIiwidG9GaXhlZCIsImVycm9yIiwibWVzc2FnZSIsInNlY29uZHNNYXRjaCIsIm1hdGNoIiwiZnJhbWVzTWF0Y2giLCJzZWNvbmRzIiwicGFyc2VGbG9hdCIsInJvdW5kIiwicGFyc2VJbnQiLCJuYW1lIiwiZGVzY3JpcHRpb24iLCJpbnB1dFNjaGVtYSIsInRyaW1Ub29sIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./src/tools/trim/trim.ts\n");

/***/ }),

/***/ "(rsc)/./src/tools/webAnalysis/WebAnalysisAgent.ts":
/*!***************************************************!*\
  !*** ./src/tools/webAnalysis/WebAnalysisAgent.ts ***!
  \***************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   WebAnalysisAgent: () => (/* binding */ WebAnalysisAgent)\n/* harmony export */ });\n/* harmony import */ var playwright__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! playwright */ \"playwright\");\n/* harmony import */ var _lib_utils_r2_upload__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ~/lib/utils/r2-upload */ \"(rsc)/./src/lib/utils/r2-upload.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([playwright__WEBPACK_IMPORTED_MODULE_0__]);\nplaywright__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\nclass WebAnalysisAgent {\n    async analyzeWebsite(url, projectId, userId) {\n        console.log(`🌐 Analyzing: ${url}`);\n        const browser = await playwright__WEBPACK_IMPORTED_MODULE_0__.chromium.launch({\n            headless: true,\n            args: [\n                '--no-sandbox',\n                '--disable-setuid-sandbox'\n            ] // For production deployment\n        });\n        try {\n            const page = await browser.newPage();\n            // Navigate with timeout\n            console.log('📍 Navigating to website...');\n            await page.goto(url, {\n                waitUntil: 'networkidle',\n                timeout: 10000\n            });\n            // Desktop screenshot\n            console.log('🖥️ Taking desktop screenshot...');\n            await page.setViewportSize({\n                width: 1280,\n                height: 800\n            });\n            const desktopScreenshot = await page.screenshot({\n                type: 'png',\n                fullPage: false\n            });\n            // Mobile screenshot  \n            console.log('📱 Taking mobile screenshot...');\n            await page.setViewportSize({\n                width: 390,\n                height: 844\n            });\n            const mobileScreenshot = await page.screenshot({\n                type: 'png',\n                fullPage: false\n            });\n            // Extract page data\n            console.log('📄 Extracting page data...');\n            const pageData = await page.evaluate(()=>({\n                    title: document.title,\n                    description: document.querySelector('meta[name=\"description\"]')?.getAttribute('content') || document.querySelector('meta[property=\"og:description\"]')?.getAttribute('content') || undefined,\n                    headings: Array.from(document.querySelectorAll('h1, h2, h3')).map((h)=>h.textContent?.trim()).filter((text)=>Boolean(text)).slice(0, 10),\n                    url: window.location.href\n                }));\n            console.log(`✅ Analysis complete for ${pageData.title}`);\n            // Upload screenshots to R2 if projectId provided\n            let screenshotUrls;\n            if (projectId) {\n                try {\n                    console.log('📤 Uploading screenshots to R2...');\n                    screenshotUrls = await (0,_lib_utils_r2_upload__WEBPACK_IMPORTED_MODULE_1__.uploadWebAnalysisScreenshots)({\n                        desktop: desktopScreenshot,\n                        mobile: mobileScreenshot\n                    }, projectId, userId);\n                    console.log('✅ Screenshots uploaded to R2');\n                } catch (uploadError) {\n                    console.error('❌ Failed to upload screenshots:', uploadError);\n                // Continue without R2 URLs - screenshots still available as buffers\n                }\n            }\n            return {\n                success: true,\n                url,\n                screenshots: {\n                    desktop: desktopScreenshot,\n                    mobile: mobileScreenshot\n                },\n                screenshotUrls,\n                pageData,\n                analyzedAt: new Date().toISOString()\n            };\n        } catch (error) {\n            console.error('❌ Analysis failed:', error instanceof Error ? error.message : String(error));\n            return {\n                success: false,\n                error: error instanceof Error ? error.message : String(error),\n                url\n            };\n        } finally{\n            await browser.close();\n        }\n    }\n    /**\n   * Validate if a URL is accessible and safe to analyze\n   */ async validateUrl(url) {\n        try {\n            const parsed = new URL(url);\n            // Only allow http/https\n            if (![\n                'http:',\n                'https:'\n            ].includes(parsed.protocol)) {\n                return {\n                    valid: false,\n                    error: 'Only HTTP and HTTPS URLs are supported'\n                };\n            }\n            // Block localhost and private IPs for security\n            const hostname = parsed.hostname.toLowerCase();\n            if (hostname === 'localhost' || hostname.startsWith('127.') || hostname.startsWith('192.168.') || hostname.startsWith('10.') || hostname.includes('internal')) {\n                return {\n                    valid: false,\n                    error: 'Local and private URLs are not allowed'\n                };\n            }\n            return {\n                valid: true\n            };\n        } catch (error) {\n            return {\n                valid: false,\n                error: 'Invalid URL format'\n            };\n        }\n    }\n    /**\n   * Test if the agent can analyze a given URL without actually doing the analysis\n   */ async testConnection(url) {\n        const validation = await this.validateUrl(url);\n        if (!validation.valid) {\n            return {\n                reachable: false,\n                error: validation.error\n            };\n        }\n        const browser = await playwright__WEBPACK_IMPORTED_MODULE_0__.chromium.launch({\n            headless: true\n        });\n        try {\n            const page = await browser.newPage();\n            await page.goto(url, {\n                waitUntil: 'domcontentloaded',\n                timeout: 5000\n            });\n            const title = await page.title();\n            return {\n                reachable: true,\n                error: title ? undefined : 'Page loaded but no title found'\n            };\n        } catch (error) {\n            return {\n                reachable: false,\n                error: `Cannot reach website: ${error instanceof Error ? error.message : String(error)}`\n            };\n        } finally{\n            await browser.close();\n        }\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/tools/webAnalysis/WebAnalysisAgent.ts\n");

/***/ }),

/***/ "(ssr)/../../node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!**********************************************************************************************************!*\
  !*** ../../node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \**********************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "../../server/app-render/action-async-storage.external":
/*!*******************************************************************************!*\
  !*** external "next/dist/server/app-render/action-async-storage.external.js" ***!
  \*******************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/action-async-storage.external.js");

/***/ }),

/***/ "../app-render/after-task-async-storage.external":
/*!***********************************************************************************!*\
  !*** external "next/dist/server/app-render/after-task-async-storage.external.js" ***!
  \***********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/after-task-async-storage.external.js");

/***/ }),

/***/ "../app-render/work-async-storage.external":
/*!*****************************************************************************!*\
  !*** external "next/dist/server/app-render/work-async-storage.external.js" ***!
  \*****************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-async-storage.external.js");

/***/ }),

/***/ "./work-unit-async-storage.external":
/*!**********************************************************************************!*\
  !*** external "next/dist/server/app-render/work-unit-async-storage.external.js" ***!
  \**********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-unit-async-storage.external.js");

/***/ }),

/***/ "@aws-sdk/client-s3":
/*!*************************************!*\
  !*** external "@aws-sdk/client-s3" ***!
  \*************************************/
/***/ ((module) => {

"use strict";
module.exports = require("@aws-sdk/client-s3");

/***/ }),

/***/ "buffer":
/*!*************************!*\
  !*** external "buffer" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("buffer");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("crypto");

/***/ }),

/***/ "drizzle-orm":
/*!******************************!*\
  !*** external "drizzle-orm" ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = import("drizzle-orm");;

/***/ }),

/***/ "drizzle-orm/mysql-core":
/*!*****************************************!*\
  !*** external "drizzle-orm/mysql-core" ***!
  \*****************************************/
/***/ ((module) => {

"use strict";
module.exports = import("drizzle-orm/mysql-core");;

/***/ }),

/***/ "drizzle-orm/neon-http":
/*!****************************************!*\
  !*** external "drizzle-orm/neon-http" ***!
  \****************************************/
/***/ ((module) => {

"use strict";
module.exports = import("drizzle-orm/neon-http");;

/***/ }),

/***/ "drizzle-orm/pg-core":
/*!**************************************!*\
  !*** external "drizzle-orm/pg-core" ***!
  \**************************************/
/***/ ((module) => {

"use strict";
module.exports = import("drizzle-orm/pg-core");;

/***/ }),

/***/ "drizzle-orm/sqlite-core":
/*!******************************************!*\
  !*** external "drizzle-orm/sqlite-core" ***!
  \******************************************/
/***/ ((module) => {

"use strict";
module.exports = import("drizzle-orm/sqlite-core");;

/***/ }),

/***/ "events":
/*!*************************!*\
  !*** external "events" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("events");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = require("fs");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("http");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

"use strict";
module.exports = require("https");

/***/ }),

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "node:buffer":
/*!******************************!*\
  !*** external "node:buffer" ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:buffer");

/***/ }),

/***/ "node:crypto":
/*!******************************!*\
  !*** external "node:crypto" ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:crypto");

/***/ }),

/***/ "node:fs":
/*!**************************!*\
  !*** external "node:fs" ***!
  \**************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:fs");

/***/ }),

/***/ "node:stream":
/*!******************************!*\
  !*** external "node:stream" ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:stream");

/***/ }),

/***/ "node:stream/web":
/*!**********************************!*\
  !*** external "node:stream/web" ***!
  \**********************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:stream/web");

/***/ }),

/***/ "node:util":
/*!****************************!*\
  !*** external "node:util" ***!
  \****************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:util");

/***/ }),

/***/ "os":
/*!*********************!*\
  !*** external "os" ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = require("os");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("path");

/***/ }),

/***/ "playwright":
/*!*****************************!*\
  !*** external "playwright" ***!
  \*****************************/
/***/ ((module) => {

"use strict";
module.exports = import("playwright");;

/***/ }),

/***/ "punycode":
/*!***************************!*\
  !*** external "punycode" ***!
  \***************************/
/***/ ((module) => {

"use strict";
module.exports = require("punycode");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("stream");

/***/ }),

/***/ "string_decoder":
/*!*********************************!*\
  !*** external "string_decoder" ***!
  \*********************************/
/***/ ((module) => {

"use strict";
module.exports = require("string_decoder");

/***/ }),

/***/ "tty":
/*!**********************!*\
  !*** external "tty" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("tty");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("url");

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("util");

/***/ }),

/***/ "worker_threads":
/*!*********************************!*\
  !*** external "worker_threads" ***!
  \*********************************/
/***/ ((module) => {

"use strict";
module.exports = require("worker_threads");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("zlib");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/next-auth","vendor-chunks/@opentelemetry","vendor-chunks/@trpc","vendor-chunks/superjson","vendor-chunks/is-what","vendor-chunks/copy-anything","vendor-chunks/@neondatabase","vendor-chunks/oauth4webapi","vendor-chunks/@auth","vendor-chunks/cookie","vendor-chunks/@panva","vendor-chunks/formdata-node","vendor-chunks/openai","vendor-chunks/@anthropic-ai","vendor-chunks/winston","vendor-chunks/logform","vendor-chunks/async","vendor-chunks/winston-transport","vendor-chunks/form-data-encoder","vendor-chunks/@colors","vendor-chunks/math-intrinsics","vendor-chunks/es-errors","vendor-chunks/@dabh","vendor-chunks/uuid","vendor-chunks/colorspace","vendor-chunks/call-bind-apply-helpers","vendor-chunks/triple-beam","vendor-chunks/regexp.prototype.flags","vendor-chunks/object-is","vendor-chunks/agentkeepalive","vendor-chunks/object-keys","vendor-chunks/get-proto","vendor-chunks/fast-json-patch","vendor-chunks/@t3-oss","vendor-chunks/winston-daily-rotate-file","vendor-chunks/string_decoder","vendor-chunks/simple-swizzle","vendor-chunks/inherits","vendor-chunks/has-symbols","vendor-chunks/gopd","vendor-chunks/function-bind","vendor-chunks/zod","vendor-chunks/util-deprecate","vendor-chunks/text-hex","vendor-chunks/stack-trace","vendor-chunks/set-function-name","vendor-chunks/set-function-length","vendor-chunks/safe-stable-stringify","vendor-chunks/one-time","vendor-chunks/object-hash","vendor-chunks/ms","vendor-chunks/moment","vendor-chunks/kuler","vendor-chunks/is-stream","vendor-chunks/is-regex","vendor-chunks/is-date-object","vendor-chunks/is-arguments","vendor-chunks/humanize-ms","vendor-chunks/hasown","vendor-chunks/has-tostringtag","vendor-chunks/has-property-descriptors","vendor-chunks/get-intrinsic","vendor-chunks/functions-have-names","vendor-chunks/fn.name","vendor-chunks/file-stream-rotator","vendor-chunks/fecha","vendor-chunks/event-target-shim","vendor-chunks/es-object-atoms","vendor-chunks/es-define-property","vendor-chunks/enabled","vendor-chunks/dunder-proto","vendor-chunks/define-properties","vendor-chunks/define-data-property","vendor-chunks/deep-equal","vendor-chunks/color-string","vendor-chunks/color-name","vendor-chunks/call-bound","vendor-chunks/call-bind","vendor-chunks/abort-controller"], () => (__webpack_exec__("(rsc)/../../node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Ftrpc%2F%5Btrpc%5D%2Froute&page=%2Fapi%2Ftrpc%2F%5Btrpc%5D%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Ftrpc%2F%5Btrpc%5D%2Froute.ts&appDir=%2FUsers%2Fmarkushogne%2FDocuments%2FAPPS%2Fbazaar-vid%2Fbazaar-vid%2Fapps%2Fmain%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fmarkushogne%2FDocuments%2FAPPS%2Fbazaar-vid%2Fbazaar-vid%2Fapps%2Fmain&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();