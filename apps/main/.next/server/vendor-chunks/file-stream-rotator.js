"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/file-stream-rotator";
exports.ids = ["vendor-chunks/file-stream-rotator"];
exports.modules = {

/***/ "(rsc)/../../node_modules/file-stream-rotator/FileStreamRotator.js":
/*!*******************************************************************!*\
  !*** ../../node_modules/file-stream-rotator/FileStreamRotator.js ***!
  \*******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\n/*!\n * FileStreamRotator\n * Copyright(c) 2012-2017 Holiday Extras.\n * Copyright(c) 2017 Roger C.\n * MIT Licensed\n */\n\n/**\n * Module dependencies.\n */\nvar fs = __webpack_require__(/*! fs */ \"fs\");\nvar path = __webpack_require__(/*! path */ \"path\");\nvar moment = __webpack_require__(/*! moment */ \"(rsc)/../../node_modules/moment/moment.js\");\nvar crypto = __webpack_require__(/*! crypto */ \"crypto\");\n\nvar EventEmitter = __webpack_require__(/*! events */ \"events\");\n\n/**\n * FileStreamRotator:\n *\n * Returns a file stream that auto-rotates based on date.\n *\n * Options:\n *\n *   - `filename`       Filename including full path used by the stream\n *\n *   - `frequency`      How often to rotate. Options are 'daily', 'custom' and 'test'. 'test' rotates every minute.\n *                      If frequency is set to none of the above, a YYYYMMDD string will be added to the end of the filename.\n *\n *   - `verbose`        If set, it will log to STDOUT when it rotates files and name of log file. Default is TRUE.\n *\n *   - `date_format`    Format as used in moment.js http://momentjs.com/docs/#/displaying/format/. The result is used to replace\n *                      the '%DATE%' placeholder in the filename.\n *                      If using 'custom' frequency, it is used to trigger file change when the string representation changes.\n *\n *   - `size`           Max size of the file after which it will rotate. It can be combined with frequency or date format.\n *                      The size units are 'k', 'm' and 'g'. Units need to directly follow a number e.g. 1g, 100m, 20k.\n *\n *   - `max_logs`       Max number of logs to keep. If not set, it won't remove past logs. It uses its own log audit file\n *                      to keep track of the log files in a json format. It won't delete any file not contained in it.\n *                      It can be a number of files or number of days. If using days, add 'd' as the suffix.\n *\n *   - `audit_file`     Location to store the log audit file. If not set, it will be stored in the root of the application.\n * \n *   - `end_stream`     End stream (true) instead of the default behaviour of destroy (false). Set value to true if when writing to the\n *                      stream in a loop, if the application terminates or log rotates, data pending to be flushed might be lost.                    \n *\n *   - `file_options`   An object passed to the stream. This can be used to specify flags, encoding, and mode.\n *                      See https://nodejs.org/api/fs.html#fs_fs_createwritestream_path_options. Default `{ flags: 'a' }`.\n * \n *   - `utc`            Use UTC time for date in filename. Defaults to 'FALSE'\n * \n *   - `extension`      File extension to be appended to the filename. This is useful when using size restrictions as the rotation\n *                      adds a count (1,2,3,4,...) at the end of the filename when the required size is met.\n * \n *   - `watch_log`      Watch the current file being written to and recreate it in case of accidental deletion. Defaults to 'FALSE'\n *\n *   - `create_symlink` Create a tailable symlink to the current active log file. Defaults to 'FALSE'\n * \n *   - `symlink_name`   Name to use when creating the symbolic link. Defaults to 'current.log'\n * \n *   - `audit_hash_type` Use specified hashing algorithm for audit. Defaults to 'md5'. Use 'sha256' for FIPS compliance.\n *\n * To use with Express / Connect, use as below.\n *\n * var rotatingLogStream = require('FileStreamRotator').getStream({filename:\"/tmp/test.log\", frequency:\"daily\", verbose: false})\n * app.use(express.logger({stream: rotatingLogStream, format: \"default\"}));\n *\n * @param {Object} options\n * @return {Object}\n * @api public\n */\nvar FileStreamRotator = {};\n\nmodule.exports = FileStreamRotator;\n\nvar staticFrequency = ['daily', 'test', 'm', 'h', 'custom'];\nvar DATE_FORMAT = ('YYYYMMDDHHmm');\n\n\n/**\n * Returns frequency metadata for minute/hour rotation\n * @param type\n * @param num\n * @returns {*}\n * @private\n */\nvar _checkNumAndType = function (type, num) {\n    if (typeof num == 'number') {\n        switch (type) {\n            case 'm':\n                if (num < 0 || num > 60) {\n                    return false;\n                }\n                break;\n            case 'h':\n                if (num < 0 || num > 24) {\n                    return false;\n                }\n                break;\n        }\n        return {type: type, digit: num};\n    }\n}\n\n/**\n * Returns frequency metadata for defined frequency\n * @param freqType\n * @returns {*}\n * @private\n */\nvar _checkDailyAndTest = function (freqType) {\n    switch (freqType) {\n        case 'custom':\n        case 'daily':\n            return {type: freqType, digit: undefined};\n            break;\n        case 'test':\n            return {type: freqType, digit: 0};\n    }\n    return false;\n}\n\n\n/**\n * Returns frequency metadata\n * @param frequency\n * @returns {*}\n */\nFileStreamRotator.getFrequency = function (frequency) {\n    var _f = frequency.toLowerCase().match(/^(\\d+)([mh])$/)\n    if(_f){\n        return _checkNumAndType(_f[2], parseInt(_f[1]));\n    }\n\n    var dailyOrTest = _checkDailyAndTest(frequency);\n    if (dailyOrTest) {\n        return dailyOrTest;\n    }\n\n    return false;\n}\n\n/**\n * Returns a number based on the option string\n * @param size\n * @returns {Number}\n */\nFileStreamRotator.parseFileSize = function (size) {\n    if(size && typeof size == \"string\"){\n        var _s = size.toLowerCase().match(/^((?:0\\.)?\\d+)([kmg])$/);\n        if(_s){\n            switch(_s[2]){\n                case 'k':\n                    return _s[1]*1024\n                case 'm':\n                    return _s[1]*1024*1024\n                case 'g':\n                    return _s[1]*1024*1024*1024\n            }\n        }\n    }\n    return null;\n};\n\n/**\n * Returns date string for a given format / date_format\n * @param format\n * @param date_format\n * @param {boolean} utc\n * @returns {string}\n */\nFileStreamRotator.getDate = function (format, date_format, utc) {\n    date_format = date_format || DATE_FORMAT;\n    let currentMoment = utc ? moment.utc() : moment().local()\n    if (format && staticFrequency.indexOf(format.type) !== -1) {\n        switch (format.type) {\n            case 'm':\n                var minute = Math.floor(currentMoment.minutes() / format.digit) * format.digit;\n                return currentMoment.minutes(minute).format(date_format);\n                break;\n            case 'h':\n                var hour = Math.floor(currentMoment.hour() / format.digit) * format.digit;\n                return currentMoment.hour(hour).format(date_format);\n                break;\n            case 'daily':\n            case 'custom':\n            case 'test':\n                return currentMoment.format(date_format);\n        }\n    }\n    return currentMoment.format(date_format);\n}\n\n/**\n * Read audit json object from disk or return new object or null\n * @param max_logs\n * @param audit_file\n * @param log_file\n * @returns {Object} auditLogSettings\n * @property {Object} auditLogSettings.keep\n * @property {Boolean} auditLogSettings.keep.days\n * @property {Number} auditLogSettings.keep.amount\n * @property {String} auditLogSettings.auditLog\n * @property {Array} auditLogSettings.files\n * @property {String} auditLogSettings.hashType\n */\nFileStreamRotator.setAuditLog = function (max_logs, audit_file, log_file){\n    var _rtn = null;\n    if(max_logs){\n        var use_days = max_logs.toString().substr(-1);\n        var _num = max_logs.toString().match(/^(\\d+)/);\n\n        if(Number(_num[1]) > 0) {\n            var baseLog = path.dirname(log_file.replace(/%DATE%.+/,\"_filename\"));\n            try{\n                if(audit_file){\n                    var full_path = path.resolve(audit_file);\n                    _rtn = JSON.parse(fs.readFileSync(full_path, { encoding: 'utf-8' }));\n                }else{\n                    var full_path = path.resolve(baseLog + \"/\" + \".audit.json\")\n                    _rtn = JSON.parse(fs.readFileSync(full_path, { encoding: 'utf-8' }));\n                }\n            }catch(e){\n                if(e.code !== \"ENOENT\"){\n                    return null;\n                }\n                _rtn = {\n                    keep: {\n                        days: false,\n                        amount: Number(_num[1])\n                    },\n                    auditLog: audit_file || baseLog + \"/\" + \".audit.json\",\n                    files: []\n                };\n            }\n\n            _rtn.keep = {\n                days: use_days === 'd',\n                amount: Number(_num[1])\n            };\n\n        }\n    }\n    return _rtn;\n};\n\n/**\n * Write audit json object to disk\n * @param {Object} audit\n * @param {Object} audit.keep\n * @param {Boolean} audit.keep.days\n * @param {Number} audit.keep.amount\n * @param {String} audit.auditLog\n * @param {Array} audit.files\n * @param {String} audit.hashType\n * @param {Boolean} verbose \n */\nFileStreamRotator.writeAuditLog = function(audit, verbose){\n    try{\n        mkDirForFile(audit.auditLog);\n        fs.writeFileSync(audit.auditLog, JSON.stringify(audit,null,4));\n    }catch(e){\n        if (verbose) {\n            console.error(new Date(),\"[FileStreamRotator] Failed to store log audit at:\", audit.auditLog,\"Error:\", e);\n        }\n    }\n};\n\n\n/**\n * Removes old log file\n * @param file\n * @param file.hash\n * @param file.name\n * @param file.date\n * @param file.hashType\n * @param {Boolean} verbose \n */\nfunction removeFile(file, verbose){\n    if(file.hash === crypto.createHash(file.hashType).update(file.name + \"LOG_FILE\" + file.date).digest(\"hex\")){\n        try{\n            if (fs.existsSync(file.name)) {\n                fs.unlinkSync(file.name);\n            }\n        }catch(e){\n            if (verbose) {\n                console.error(new Date(), \"[FileStreamRotator] Could not remove old log file: \", file.name);\n            }\n        }\n    }\n}\n\n/**\n * Create symbolic link to current log file\n * @param {String} logfile \n * @param {String} name Name to use for symbolic link \n * @param {Boolean} verbose \n */\nfunction createCurrentSymLink(logfile, name, verbose) {\n    let symLinkName = name || \"current.log\"\n    let logPath = path.dirname(logfile)\n    let logfileName = path.basename(logfile)\n    let current = logPath + \"/\" + symLinkName\n    try {\n        let stats = fs.lstatSync(current)\n        if(stats.isSymbolicLink()){\n            fs.unlinkSync(current)\n            fs.symlinkSync(logfileName, current)\n        }\n    } catch (err) {\n        if(err && err.code == \"ENOENT\") {\n            try {\n                fs.symlinkSync(logfileName, current)\n            } catch (e) {\n                if (verbose) {\n                    console.error(new Date(), \"[FileStreamRotator] Could not create symlink file: \", current, ' -> ', logfileName);\n                }\n            }\n        }\n    }\n}\n\n/**\n * \n * @param {String} logfile \n * @param {Boolean} verbose \n * @param {function} cb \n */\nfunction createLogWatcher(logfile, verbose, cb){\n    if(!logfile) return null\n    // console.log(\"Creating log watcher\")\n    try {\n        let stats = fs.lstatSync(logfile)\n        return fs.watch(logfile, function(event,filename){\n            // console.log(Date(), event, filename)\n            if(event == \"rename\"){\n                try {\n                    let stats = fs.lstatSync(logfile)\n                    // console.log(\"STATS:\", stats)\n                }catch(err){\n                    // console.log(\"ERROR:\", err)\n                    cb(err,logfile)\n                }                    \n            }\n        })\n    }catch(err){\n        if(verbose){\n            console.log(new Date(),\"[FileStreamRotator] Could not add watcher for \" + logfile);\n        }\n    }                    \n}\n\n/**\n * Write audit json object to disk\n * @param {String} logfile\n * @param {Object} audit\n * @param {Object} audit.keep\n * @param {Boolean} audit.keep.days\n * @param {Number} audit.keep.amount\n * @param {String} audit.auditLog\n * @param {String} audit.hashType\n * @param {Array} audit.files\n * @param {EventEmitter} stream\n * @param {Boolean} verbose \n */\nFileStreamRotator.addLogToAudit = function(logfile, audit, stream, verbose){\n    if(audit && audit.files){\n        // Based on contribution by @nickbug - https://github.com/nickbug\n        var index = audit.files.findIndex(function(file) {\n            return (file.name === logfile);\n        });\n        if (index !== -1) {\n            // nothing to do as entry already exists.\n            return audit;\n        }\n        var time = Date.now();\n        audit.files.push({\n            date: time,\n            name: logfile,\n            hash: crypto.createHash(audit.hashType).update(logfile + \"LOG_FILE\" + time).digest(\"hex\")\n        });\n\n        if(audit.keep.days){\n            var oldestDate = moment().subtract(audit.keep.amount,\"days\").valueOf();\n            var recentFiles = audit.files.filter(function(file){\n                if(file.date > oldestDate){\n                    return true;\n                }\n                file.hashType = audit.hashType\n                removeFile(file, verbose);\n                stream.emit(\"logRemoved\", file)\n                return false;\n            });\n            audit.files = recentFiles;\n        }else{\n            var filesToKeep = audit.files.splice(-audit.keep.amount);\n            if(audit.files.length > 0){\n                audit.files.filter(function(file){\n                    file.hashType = audit.hashType\n                    removeFile(file, verbose);\n                    stream.emit(\"logRemoved\", file)\n                    return false;\n                })\n            }\n            audit.files = filesToKeep;\n        }\n\n        FileStreamRotator.writeAuditLog(audit, verbose);\n    }\n\n    return audit;\n}\n\n/**\n *\n * @param options\n * @param options.filename\n * @param options.frequency\n * @param options.verbose\n * @param options.date_format\n * @param options.size\n * @param options.max_logs\n * @param options.audit_file\n * @param options.file_options\n * @param options.utc\n * @param options.extension File extension to be added at the end of the filename\n * @param options.watch_log\n * @param options.create_symlink\n * @param options.symlink_name\n * @param options.audit_hash_type Hash to be used to add to the audit log (md5, sha256)\n * @returns {Object} stream\n */\nFileStreamRotator.getStream = function (options) {\n    var frequencyMetaData = null;\n    var curDate = null;\n    var self = this;\n\n    if (!options.filename) {\n        console.error(new Date(),\"[FileStreamRotator] No filename supplied. Defaulting to STDOUT\");\n        return process.stdout;\n    }\n\n    if (options.frequency) {\n        frequencyMetaData = self.getFrequency(options.frequency);\n    }\n\n    let auditLog = self.setAuditLog(options.max_logs, options.audit_file, options.filename);\n    // Thanks to Means88 for PR.\n    if (auditLog != null) {\n        auditLog.hashType = (options.audit_hash_type !== undefined ? options.audit_hash_type : 'md5');\n    }\n    self.verbose = (options.verbose !== undefined ? options.verbose : true);\n\n    var fileSize = null;\n    var fileCount = 0;\n    var curSize = 0;\n    if(options.size){\n        fileSize = FileStreamRotator.parseFileSize(options.size);\n    }\n\n    var dateFormat = (options.date_format || DATE_FORMAT);\n    if(frequencyMetaData && frequencyMetaData.type == \"daily\"){\n        if(!options.date_format){\n            dateFormat = \"YYYY-MM-DD\";\n        }\n        if(moment().format(dateFormat) != moment().endOf(\"day\").format(dateFormat) || moment().format(dateFormat) == moment().add(1,\"day\").format(dateFormat)){\n            if(self.verbose){\n                console.log(new Date(),\"[FileStreamRotator] Changing type to custom as date format changes more often than once a day or not every day\");\n            }\n            frequencyMetaData.type = \"custom\";\n        }\n    }\n\n    if (frequencyMetaData) {\n        curDate = (options.frequency ? self.getDate(frequencyMetaData,dateFormat, options.utc) : \"\");\n    }\n\n    options.create_symlink = options.create_symlink || false;\n    options.extension = options.extension || \"\"\n    var filename = options.filename;\n    var oldFile = null;\n    var logfile = filename + (curDate ? \".\" + curDate : \"\");\n    if(filename.match(/%DATE%/)){\n        logfile = filename.replace(/%DATE%/g,(curDate?curDate:self.getDate(null,dateFormat, options.utc)));\n    }\n\n    if(fileSize){\n        var lastLogFile = null;\n        var t_log = logfile;\n        var f = null;\n        if(auditLog && auditLog.files && auditLog.files instanceof Array && auditLog.files.length > 0){\n            var lastEntry = auditLog.files[auditLog.files.length - 1].name;\n            if(lastEntry.match(t_log)){\n                var lastCount = lastEntry.match(t_log + \"\\\\.(\\\\d+)\");\n                // Thanks for the PR contribution from @andrefarzat - https://github.com/andrefarzat\n                if(lastCount){                    \n                    t_log = lastEntry;\n                    fileCount = lastCount[1];\n                }\n            }\n        }\n\n        if (fileCount == 0 && t_log == logfile) {\n            t_log += options.extension\n        }\n\n        while(f = fs.existsSync(t_log)){\n            lastLogFile = t_log;\n            fileCount++;\n            t_log = logfile + \".\" + fileCount + options.extension;\n        }\n        if(lastLogFile){\n            var lastLogFileStats = fs.statSync(lastLogFile);\n            if(lastLogFileStats.size < fileSize){\n                t_log = lastLogFile;\n                fileCount--;\n                curSize = lastLogFileStats.size;\n            }\n        }\n        logfile = t_log;\n    } else {\n        logfile += options.extension\n    }\n\n    if (self.verbose) {\n        console.log(new Date(),\"[FileStreamRotator] Logging to: \", logfile);\n    }\n\n    mkDirForFile(logfile);\n\n    var file_options = options.file_options || {flags: 'a'};\n    var rotateStream = fs.createWriteStream(logfile, file_options);\n    if ((curDate && frequencyMetaData && (staticFrequency.indexOf(frequencyMetaData.type) > -1)) || fileSize > 0) {\n        if (self.verbose) {\n            console.log(new Date(),\"[FileStreamRotator] Rotating file: \", frequencyMetaData?frequencyMetaData.type:\"\", fileSize?\"size: \" + fileSize:\"\");\n        }\n        var stream = new EventEmitter();\n        stream.auditLog = auditLog;\n        stream.end = function(){\n            rotateStream.end.apply(rotateStream,arguments);\n        };\n        BubbleEvents(rotateStream,stream);\n\n        stream.on('close', function(){\n            if (logWatcher) {\n                logWatcher.close()\n            }\n        })\n\n        stream.on(\"new\",function(newLog){\n            // console.log(\"new log\", newLog)\n            stream.auditLog = self.addLogToAudit(newLog,stream.auditLog, stream, self.verbose)\n            if(options.create_symlink){\n                createCurrentSymLink(newLog, options.symlink_name, self.verbose)\n            }\n            if(options.watch_log){\n                stream.emit(\"addWatcher\", newLog)\n            }\n        });\n        \n        var logWatcher;\n        stream.on(\"addWatcher\", function(newLog){\n            if (logWatcher) {\n                logWatcher.close()\n            }\n            if(!options.watch_log){\n                return\n            }\n            // console.log(\"ADDING WATCHER\", newLog)\n            logWatcher = createLogWatcher(newLog, self.verbose, function(err,newLog){\n                stream.emit('createLog', newLog)\n            })        \n        })\n\n        stream.on(\"createLog\",function(file){\n            try {\n                let stats = fs.lstatSync(file)\n            }catch(err){\n                if(rotateStream && rotateStream.end == \"function\"){\n                    rotateStream.end();\n                }\n                rotateStream = fs.createWriteStream(file, file_options);\n                stream.emit('new',file);\n                BubbleEvents(rotateStream,stream);\n            }\n        });\n\n\n        stream.write = (function (str, encoding) {\n            var newDate = frequencyMetaData ? this.getDate(frequencyMetaData, dateFormat, options.utc) : curDate;\n            if (newDate != curDate || (fileSize && curSize > fileSize)) {\n                var newLogfile = filename + (curDate && frequencyMetaData ? \".\" + newDate : \"\");\n                if(filename.match(/%DATE%/) && curDate){\n                    newLogfile = filename.replace(/%DATE%/g,newDate);\n                }\n\n                if(fileSize && curSize > fileSize){\n                    fileCount++;\n                    newLogfile += \".\" + fileCount + options.extension;\n                }else{\n                    // reset file count\n                    fileCount = 0;\n                    newLogfile += options.extension\n                }\n                curSize = 0;\n\n                if (self.verbose) {\n                    console.log(new Date(),(__webpack_require__(/*! util */ \"util\").format)(\"[FileStreamRotator] Changing logs from %s to %s\", logfile, newLogfile));\n                }\n                curDate = newDate;\n                oldFile = logfile;\n                logfile = newLogfile;\n                // Thanks to @mattberther https://github.com/mattberther for raising it again.\n                if(options.end_stream === true){\n                    rotateStream.end();\n                }else{\n                    rotateStream.destroy();\n                }\n\n                mkDirForFile(logfile);\n\n                rotateStream = fs.createWriteStream(newLogfile, file_options);\n                stream.emit('new',newLogfile);\n                stream.emit('rotate',oldFile, newLogfile);\n                BubbleEvents(rotateStream,stream);\n            }\n            rotateStream.write(str, encoding);\n            // Handle length of double-byte characters\n            curSize += Buffer.byteLength(str, encoding);\n        }).bind(this);\n        process.nextTick(function(){\n            stream.emit('new',logfile);\n        })\n        stream.emit('new',logfile)\n        return stream;\n    } else {\n        if (self.verbose) {\n            console.log(new Date(),\"[FileStreamRotator] File won't be rotated: \", options.frequency, options.size);\n        }\n        process.nextTick(function(){\n            rotateStream.emit('new',logfile);\n        })\n        return rotateStream;\n    }\n}\n\n/**\n * Check and make parent directory\n * @param pathWithFile\n */\nvar mkDirForFile = function(pathWithFile){\n    var _path = path.dirname(pathWithFile);\n    _path.split(path.sep).reduce(\n        function(fullPath, folder) {\n            fullPath += folder + path.sep;\n            // Option to replace existsSync as deprecated. Maybe in a future release.\n            // try{\n            //     var stats = fs.statSync(fullPath);\n            //     console.log('STATS',fullPath, stats);\n            // }catch(e){\n            //     fs.mkdirSync(fullPath);\n            //     console.log(\"STATS ERROR\",e)\n            // }\n            if (!fs.existsSync(fullPath)) {\n                try{\n                    fs.mkdirSync(fullPath);\n                }catch(e){\n                    if(e.code !== 'EEXIST'){\n                        throw e;\n                    }\n                }\n            }\n            return fullPath;\n        },\n        ''\n    );\n};\n\n\n/**\n * Bubbles events to the proxy\n * @param emitter\n * @param proxy\n * @constructor\n */\nvar BubbleEvents = function BubbleEvents(emitter,proxy){\n    emitter.on('close',function(){\n        proxy.emit('close');\n    })\n    emitter.on('finish',function(){\n        proxy.emit('finish');\n    })\n    emitter.on('error',function(err){\n        proxy.emit('error',err);\n    })\n    emitter.on('open',function(fd){\n        proxy.emit('open',fd);\n    })\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/file-stream-rotator/FileStreamRotator.js\n");

/***/ })

};
;