"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@remotion";
exports.ids = ["vendor-chunks/@remotion"];
exports.modules = {

/***/ "(ssr)/../../node_modules/@remotion/player/dist/esm/index.mjs":
/*!**************************************************************!*\
  !*** ../../node_modules/@remotion/player/dist/esm/index.mjs ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Player: () => (/* binding */ Player),\n/* harmony export */   PlayerInternals: () => (/* binding */ PlayerInternals),\n/* harmony export */   Thumbnail: () => (/* binding */ Thumbnail)\n/* harmony export */ });\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-runtime */ \"(ssr)/../../node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react-jsx-runtime.js\");\n/* harmony import */ var remotion__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! remotion */ \"(ssr)/../../node_modules/remotion/dist/esm/index.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react */ \"(ssr)/../../node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var remotion_no_react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! remotion/no-react */ \"(ssr)/../../node_modules/remotion/dist/esm/no-react.mjs\");\n/* __next_internal_client_entry_do_not_use__ Thumbnail,PlayerInternals,Player auto */ // src/icons.tsx\n\nvar ICON_SIZE = 25;\nvar fullscreenIconSize = 16;\nvar PlayIcon = ()=>{\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"svg\", {\n        width: ICON_SIZE,\n        height: ICON_SIZE,\n        viewBox: \"0 0 25 25\",\n        fill: \"none\",\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", {\n            d: \"M8 6.375C7.40904 8.17576 7.06921 10.2486 7.01438 12.3871C6.95955 14.5255 7.19163 16.6547 7.6875 18.5625C9.95364 18.2995 12.116 17.6164 14.009 16.5655C15.902 15.5147 17.4755 14.124 18.6088 12.5C17.5158 10.8949 15.9949 9.51103 14.1585 8.45082C12.3222 7.3906 10.2174 6.68116 8 6.375Z\",\n            fill: \"white\",\n            stroke: \"white\",\n            strokeWidth: \"6.25\",\n            strokeLinejoin: \"round\"\n        })\n    });\n};\nvar PauseIcon = ()=>{\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"svg\", {\n        viewBox: \"0 0 100 100\",\n        width: ICON_SIZE,\n        height: ICON_SIZE,\n        children: [\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"rect\", {\n                x: \"25\",\n                y: \"20\",\n                width: \"20\",\n                height: \"60\",\n                fill: \"#fff\",\n                ry: \"5\",\n                rx: \"5\"\n            }),\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"rect\", {\n                x: \"55\",\n                y: \"20\",\n                width: \"20\",\n                height: \"60\",\n                fill: \"#fff\",\n                ry: \"5\",\n                rx: \"5\"\n            })\n        ]\n    });\n};\nvar FullscreenIcon = ({ isFullscreen })=>{\n    const strokeWidth = 6;\n    const viewSize = 32;\n    const out = isFullscreen ? 0 : strokeWidth / 2;\n    const middleInset = isFullscreen ? strokeWidth * 1.6 : strokeWidth / 2;\n    const inset = isFullscreen ? strokeWidth * 1.6 : strokeWidth * 2;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"svg\", {\n        viewBox: `0 0 ${viewSize} ${viewSize}`,\n        height: fullscreenIconSize,\n        width: fullscreenIconSize,\n        children: [\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", {\n                d: `\n\t\t\t\tM ${out} ${inset}\n\t\t\t\tL ${middleInset} ${middleInset}\n\t\t\t\tL ${inset} ${out}\n\t\t\t\t`,\n                stroke: \"#fff\",\n                strokeWidth,\n                fill: \"none\"\n            }),\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", {\n                d: `\n\t\t\t\tM ${viewSize - out} ${inset}\n\t\t\t\tL ${viewSize - middleInset} ${middleInset}\n\t\t\t\tL ${viewSize - inset} ${out}\n\t\t\t\t`,\n                stroke: \"#fff\",\n                strokeWidth,\n                fill: \"none\"\n            }),\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", {\n                d: `\n\t\t\t\tM ${out} ${viewSize - inset}\n\t\t\t\tL ${middleInset} ${viewSize - middleInset}\n\t\t\t\tL ${inset} ${viewSize - out}\n\t\t\t\t`,\n                stroke: \"#fff\",\n                strokeWidth,\n                fill: \"none\"\n            }),\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", {\n                d: `\n\t\t\t\tM ${viewSize - out} ${viewSize - inset}\n\t\t\t\tL ${viewSize - middleInset} ${viewSize - middleInset}\n\t\t\t\tL ${viewSize - inset} ${viewSize - out}\n\t\t\t\t`,\n                stroke: \"#fff\",\n                strokeWidth,\n                fill: \"none\"\n            })\n        ]\n    });\n};\nvar VolumeOffIcon = ()=>{\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"svg\", {\n        width: ICON_SIZE,\n        height: ICON_SIZE,\n        viewBox: \"0 0 24 24\",\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", {\n            d: \"M3.63 3.63a.996.996 0 000 1.41L7.29 8.7 7 9H4c-.55 0-1 .45-1 1v4c0 .55.45 1 1 1h3l3.29 3.29c.63.63 1.71.18 1.71-.71v-4.17l4.18 4.18c-.49.37-1.02.68-1.6.91-.36.15-.58.53-.58.92 0 .72.73 1.18 1.39.91.8-.33 1.55-.77 2.22-1.31l1.34 1.34a.996.996 0 101.41-1.41L5.05 3.63c-.39-.39-1.02-.39-1.42 0zM19 12c0 .82-.15 1.61-.41 2.34l1.53 1.53c.56-1.17.88-2.48.88-3.87 0-3.83-2.4-7.11-5.78-8.4-.59-.23-1.22.23-1.22.86v.19c0 .38.25.71.61.85C17.18 6.54 19 9.06 19 12zm-8.71-6.29l-.17.17L12 7.76V6.41c0-.89-1.08-1.33-1.71-.7zM16.5 12A4.5 4.5 0 0014 7.97v1.79l2.48 2.48c.01-.08.02-.16.02-.24z\",\n            fill: \"#fff\"\n        })\n    });\n};\nvar VolumeOnIcon = ()=>{\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"svg\", {\n        width: ICON_SIZE,\n        height: ICON_SIZE,\n        viewBox: \"0 0 24 24\",\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", {\n            d: \"M3 10v4c0 .55.45 1 1 1h3l3.29 3.29c.63.63 1.71.18 1.71-.71V6.41c0-.89-1.08-1.34-1.71-.71L7 9H4c-.55 0-1 .45-1 1zm13.5 2A4.5 4.5 0 0014 7.97v8.05c1.48-.73 2.5-2.25 2.5-4.02zM14 4.45v.2c0 .38.25.71.6.85C17.18 6.53 19 9.06 19 12s-1.82 5.47-4.4 6.5c-.36.14-.6.47-.6.85v.2c0 .63.63 1.07 1.21.85C18.6 19.11 21 15.84 21 12s-2.4-7.11-5.79-8.4c-.58-.23-1.21.22-1.21.85z\",\n            fill: \"#fff\"\n        })\n    });\n};\n// src/BufferingIndicator.tsx\n\nvar className = \"__remotion_buffering_indicator\";\nvar remotionBufferingAnimation = \"__remotion_buffering_animation\";\nvar playerStyle = {\n    width: ICON_SIZE,\n    height: ICON_SIZE,\n    overflow: \"hidden\",\n    lineHeight: \"normal\",\n    fontSize: \"inherit\"\n};\nvar studioStyle = {\n    width: 14,\n    height: 14,\n    overflow: \"hidden\",\n    lineHeight: \"normal\",\n    fontSize: \"inherit\"\n};\nvar BufferingIndicator = ({ type })=>{\n    const style = type === \"player\" ? playerStyle : studioStyle;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n        children: [\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"style\", {\n                type: \"text/css\",\n                children: `\n\t\t\t\t@keyframes ${remotionBufferingAnimation} {\n          0% {\n            rotate: 0deg;\n          }\n          100% {\n            rotate: 360deg;\n          }\n        }\n        \n        .${className} {\n            animation: ${remotionBufferingAnimation} 1s linear infinite;\n        }        \n\t\t\t`\n            }),\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n                style,\n                children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"svg\", {\n                    viewBox: type === \"player\" ? \"0 0 22 22\" : \"0 0 18 18\",\n                    style,\n                    className,\n                    children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", {\n                        d: type === \"player\" ? \"M 11 4 A 7 7 0 0 1 15.1145 16.66312\" : \"M 9 2 A 7 7 0 0 1 13.1145 14.66312\",\n                        stroke: \"white\",\n                        strokeLinecap: \"round\",\n                        fill: \"none\",\n                        strokeWidth: 3\n                    })\n                })\n            })\n        ]\n    });\n};\n// src/calculate-scale.ts\n\n// src/utils/calculate-player-size.ts\nvar calculatePlayerSize = ({ currentSize, width, height, compositionWidth, compositionHeight })=>{\n    if (width !== undefined && height === undefined) {\n        return {\n            aspectRatio: [\n                compositionWidth,\n                compositionHeight\n            ].join(\"/\")\n        };\n    }\n    if (height !== undefined && width === undefined) {\n        return {\n            aspectRatio: [\n                compositionWidth,\n                compositionHeight\n            ].join(\"/\")\n        };\n    }\n    if (!currentSize) {\n        return {\n            width: compositionWidth,\n            height: compositionHeight\n        };\n    }\n    return {\n        width: compositionWidth,\n        height: compositionHeight\n    };\n};\n// src/calculate-scale.ts\nvar calculateCanvasTransformation = ({ previewSize, compositionWidth, compositionHeight, canvasSize })=>{\n    const scale = remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.calculateScale({\n        canvasSize,\n        compositionHeight,\n        compositionWidth,\n        previewSize\n    });\n    const correction = 0 - (1 - scale) / 2;\n    const xCorrection = correction * compositionWidth;\n    const yCorrection = correction * compositionHeight;\n    const width = compositionWidth * scale;\n    const height = compositionHeight * scale;\n    const centerX = canvasSize.width / 2 - width / 2;\n    const centerY = canvasSize.height / 2 - height / 2;\n    return {\n        centerX,\n        centerY,\n        xCorrection,\n        yCorrection,\n        scale\n    };\n};\nvar calculateOuterStyle = ({ config, style, canvasSize, overflowVisible, layout })=>{\n    if (!config) {\n        return {};\n    }\n    return {\n        position: \"relative\",\n        overflow: overflowVisible ? \"visible\" : \"hidden\",\n        ...calculatePlayerSize({\n            compositionHeight: config.height,\n            compositionWidth: config.width,\n            currentSize: canvasSize,\n            height: style?.height,\n            width: style?.width\n        }),\n        opacity: layout ? 1 : 0,\n        ...style\n    };\n};\nvar calculateContainerStyle = ({ config, canvasSize, layout, scale, overflowVisible })=>{\n    if (!config || !canvasSize || !layout) {\n        return {};\n    }\n    return {\n        position: \"absolute\",\n        width: config.width,\n        height: config.height,\n        display: \"flex\",\n        transform: `scale(${scale})`,\n        marginLeft: layout.xCorrection,\n        marginTop: layout.yCorrection,\n        overflow: overflowVisible ? \"visible\" : \"hidden\"\n    };\n};\nvar calculateOuter = ({ layout, scale, config, overflowVisible })=>{\n    if (!layout || !config) {\n        return {};\n    }\n    const { centerX, centerY } = layout;\n    return {\n        width: config.width * scale,\n        height: config.height * scale,\n        display: \"flex\",\n        flexDirection: \"column\",\n        position: \"absolute\",\n        left: centerX,\n        top: centerY,\n        overflow: overflowVisible ? \"visible\" : \"hidden\"\n    };\n};\n// src/emitter-context.ts\n\nvar PlayerEventEmitterContext = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_2__.createContext(undefined);\nvar ThumbnailEmitterContext = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_2__.createContext(undefined);\n// src/EmitterProvider.tsx\n\n\n// src/event-emitter.ts\nclass PlayerEmitter {\n    addEventListener(name, callback) {\n        this.listeners[name].push(callback);\n    }\n    removeEventListener(name, callback) {\n        this.listeners[name] = this.listeners[name].filter((l)=>l !== callback);\n    }\n    dispatchEvent(dispatchName, context) {\n        this.listeners[dispatchName].forEach((callback)=>{\n            callback({\n                detail: context\n            });\n        });\n    }\n    constructor(){\n        this.listeners = {\n            ended: [],\n            error: [],\n            pause: [],\n            play: [],\n            ratechange: [],\n            scalechange: [],\n            seeked: [],\n            timeupdate: [],\n            frameupdate: [],\n            fullscreenchange: [],\n            volumechange: [],\n            mutechange: [],\n            waiting: [],\n            resume: []\n        };\n        this.dispatchSeek = (frame)=>{\n            this.dispatchEvent(\"seeked\", {\n                frame\n            });\n        };\n        this.dispatchVolumeChange = (volume)=>{\n            this.dispatchEvent(\"volumechange\", {\n                volume\n            });\n        };\n        this.dispatchPause = ()=>{\n            this.dispatchEvent(\"pause\", undefined);\n        };\n        this.dispatchPlay = ()=>{\n            this.dispatchEvent(\"play\", undefined);\n        };\n        this.dispatchEnded = ()=>{\n            this.dispatchEvent(\"ended\", undefined);\n        };\n        this.dispatchRateChange = (playbackRate)=>{\n            this.dispatchEvent(\"ratechange\", {\n                playbackRate\n            });\n        };\n        this.dispatchScaleChange = (scale)=>{\n            this.dispatchEvent(\"scalechange\", {\n                scale\n            });\n        };\n        this.dispatchError = (error)=>{\n            this.dispatchEvent(\"error\", {\n                error\n            });\n        };\n        this.dispatchTimeUpdate = (event)=>{\n            this.dispatchEvent(\"timeupdate\", event);\n        };\n        this.dispatchFrameUpdate = (event)=>{\n            this.dispatchEvent(\"frameupdate\", event);\n        };\n        this.dispatchFullscreenChange = (event)=>{\n            this.dispatchEvent(\"fullscreenchange\", event);\n        };\n        this.dispatchMuteChange = (event)=>{\n            this.dispatchEvent(\"mutechange\", event);\n        };\n        this.dispatchWaiting = (event)=>{\n            this.dispatchEvent(\"waiting\", event);\n        };\n        this.dispatchResume = (event)=>{\n            this.dispatchEvent(\"resume\", event);\n        };\n    }\n}\nclass ThumbnailEmitter {\n    addEventListener(name, callback) {\n        this.listeners[name].push(callback);\n    }\n    removeEventListener(name, callback) {\n        this.listeners[name] = this.listeners[name].filter((l)=>l !== callback);\n    }\n    dispatchEvent(dispatchName, context) {\n        this.listeners[dispatchName].forEach((callback)=>{\n            callback({\n                detail: context\n            });\n        });\n    }\n    constructor(){\n        this.listeners = {\n            error: [],\n            waiting: [],\n            resume: []\n        };\n        this.dispatchError = (error)=>{\n            this.dispatchEvent(\"error\", {\n                error\n            });\n        };\n        this.dispatchWaiting = (event)=>{\n            this.dispatchEvent(\"waiting\", event);\n        };\n        this.dispatchResume = (event)=>{\n            this.dispatchEvent(\"resume\", event);\n        };\n    }\n}\n// src/use-buffer-state-emitter.ts\n\n\nvar useBufferStateEmitter = (emitter)=>{\n    const bufferManager = (0,react__WEBPACK_IMPORTED_MODULE_2__.useContext)(remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.BufferingContextReact);\n    if (!bufferManager) {\n        throw new Error(\"BufferingContextReact not found\");\n    }\n    (0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)({\n        \"useBufferStateEmitter.useEffect\": ()=>{\n            const clear1 = bufferManager.listenForBuffering({\n                \"useBufferStateEmitter.useEffect.clear1\": ()=>{\n                    bufferManager.buffering.current = true;\n                    emitter.dispatchWaiting({});\n                }\n            }[\"useBufferStateEmitter.useEffect.clear1\"]);\n            const clear2 = bufferManager.listenForResume({\n                \"useBufferStateEmitter.useEffect.clear2\": ()=>{\n                    bufferManager.buffering.current = false;\n                    emitter.dispatchResume({});\n                }\n            }[\"useBufferStateEmitter.useEffect.clear2\"]);\n            return ({\n                \"useBufferStateEmitter.useEffect\": ()=>{\n                    clear1.remove();\n                    clear2.remove();\n                }\n            })[\"useBufferStateEmitter.useEffect\"];\n        }\n    }[\"useBufferStateEmitter.useEffect\"], [\n        bufferManager,\n        emitter\n    ]);\n};\n// src/EmitterProvider.tsx\n\nvar PlayerEmitterProvider = ({ children, currentPlaybackRate })=>{\n    const [emitter] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)({\n        \"PlayerEmitterProvider.useState\": ()=>new PlayerEmitter\n    }[\"PlayerEmitterProvider.useState\"]);\n    const bufferManager = (0,react__WEBPACK_IMPORTED_MODULE_2__.useContext)(remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.BufferingContextReact);\n    if (!bufferManager) {\n        throw new Error(\"BufferingContextReact not found\");\n    }\n    (0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)({\n        \"PlayerEmitterProvider.useEffect2\": ()=>{\n            if (currentPlaybackRate) {\n                emitter.dispatchRateChange(currentPlaybackRate);\n            }\n        }\n    }[\"PlayerEmitterProvider.useEffect2\"], [\n        emitter,\n        currentPlaybackRate\n    ]);\n    useBufferStateEmitter(emitter);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(PlayerEventEmitterContext.Provider, {\n        value: emitter,\n        children\n    });\n};\n// src/use-frame-imperative.ts\n\n\nvar useFrameImperative = ()=>{\n    const frame = remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.Timeline.useTimelinePosition();\n    const frameRef = (0,react__WEBPACK_IMPORTED_MODULE_2__.useRef)(frame);\n    frameRef.current = frame;\n    const getCurrentFrame = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)({\n        \"useFrameImperative.useCallback[getCurrentFrame]\": ()=>{\n            return frameRef.current;\n        }\n    }[\"useFrameImperative.useCallback[getCurrentFrame]\"], []);\n    return getCurrentFrame;\n};\n// src/use-hover-state.ts\n\nvar useHoverState = (ref, hideControlsWhenPointerDoesntMove)=>{\n    const [hovered, setHovered] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(false);\n    (0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)({\n        \"useHoverState.useEffect3\": ()=>{\n            const { current } = ref;\n            if (!current) {\n                return;\n            }\n            let hoverTimeout;\n            const addHoverTimeout = {\n                \"useHoverState.useEffect3.addHoverTimeout\": ()=>{\n                    if (hideControlsWhenPointerDoesntMove) {\n                        clearTimeout(hoverTimeout);\n                        hoverTimeout = setTimeout({\n                            \"useHoverState.useEffect3.addHoverTimeout\": ()=>{\n                                setHovered(false);\n                            }\n                        }[\"useHoverState.useEffect3.addHoverTimeout\"], hideControlsWhenPointerDoesntMove === true ? 3000 : hideControlsWhenPointerDoesntMove);\n                    }\n                }\n            }[\"useHoverState.useEffect3.addHoverTimeout\"];\n            const onHover = {\n                \"useHoverState.useEffect3.onHover\": ()=>{\n                    setHovered(true);\n                    addHoverTimeout();\n                }\n            }[\"useHoverState.useEffect3.onHover\"];\n            const onLeave = {\n                \"useHoverState.useEffect3.onLeave\": ()=>{\n                    setHovered(false);\n                    clearTimeout(hoverTimeout);\n                }\n            }[\"useHoverState.useEffect3.onLeave\"];\n            const onMove = {\n                \"useHoverState.useEffect3.onMove\": ()=>{\n                    setHovered(true);\n                    addHoverTimeout();\n                }\n            }[\"useHoverState.useEffect3.onMove\"];\n            current.addEventListener(\"mouseenter\", onHover);\n            current.addEventListener(\"mouseleave\", onLeave);\n            current.addEventListener(\"mousemove\", onMove);\n            return ({\n                \"useHoverState.useEffect3\": ()=>{\n                    current.removeEventListener(\"mouseenter\", onHover);\n                    current.removeEventListener(\"mouseleave\", onLeave);\n                    current.removeEventListener(\"mousemove\", onMove);\n                    clearTimeout(hoverTimeout);\n                }\n            })[\"useHoverState.useEffect3\"];\n        }\n    }[\"useHoverState.useEffect3\"], [\n        hideControlsWhenPointerDoesntMove,\n        ref\n    ]);\n    return hovered;\n};\n// src/use-playback.ts\n\n\n// src/browser-mediasession.ts\n\n// src/use-player.ts\n\n\nvar usePlayer = ()=>{\n    const [playing, setPlaying, imperativePlaying] = remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.Timeline.usePlayingState();\n    const [hasPlayed, setHasPlayed] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(false);\n    const frame = remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.Timeline.useTimelinePosition();\n    const playStart = (0,react__WEBPACK_IMPORTED_MODULE_2__.useRef)(frame);\n    const setFrame = remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.Timeline.useTimelineSetFrame();\n    const setTimelinePosition = remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.Timeline.useTimelineSetFrame();\n    const audioContext = (0,react__WEBPACK_IMPORTED_MODULE_2__.useContext)(remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.SharedAudioContext);\n    const { audioAndVideoTags } = (0,react__WEBPACK_IMPORTED_MODULE_2__.useContext)(remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.Timeline.TimelineContext);\n    const frameRef = (0,react__WEBPACK_IMPORTED_MODULE_2__.useRef)(frame);\n    frameRef.current = frame;\n    const video = remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.useVideo();\n    const config = remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.useUnsafeVideoConfig();\n    const emitter = (0,react__WEBPACK_IMPORTED_MODULE_2__.useContext)(PlayerEventEmitterContext);\n    const lastFrame = (config?.durationInFrames ?? 1) - 1;\n    const isLastFrame = frame === lastFrame;\n    const isFirstFrame = frame === 0;\n    if (!emitter) {\n        throw new TypeError(\"Expected Player event emitter context\");\n    }\n    const bufferingContext = (0,react__WEBPACK_IMPORTED_MODULE_2__.useContext)(remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.BufferingContextReact);\n    if (!bufferingContext) {\n        throw new Error(\"Missing the buffering context. Most likely you have a Remotion version mismatch.\");\n    }\n    const { buffering } = bufferingContext;\n    const seek = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)({\n        \"usePlayer.useCallback2[seek]\": (newFrame)=>{\n            if (video?.id) {\n                setTimelinePosition({\n                    \"usePlayer.useCallback2[seek]\": (c)=>({\n                            ...c,\n                            [video.id]: newFrame\n                        })\n                }[\"usePlayer.useCallback2[seek]\"]);\n            }\n            frameRef.current = newFrame;\n            emitter.dispatchSeek(newFrame);\n        }\n    }[\"usePlayer.useCallback2[seek]\"], [\n        emitter,\n        setTimelinePosition,\n        video?.id\n    ]);\n    const play = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)({\n        \"usePlayer.useCallback2[play]\": (e)=>{\n            if (imperativePlaying.current) {\n                return;\n            }\n            setHasPlayed(true);\n            if (isLastFrame) {\n                seek(0);\n            }\n            if (audioContext && audioContext.numberOfAudioTags > 0 && e) {\n                audioContext.playAllAudios();\n            }\n            audioAndVideoTags.current.forEach({\n                \"usePlayer.useCallback2[play]\": (a)=>a.play(\"player play() was called and playing audio from a click\")\n            }[\"usePlayer.useCallback2[play]\"]);\n            imperativePlaying.current = true;\n            setPlaying(true);\n            playStart.current = frameRef.current;\n            emitter.dispatchPlay();\n        }\n    }[\"usePlayer.useCallback2[play]\"], [\n        imperativePlaying,\n        isLastFrame,\n        audioContext,\n        setPlaying,\n        emitter,\n        seek,\n        audioAndVideoTags\n    ]);\n    const pause = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)({\n        \"usePlayer.useCallback2[pause]\": ()=>{\n            if (imperativePlaying.current) {\n                imperativePlaying.current = false;\n                setPlaying(false);\n                emitter.dispatchPause();\n            }\n        }\n    }[\"usePlayer.useCallback2[pause]\"], [\n        emitter,\n        imperativePlaying,\n        setPlaying\n    ]);\n    const pauseAndReturnToPlayStart = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)({\n        \"usePlayer.useCallback2[pauseAndReturnToPlayStart]\": ()=>{\n            if (imperativePlaying.current) {\n                imperativePlaying.current = false;\n                frameRef.current = playStart.current;\n                if (config) {\n                    setTimelinePosition({\n                        \"usePlayer.useCallback2[pauseAndReturnToPlayStart]\": (c)=>({\n                                ...c,\n                                [config.id]: playStart.current\n                            })\n                    }[\"usePlayer.useCallback2[pauseAndReturnToPlayStart]\"]);\n                    setPlaying(false);\n                    emitter.dispatchPause();\n                }\n            }\n        }\n    }[\"usePlayer.useCallback2[pauseAndReturnToPlayStart]\"], [\n        config,\n        emitter,\n        imperativePlaying,\n        setPlaying,\n        setTimelinePosition\n    ]);\n    const videoId = video?.id;\n    const frameBack = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)({\n        \"usePlayer.useCallback2[frameBack]\": (frames)=>{\n            if (!videoId) {\n                return null;\n            }\n            if (imperativePlaying.current) {\n                return;\n            }\n            setFrame({\n                \"usePlayer.useCallback2[frameBack]\": (c)=>{\n                    const prevFrame = c[videoId] ?? window.remotion_initialFrame ?? 0;\n                    const newFrame = Math.max(0, prevFrame - frames);\n                    if (prevFrame === newFrame) {\n                        return c;\n                    }\n                    return {\n                        ...c,\n                        [videoId]: newFrame\n                    };\n                }\n            }[\"usePlayer.useCallback2[frameBack]\"]);\n        }\n    }[\"usePlayer.useCallback2[frameBack]\"], [\n        imperativePlaying,\n        setFrame,\n        videoId\n    ]);\n    const frameForward = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)({\n        \"usePlayer.useCallback2[frameForward]\": (frames)=>{\n            if (!videoId) {\n                return null;\n            }\n            if (imperativePlaying.current) {\n                return;\n            }\n            setFrame({\n                \"usePlayer.useCallback2[frameForward]\": (c)=>{\n                    const prevFrame = c[videoId] ?? window.remotion_initialFrame ?? 0;\n                    const newFrame = Math.min(lastFrame, prevFrame + frames);\n                    if (prevFrame === newFrame) {\n                        return c;\n                    }\n                    return {\n                        ...c,\n                        [videoId]: newFrame\n                    };\n                }\n            }[\"usePlayer.useCallback2[frameForward]\"]);\n        }\n    }[\"usePlayer.useCallback2[frameForward]\"], [\n        videoId,\n        imperativePlaying,\n        lastFrame,\n        setFrame\n    ]);\n    const getCurrentFrame = useFrameImperative();\n    const toggle = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)({\n        \"usePlayer.useCallback2[toggle]\": (e)=>{\n            if (imperativePlaying.current) {\n                pause();\n            } else {\n                play(e);\n            }\n        }\n    }[\"usePlayer.useCallback2[toggle]\"], [\n        imperativePlaying,\n        pause,\n        play\n    ]);\n    const returnValue = (0,react__WEBPACK_IMPORTED_MODULE_2__.useMemo)({\n        \"usePlayer.useMemo[returnValue]\": ()=>{\n            return {\n                frameBack,\n                frameForward,\n                isLastFrame,\n                emitter,\n                playing,\n                play,\n                pause,\n                seek,\n                isFirstFrame,\n                getCurrentFrame,\n                isPlaying: ({\n                    \"usePlayer.useMemo[returnValue]\": ()=>imperativePlaying.current\n                })[\"usePlayer.useMemo[returnValue]\"],\n                isBuffering: ({\n                    \"usePlayer.useMemo[returnValue]\": ()=>buffering.current\n                })[\"usePlayer.useMemo[returnValue]\"],\n                pauseAndReturnToPlayStart,\n                hasPlayed,\n                remotionInternal_currentFrameRef: frameRef,\n                toggle\n            };\n        }\n    }[\"usePlayer.useMemo[returnValue]\"], [\n        buffering,\n        emitter,\n        frameBack,\n        frameForward,\n        getCurrentFrame,\n        hasPlayed,\n        imperativePlaying,\n        isFirstFrame,\n        isLastFrame,\n        pause,\n        pauseAndReturnToPlayStart,\n        play,\n        playing,\n        seek,\n        toggle\n    ]);\n    return returnValue;\n};\n// src/browser-mediasession.ts\nvar useBrowserMediaSession = ({ browserMediaControlsBehavior, videoConfig, playbackRate })=>{\n    const { playing, pause, play, emitter, getCurrentFrame, seek } = usePlayer();\n    (0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)({\n        \"useBrowserMediaSession.useEffect4\": ()=>{\n            if (!navigator.mediaSession) {\n                return;\n            }\n            if (browserMediaControlsBehavior.mode === \"do-nothing\") {\n                return;\n            }\n            if (playing) {\n                navigator.mediaSession.playbackState = \"playing\";\n            } else {\n                navigator.mediaSession.playbackState = \"paused\";\n            }\n        }\n    }[\"useBrowserMediaSession.useEffect4\"], [\n        browserMediaControlsBehavior.mode,\n        playing\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)({\n        \"useBrowserMediaSession.useEffect4\": ()=>{\n            if (!navigator.mediaSession) {\n                return;\n            }\n            if (browserMediaControlsBehavior.mode === \"do-nothing\") {\n                return;\n            }\n            const onTimeUpdate = {\n                \"useBrowserMediaSession.useEffect4.onTimeUpdate\": ()=>{\n                    if (!videoConfig) {\n                        return;\n                    }\n                    if (navigator.mediaSession) {\n                        navigator.mediaSession.setPositionState({\n                            duration: videoConfig.durationInFrames / videoConfig.fps,\n                            playbackRate,\n                            position: getCurrentFrame() / videoConfig.fps\n                        });\n                    }\n                }\n            }[\"useBrowserMediaSession.useEffect4.onTimeUpdate\"];\n            emitter.addEventListener(\"timeupdate\", onTimeUpdate);\n            return ({\n                \"useBrowserMediaSession.useEffect4\": ()=>{\n                    emitter.removeEventListener(\"timeupdate\", onTimeUpdate);\n                }\n            })[\"useBrowserMediaSession.useEffect4\"];\n        }\n    }[\"useBrowserMediaSession.useEffect4\"], [\n        browserMediaControlsBehavior.mode,\n        emitter,\n        getCurrentFrame,\n        playbackRate,\n        videoConfig\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)({\n        \"useBrowserMediaSession.useEffect4\": ()=>{\n            if (!navigator.mediaSession) {\n                return;\n            }\n            if (browserMediaControlsBehavior.mode === \"do-nothing\") {\n                return;\n            }\n            navigator.mediaSession.setActionHandler(\"play\", {\n                \"useBrowserMediaSession.useEffect4\": ()=>{\n                    if (browserMediaControlsBehavior.mode === \"register-media-session\") {\n                        play();\n                    }\n                }\n            }[\"useBrowserMediaSession.useEffect4\"]);\n            navigator.mediaSession.setActionHandler(\"pause\", {\n                \"useBrowserMediaSession.useEffect4\": ()=>{\n                    if (browserMediaControlsBehavior.mode === \"register-media-session\") {\n                        pause();\n                    }\n                }\n            }[\"useBrowserMediaSession.useEffect4\"]);\n            navigator.mediaSession.setActionHandler(\"seekto\", {\n                \"useBrowserMediaSession.useEffect4\": (event)=>{\n                    if (browserMediaControlsBehavior.mode === \"register-media-session\" && event.seekTime !== undefined && videoConfig) {\n                        seek(Math.round(event.seekTime * videoConfig.fps));\n                    }\n                }\n            }[\"useBrowserMediaSession.useEffect4\"]);\n            navigator.mediaSession.setActionHandler(\"seekbackward\", {\n                \"useBrowserMediaSession.useEffect4\": ()=>{\n                    if (browserMediaControlsBehavior.mode === \"register-media-session\" && videoConfig) {\n                        seek(Math.max(0, Math.round((getCurrentFrame() - 10) * videoConfig.fps)));\n                    }\n                }\n            }[\"useBrowserMediaSession.useEffect4\"]);\n            navigator.mediaSession.setActionHandler(\"seekforward\", {\n                \"useBrowserMediaSession.useEffect4\": ()=>{\n                    if (browserMediaControlsBehavior.mode === \"register-media-session\" && videoConfig) {\n                        seek(Math.max(videoConfig.durationInFrames - 1, Math.round((getCurrentFrame() + 10) * videoConfig.fps)));\n                    }\n                }\n            }[\"useBrowserMediaSession.useEffect4\"]);\n            navigator.mediaSession.setActionHandler(\"previoustrack\", {\n                \"useBrowserMediaSession.useEffect4\": ()=>{\n                    if (browserMediaControlsBehavior.mode === \"register-media-session\") {\n                        seek(0);\n                    }\n                }\n            }[\"useBrowserMediaSession.useEffect4\"]);\n            return ({\n                \"useBrowserMediaSession.useEffect4\": ()=>{\n                    navigator.mediaSession.metadata = null;\n                    navigator.mediaSession.setActionHandler(\"play\", null);\n                    navigator.mediaSession.setActionHandler(\"pause\", null);\n                    navigator.mediaSession.setActionHandler(\"seekto\", null);\n                    navigator.mediaSession.setActionHandler(\"seekbackward\", null);\n                    navigator.mediaSession.setActionHandler(\"seekforward\", null);\n                    navigator.mediaSession.setActionHandler(\"previoustrack\", null);\n                }\n            })[\"useBrowserMediaSession.useEffect4\"];\n        }\n    }[\"useBrowserMediaSession.useEffect4\"], [\n        browserMediaControlsBehavior.mode,\n        getCurrentFrame,\n        pause,\n        play,\n        seek,\n        videoConfig\n    ]);\n};\n// src/calculate-next-frame.ts\nvar calculateNextFrame = ({ time, currentFrame: startFrame, playbackSpeed, fps, actualLastFrame, actualFirstFrame, framesAdvanced, shouldLoop })=>{\n    const op = playbackSpeed < 0 ? Math.ceil : Math.floor;\n    const framesToAdvance = op(time * playbackSpeed / (1000 / fps)) - framesAdvanced;\n    const nextFrame = framesToAdvance + startFrame;\n    const isCurrentFrameOutside = startFrame > actualLastFrame || startFrame < actualFirstFrame;\n    const isNextFrameOutside = nextFrame > actualLastFrame || nextFrame < actualFirstFrame;\n    const hasEnded = !shouldLoop && isNextFrameOutside && !isCurrentFrameOutside;\n    if (playbackSpeed > 0) {\n        if (isNextFrameOutside) {\n            return {\n                nextFrame: actualFirstFrame,\n                framesToAdvance,\n                hasEnded\n            };\n        }\n        return {\n            nextFrame,\n            framesToAdvance,\n            hasEnded\n        };\n    }\n    if (isNextFrameOutside) {\n        return {\n            nextFrame: actualLastFrame,\n            framesToAdvance,\n            hasEnded\n        };\n    }\n    return {\n        nextFrame,\n        framesToAdvance,\n        hasEnded\n    };\n};\n// src/is-backgrounded.ts\n\nvar getIsBackgrounded = ()=>{\n    if (typeof document === \"undefined\") {\n        return false;\n    }\n    return document.visibilityState === \"hidden\";\n};\nvar useIsBackgrounded = ()=>{\n    const isBackgrounded = (0,react__WEBPACK_IMPORTED_MODULE_2__.useRef)(getIsBackgrounded());\n    (0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)({\n        \"useIsBackgrounded.useEffect5\": ()=>{\n            const onVisibilityChange = {\n                \"useIsBackgrounded.useEffect5.onVisibilityChange\": ()=>{\n                    isBackgrounded.current = getIsBackgrounded();\n                }\n            }[\"useIsBackgrounded.useEffect5.onVisibilityChange\"];\n            document.addEventListener(\"visibilitychange\", onVisibilityChange);\n            return ({\n                \"useIsBackgrounded.useEffect5\": ()=>{\n                    document.removeEventListener(\"visibilitychange\", onVisibilityChange);\n                }\n            })[\"useIsBackgrounded.useEffect5\"];\n        }\n    }[\"useIsBackgrounded.useEffect5\"], []);\n    return isBackgrounded;\n};\n// src/use-playback.ts\nvar usePlayback = ({ loop, playbackRate, moveToBeginningWhenEnded, inFrame, outFrame, browserMediaControlsBehavior, getCurrentFrame })=>{\n    const config = remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.useUnsafeVideoConfig();\n    const frame = remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.Timeline.useTimelinePosition();\n    const { playing, pause, emitter } = usePlayer();\n    const setFrame = remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.Timeline.useTimelineSetFrame();\n    const buffering = (0,react__WEBPACK_IMPORTED_MODULE_2__.useRef)(null);\n    const isBackgroundedRef = useIsBackgrounded();\n    const lastTimeUpdateEvent = (0,react__WEBPACK_IMPORTED_MODULE_2__.useRef)(null);\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_2__.useContext)(remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.BufferingContextReact);\n    if (!context) {\n        throw new Error(\"Missing the buffering context. Most likely you have a Remotion version mismatch.\");\n    }\n    useBrowserMediaSession({\n        browserMediaControlsBehavior,\n        playbackRate,\n        videoConfig: config\n    });\n    (0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)({\n        \"usePlayback.useEffect6\": ()=>{\n            const onBufferClear = context.listenForBuffering({\n                \"usePlayback.useEffect6.onBufferClear\": ()=>{\n                    buffering.current = performance.now();\n                }\n            }[\"usePlayback.useEffect6.onBufferClear\"]);\n            const onResumeClear = context.listenForResume({\n                \"usePlayback.useEffect6.onResumeClear\": ()=>{\n                    buffering.current = null;\n                }\n            }[\"usePlayback.useEffect6.onResumeClear\"]);\n            return ({\n                \"usePlayback.useEffect6\": ()=>{\n                    onBufferClear.remove();\n                    onResumeClear.remove();\n                }\n            })[\"usePlayback.useEffect6\"];\n        }\n    }[\"usePlayback.useEffect6\"], [\n        context\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)({\n        \"usePlayback.useEffect6\": ()=>{\n            if (!config) {\n                return;\n            }\n            if (!playing) {\n                return;\n            }\n            let hasBeenStopped = false;\n            let reqAnimFrameCall = null;\n            let startedTime = performance.now();\n            let framesAdvanced = 0;\n            const cancelQueuedFrame = {\n                \"usePlayback.useEffect6.cancelQueuedFrame\": ()=>{\n                    if (reqAnimFrameCall !== null) {\n                        if (reqAnimFrameCall.type === \"raf\") {\n                            cancelAnimationFrame(reqAnimFrameCall.id);\n                        } else {\n                            clearTimeout(reqAnimFrameCall.id);\n                        }\n                    }\n                }\n            }[\"usePlayback.useEffect6.cancelQueuedFrame\"];\n            const stop = {\n                \"usePlayback.useEffect6.stop\": ()=>{\n                    hasBeenStopped = true;\n                    cancelQueuedFrame();\n                }\n            }[\"usePlayback.useEffect6.stop\"];\n            const callback = {\n                \"usePlayback.useEffect6.callback\": ()=>{\n                    const time = performance.now() - startedTime;\n                    const actualLastFrame = outFrame ?? config.durationInFrames - 1;\n                    const actualFirstFrame = inFrame ?? 0;\n                    const currentFrame = getCurrentFrame();\n                    const { nextFrame, framesToAdvance, hasEnded } = calculateNextFrame({\n                        time,\n                        currentFrame,\n                        playbackSpeed: playbackRate,\n                        fps: config.fps,\n                        actualFirstFrame,\n                        actualLastFrame,\n                        framesAdvanced,\n                        shouldLoop: loop\n                    });\n                    framesAdvanced += framesToAdvance;\n                    if (nextFrame !== getCurrentFrame() && (!hasEnded || moveToBeginningWhenEnded)) {\n                        setFrame({\n                            \"usePlayback.useEffect6.callback\": (c)=>({\n                                    ...c,\n                                    [config.id]: nextFrame\n                                })\n                        }[\"usePlayback.useEffect6.callback\"]);\n                    }\n                    if (hasEnded) {\n                        stop();\n                        pause();\n                        emitter.dispatchEnded();\n                        return;\n                    }\n                    if (!hasBeenStopped) {\n                        queueNextFrame();\n                    }\n                }\n            }[\"usePlayback.useEffect6.callback\"];\n            const queueNextFrame = {\n                \"usePlayback.useEffect6.queueNextFrame\": ()=>{\n                    if (buffering.current) {\n                        const stopListening = context.listenForResume({\n                            \"usePlayback.useEffect6.queueNextFrame.stopListening\": ()=>{\n                                stopListening.remove();\n                                if (hasBeenStopped) {\n                                    return;\n                                }\n                                startedTime = performance.now();\n                                framesAdvanced = 0;\n                                callback();\n                            }\n                        }[\"usePlayback.useEffect6.queueNextFrame.stopListening\"]);\n                        return;\n                    }\n                    if (isBackgroundedRef.current) {\n                        reqAnimFrameCall = {\n                            type: \"timeout\",\n                            id: setTimeout(callback, 1000 / config.fps)\n                        };\n                    } else {\n                        reqAnimFrameCall = {\n                            type: \"raf\",\n                            id: requestAnimationFrame(callback)\n                        };\n                    }\n                }\n            }[\"usePlayback.useEffect6.queueNextFrame\"];\n            queueNextFrame();\n            const onVisibilityChange = {\n                \"usePlayback.useEffect6.onVisibilityChange\": ()=>{\n                    if (document.visibilityState === \"visible\") {\n                        return;\n                    }\n                    cancelQueuedFrame();\n                    callback();\n                }\n            }[\"usePlayback.useEffect6.onVisibilityChange\"];\n            window.addEventListener(\"visibilitychange\", onVisibilityChange);\n            return ({\n                \"usePlayback.useEffect6\": ()=>{\n                    window.removeEventListener(\"visibilitychange\", onVisibilityChange);\n                    stop();\n                }\n            })[\"usePlayback.useEffect6\"];\n        }\n    }[\"usePlayback.useEffect6\"], [\n        config,\n        loop,\n        pause,\n        playing,\n        setFrame,\n        emitter,\n        playbackRate,\n        inFrame,\n        outFrame,\n        moveToBeginningWhenEnded,\n        isBackgroundedRef,\n        getCurrentFrame,\n        buffering,\n        context\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)({\n        \"usePlayback.useEffect6\": ()=>{\n            const interval = setInterval({\n                \"usePlayback.useEffect6.interval\": ()=>{\n                    if (lastTimeUpdateEvent.current === getCurrentFrame()) {\n                        return;\n                    }\n                    emitter.dispatchTimeUpdate({\n                        frame: getCurrentFrame()\n                    });\n                    lastTimeUpdateEvent.current = getCurrentFrame();\n                }\n            }[\"usePlayback.useEffect6.interval\"], 250);\n            return ({\n                \"usePlayback.useEffect6\": ()=>clearInterval(interval)\n            })[\"usePlayback.useEffect6\"];\n        }\n    }[\"usePlayback.useEffect6\"], [\n        emitter,\n        getCurrentFrame\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)({\n        \"usePlayback.useEffect6\": ()=>{\n            emitter.dispatchFrameUpdate({\n                frame\n            });\n        }\n    }[\"usePlayback.useEffect6\"], [\n        emitter,\n        frame\n    ]);\n};\n// src/utils/use-element-size.ts\n\nvar elementSizeHooks = [];\nvar updateAllElementsSizes = ()=>{\n    for (const listener of elementSizeHooks){\n        listener();\n    }\n};\nvar useElementSize = (ref, options)=>{\n    const [size, setSize] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)({\n        \"useElementSize.useState4\": ()=>{\n            if (!ref.current) {\n                return null;\n            }\n            const rect = ref.current.getClientRects();\n            if (!rect[0]) {\n                return null;\n            }\n            return {\n                width: rect[0].width,\n                height: rect[0].height,\n                left: rect[0].x,\n                top: rect[0].y,\n                windowSize: {\n                    height: window.innerHeight,\n                    width: window.innerWidth\n                }\n            };\n        }\n    }[\"useElementSize.useState4\"]);\n    const observer = (0,react__WEBPACK_IMPORTED_MODULE_2__.useMemo)({\n        \"useElementSize.useMemo2[observer]\": ()=>{\n            if (typeof ResizeObserver === \"undefined\") {\n                return null;\n            }\n            return new ResizeObserver({\n                \"useElementSize.useMemo2[observer]\": (entries)=>{\n                    const { contentRect, target } = entries[0];\n                    const newSize = target.getClientRects();\n                    if (!newSize?.[0]) {\n                        setSize(null);\n                        return;\n                    }\n                    const probableCssParentScale = contentRect.width === 0 ? 1 : newSize[0].width / contentRect.width;\n                    const width = options.shouldApplyCssTransforms ? newSize[0].width : newSize[0].width * (1 / probableCssParentScale);\n                    const height = options.shouldApplyCssTransforms ? newSize[0].height : newSize[0].height * (1 / probableCssParentScale);\n                    setSize({\n                        \"useElementSize.useMemo2[observer]\": (prevState)=>{\n                            const isSame = prevState && prevState.width === width && prevState.height === height && prevState.left === newSize[0].x && prevState.top === newSize[0].y && prevState.windowSize.height === window.innerHeight && prevState.windowSize.width === window.innerWidth;\n                            if (isSame) {\n                                return prevState;\n                            }\n                            return {\n                                width,\n                                height,\n                                left: newSize[0].x,\n                                top: newSize[0].y,\n                                windowSize: {\n                                    height: window.innerHeight,\n                                    width: window.innerWidth\n                                }\n                            };\n                        }\n                    }[\"useElementSize.useMemo2[observer]\"]);\n                }\n            }[\"useElementSize.useMemo2[observer]\"]);\n        }\n    }[\"useElementSize.useMemo2[observer]\"], [\n        options.shouldApplyCssTransforms\n    ]);\n    const updateSize = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)({\n        \"useElementSize.useCallback3[updateSize]\": ()=>{\n            if (!ref.current) {\n                return;\n            }\n            const rect = ref.current.getClientRects();\n            if (!rect[0]) {\n                setSize(null);\n                return;\n            }\n            setSize({\n                \"useElementSize.useCallback3[updateSize]\": (prevState)=>{\n                    const isSame = prevState && prevState.width === rect[0].width && prevState.height === rect[0].height && prevState.left === rect[0].x && prevState.top === rect[0].y && prevState.windowSize.height === window.innerHeight && prevState.windowSize.width === window.innerWidth;\n                    if (isSame) {\n                        return prevState;\n                    }\n                    return {\n                        width: rect[0].width,\n                        height: rect[0].height,\n                        left: rect[0].x,\n                        top: rect[0].y,\n                        windowSize: {\n                            height: window.innerHeight,\n                            width: window.innerWidth\n                        }\n                    };\n                }\n            }[\"useElementSize.useCallback3[updateSize]\"]);\n        }\n    }[\"useElementSize.useCallback3[updateSize]\"], [\n        ref\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)({\n        \"useElementSize.useEffect7\": ()=>{\n            if (!observer) {\n                return;\n            }\n            const { current } = ref;\n            if (current) {\n                observer.observe(current);\n            }\n            return ({\n                \"useElementSize.useEffect7\": ()=>{\n                    if (current) {\n                        observer.unobserve(current);\n                    }\n                }\n            })[\"useElementSize.useEffect7\"];\n        }\n    }[\"useElementSize.useEffect7\"], [\n        observer,\n        ref,\n        updateSize\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)({\n        \"useElementSize.useEffect7\": ()=>{\n            if (!options.triggerOnWindowResize) {\n                return;\n            }\n            window.addEventListener(\"resize\", updateSize);\n            return ({\n                \"useElementSize.useEffect7\": ()=>{\n                    window.removeEventListener(\"resize\", updateSize);\n                }\n            })[\"useElementSize.useEffect7\"];\n        }\n    }[\"useElementSize.useEffect7\"], [\n        options.triggerOnWindowResize,\n        updateSize\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)({\n        \"useElementSize.useEffect7\": ()=>{\n            elementSizeHooks.push(updateSize);\n            return ({\n                \"useElementSize.useEffect7\": ()=>{\n                    elementSizeHooks = elementSizeHooks.filter({\n                        \"useElementSize.useEffect7\": (e)=>e !== updateSize\n                    }[\"useElementSize.useEffect7\"]);\n                }\n            })[\"useElementSize.useEffect7\"];\n        }\n    }[\"useElementSize.useEffect7\"], [\n        updateSize\n    ]);\n    return (0,react__WEBPACK_IMPORTED_MODULE_2__.useMemo)({\n        \"useElementSize.useMemo2\": ()=>{\n            if (!size) {\n                return null;\n            }\n            return {\n                ...size,\n                refresh: updateSize\n            };\n        }\n    }[\"useElementSize.useMemo2\"], [\n        size,\n        updateSize\n    ]);\n};\n// src/Player.tsx\n\n\n// src/PlayerUI.tsx\n\n\n// src/PlayerControls.tsx\n\n// src/DefaultPlayPauseButton.tsx\n\nvar DefaultPlayPauseButton = ({ playing, buffering })=>{\n    if (playing && buffering) {\n        return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(BufferingIndicator, {\n            type: \"player\"\n        });\n    }\n    if (playing) {\n        return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(PauseIcon, {});\n    }\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(PlayIcon, {});\n};\n// src/MediaVolumeSlider.tsx\n\n\n// src/render-volume-slider.tsx\n\n\n\nvar KNOB_SIZE = 12;\nvar BAR_HEIGHT = 5;\nvar DefaultVolumeSlider = ({ volume, isVertical, onBlur, inputRef, setVolume })=>{\n    const sliderContainer = (0,react__WEBPACK_IMPORTED_MODULE_2__.useMemo)({\n        \"DefaultVolumeSlider.useMemo3[sliderContainer]\": ()=>{\n            const paddingLeft = 5;\n            const common = {\n                paddingLeft,\n                height: ICON_SIZE,\n                width: VOLUME_SLIDER_WIDTH,\n                display: \"inline-flex\",\n                alignItems: \"center\"\n            };\n            if (isVertical) {\n                return {\n                    ...common,\n                    position: \"absolute\",\n                    transform: `rotate(-90deg) translateX(${VOLUME_SLIDER_WIDTH / 2 + ICON_SIZE / 2}px)`\n                };\n            }\n            return {\n                ...common\n            };\n        }\n    }[\"DefaultVolumeSlider.useMemo3[sliderContainer]\"], [\n        isVertical\n    ]);\n    const randomId = typeof react__WEBPACK_IMPORTED_MODULE_2__.useId === \"undefined\" ? \"volume-slider\" : react__WEBPACK_IMPORTED_MODULE_2__.useId();\n    const [randomClass] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)({\n        \"DefaultVolumeSlider.useState5\": ()=>`__remotion-volume-slider-${(0,remotion__WEBPACK_IMPORTED_MODULE_1__.random)(randomId)}`.replace(\".\", \"\")\n    }[\"DefaultVolumeSlider.useState5\"]);\n    const onVolumeChange = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)({\n        \"DefaultVolumeSlider.useCallback4[onVolumeChange]\": (e)=>{\n            setVolume(parseFloat(e.target.value));\n        }\n    }[\"DefaultVolumeSlider.useCallback4[onVolumeChange]\"], [\n        setVolume\n    ]);\n    const inputStyle = (0,react__WEBPACK_IMPORTED_MODULE_2__.useMemo)({\n        \"DefaultVolumeSlider.useMemo3[inputStyle]\": ()=>{\n            const commonStyle = {\n                WebkitAppearance: \"none\",\n                backgroundColor: \"rgba(255, 255, 255, 0.5)\",\n                borderRadius: BAR_HEIGHT / 2,\n                cursor: \"pointer\",\n                height: BAR_HEIGHT,\n                width: VOLUME_SLIDER_WIDTH,\n                backgroundImage: `linear-gradient(\n\t\t\t\tto right,\n\t\t\t\twhite ${volume * 100}%, rgba(255, 255, 255, 0) ${volume * 100}%\n\t\t\t)`\n            };\n            if (isVertical) {\n                return {\n                    ...commonStyle,\n                    bottom: ICON_SIZE + VOLUME_SLIDER_WIDTH / 2\n                };\n            }\n            return commonStyle;\n        }\n    }[\"DefaultVolumeSlider.useMemo3[inputStyle]\"], [\n        isVertical,\n        volume\n    ]);\n    const sliderStyle = `\n\t.${randomClass}::-webkit-slider-thumb {\n\t\t-webkit-appearance: none;\n\t\tbackground-color: white;\n\t\tborder-radius: ${KNOB_SIZE / 2}px;\n\t\tbox-shadow: 0 0 2px black;\n\t\theight: ${KNOB_SIZE}px;\n\t\twidth: ${KNOB_SIZE}px;\n\t}\n\n\t.${randomClass}::-moz-range-thumb {\n\t\t-webkit-appearance: none;\n\t\tbackground-color: white;\n\t\tborder-radius: ${KNOB_SIZE / 2}px;\n\t\tbox-shadow: 0 0 2px black;\n\t\theight: ${KNOB_SIZE}px;\n\t\twidth: ${KNOB_SIZE}px;\n\t}\n`;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n        style: sliderContainer,\n        children: [\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"style\", {\n                dangerouslySetInnerHTML: {\n                    __html: sliderStyle\n                }\n            }),\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"input\", {\n                ref: inputRef,\n                \"aria-label\": \"Change volume\",\n                className: randomClass,\n                max: 1,\n                min: 0,\n                onBlur,\n                onChange: onVolumeChange,\n                step: 0.01,\n                type: \"range\",\n                value: volume,\n                style: inputStyle\n            })\n        ]\n    });\n};\nvar renderDefaultVolumeSlider = (props)=>{\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(DefaultVolumeSlider, {\n        ...props\n    });\n};\n// src/MediaVolumeSlider.tsx\n\nvar VOLUME_SLIDER_WIDTH = 100;\nvar MediaVolumeSlider = ({ displayVerticalVolumeSlider, renderMuteButton, renderVolumeSlider })=>{\n    const [mediaMuted, setMediaMuted] = remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.useMediaMutedState();\n    const [mediaVolume, setMediaVolume] = remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.useMediaVolumeState();\n    const [focused, setFocused] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(false);\n    const parentDivRef = (0,react__WEBPACK_IMPORTED_MODULE_2__.useRef)(null);\n    const inputRef = (0,react__WEBPACK_IMPORTED_MODULE_2__.useRef)(null);\n    const hover = useHoverState(parentDivRef, false);\n    const onBlur = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)({\n        \"MediaVolumeSlider.useCallback5[onBlur]\": ()=>{\n            setTimeout({\n                \"MediaVolumeSlider.useCallback5[onBlur]\": ()=>{\n                    if (inputRef.current && document.activeElement !== inputRef.current) {\n                        setFocused(false);\n                    }\n                }\n            }[\"MediaVolumeSlider.useCallback5[onBlur]\"], 10);\n        }\n    }[\"MediaVolumeSlider.useCallback5[onBlur]\"], []);\n    const isVolume0 = mediaVolume === 0;\n    const onClick = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)({\n        \"MediaVolumeSlider.useCallback5[onClick]\": ()=>{\n            if (isVolume0) {\n                setMediaVolume(1);\n                setMediaMuted(false);\n                return;\n            }\n            setMediaMuted({\n                \"MediaVolumeSlider.useCallback5[onClick]\": (mute)=>!mute\n            }[\"MediaVolumeSlider.useCallback5[onClick]\"]);\n        }\n    }[\"MediaVolumeSlider.useCallback5[onClick]\"], [\n        isVolume0,\n        setMediaMuted,\n        setMediaVolume\n    ]);\n    const parentDivStyle = (0,react__WEBPACK_IMPORTED_MODULE_2__.useMemo)({\n        \"MediaVolumeSlider.useMemo4[parentDivStyle]\": ()=>{\n            return {\n                display: \"inline-flex\",\n                background: \"none\",\n                border: \"none\",\n                justifyContent: \"center\",\n                alignItems: \"center\",\n                touchAction: \"none\",\n                ...displayVerticalVolumeSlider && {\n                    position: \"relative\"\n                }\n            };\n        }\n    }[\"MediaVolumeSlider.useMemo4[parentDivStyle]\"], [\n        displayVerticalVolumeSlider\n    ]);\n    const volumeContainer = (0,react__WEBPACK_IMPORTED_MODULE_2__.useMemo)({\n        \"MediaVolumeSlider.useMemo4[volumeContainer]\": ()=>{\n            return {\n                display: \"inline\",\n                width: ICON_SIZE,\n                height: ICON_SIZE,\n                cursor: \"pointer\",\n                appearance: \"none\",\n                background: \"none\",\n                border: \"none\",\n                padding: 0\n            };\n        }\n    }[\"MediaVolumeSlider.useMemo4[volumeContainer]\"], []);\n    const renderDefaultMuteButton = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)({\n        \"MediaVolumeSlider.useCallback5[renderDefaultMuteButton]\": ({ muted, volume })=>{\n            const isMutedOrZero = muted || volume === 0;\n            return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"button\", {\n                \"aria-label\": isMutedOrZero ? \"Unmute sound\" : \"Mute sound\",\n                title: isMutedOrZero ? \"Unmute sound\" : \"Mute sound\",\n                onClick,\n                onBlur,\n                onFocus: {\n                    \"MediaVolumeSlider.useCallback5[renderDefaultMuteButton]\": ()=>setFocused(true)\n                }[\"MediaVolumeSlider.useCallback5[renderDefaultMuteButton]\"],\n                style: volumeContainer,\n                type: \"button\",\n                children: isMutedOrZero ? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(VolumeOffIcon, {}) : /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(VolumeOnIcon, {})\n            });\n        }\n    }[\"MediaVolumeSlider.useCallback5[renderDefaultMuteButton]\"], [\n        onBlur,\n        onClick,\n        volumeContainer\n    ]);\n    const muteButton = (0,react__WEBPACK_IMPORTED_MODULE_2__.useMemo)({\n        \"MediaVolumeSlider.useMemo4[muteButton]\": ()=>{\n            return renderMuteButton ? renderMuteButton({\n                muted: mediaMuted,\n                volume: mediaVolume\n            }) : renderDefaultMuteButton({\n                muted: mediaMuted,\n                volume: mediaVolume\n            });\n        }\n    }[\"MediaVolumeSlider.useMemo4[muteButton]\"], [\n        mediaMuted,\n        mediaVolume,\n        renderDefaultMuteButton,\n        renderMuteButton\n    ]);\n    const volumeSlider = (0,react__WEBPACK_IMPORTED_MODULE_2__.useMemo)({\n        \"MediaVolumeSlider.useMemo4[volumeSlider]\": ()=>{\n            return (focused || hover) && !mediaMuted && !remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.isIosSafari() ? (renderVolumeSlider ?? renderDefaultVolumeSlider)({\n                isVertical: displayVerticalVolumeSlider,\n                volume: mediaVolume,\n                onBlur: {\n                    \"MediaVolumeSlider.useMemo4[volumeSlider]\": ()=>setFocused(false)\n                }[\"MediaVolumeSlider.useMemo4[volumeSlider]\"],\n                inputRef,\n                setVolume: setMediaVolume\n            }) : null;\n        }\n    }[\"MediaVolumeSlider.useMemo4[volumeSlider]\"], [\n        displayVerticalVolumeSlider,\n        focused,\n        hover,\n        mediaMuted,\n        mediaVolume,\n        renderVolumeSlider,\n        setMediaVolume\n    ]);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n        ref: parentDivRef,\n        style: parentDivStyle,\n        children: [\n            muteButton,\n            volumeSlider\n        ]\n    });\n};\n// src/PlaybackrateControl.tsx\n\n\n// src/utils/use-component-visible.ts\n\nfunction useComponentVisible(initialIsVisible) {\n    const [isComponentVisible, setIsComponentVisible] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(initialIsVisible);\n    const ref = (0,react__WEBPACK_IMPORTED_MODULE_2__.useRef)(null);\n    (0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)({\n        \"useComponentVisible.useEffect8\": ()=>{\n            const handleClickOutside = {\n                \"useComponentVisible.useEffect8.handleClickOutside\": (event)=>{\n                    if (ref.current && !ref.current.contains(event.target)) {\n                        setIsComponentVisible(false);\n                    }\n                }\n            }[\"useComponentVisible.useEffect8.handleClickOutside\"];\n            document.addEventListener(\"pointerup\", handleClickOutside, true);\n            return ({\n                \"useComponentVisible.useEffect8\": ()=>{\n                    document.removeEventListener(\"pointerup\", handleClickOutside, true);\n                }\n            })[\"useComponentVisible.useEffect8\"];\n        }\n    }[\"useComponentVisible.useEffect8\"], []);\n    return {\n        ref,\n        isComponentVisible,\n        setIsComponentVisible\n    };\n}\n// src/PlaybackrateControl.tsx\n\nvar BOTTOM = 35;\nvar THRESHOLD = 70;\nvar rateDiv = {\n    height: 30,\n    paddingRight: 15,\n    paddingLeft: 12,\n    display: \"flex\",\n    flexDirection: \"row\",\n    alignItems: \"center\"\n};\nvar checkmarkContainer = {\n    width: 22,\n    display: \"flex\",\n    alignItems: \"center\"\n};\nvar checkmarkStyle = {\n    width: 14,\n    height: 14,\n    color: \"black\"\n};\nvar Checkmark = ()=>/* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"svg\", {\n        viewBox: \"0 0 512 512\",\n        style: checkmarkStyle,\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", {\n            fill: \"currentColor\",\n            d: \"M435.848 83.466L172.804 346.51l-96.652-96.652c-4.686-4.686-12.284-4.686-16.971 0l-28.284 28.284c-4.686 4.686-4.686 12.284 0 16.971l133.421 133.421c4.686 4.686 12.284 4.686 16.971 0l299.813-299.813c4.686-4.686 4.686-12.284 0-16.971l-28.284-28.284c-4.686-4.686-12.284-4.686-16.97 0z\"\n        })\n    });\nvar PlaybackrateOption = ({ rate, onSelect, selectedRate, keyboardSelectedRate })=>{\n    const onClick = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)({\n        \"PlaybackrateOption.useCallback6[onClick]\": (e)=>{\n            e.stopPropagation();\n            e.preventDefault();\n            onSelect(rate);\n        }\n    }[\"PlaybackrateOption.useCallback6[onClick]\"], [\n        onSelect,\n        rate\n    ]);\n    const [hovered, setHovered] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(false);\n    const onMouseEnter = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)({\n        \"PlaybackrateOption.useCallback6[onMouseEnter]\": ()=>{\n            setHovered(true);\n        }\n    }[\"PlaybackrateOption.useCallback6[onMouseEnter]\"], []);\n    const onMouseLeave = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)({\n        \"PlaybackrateOption.useCallback6[onMouseLeave]\": ()=>{\n            setHovered(false);\n        }\n    }[\"PlaybackrateOption.useCallback6[onMouseLeave]\"], []);\n    const isFocused = keyboardSelectedRate === rate;\n    const actualStyle = (0,react__WEBPACK_IMPORTED_MODULE_2__.useMemo)({\n        \"PlaybackrateOption.useMemo5[actualStyle]\": ()=>{\n            return {\n                ...rateDiv,\n                backgroundColor: hovered || isFocused ? \"#eee\" : \"transparent\"\n            };\n        }\n    }[\"PlaybackrateOption.useMemo5[actualStyle]\"], [\n        hovered,\n        isFocused\n    ]);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n        onMouseEnter,\n        onMouseLeave,\n        tabIndex: 0,\n        style: actualStyle,\n        onClick,\n        children: [\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n                style: checkmarkContainer,\n                children: rate === selectedRate ? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Checkmark, {}) : null\n            }),\n            rate.toFixed(1),\n            \"x\"\n        ]\n    }, rate);\n};\nvar PlaybackPopup = ({ setIsComponentVisible, playbackRates, canvasSize })=>{\n    const { setPlaybackRate, playbackRate } = (0,react__WEBPACK_IMPORTED_MODULE_2__.useContext)(remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.Timeline.TimelineContext);\n    const [keyboardSelectedRate, setKeyboardSelectedRate] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(playbackRate);\n    (0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)({\n        \"PlaybackPopup.useEffect9\": ()=>{\n            const listener = {\n                \"PlaybackPopup.useEffect9.listener\": (e)=>{\n                    e.preventDefault();\n                    if (e.key === \"ArrowUp\") {\n                        const currentIndex = playbackRates.findIndex({\n                            \"PlaybackPopup.useEffect9.listener.currentIndex\": (rate)=>rate === keyboardSelectedRate\n                        }[\"PlaybackPopup.useEffect9.listener.currentIndex\"]);\n                        if (currentIndex === 0) {\n                            return;\n                        }\n                        if (currentIndex === -1) {\n                            setKeyboardSelectedRate(playbackRates[0]);\n                        } else {\n                            setKeyboardSelectedRate(playbackRates[currentIndex - 1]);\n                        }\n                    } else if (e.key === \"ArrowDown\") {\n                        const currentIndex = playbackRates.findIndex({\n                            \"PlaybackPopup.useEffect9.listener.currentIndex\": (rate)=>rate === keyboardSelectedRate\n                        }[\"PlaybackPopup.useEffect9.listener.currentIndex\"]);\n                        if (currentIndex === playbackRates.length - 1) {\n                            return;\n                        }\n                        if (currentIndex === -1) {\n                            setKeyboardSelectedRate(playbackRates[playbackRates.length - 1]);\n                        } else {\n                            setKeyboardSelectedRate(playbackRates[currentIndex + 1]);\n                        }\n                    } else if (e.key === \"Enter\") {\n                        setPlaybackRate(keyboardSelectedRate);\n                        setIsComponentVisible(false);\n                    }\n                }\n            }[\"PlaybackPopup.useEffect9.listener\"];\n            window.addEventListener(\"keydown\", listener);\n            return ({\n                \"PlaybackPopup.useEffect9\": ()=>{\n                    window.removeEventListener(\"keydown\", listener);\n                }\n            })[\"PlaybackPopup.useEffect9\"];\n        }\n    }[\"PlaybackPopup.useEffect9\"], [\n        playbackRates,\n        keyboardSelectedRate,\n        setPlaybackRate,\n        setIsComponentVisible\n    ]);\n    const onSelect = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)({\n        \"PlaybackPopup.useCallback6[onSelect]\": (rate)=>{\n            setPlaybackRate(rate);\n            setIsComponentVisible(false);\n        }\n    }[\"PlaybackPopup.useCallback6[onSelect]\"], [\n        setIsComponentVisible,\n        setPlaybackRate\n    ]);\n    const playbackPopup = (0,react__WEBPACK_IMPORTED_MODULE_2__.useMemo)({\n        \"PlaybackPopup.useMemo5[playbackPopup]\": ()=>{\n            return {\n                position: \"absolute\",\n                right: 0,\n                width: 125,\n                maxHeight: canvasSize.height - THRESHOLD - BOTTOM,\n                bottom: 35,\n                background: \"#fff\",\n                borderRadius: 4,\n                overflow: \"auto\",\n                color: \"black\",\n                textAlign: \"left\"\n            };\n        }\n    }[\"PlaybackPopup.useMemo5[playbackPopup]\"], [\n        canvasSize.height\n    ]);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n        style: playbackPopup,\n        children: playbackRates.map((rate)=>{\n            return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(PlaybackrateOption, {\n                selectedRate: playbackRate,\n                onSelect,\n                rate,\n                keyboardSelectedRate\n            }, rate);\n        })\n    });\n};\nvar label = {\n    fontSize: 13,\n    fontWeight: \"bold\",\n    color: \"white\",\n    border: \"2px solid white\",\n    borderRadius: 20,\n    paddingLeft: 8,\n    paddingRight: 8,\n    paddingTop: 2,\n    paddingBottom: 2\n};\nvar playerButtonStyle = {\n    appearance: \"none\",\n    backgroundColor: \"transparent\",\n    border: \"none\",\n    cursor: \"pointer\",\n    paddingLeft: 0,\n    paddingRight: 0,\n    paddingTop: 6,\n    paddingBottom: 6,\n    height: 37,\n    display: \"inline-flex\",\n    marginBottom: 0,\n    marginTop: 0,\n    alignItems: \"center\"\n};\nvar button = {\n    ...playerButtonStyle,\n    position: \"relative\"\n};\nvar PlaybackrateControl = ({ playbackRates, canvasSize })=>{\n    const { ref, isComponentVisible, setIsComponentVisible } = useComponentVisible(false);\n    const { playbackRate } = (0,react__WEBPACK_IMPORTED_MODULE_2__.useContext)(remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.Timeline.TimelineContext);\n    const onClick = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)({\n        \"PlaybackrateControl.useCallback6[onClick]\": (e)=>{\n            e.stopPropagation();\n            e.preventDefault();\n            setIsComponentVisible({\n                \"PlaybackrateControl.useCallback6[onClick]\": (prevIsComponentVisible)=>!prevIsComponentVisible\n            }[\"PlaybackrateControl.useCallback6[onClick]\"]);\n        }\n    }[\"PlaybackrateControl.useCallback6[onClick]\"], [\n        setIsComponentVisible\n    ]);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n        ref,\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"button\", {\n            type: \"button\",\n            \"aria-label\": \"Change playback rate\",\n            style: button,\n            onClick,\n            children: [\n                /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n                    style: label,\n                    children: [\n                        playbackRate,\n                        \"x\"\n                    ]\n                }),\n                isComponentVisible && /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(PlaybackPopup, {\n                    canvasSize,\n                    playbackRates,\n                    setIsComponentVisible\n                })\n            ]\n        })\n    });\n};\n// src/PlayerSeekBar.tsx\n\n\n\nvar getFrameFromX = (clientX, durationInFrames, width)=>{\n    const pos = clientX;\n    const frame = Math.round((0,remotion__WEBPACK_IMPORTED_MODULE_1__.interpolate)(pos, [\n        0,\n        width\n    ], [\n        0,\n        durationInFrames - 1\n    ], {\n        extrapolateLeft: \"clamp\",\n        extrapolateRight: \"clamp\"\n    }));\n    return frame;\n};\nvar BAR_HEIGHT2 = 5;\nvar KNOB_SIZE2 = 12;\nvar VERTICAL_PADDING = 4;\nvar containerStyle = {\n    userSelect: \"none\",\n    WebkitUserSelect: \"none\",\n    paddingTop: VERTICAL_PADDING,\n    paddingBottom: VERTICAL_PADDING,\n    boxSizing: \"border-box\",\n    cursor: \"pointer\",\n    position: \"relative\",\n    touchAction: \"none\"\n};\nvar barBackground = {\n    height: BAR_HEIGHT2,\n    backgroundColor: \"rgba(255, 255, 255, 0.25)\",\n    width: \"100%\",\n    borderRadius: BAR_HEIGHT2 / 2\n};\nvar findBodyInWhichDivIsLocated = (div)=>{\n    let current = div;\n    while(current.parentElement){\n        current = current.parentElement;\n    }\n    return current;\n};\nvar PlayerSeekBar = ({ durationInFrames, onSeekEnd, onSeekStart, inFrame, outFrame })=>{\n    const containerRef = (0,react__WEBPACK_IMPORTED_MODULE_2__.useRef)(null);\n    const barHovered = useHoverState(containerRef, false);\n    const size = useElementSize(containerRef, {\n        triggerOnWindowResize: true,\n        shouldApplyCssTransforms: true\n    });\n    const { seek, play, pause, playing } = usePlayer();\n    const frame = remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.Timeline.useTimelinePosition();\n    const [dragging, setDragging] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)({\n        dragging: false\n    });\n    const width = size?.width ?? 0;\n    const onPointerDown = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)({\n        \"PlayerSeekBar.useCallback7[onPointerDown]\": (e)=>{\n            if (e.button !== 0) {\n                return;\n            }\n            const posLeft = containerRef.current?.getBoundingClientRect().left;\n            const _frame = getFrameFromX(e.clientX - posLeft, durationInFrames, width);\n            pause();\n            seek(_frame);\n            setDragging({\n                dragging: true,\n                wasPlaying: playing\n            });\n            onSeekStart();\n        }\n    }[\"PlayerSeekBar.useCallback7[onPointerDown]\"], [\n        durationInFrames,\n        width,\n        pause,\n        seek,\n        playing,\n        onSeekStart\n    ]);\n    const onPointerMove = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)({\n        \"PlayerSeekBar.useCallback7[onPointerMove]\": (e)=>{\n            if (!size) {\n                throw new Error(\"Player has no size\");\n            }\n            if (!dragging.dragging) {\n                return;\n            }\n            const posLeft = containerRef.current?.getBoundingClientRect().left;\n            const _frame = getFrameFromX(e.clientX - posLeft, durationInFrames, size.width);\n            seek(_frame);\n        }\n    }[\"PlayerSeekBar.useCallback7[onPointerMove]\"], [\n        dragging.dragging,\n        durationInFrames,\n        seek,\n        size\n    ]);\n    const onPointerUp = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)({\n        \"PlayerSeekBar.useCallback7[onPointerUp]\": ()=>{\n            setDragging({\n                dragging: false\n            });\n            if (!dragging.dragging) {\n                return;\n            }\n            if (dragging.wasPlaying) {\n                play();\n            } else {\n                pause();\n            }\n            onSeekEnd();\n        }\n    }[\"PlayerSeekBar.useCallback7[onPointerUp]\"], [\n        dragging,\n        onSeekEnd,\n        pause,\n        play\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)({\n        \"PlayerSeekBar.useEffect10\": ()=>{\n            if (!dragging.dragging) {\n                return;\n            }\n            const body = findBodyInWhichDivIsLocated(containerRef.current);\n            body.addEventListener(\"pointermove\", onPointerMove);\n            body.addEventListener(\"pointerup\", onPointerUp);\n            return ({\n                \"PlayerSeekBar.useEffect10\": ()=>{\n                    body.removeEventListener(\"pointermove\", onPointerMove);\n                    body.removeEventListener(\"pointerup\", onPointerUp);\n                }\n            })[\"PlayerSeekBar.useEffect10\"];\n        }\n    }[\"PlayerSeekBar.useEffect10\"], [\n        dragging.dragging,\n        onPointerMove,\n        onPointerUp\n    ]);\n    const knobStyle = (0,react__WEBPACK_IMPORTED_MODULE_2__.useMemo)({\n        \"PlayerSeekBar.useMemo6[knobStyle]\": ()=>{\n            return {\n                height: KNOB_SIZE2,\n                width: KNOB_SIZE2,\n                borderRadius: KNOB_SIZE2 / 2,\n                position: \"absolute\",\n                top: VERTICAL_PADDING - KNOB_SIZE2 / 2 + 5 / 2,\n                backgroundColor: \"white\",\n                left: Math.max(0, frame / Math.max(1, durationInFrames - 1) * width - KNOB_SIZE2 / 2),\n                boxShadow: \"0 0 2px black\",\n                opacity: Number(barHovered || dragging.dragging)\n            };\n        }\n    }[\"PlayerSeekBar.useMemo6[knobStyle]\"], [\n        barHovered,\n        dragging.dragging,\n        durationInFrames,\n        frame,\n        width\n    ]);\n    const fillStyle = (0,react__WEBPACK_IMPORTED_MODULE_2__.useMemo)({\n        \"PlayerSeekBar.useMemo6[fillStyle]\": ()=>{\n            return {\n                height: BAR_HEIGHT2,\n                backgroundColor: \"rgba(255, 255, 255, 1)\",\n                width: (frame - (inFrame ?? 0)) / (durationInFrames - 1) * width,\n                marginLeft: (inFrame ?? 0) / (durationInFrames - 1) * width,\n                borderRadius: BAR_HEIGHT2 / 2\n            };\n        }\n    }[\"PlayerSeekBar.useMemo6[fillStyle]\"], [\n        durationInFrames,\n        frame,\n        inFrame,\n        width\n    ]);\n    const active = (0,react__WEBPACK_IMPORTED_MODULE_2__.useMemo)({\n        \"PlayerSeekBar.useMemo6[active]\": ()=>{\n            return {\n                height: BAR_HEIGHT2,\n                backgroundColor: \"rgba(255, 255, 255, 0.25)\",\n                width: ((outFrame ?? durationInFrames - 1) - (inFrame ?? 0)) / (durationInFrames - 1) * 100 + \"%\",\n                marginLeft: (inFrame ?? 0) / (durationInFrames - 1) * 100 + \"%\",\n                borderRadius: BAR_HEIGHT2 / 2,\n                position: \"absolute\"\n            };\n        }\n    }[\"PlayerSeekBar.useMemo6[active]\"], [\n        durationInFrames,\n        inFrame,\n        outFrame\n    ]);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n        ref: containerRef,\n        onPointerDown,\n        style: containerStyle,\n        children: [\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n                style: barBackground,\n                children: [\n                    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n                        style: active\n                    }),\n                    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n                        style: fillStyle\n                    })\n                ]\n            }),\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n                style: knobStyle\n            })\n        ]\n    });\n};\n// src/PlayerTimeLabel.tsx\n\n\n// src/format-time.ts\nvar formatTime = (timeInSeconds)=>{\n    const minutes = Math.floor(timeInSeconds / 60);\n    const seconds = Math.floor(timeInSeconds - minutes * 60);\n    return `${String(minutes)}:${String(seconds).padStart(2, \"0\")}`;\n};\n// src/PlayerTimeLabel.tsx\n\nvar PlayerTimeLabel = ({ durationInFrames, maxTimeLabelWidth, fps })=>{\n    const frame = remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.Timeline.useTimelinePosition();\n    const timeLabel = (0,react__WEBPACK_IMPORTED_MODULE_2__.useMemo)({\n        \"PlayerTimeLabel.useMemo7[timeLabel]\": ()=>{\n            return {\n                color: \"white\",\n                fontFamily: \"sans-serif\",\n                fontSize: 14,\n                maxWidth: maxTimeLabelWidth === null ? undefined : maxTimeLabelWidth,\n                overflow: \"hidden\",\n                textOverflow: \"ellipsis\"\n            };\n        }\n    }[\"PlayerTimeLabel.useMemo7[timeLabel]\"], [\n        maxTimeLabelWidth\n    ]);\n    const isLastFrame = frame === durationInFrames - 1;\n    const frameToDisplay = isLastFrame ? frame + 1 : frame;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n        style: timeLabel,\n        children: [\n            formatTime(frameToDisplay / fps),\n            \" / \",\n            formatTime(durationInFrames / fps)\n        ]\n    });\n};\n// src/use-video-controls-resize.ts\n\nvar X_SPACER = 10;\nvar X_PADDING = 12;\nvar useVideoControlsResize = ({ allowFullscreen: allowFullScreen, playerWidth })=>{\n    const resizeInfo = (0,react__WEBPACK_IMPORTED_MODULE_2__.useMemo)({\n        \"useVideoControlsResize.useMemo8[resizeInfo]\": ()=>{\n            const playPauseIconSize = ICON_SIZE;\n            const volumeIconSize = ICON_SIZE;\n            const _fullscreenIconSize = allowFullScreen ? fullscreenIconSize : 0;\n            const elementsSize = volumeIconSize + playPauseIconSize + _fullscreenIconSize + X_PADDING * 2 + X_SPACER * 2;\n            const maxTimeLabelWidth = playerWidth - elementsSize;\n            const maxTimeLabelWidthWithoutNegativeValue = Math.max(maxTimeLabelWidth, 0);\n            const availableTimeLabelWidthIfVolumeOpen = maxTimeLabelWidthWithoutNegativeValue - VOLUME_SLIDER_WIDTH;\n            const computedLabelWidth = availableTimeLabelWidthIfVolumeOpen < VOLUME_SLIDER_WIDTH ? maxTimeLabelWidthWithoutNegativeValue : availableTimeLabelWidthIfVolumeOpen;\n            const minWidthForHorizontalDisplay = computedLabelWidth + elementsSize + VOLUME_SLIDER_WIDTH;\n            const displayVerticalVolumeSlider = playerWidth < minWidthForHorizontalDisplay;\n            return {\n                maxTimeLabelWidth: maxTimeLabelWidthWithoutNegativeValue === 0 ? null : maxTimeLabelWidthWithoutNegativeValue,\n                displayVerticalVolumeSlider\n            };\n        }\n    }[\"useVideoControlsResize.useMemo8[resizeInfo]\"], [\n        allowFullScreen,\n        playerWidth\n    ]);\n    return resizeInfo;\n};\n// src/PlayerControls.tsx\n\nvar gradientSteps = [\n    0,\n    0.013,\n    0.049,\n    0.104,\n    0.175,\n    0.259,\n    0.352,\n    0.45,\n    0.55,\n    0.648,\n    0.741,\n    0.825,\n    0.896,\n    0.951,\n    0.987\n];\nvar gradientOpacities = [\n    0,\n    8.1,\n    15.5,\n    22.5,\n    29,\n    35.3,\n    41.2,\n    47.1,\n    52.9,\n    58.8,\n    64.7,\n    71,\n    77.5,\n    84.5,\n    91.9\n];\nvar globalGradientOpacity = 1 / 0.7;\nvar containerStyle2 = {\n    boxSizing: \"border-box\",\n    position: \"absolute\",\n    bottom: 0,\n    width: \"100%\",\n    paddingTop: 40,\n    paddingBottom: 10,\n    backgroundImage: `linear-gradient(to bottom,${gradientSteps.map((g, i)=>{\n        return `hsla(0, 0%, 0%, ${g}) ${gradientOpacities[i] * globalGradientOpacity}%`;\n    }).join(\", \")}, hsl(0, 0%, 0%) 100%)`,\n    backgroundSize: \"auto 145px\",\n    display: \"flex\",\n    paddingRight: X_PADDING,\n    paddingLeft: X_PADDING,\n    flexDirection: \"column\",\n    transition: \"opacity 0.3s\"\n};\nvar controlsRow = {\n    display: \"flex\",\n    flexDirection: \"row\",\n    width: \"100%\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    userSelect: \"none\",\n    WebkitUserSelect: \"none\"\n};\nvar leftPartStyle = {\n    display: \"flex\",\n    flexDirection: \"row\",\n    userSelect: \"none\",\n    WebkitUserSelect: \"none\",\n    alignItems: \"center\"\n};\nvar xSpacer = {\n    width: 12\n};\nvar ySpacer = {\n    height: 8\n};\nvar flex1 = {\n    flex: 1\n};\nvar fullscreen = {};\nvar Controls = ({ durationInFrames, isFullscreen, fps, showVolumeControls, onFullscreenButtonClick, allowFullscreen, onExitFullscreenButtonClick, spaceKeyToPlayOrPause, onSeekEnd, onSeekStart, inFrame, outFrame, initiallyShowControls, canvasSize, renderPlayPauseButton, renderFullscreenButton, alwaysShowControls, showPlaybackRateControl, containerRef, buffering, hideControlsWhenPointerDoesntMove, onPointerDown, onDoubleClick, renderMuteButton, renderVolumeSlider, playing, toggle })=>{\n    const playButtonRef = (0,react__WEBPACK_IMPORTED_MODULE_2__.useRef)(null);\n    const [supportsFullscreen, setSupportsFullscreen] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(false);\n    const hovered = useHoverState(containerRef, hideControlsWhenPointerDoesntMove);\n    const { maxTimeLabelWidth, displayVerticalVolumeSlider } = useVideoControlsResize({\n        allowFullscreen,\n        playerWidth: canvasSize?.width ?? 0\n    });\n    const [shouldShowInitially, setInitiallyShowControls] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)({\n        \"Controls.useState10\": ()=>{\n            if (typeof initiallyShowControls === \"boolean\") {\n                return initiallyShowControls;\n            }\n            if (typeof initiallyShowControls === \"number\") {\n                if (initiallyShowControls % 1 !== 0) {\n                    throw new Error(\"initiallyShowControls must be an integer or a boolean\");\n                }\n                if (Number.isNaN(initiallyShowControls)) {\n                    throw new Error(\"initiallyShowControls must not be NaN\");\n                }\n                if (!Number.isFinite(initiallyShowControls)) {\n                    throw new Error(\"initiallyShowControls must be finite\");\n                }\n                if (initiallyShowControls <= 0) {\n                    throw new Error(\"initiallyShowControls must be a positive integer\");\n                }\n                return initiallyShowControls;\n            }\n            throw new TypeError(\"initiallyShowControls must be a number or a boolean\");\n        }\n    }[\"Controls.useState10\"]);\n    const containerCss = (0,react__WEBPACK_IMPORTED_MODULE_2__.useMemo)({\n        \"Controls.useMemo9[containerCss]\": ()=>{\n            const shouldShow = hovered || !playing || shouldShowInitially || alwaysShowControls;\n            return {\n                ...containerStyle2,\n                opacity: Number(shouldShow)\n            };\n        }\n    }[\"Controls.useMemo9[containerCss]\"], [\n        hovered,\n        shouldShowInitially,\n        playing,\n        alwaysShowControls\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)({\n        \"Controls.useEffect11\": ()=>{\n            if (playButtonRef.current && spaceKeyToPlayOrPause) {\n                playButtonRef.current.focus({\n                    preventScroll: true\n                });\n            }\n        }\n    }[\"Controls.useEffect11\"], [\n        playing,\n        spaceKeyToPlayOrPause\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)({\n        \"Controls.useEffect11\": ()=>{\n            setSupportsFullscreen((typeof document !== \"undefined\" && (document.fullscreenEnabled || document.webkitFullscreenEnabled)) ?? false);\n        }\n    }[\"Controls.useEffect11\"], []);\n    (0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)({\n        \"Controls.useEffect11\": ()=>{\n            if (shouldShowInitially === false) {\n                return;\n            }\n            const time = shouldShowInitially === true ? 2000 : shouldShowInitially;\n            const timeout = setTimeout({\n                \"Controls.useEffect11.timeout\": ()=>{\n                    setInitiallyShowControls(false);\n                }\n            }[\"Controls.useEffect11.timeout\"], time);\n            return ({\n                \"Controls.useEffect11\": ()=>{\n                    clearInterval(timeout);\n                }\n            })[\"Controls.useEffect11\"];\n        }\n    }[\"Controls.useEffect11\"], [\n        shouldShowInitially\n    ]);\n    const playbackRates = (0,react__WEBPACK_IMPORTED_MODULE_2__.useMemo)({\n        \"Controls.useMemo9[playbackRates]\": ()=>{\n            if (showPlaybackRateControl === true) {\n                return [\n                    0.5,\n                    0.8,\n                    1,\n                    1.2,\n                    1.5,\n                    1.8,\n                    2,\n                    2.5,\n                    3\n                ];\n            }\n            if (Array.isArray(showPlaybackRateControl)) {\n                for (const rate of showPlaybackRateControl){\n                    if (typeof rate !== \"number\") {\n                        throw new Error(\"Every item in showPlaybackRateControl must be a number\");\n                    }\n                    if (rate <= 0) {\n                        throw new Error(\"Every item in showPlaybackRateControl must be positive\");\n                    }\n                }\n                return showPlaybackRateControl;\n            }\n            return null;\n        }\n    }[\"Controls.useMemo9[playbackRates]\"], [\n        showPlaybackRateControl\n    ]);\n    const ref = (0,react__WEBPACK_IMPORTED_MODULE_2__.useRef)(null);\n    const flexRef = (0,react__WEBPACK_IMPORTED_MODULE_2__.useRef)(null);\n    const onPointerDownIfContainer = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)({\n        \"Controls.useCallback8[onPointerDownIfContainer]\": (e)=>{\n            if (e.target === ref.current || e.target === flexRef.current) {\n                onPointerDown?.(e);\n            }\n        }\n    }[\"Controls.useCallback8[onPointerDownIfContainer]\"], [\n        onPointerDown\n    ]);\n    const onDoubleClickIfContainer = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)({\n        \"Controls.useCallback8[onDoubleClickIfContainer]\": (e)=>{\n            if (e.target === ref.current || e.target === flexRef.current) {\n                onDoubleClick?.(e);\n            }\n        }\n    }[\"Controls.useCallback8[onDoubleClickIfContainer]\"], [\n        onDoubleClick\n    ]);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n        ref,\n        style: containerCss,\n        onPointerDown: onPointerDownIfContainer,\n        onDoubleClick: onDoubleClickIfContainer,\n        children: [\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n                ref: flexRef,\n                style: controlsRow,\n                children: [\n                    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n                        style: leftPartStyle,\n                        children: [\n                            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"button\", {\n                                ref: playButtonRef,\n                                type: \"button\",\n                                style: playerButtonStyle,\n                                onClick: toggle,\n                                \"aria-label\": playing ? \"Pause video\" : \"Play video\",\n                                title: playing ? \"Pause video\" : \"Play video\",\n                                children: renderPlayPauseButton === null ? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(DefaultPlayPauseButton, {\n                                    buffering,\n                                    playing\n                                }) : renderPlayPauseButton({\n                                    playing,\n                                    isBuffering: buffering\n                                }) ?? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(DefaultPlayPauseButton, {\n                                    buffering,\n                                    playing\n                                })\n                            }),\n                            showVolumeControls ? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n                                children: [\n                                    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n                                        style: xSpacer\n                                    }),\n                                    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(MediaVolumeSlider, {\n                                        renderMuteButton,\n                                        renderVolumeSlider,\n                                        displayVerticalVolumeSlider\n                                    })\n                                ]\n                            }) : null,\n                            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n                                style: xSpacer\n                            }),\n                            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(PlayerTimeLabel, {\n                                durationInFrames,\n                                fps,\n                                maxTimeLabelWidth\n                            }),\n                            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n                                style: xSpacer\n                            })\n                        ]\n                    }),\n                    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n                        style: flex1\n                    }),\n                    playbackRates && canvasSize && /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(PlaybackrateControl, {\n                        canvasSize,\n                        playbackRates\n                    }),\n                    playbackRates && supportsFullscreen && allowFullscreen ? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n                        style: xSpacer\n                    }) : null,\n                    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n                        style: fullscreen,\n                        children: supportsFullscreen && allowFullscreen ? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"button\", {\n                            type: \"button\",\n                            \"aria-label\": isFullscreen ? \"Exit fullscreen\" : \"Enter Fullscreen\",\n                            title: isFullscreen ? \"Exit fullscreen\" : \"Enter Fullscreen\",\n                            style: playerButtonStyle,\n                            onClick: isFullscreen ? onExitFullscreenButtonClick : onFullscreenButtonClick,\n                            children: renderFullscreenButton === null ? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(FullscreenIcon, {\n                                isFullscreen\n                            }) : renderFullscreenButton({\n                                isFullscreen\n                            })\n                        }) : null\n                    })\n                ]\n            }),\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n                style: ySpacer\n            }),\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(PlayerSeekBar, {\n                onSeekEnd,\n                onSeekStart,\n                durationInFrames,\n                inFrame,\n                outFrame\n            })\n        ]\n    });\n};\n// src/error-boundary.tsx\n\n\nvar errorStyle = {\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    flex: 1,\n    height: \"100%\",\n    width: \"100%\"\n};\nclass ErrorBoundary extends react__WEBPACK_IMPORTED_MODULE_2__.Component {\n    static getDerivedStateFromError(error) {\n        return {\n            hasError: error\n        };\n    }\n    componentDidCatch(error) {\n        this.props.onError(error);\n    }\n    render() {\n        if (this.state.hasError) {\n            return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n                style: errorStyle,\n                children: this.props.errorFallback({\n                    error: this.state.hasError\n                })\n            });\n        }\n        return this.props.children;\n    }\n    constructor(...args){\n        super(...args), this.state = {\n            hasError: null\n        };\n    }\n}\n// src/license-blacklist.tsx\n\n\nvar getHashOfDomain = async ()=>{\n    if (true) {\n        return null;\n    }\n    if (typeof window.crypto === \"undefined\") {\n        return null;\n    }\n    if (typeof window.crypto.subtle === \"undefined\") {\n        return null;\n    }\n    try {\n        const hashBuffer = await crypto.subtle.digest(\"SHA-256\", new TextEncoder().encode(window.location.hostname));\n        return Array.from(new Uint8Array(hashBuffer)).map((b)=>b.toString(16).padStart(2, \"0\")).join(\"\");\n    } catch  {\n        return null;\n    }\n};\nvar style = {\n    backgroundColor: \"red\",\n    position: \"absolute\",\n    padding: 12,\n    fontFamily: \"Arial\"\n};\nvar DOMAIN_BLACKLIST = [\n    \"28d262b44cc61fa750f1686b16ad0604dabfe193fbc263eec05c89b7ad4c2cd6\",\n    \"4db1b0a94be33165dfefcb3ba03d04c7a2666dd27c496d3dc9fa41858e94925e\",\n    \"fbc48530bbf245da790f63675e84e06bab38c3b114fab07eb350025119922bdc\",\n    \"7baf10a8932757b1b3a22b3fce10a048747ac2f8eaf638603487e3705b07eb83\",\n    \"8a6c21a598d8c667272b5207c051b85997bf5b45d5fb712378be3f27cd72c6a6\",\n    \"a2f7aaac9c50a9255e7fc376110c4e0bfe153722dc66ed3c5d3bf2a135f65518\"\n];\nvar ran = false;\nvar RenderWarningIfBlacklist = ()=>{\n    const [unlicensed, setUnlicensed] = react__WEBPACK_IMPORTED_MODULE_2__.useState(false);\n    (0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)({\n        \"RenderWarningIfBlacklist.useEffect12\": ()=>{\n            if (ran) {\n                return;\n            }\n            ran = true;\n            getHashOfDomain().then({\n                \"RenderWarningIfBlacklist.useEffect12\": (hash)=>{\n                    if (hash && DOMAIN_BLACKLIST.includes(hash)) {\n                        setUnlicensed(true);\n                    }\n                }\n            }[\"RenderWarningIfBlacklist.useEffect12\"]).catch({\n                \"RenderWarningIfBlacklist.useEffect12\": ()=>{}\n            }[\"RenderWarningIfBlacklist.useEffect12\"]);\n        }\n    }[\"RenderWarningIfBlacklist.useEffect12\"], []);\n    (0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)({\n        \"RenderWarningIfBlacklist.useEffect12\": ()=>{\n            if (!unlicensed) {\n                return;\n            }\n            const ensureBanner = {\n                \"RenderWarningIfBlacklist.useEffect12.ensureBanner\": ()=>{\n                    const banner = document.querySelector(\".warning-banner\");\n                    if (!banner) {\n                        const div = document.createElement(\"div\");\n                        div.className = \"warning-banner\";\n                        Object.assign(div.style, style, {\n                            zIndex: \"9999\",\n                            cssText: `${style.cssText} !important;`\n                        });\n                        div.innerHTML = `\n\t        <a href=\"https://github.com/remotion-dev/remotion/pull/4589\" style=\"color: white;\">\n\t          Remotion Unlicensed – Contact hi@remotion.dev\n\t        </a>\n\t      `;\n                        document.body.appendChild(div);\n                    }\n                }\n            }[\"RenderWarningIfBlacklist.useEffect12.ensureBanner\"];\n            const observer = new MutationObserver({\n                \"RenderWarningIfBlacklist.useEffect12\": ()=>ensureBanner()\n            }[\"RenderWarningIfBlacklist.useEffect12\"]);\n            observer.observe(document.body, {\n                childList: true,\n                subtree: true\n            });\n            return ({\n                \"RenderWarningIfBlacklist.useEffect12\": ()=>{\n                    observer.disconnect();\n                }\n            })[\"RenderWarningIfBlacklist.useEffect12\"];\n        }\n    }[\"RenderWarningIfBlacklist.useEffect12\"], [\n        unlicensed\n    ]);\n    if (!unlicensed) {\n        return null;\n    }\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n        style,\n        className: \"warning-banner\",\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"a\", {\n            style: {\n                color: \"white\"\n            },\n            href: \"https://github.com/remotion-dev/remotion/pull/4589\",\n            children: \"Remotion Unlicensed – Contact hi@remotion.dev\"\n        })\n    });\n};\n// src/player-css-classname.ts\nvar playerCssClassname = (override)=>{\n    return override ?? \"__remotion-player\";\n};\n// src/utils/is-node.ts\nvar IS_NODE = typeof document === \"undefined\";\n// src/utils/use-click-prevention-on-double-click.ts\n\n// src/utils/cancellable-promise.ts\nvar cancellablePromise = (promise)=>{\n    let isCanceled = false;\n    const wrappedPromise = new Promise((resolve, reject)=>{\n        promise.then((value)=>{\n            if (isCanceled) {\n                reject({\n                    isCanceled,\n                    value\n                });\n                return;\n            }\n            resolve(value);\n        }).catch((error)=>{\n            reject({\n                isCanceled,\n                error\n            });\n        });\n    });\n    return {\n        promise: wrappedPromise,\n        cancel: ()=>{\n            isCanceled = true;\n        }\n    };\n};\n// src/utils/delay.ts\nvar delay = (n)=>new Promise((resolve)=>setTimeout(resolve, n));\n// src/utils/use-cancellable-promises.ts\n\nvar useCancellablePromises = ()=>{\n    const pendingPromises = (0,react__WEBPACK_IMPORTED_MODULE_2__.useRef)([]);\n    const appendPendingPromise = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)({\n        \"useCancellablePromises.useCallback9[appendPendingPromise]\": (promise)=>{\n            pendingPromises.current = [\n                ...pendingPromises.current,\n                promise\n            ];\n        }\n    }[\"useCancellablePromises.useCallback9[appendPendingPromise]\"], []);\n    const removePendingPromise = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)({\n        \"useCancellablePromises.useCallback9[removePendingPromise]\": (promise)=>{\n            pendingPromises.current = pendingPromises.current.filter({\n                \"useCancellablePromises.useCallback9[removePendingPromise]\": (p)=>p !== promise\n            }[\"useCancellablePromises.useCallback9[removePendingPromise]\"]);\n        }\n    }[\"useCancellablePromises.useCallback9[removePendingPromise]\"], []);\n    const clearPendingPromises = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)({\n        \"useCancellablePromises.useCallback9[clearPendingPromises]\": ()=>pendingPromises.current.map({\n                \"useCancellablePromises.useCallback9[clearPendingPromises]\": (p)=>p.cancel()\n            }[\"useCancellablePromises.useCallback9[clearPendingPromises]\"])\n    }[\"useCancellablePromises.useCallback9[clearPendingPromises]\"], []);\n    const api = (0,react__WEBPACK_IMPORTED_MODULE_2__.useMemo)({\n        \"useCancellablePromises.useMemo10[api]\": ()=>({\n                appendPendingPromise,\n                removePendingPromise,\n                clearPendingPromises\n            })\n    }[\"useCancellablePromises.useMemo10[api]\"], [\n        appendPendingPromise,\n        clearPendingPromises,\n        removePendingPromise\n    ]);\n    return api;\n};\n// src/utils/use-click-prevention-on-double-click.ts\nvar useClickPreventionOnDoubleClick = (onClick, onDoubleClick, doubleClickToFullscreen)=>{\n    const api = useCancellablePromises();\n    const handleClick = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)({\n        \"useClickPreventionOnDoubleClick.useCallback10[handleClick]\": async (e)=>{\n            if (e instanceof PointerEvent ? e.pointerType === \"touch\" : e.nativeEvent.pointerType === \"touch\") {\n                onClick(e);\n                return;\n            }\n            api.clearPendingPromises();\n            const waitForClick = cancellablePromise(delay(200));\n            api.appendPendingPromise(waitForClick);\n            try {\n                await waitForClick.promise;\n                api.removePendingPromise(waitForClick);\n                onClick(e);\n            } catch (errorInfo) {\n                const info = errorInfo;\n                api.removePendingPromise(waitForClick);\n                if (!info.isCanceled) {\n                    throw info.error;\n                }\n            }\n        }\n    }[\"useClickPreventionOnDoubleClick.useCallback10[handleClick]\"], [\n        api,\n        onClick\n    ]);\n    const handlePointerDown = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)({\n        \"useClickPreventionOnDoubleClick.useCallback10[handlePointerDown]\": ()=>{\n            document.addEventListener(\"pointerup\", {\n                \"useClickPreventionOnDoubleClick.useCallback10[handlePointerDown]\": (newEvt)=>{\n                    handleClick(newEvt);\n                }\n            }[\"useClickPreventionOnDoubleClick.useCallback10[handlePointerDown]\"], {\n                once: true\n            });\n        }\n    }[\"useClickPreventionOnDoubleClick.useCallback10[handlePointerDown]\"], [\n        handleClick\n    ]);\n    const handleDoubleClick = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)({\n        \"useClickPreventionOnDoubleClick.useCallback10[handleDoubleClick]\": ()=>{\n            api.clearPendingPromises();\n            onDoubleClick();\n        }\n    }[\"useClickPreventionOnDoubleClick.useCallback10[handleDoubleClick]\"], [\n        api,\n        onDoubleClick\n    ]);\n    const returnValue = (0,react__WEBPACK_IMPORTED_MODULE_2__.useMemo)({\n        \"useClickPreventionOnDoubleClick.useMemo11[returnValue]\": ()=>{\n            if (!doubleClickToFullscreen) {\n                return {\n                    handlePointerDown: onClick,\n                    handleDoubleClick: ({\n                        \"useClickPreventionOnDoubleClick.useMemo11[returnValue]\": ()=>{\n                            return;\n                        }\n                    })[\"useClickPreventionOnDoubleClick.useMemo11[returnValue]\"]\n                };\n            }\n            return {\n                handlePointerDown,\n                handleDoubleClick\n            };\n        }\n    }[\"useClickPreventionOnDoubleClick.useMemo11[returnValue]\"], [\n        doubleClickToFullscreen,\n        handleDoubleClick,\n        handlePointerDown,\n        onClick\n    ]);\n    return returnValue;\n};\n// src/PlayerUI.tsx\n\nvar reactVersion = react__WEBPACK_IMPORTED_MODULE_2__.version.split(\".\")[0];\nif (reactVersion === \"0\") {\n    throw new Error(`Version ${reactVersion} of \"react\" is not supported by Remotion`);\n}\nvar doesReactVersionSupportSuspense = parseInt(reactVersion, 10) >= 18;\nvar PlayerUI = ({ controls, style: style2, loop, autoPlay, allowFullscreen, inputProps, clickToPlay, showVolumeControls, doubleClickToFullscreen, spaceKeyToPlayOrPause, errorFallback, playbackRate, renderLoading, renderPoster, className: className2, moveToBeginningWhenEnded, showPosterWhenUnplayed, showPosterWhenEnded, showPosterWhenPaused, showPosterWhenBuffering, showPosterWhenBufferingAndPaused, inFrame, outFrame, initiallyShowControls, renderFullscreen: renderFullscreenButton, renderPlayPauseButton, renderMuteButton, renderVolumeSlider, alwaysShowControls, showPlaybackRateControl, posterFillMode, bufferStateDelayInMilliseconds, hideControlsWhenPointerDoesntMove, overflowVisible, browserMediaControlsBehavior, overrideInternalClassName, noSuspense }, ref)=>{\n    const config = remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.useUnsafeVideoConfig();\n    const video = remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.useVideo();\n    const container = (0,react__WEBPACK_IMPORTED_MODULE_2__.useRef)(null);\n    const canvasSize = useElementSize(container, {\n        triggerOnWindowResize: false,\n        shouldApplyCssTransforms: false\n    });\n    const [hasPausedToResume, setHasPausedToResume] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(false);\n    const [shouldAutoplay, setShouldAutoPlay] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(autoPlay);\n    const [isFullscreen, setIsFullscreen] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)({\n        \"PlayerUI.useState11\": ()=>false\n    }[\"PlayerUI.useState11\"]);\n    const [seeking, setSeeking] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(false);\n    const supportsFullScreen = (0,react__WEBPACK_IMPORTED_MODULE_2__.useMemo)({\n        \"PlayerUI.useMemo12[supportsFullScreen]\": ()=>{\n            if (typeof document === \"undefined\") {\n                return false;\n            }\n            return Boolean(document.fullscreenEnabled || document.webkitFullscreenEnabled);\n        }\n    }[\"PlayerUI.useMemo12[supportsFullScreen]\"], []);\n    const player = usePlayer();\n    const playerToggle = player.toggle;\n    usePlayback({\n        loop,\n        playbackRate,\n        moveToBeginningWhenEnded,\n        inFrame,\n        outFrame,\n        getCurrentFrame: player.getCurrentFrame,\n        browserMediaControlsBehavior\n    });\n    (0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)({\n        \"PlayerUI.useEffect13\": ()=>{\n            if (hasPausedToResume && !player.playing) {\n                setHasPausedToResume(false);\n                player.play();\n            }\n        }\n    }[\"PlayerUI.useEffect13\"], [\n        hasPausedToResume,\n        player\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)({\n        \"PlayerUI.useEffect13\": ()=>{\n            const { current } = container;\n            if (!current) {\n                return;\n            }\n            const onFullscreenChange = {\n                \"PlayerUI.useEffect13.onFullscreenChange\": ()=>{\n                    const newValue = document.fullscreenElement === current || document.webkitFullscreenElement === current;\n                    setIsFullscreen(newValue);\n                }\n            }[\"PlayerUI.useEffect13.onFullscreenChange\"];\n            document.addEventListener(\"fullscreenchange\", onFullscreenChange);\n            document.addEventListener(\"webkitfullscreenchange\", onFullscreenChange);\n            return ({\n                \"PlayerUI.useEffect13\": ()=>{\n                    document.removeEventListener(\"fullscreenchange\", onFullscreenChange);\n                    document.removeEventListener(\"webkitfullscreenchange\", onFullscreenChange);\n                }\n            })[\"PlayerUI.useEffect13\"];\n        }\n    }[\"PlayerUI.useEffect13\"], []);\n    const toggle = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)({\n        \"PlayerUI.useCallback11[toggle]\": (e)=>{\n            playerToggle(e);\n        }\n    }[\"PlayerUI.useCallback11[toggle]\"], [\n        playerToggle\n    ]);\n    const requestFullscreen = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)({\n        \"PlayerUI.useCallback11[requestFullscreen]\": ()=>{\n            if (!allowFullscreen) {\n                throw new Error(\"allowFullscreen is false\");\n            }\n            if (!supportsFullScreen) {\n                throw new Error(\"Browser doesnt support fullscreen\");\n            }\n            if (!container.current) {\n                throw new Error(\"No player ref found\");\n            }\n            if (container.current.webkitRequestFullScreen) {\n                container.current.webkitRequestFullScreen();\n            } else {\n                container.current.requestFullscreen();\n            }\n        }\n    }[\"PlayerUI.useCallback11[requestFullscreen]\"], [\n        allowFullscreen,\n        supportsFullScreen\n    ]);\n    const exitFullscreen = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)({\n        \"PlayerUI.useCallback11[exitFullscreen]\": ()=>{\n            if (document.webkitExitFullscreen) {\n                document.webkitExitFullscreen();\n            } else {\n                document.exitFullscreen();\n            }\n        }\n    }[\"PlayerUI.useCallback11[exitFullscreen]\"], []);\n    (0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)({\n        \"PlayerUI.useEffect13\": ()=>{\n            const { current } = container;\n            if (!current) {\n                return;\n            }\n            const fullscreenChange = {\n                \"PlayerUI.useEffect13.fullscreenChange\": ()=>{\n                    const element = document.webkitFullscreenElement ?? document.fullscreenElement;\n                    if (element && element === container.current) {\n                        player.emitter.dispatchFullscreenChange({\n                            isFullscreen: true\n                        });\n                    } else {\n                        player.emitter.dispatchFullscreenChange({\n                            isFullscreen: false\n                        });\n                    }\n                }\n            }[\"PlayerUI.useEffect13.fullscreenChange\"];\n            current.addEventListener(\"webkitfullscreenchange\", fullscreenChange);\n            current.addEventListener(\"fullscreenchange\", fullscreenChange);\n            return ({\n                \"PlayerUI.useEffect13\": ()=>{\n                    current.removeEventListener(\"webkitfullscreenchange\", fullscreenChange);\n                    current.removeEventListener(\"fullscreenchange\", fullscreenChange);\n                }\n            })[\"PlayerUI.useEffect13\"];\n        }\n    }[\"PlayerUI.useEffect13\"], [\n        player.emitter\n    ]);\n    const durationInFrames = config?.durationInFrames ?? 1;\n    const layout = (0,react__WEBPACK_IMPORTED_MODULE_2__.useMemo)({\n        \"PlayerUI.useMemo12[layout]\": ()=>{\n            if (!config || !canvasSize) {\n                return null;\n            }\n            return calculateCanvasTransformation({\n                canvasSize,\n                compositionHeight: config.height,\n                compositionWidth: config.width,\n                previewSize: \"auto\"\n            });\n        }\n    }[\"PlayerUI.useMemo12[layout]\"], [\n        canvasSize,\n        config\n    ]);\n    const scale = layout?.scale ?? 1;\n    const initialScaleIgnored = (0,react__WEBPACK_IMPORTED_MODULE_2__.useRef)(false);\n    (0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)({\n        \"PlayerUI.useEffect13\": ()=>{\n            if (!initialScaleIgnored.current) {\n                initialScaleIgnored.current = true;\n                return;\n            }\n            player.emitter.dispatchScaleChange(scale);\n        }\n    }[\"PlayerUI.useEffect13\"], [\n        player.emitter,\n        scale\n    ]);\n    const { setMediaVolume, setMediaMuted } = (0,react__WEBPACK_IMPORTED_MODULE_2__.useContext)(remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.SetMediaVolumeContext);\n    const { mediaMuted, mediaVolume } = (0,react__WEBPACK_IMPORTED_MODULE_2__.useContext)(remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.MediaVolumeContext);\n    (0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)({\n        \"PlayerUI.useEffect13\": ()=>{\n            player.emitter.dispatchVolumeChange(mediaVolume);\n        }\n    }[\"PlayerUI.useEffect13\"], [\n        player.emitter,\n        mediaVolume\n    ]);\n    const isMuted = mediaMuted || mediaVolume === 0;\n    (0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)({\n        \"PlayerUI.useEffect13\": ()=>{\n            player.emitter.dispatchMuteChange({\n                isMuted\n            });\n        }\n    }[\"PlayerUI.useEffect13\"], [\n        player.emitter,\n        isMuted\n    ]);\n    const [showBufferIndicator, setShowBufferState] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(false);\n    (0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)({\n        \"PlayerUI.useEffect13\": ()=>{\n            let timeout = null;\n            let stopped = false;\n            const onBuffer = {\n                \"PlayerUI.useEffect13.onBuffer\": ()=>{\n                    stopped = false;\n                    requestAnimationFrame({\n                        \"PlayerUI.useEffect13.onBuffer\": ()=>{\n                            if (bufferStateDelayInMilliseconds === 0) {\n                                setShowBufferState(true);\n                            } else {\n                                timeout = setTimeout({\n                                    \"PlayerUI.useEffect13.onBuffer\": ()=>{\n                                        if (!stopped) {\n                                            setShowBufferState(true);\n                                        }\n                                    }\n                                }[\"PlayerUI.useEffect13.onBuffer\"], bufferStateDelayInMilliseconds);\n                            }\n                        }\n                    }[\"PlayerUI.useEffect13.onBuffer\"]);\n                }\n            }[\"PlayerUI.useEffect13.onBuffer\"];\n            const onResume = {\n                \"PlayerUI.useEffect13.onResume\": ()=>{\n                    requestAnimationFrame({\n                        \"PlayerUI.useEffect13.onResume\": ()=>{\n                            stopped = true;\n                            setShowBufferState(false);\n                            if (timeout) {\n                                clearTimeout(timeout);\n                            }\n                        }\n                    }[\"PlayerUI.useEffect13.onResume\"]);\n                }\n            }[\"PlayerUI.useEffect13.onResume\"];\n            player.emitter.addEventListener(\"waiting\", onBuffer);\n            player.emitter.addEventListener(\"resume\", onResume);\n            return ({\n                \"PlayerUI.useEffect13\": ()=>{\n                    player.emitter.removeEventListener(\"waiting\", onBuffer);\n                    player.emitter.removeEventListener(\"resume\", onResume);\n                    setShowBufferState(false);\n                    if (timeout) {\n                        clearTimeout(timeout);\n                    }\n                    stopped = true;\n                }\n            })[\"PlayerUI.useEffect13\"];\n        }\n    }[\"PlayerUI.useEffect13\"], [\n        bufferStateDelayInMilliseconds,\n        player.emitter\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_2__.useImperativeHandle)(ref, {\n        \"PlayerUI.useImperativeHandle\": ()=>{\n            const methods = {\n                play: player.play,\n                pause: {\n                    \"PlayerUI.useImperativeHandle\": ()=>{\n                        setHasPausedToResume(false);\n                        player.pause();\n                    }\n                }[\"PlayerUI.useImperativeHandle\"],\n                toggle,\n                getContainerNode: {\n                    \"PlayerUI.useImperativeHandle\": ()=>container.current\n                }[\"PlayerUI.useImperativeHandle\"],\n                getCurrentFrame: player.getCurrentFrame,\n                isPlaying: player.isPlaying,\n                seekTo: {\n                    \"PlayerUI.useImperativeHandle\": (f)=>{\n                        const lastFrame = durationInFrames - 1;\n                        const frameToSeekTo = Math.max(0, Math.min(lastFrame, f));\n                        if (player.isPlaying()) {\n                            const pauseToResume = frameToSeekTo !== lastFrame || loop;\n                            setHasPausedToResume(pauseToResume);\n                            player.pause();\n                        }\n                        if (frameToSeekTo === lastFrame && !loop) {\n                            player.emitter.dispatchEnded();\n                        }\n                        player.seek(frameToSeekTo);\n                    }\n                }[\"PlayerUI.useImperativeHandle\"],\n                isFullscreen: {\n                    \"PlayerUI.useImperativeHandle\": ()=>{\n                        const { current } = container;\n                        if (!current) {\n                            return false;\n                        }\n                        return document.fullscreenElement === current || document.webkitFullscreenElement === current;\n                    }\n                }[\"PlayerUI.useImperativeHandle\"],\n                requestFullscreen,\n                exitFullscreen,\n                getVolume: {\n                    \"PlayerUI.useImperativeHandle\": ()=>{\n                        if (mediaMuted) {\n                            return 0;\n                        }\n                        return mediaVolume;\n                    }\n                }[\"PlayerUI.useImperativeHandle\"],\n                setVolume: {\n                    \"PlayerUI.useImperativeHandle\": (vol)=>{\n                        if (typeof vol !== \"number\") {\n                            throw new TypeError(`setVolume() takes a number, got value of type ${typeof vol}`);\n                        }\n                        if (isNaN(vol)) {\n                            throw new TypeError(`setVolume() got a number that is NaN. Volume must be between 0 and 1.`);\n                        }\n                        if (vol < 0 || vol > 1) {\n                            throw new TypeError(`setVolume() got a number that is out of range. Must be between 0 and 1, got ${typeof vol}`);\n                        }\n                        setMediaVolume(vol);\n                    }\n                }[\"PlayerUI.useImperativeHandle\"],\n                isMuted: {\n                    \"PlayerUI.useImperativeHandle\": ()=>isMuted\n                }[\"PlayerUI.useImperativeHandle\"],\n                mute: {\n                    \"PlayerUI.useImperativeHandle\": ()=>{\n                        setMediaMuted(true);\n                    }\n                }[\"PlayerUI.useImperativeHandle\"],\n                unmute: {\n                    \"PlayerUI.useImperativeHandle\": ()=>{\n                        setMediaMuted(false);\n                    }\n                }[\"PlayerUI.useImperativeHandle\"],\n                getScale: {\n                    \"PlayerUI.useImperativeHandle\": ()=>scale\n                }[\"PlayerUI.useImperativeHandle\"],\n                pauseAndReturnToPlayStart: {\n                    \"PlayerUI.useImperativeHandle\": ()=>{\n                        player.pauseAndReturnToPlayStart();\n                    }\n                }[\"PlayerUI.useImperativeHandle\"]\n            };\n            return Object.assign(player.emitter, methods);\n        }\n    }[\"PlayerUI.useImperativeHandle\"], [\n        durationInFrames,\n        exitFullscreen,\n        loop,\n        mediaMuted,\n        isMuted,\n        mediaVolume,\n        player,\n        requestFullscreen,\n        setMediaMuted,\n        setMediaVolume,\n        toggle,\n        scale\n    ]);\n    const VideoComponent = video ? video.component : null;\n    const outerStyle = (0,react__WEBPACK_IMPORTED_MODULE_2__.useMemo)({\n        \"PlayerUI.useMemo12[outerStyle]\": ()=>{\n            return calculateOuterStyle({\n                canvasSize,\n                config,\n                style: style2,\n                overflowVisible,\n                layout\n            });\n        }\n    }[\"PlayerUI.useMemo12[outerStyle]\"], [\n        canvasSize,\n        config,\n        layout,\n        overflowVisible,\n        style2\n    ]);\n    const outer = (0,react__WEBPACK_IMPORTED_MODULE_2__.useMemo)({\n        \"PlayerUI.useMemo12[outer]\": ()=>{\n            return calculateOuter({\n                config,\n                layout,\n                scale,\n                overflowVisible\n            });\n        }\n    }[\"PlayerUI.useMemo12[outer]\"], [\n        config,\n        layout,\n        overflowVisible,\n        scale\n    ]);\n    const containerStyle3 = (0,react__WEBPACK_IMPORTED_MODULE_2__.useMemo)({\n        \"PlayerUI.useMemo12[containerStyle3]\": ()=>{\n            return calculateContainerStyle({\n                canvasSize,\n                config,\n                layout,\n                scale,\n                overflowVisible\n            });\n        }\n    }[\"PlayerUI.useMemo12[containerStyle3]\"], [\n        canvasSize,\n        config,\n        layout,\n        overflowVisible,\n        scale\n    ]);\n    const playerPause = player.pause;\n    const playerDispatchError = player.emitter.dispatchError;\n    const onError = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)({\n        \"PlayerUI.useCallback11[onError]\": (error)=>{\n            playerPause();\n            playerDispatchError(error);\n        }\n    }[\"PlayerUI.useCallback11[onError]\"], [\n        playerDispatchError,\n        playerPause\n    ]);\n    const onFullscreenButtonClick = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)({\n        \"PlayerUI.useCallback11[onFullscreenButtonClick]\": (e)=>{\n            e.stopPropagation();\n            requestFullscreen();\n        }\n    }[\"PlayerUI.useCallback11[onFullscreenButtonClick]\"], [\n        requestFullscreen\n    ]);\n    const onExitFullscreenButtonClick = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)({\n        \"PlayerUI.useCallback11[onExitFullscreenButtonClick]\": (e)=>{\n            e.stopPropagation();\n            exitFullscreen();\n        }\n    }[\"PlayerUI.useCallback11[onExitFullscreenButtonClick]\"], [\n        exitFullscreen\n    ]);\n    const onSingleClick = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)({\n        \"PlayerUI.useCallback11[onSingleClick]\": (e)=>{\n            const rightClick = e instanceof MouseEvent ? e.button === 2 : e.nativeEvent.button;\n            if (rightClick) {\n                return;\n            }\n            toggle(e);\n        }\n    }[\"PlayerUI.useCallback11[onSingleClick]\"], [\n        toggle\n    ]);\n    const onSeekStart = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)({\n        \"PlayerUI.useCallback11[onSeekStart]\": ()=>{\n            setSeeking(true);\n        }\n    }[\"PlayerUI.useCallback11[onSeekStart]\"], []);\n    const onSeekEnd = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)({\n        \"PlayerUI.useCallback11[onSeekEnd]\": ()=>{\n            setSeeking(false);\n        }\n    }[\"PlayerUI.useCallback11[onSeekEnd]\"], []);\n    const onDoubleClick = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)({\n        \"PlayerUI.useCallback11[onDoubleClick]\": ()=>{\n            if (isFullscreen) {\n                exitFullscreen();\n            } else {\n                requestFullscreen();\n            }\n        }\n    }[\"PlayerUI.useCallback11[onDoubleClick]\"], [\n        exitFullscreen,\n        isFullscreen,\n        requestFullscreen\n    ]);\n    const { handlePointerDown, handleDoubleClick } = useClickPreventionOnDoubleClick(onSingleClick, onDoubleClick, doubleClickToFullscreen && allowFullscreen && supportsFullScreen);\n    (0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)({\n        \"PlayerUI.useEffect13\": ()=>{\n            if (shouldAutoplay) {\n                player.play();\n                setShouldAutoPlay(false);\n            }\n        }\n    }[\"PlayerUI.useEffect13\"], [\n        shouldAutoplay,\n        player\n    ]);\n    const loadingMarkup = (0,react__WEBPACK_IMPORTED_MODULE_2__.useMemo)({\n        \"PlayerUI.useMemo12[loadingMarkup]\": ()=>{\n            return renderLoading ? renderLoading({\n                height: outerStyle.height,\n                width: outerStyle.width,\n                isBuffering: showBufferIndicator\n            }) : null;\n        }\n    }[\"PlayerUI.useMemo12[loadingMarkup]\"], [\n        outerStyle.height,\n        outerStyle.width,\n        renderLoading,\n        showBufferIndicator\n    ]);\n    const currentScale = (0,react__WEBPACK_IMPORTED_MODULE_2__.useMemo)({\n        \"PlayerUI.useMemo12[currentScale]\": ()=>{\n            return {\n                type: \"scale\",\n                scale\n            };\n        }\n    }[\"PlayerUI.useMemo12[currentScale]\"], [\n        scale\n    ]);\n    if (!config) {\n        return null;\n    }\n    const poster = renderPoster ? renderPoster({\n        height: posterFillMode === \"player-size\" ? outerStyle.height : config.height,\n        width: posterFillMode === \"player-size\" ? outerStyle.width : config.width,\n        isBuffering: showBufferIndicator\n    }) : null;\n    if (poster === undefined) {\n        throw new TypeError(\"renderPoster() must return a React element, but undefined was returned\");\n    }\n    const shouldShowPoster = poster && [\n        showPosterWhenPaused && !player.isPlaying() && !seeking,\n        showPosterWhenEnded && player.isLastFrame && !player.isPlaying(),\n        showPosterWhenUnplayed && !player.hasPlayed && !player.isPlaying(),\n        showPosterWhenBuffering && showBufferIndicator && player.isPlaying(),\n        showPosterWhenBufferingAndPaused && showBufferIndicator && !player.isPlaying()\n    ].some(Boolean);\n    const { left, top, width, height, ...outerWithoutScale } = outer;\n    const content = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n        children: [\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n                style: outer,\n                onPointerDown: clickToPlay ? handlePointerDown : undefined,\n                onDoubleClick: doubleClickToFullscreen ? handleDoubleClick : undefined,\n                children: [\n                    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n                        style: containerStyle3,\n                        className: playerCssClassname(overrideInternalClassName),\n                        children: [\n                            VideoComponent ? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(ErrorBoundary, {\n                                onError,\n                                errorFallback,\n                                children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.CurrentScaleContext.Provider, {\n                                    value: currentScale,\n                                    children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(VideoComponent, {\n                                        ...video?.props ?? {},\n                                        ...inputProps ?? {}\n                                    })\n                                })\n                            }) : null,\n                            shouldShowPoster && posterFillMode === \"composition-size\" ? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n                                style: {\n                                    ...outerWithoutScale,\n                                    width: config.width,\n                                    height: config.height\n                                },\n                                onPointerDown: clickToPlay ? handlePointerDown : undefined,\n                                onDoubleClick: doubleClickToFullscreen ? handleDoubleClick : undefined,\n                                children: poster\n                            }) : null\n                        ]\n                    }),\n                    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(RenderWarningIfBlacklist, {})\n                ]\n            }),\n            shouldShowPoster && posterFillMode === \"player-size\" ? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n                style: outer,\n                onPointerDown: clickToPlay ? handlePointerDown : undefined,\n                onDoubleClick: doubleClickToFullscreen ? handleDoubleClick : undefined,\n                children: poster\n            }) : null,\n            controls ? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Controls, {\n                fps: config.fps,\n                playing: player.playing,\n                toggle: player.toggle,\n                durationInFrames: config.durationInFrames,\n                containerRef: container,\n                onFullscreenButtonClick,\n                isFullscreen,\n                allowFullscreen,\n                showVolumeControls,\n                onExitFullscreenButtonClick,\n                spaceKeyToPlayOrPause,\n                onSeekEnd,\n                onSeekStart,\n                inFrame,\n                outFrame,\n                initiallyShowControls,\n                canvasSize,\n                renderFullscreenButton,\n                renderPlayPauseButton,\n                alwaysShowControls,\n                showPlaybackRateControl,\n                buffering: showBufferIndicator,\n                hideControlsWhenPointerDoesntMove,\n                onDoubleClick: doubleClickToFullscreen ? handleDoubleClick : undefined,\n                onPointerDown: clickToPlay ? handlePointerDown : undefined,\n                renderMuteButton,\n                renderVolumeSlider\n            }) : null\n        ]\n    });\n    if (noSuspense || IS_NODE && !doesReactVersionSupportSuspense) {\n        return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n            ref: container,\n            style: outerStyle,\n            className: className2,\n            children: content\n        });\n    }\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n        ref: container,\n        style: outerStyle,\n        className: className2,\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(react__WEBPACK_IMPORTED_MODULE_2__.Suspense, {\n            fallback: loadingMarkup,\n            children: content\n        })\n    });\n};\nvar PlayerUI_default = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_2__.forwardRef)(PlayerUI);\n// src/SharedPlayerContext.tsx\n\n\n// src/volume-persistance.ts\n\nvar VOLUME_PERSISTANCE_KEY = \"remotion.volumePreference\";\nvar persistVolume = (volume, logLevel)=>{\n    if (true) {\n        return;\n    }\n    try {\n        window.localStorage.setItem(VOLUME_PERSISTANCE_KEY, String(volume));\n    } catch (e) {\n        remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.Log.error(logLevel, \"Could not persist volume\", e);\n    }\n};\nvar getPreferredVolume = ()=>{\n    if (true) {\n        return 1;\n    }\n    try {\n        const val = window.localStorage.getItem(VOLUME_PERSISTANCE_KEY);\n        return val ? Number(val) : 1;\n    } catch  {\n        return 1;\n    }\n};\n// src/SharedPlayerContext.tsx\n\nvar PLAYER_COMP_ID = \"player-comp\";\nvar SharedPlayerContexts = ({ children, timelineContext, fps, compositionHeight, compositionWidth, durationInFrames, component, numberOfSharedAudioTags, initiallyMuted, logLevel })=>{\n    const compositionManagerContext = (0,react__WEBPACK_IMPORTED_MODULE_2__.useMemo)({\n        \"SharedPlayerContexts.useMemo13[compositionManagerContext]\": ()=>{\n            const context = {\n                compositions: [\n                    {\n                        component,\n                        durationInFrames,\n                        height: compositionHeight,\n                        width: compositionWidth,\n                        fps,\n                        id: PLAYER_COMP_ID,\n                        nonce: 777,\n                        folderName: null,\n                        parentFolderName: null,\n                        schema: null,\n                        calculateMetadata: null\n                    }\n                ],\n                folders: [],\n                currentCompositionMetadata: null,\n                canvasContent: {\n                    type: \"composition\",\n                    compositionId: \"player-comp\"\n                }\n            };\n            return context;\n        }\n    }[\"SharedPlayerContexts.useMemo13[compositionManagerContext]\"], [\n        component,\n        durationInFrames,\n        compositionHeight,\n        compositionWidth,\n        fps\n    ]);\n    const [mediaMuted, setMediaMuted] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)({\n        \"SharedPlayerContexts.useState12\": ()=>initiallyMuted\n    }[\"SharedPlayerContexts.useState12\"]);\n    const [mediaVolume, setMediaVolume] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)({\n        \"SharedPlayerContexts.useState12\": ()=>getPreferredVolume()\n    }[\"SharedPlayerContexts.useState12\"]);\n    const mediaVolumeContextValue = (0,react__WEBPACK_IMPORTED_MODULE_2__.useMemo)({\n        \"SharedPlayerContexts.useMemo13[mediaVolumeContextValue]\": ()=>{\n            return {\n                mediaMuted,\n                mediaVolume\n            };\n        }\n    }[\"SharedPlayerContexts.useMemo13[mediaVolumeContextValue]\"], [\n        mediaMuted,\n        mediaVolume\n    ]);\n    const setMediaVolumeAndPersist = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)({\n        \"SharedPlayerContexts.useCallback12[setMediaVolumeAndPersist]\": (vol)=>{\n            setMediaVolume(vol);\n            persistVolume(vol, logLevel);\n        }\n    }[\"SharedPlayerContexts.useCallback12[setMediaVolumeAndPersist]\"], [\n        logLevel\n    ]);\n    const setMediaVolumeContextValue = (0,react__WEBPACK_IMPORTED_MODULE_2__.useMemo)({\n        \"SharedPlayerContexts.useMemo13[setMediaVolumeContextValue]\": ()=>{\n            return {\n                setMediaMuted,\n                setMediaVolume: setMediaVolumeAndPersist\n            };\n        }\n    }[\"SharedPlayerContexts.useMemo13[setMediaVolumeContextValue]\"], [\n        setMediaVolumeAndPersist\n    ]);\n    const logLevelContext = (0,react__WEBPACK_IMPORTED_MODULE_2__.useMemo)({\n        \"SharedPlayerContexts.useMemo13[logLevelContext]\": ()=>{\n            return {\n                logLevel,\n                mountTime: Date.now()\n            };\n        }\n    }[\"SharedPlayerContexts.useMemo13[logLevelContext]\"], [\n        logLevel\n    ]);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.LogLevelContext.Provider, {\n        value: logLevelContext,\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.CanUseRemotionHooksProvider, {\n            children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.Timeline.TimelineContext.Provider, {\n                value: timelineContext,\n                children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.CompositionManager.Provider, {\n                    value: compositionManagerContext,\n                    children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.ResolveCompositionConfig, {\n                        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.PrefetchProvider, {\n                            children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.DurationsContextProvider, {\n                                children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.MediaVolumeContext.Provider, {\n                                    value: mediaVolumeContextValue,\n                                    children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.SetMediaVolumeContext.Provider, {\n                                        value: setMediaVolumeContextValue,\n                                        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.SharedAudioContextProvider, {\n                                            numberOfAudioTags: numberOfSharedAudioTags,\n                                            component,\n                                            children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.BufferingProvider, {\n                                                children\n                                            })\n                                        })\n                                    })\n                                })\n                            })\n                        })\n                    })\n                })\n            })\n        })\n    });\n};\n// src/use-remotion-license-acknowledge.ts\n\nvar warningShown = false;\nvar acknowledgeRemotionLicenseMessage = (acknowledge, logLevel)=>{\n    if (acknowledge) {\n        return;\n    }\n    if (warningShown) {\n        return;\n    }\n    warningShown = true;\n    remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.Log.warn(logLevel, \"Note: Some companies are required to obtain a license to use Remotion. See: https://remotion.dev/license\");\n    remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.Log.warn(logLevel, \"Pass the `acknowledgeRemotionLicense` prop to `<Player />` function to make this message disappear.\");\n};\n// src/utils/validate-in-out-frame.ts\nvar validateSingleFrame = (frame, variableName)=>{\n    if (typeof frame === \"undefined\" || frame === null) {\n        return frame ?? null;\n    }\n    if (typeof frame !== \"number\") {\n        throw new TypeError(`\"${variableName}\" must be a number, but is ${JSON.stringify(frame)}`);\n    }\n    if (Number.isNaN(frame)) {\n        throw new TypeError(`\"${variableName}\" must not be NaN, but is ${JSON.stringify(frame)}`);\n    }\n    if (!Number.isFinite(frame)) {\n        throw new TypeError(`\"${variableName}\" must be finite, but is ${JSON.stringify(frame)}`);\n    }\n    if (frame % 1 !== 0) {\n        throw new TypeError(`\"${variableName}\" must be an integer, but is ${JSON.stringify(frame)}`);\n    }\n    return frame;\n};\nvar validateInOutFrames = ({ inFrame, durationInFrames, outFrame })=>{\n    const validatedInFrame = validateSingleFrame(inFrame, \"inFrame\");\n    const validatedOutFrame = validateSingleFrame(outFrame, \"outFrame\");\n    if (validatedInFrame === null && validatedOutFrame === null) {\n        return;\n    }\n    if (validatedInFrame !== null && validatedInFrame > durationInFrames - 1) {\n        throw new Error(\"inFrame must be less than (durationInFrames - 1), but is \" + validatedInFrame);\n    }\n    if (validatedOutFrame !== null && validatedOutFrame > durationInFrames - 1) {\n        throw new Error(\"outFrame must be less than (durationInFrames - 1), but is \" + validatedOutFrame);\n    }\n    if (validatedInFrame !== null && validatedInFrame < 0) {\n        throw new Error(\"inFrame must be greater than 0, but is \" + validatedInFrame);\n    }\n    if (validatedOutFrame !== null && validatedOutFrame <= 0) {\n        throw new Error(`outFrame must be greater than 0, but is ${validatedOutFrame}. If you want to render a single frame, use <Thumbnail /> instead.`);\n    }\n    if (validatedOutFrame !== null && validatedInFrame !== null && validatedOutFrame <= validatedInFrame) {\n        throw new Error(\"outFrame must be greater than inFrame, but is \" + validatedOutFrame + \" <= \" + validatedInFrame);\n    }\n};\n// src/utils/validate-initial-frame.ts\nvar validateInitialFrame = ({ initialFrame, durationInFrames })=>{\n    if (typeof durationInFrames !== \"number\") {\n        throw new Error(`\\`durationInFrames\\` must be a number, but is ${JSON.stringify(durationInFrames)}`);\n    }\n    if (typeof initialFrame === \"undefined\") {\n        return;\n    }\n    if (typeof initialFrame !== \"number\") {\n        throw new Error(`\\`initialFrame\\` must be a number, but is ${JSON.stringify(initialFrame)}`);\n    }\n    if (Number.isNaN(initialFrame)) {\n        throw new Error(`\\`initialFrame\\` must be a number, but is NaN`);\n    }\n    if (!Number.isFinite(initialFrame)) {\n        throw new Error(`\\`initialFrame\\` must be a number, but is Infinity`);\n    }\n    if (initialFrame % 1 !== 0) {\n        throw new Error(`\\`initialFrame\\` must be an integer, but is ${JSON.stringify(initialFrame)}`);\n    }\n    if (initialFrame > durationInFrames - 1) {\n        throw new Error(`\\`initialFrame\\` must be less or equal than \\`durationInFrames - 1\\`, but is ${JSON.stringify(initialFrame)}`);\n    }\n};\n// src/utils/validate-playbackrate.ts\nvar validatePlaybackRate = (playbackRate)=>{\n    if (playbackRate === undefined) {\n        return;\n    }\n    if (playbackRate > 4) {\n        throw new Error(`The highest possible playback rate is 4. You passed: ${playbackRate}`);\n    }\n    if (playbackRate < -4) {\n        throw new Error(`The lowest possible playback rate is -4. You passed: ${playbackRate}`);\n    }\n    if (playbackRate === 0) {\n        throw new Error(`A playback rate of 0 is not supported.`);\n    }\n};\n// src/validate.ts\n\nvar validateFps = remotion_no_react__WEBPACK_IMPORTED_MODULE_3__.NoReactInternals.validateFps;\nvar validateDimension = remotion_no_react__WEBPACK_IMPORTED_MODULE_3__.NoReactInternals.validateDimension;\nvar validateDurationInFrames = remotion_no_react__WEBPACK_IMPORTED_MODULE_3__.NoReactInternals.validateDurationInFrames;\nvar validateDefaultAndInputProps = remotion_no_react__WEBPACK_IMPORTED_MODULE_3__.NoReactInternals.validateDefaultAndInputProps;\n// src/Player.tsx\n\nvar componentOrNullIfLazy = (props)=>{\n    if (\"component\" in props) {\n        return props.component;\n    }\n    return null;\n};\nvar PlayerFn = ({ durationInFrames, compositionHeight, compositionWidth, fps, inputProps, style: style2, controls = false, loop = false, autoPlay = false, showVolumeControls = true, allowFullscreen = true, clickToPlay, doubleClickToFullscreen = false, spaceKeyToPlayOrPause = true, moveToBeginningWhenEnded = true, numberOfSharedAudioTags = 5, errorFallback = ()=>\"⚠️\", playbackRate = 1, renderLoading, className: className2, showPosterWhenUnplayed, showPosterWhenEnded, showPosterWhenPaused, showPosterWhenBuffering, showPosterWhenBufferingAndPaused, initialFrame, renderPoster, inFrame, outFrame, initiallyShowControls, renderFullscreenButton, renderPlayPauseButton, renderVolumeSlider, alwaysShowControls = false, initiallyMuted = false, showPlaybackRateControl = false, posterFillMode = \"player-size\", bufferStateDelayInMilliseconds, hideControlsWhenPointerDoesntMove = true, overflowVisible = false, renderMuteButton, browserMediaControlsBehavior: passedBrowserMediaControlsBehavior, overrideInternalClassName, logLevel = \"info\", noSuspense, acknowledgeRemotionLicense, ...componentProps }, ref)=>{\n    if (false) {}\n    if (componentProps.defaultProps !== undefined) {\n        throw new Error(\"The <Player /> component does not accept `defaultProps`, but some were passed. Use `inputProps` instead.\");\n    }\n    const componentForValidation = componentOrNullIfLazy(componentProps);\n    if (componentForValidation?.type === remotion__WEBPACK_IMPORTED_MODULE_1__.Composition) {\n        throw new TypeError(`'component' should not be an instance of <Composition/>. Pass the React component directly, and set the duration, fps and dimensions as separate props. See https://www.remotion.dev/docs/player/examples for an example.`);\n    }\n    if (componentForValidation === remotion__WEBPACK_IMPORTED_MODULE_1__.Composition) {\n        throw new TypeError(`'component' must not be the 'Composition' component. Pass your own React component directly, and set the duration, fps and dimensions as separate props. See https://www.remotion.dev/docs/player/examples for an example.`);\n    }\n    (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)({\n        \"PlayerFn.useState13\": ()=>acknowledgeRemotionLicenseMessage(Boolean(acknowledgeRemotionLicense), logLevel)\n    }[\"PlayerFn.useState13\"]);\n    const component = remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.useLazyComponent({\n        compProps: componentProps,\n        componentName: \"Player\",\n        noSuspense: Boolean(noSuspense)\n    });\n    validateInitialFrame({\n        initialFrame,\n        durationInFrames\n    });\n    const [frame, setFrame] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)({\n        \"PlayerFn.useState13\": ()=>({\n                [PLAYER_COMP_ID]: initialFrame ?? 0\n            })\n    }[\"PlayerFn.useState13\"]);\n    const [playing, setPlaying] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(false);\n    const [rootId] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(\"player-comp\");\n    const rootRef = (0,react__WEBPACK_IMPORTED_MODULE_2__.useRef)(null);\n    const audioAndVideoTags = (0,react__WEBPACK_IMPORTED_MODULE_2__.useRef)([]);\n    const imperativePlaying = (0,react__WEBPACK_IMPORTED_MODULE_2__.useRef)(false);\n    const [currentPlaybackRate, setCurrentPlaybackRate] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(playbackRate);\n    if (typeof compositionHeight !== \"number\") {\n        throw new TypeError(`'compositionHeight' must be a number but got '${typeof compositionHeight}' instead`);\n    }\n    if (typeof compositionWidth !== \"number\") {\n        throw new TypeError(`'compositionWidth' must be a number but got '${typeof compositionWidth}' instead`);\n    }\n    validateDimension(compositionHeight, \"compositionHeight\", \"of the <Player /> component\");\n    validateDimension(compositionWidth, \"compositionWidth\", \"of the <Player /> component\");\n    validateDurationInFrames(durationInFrames, {\n        component: \"of the <Player/> component\",\n        allowFloats: false\n    });\n    validateFps(fps, \"as a prop of the <Player/> component\", false);\n    validateDefaultAndInputProps(inputProps, \"inputProps\", null);\n    validateInOutFrames({\n        durationInFrames,\n        inFrame,\n        outFrame\n    });\n    if (typeof controls !== \"boolean\" && typeof controls !== \"undefined\") {\n        throw new TypeError(`'controls' must be a boolean or undefined but got '${typeof controls}' instead`);\n    }\n    if (typeof autoPlay !== \"boolean\" && typeof autoPlay !== \"undefined\") {\n        throw new TypeError(`'autoPlay' must be a boolean or undefined but got '${typeof autoPlay}' instead`);\n    }\n    if (typeof loop !== \"boolean\" && typeof loop !== \"undefined\") {\n        throw new TypeError(`'loop' must be a boolean or undefined but got '${typeof loop}' instead`);\n    }\n    if (typeof doubleClickToFullscreen !== \"boolean\" && typeof doubleClickToFullscreen !== \"undefined\") {\n        throw new TypeError(`'doubleClickToFullscreen' must be a boolean or undefined but got '${typeof doubleClickToFullscreen}' instead`);\n    }\n    if (typeof showVolumeControls !== \"boolean\" && typeof showVolumeControls !== \"undefined\") {\n        throw new TypeError(`'showVolumeControls' must be a boolean or undefined but got '${typeof showVolumeControls}' instead`);\n    }\n    if (typeof allowFullscreen !== \"boolean\" && typeof allowFullscreen !== \"undefined\") {\n        throw new TypeError(`'allowFullscreen' must be a boolean or undefined but got '${typeof allowFullscreen}' instead`);\n    }\n    if (typeof clickToPlay !== \"boolean\" && typeof clickToPlay !== \"undefined\") {\n        throw new TypeError(`'clickToPlay' must be a boolean or undefined but got '${typeof clickToPlay}' instead`);\n    }\n    if (typeof spaceKeyToPlayOrPause !== \"boolean\" && typeof spaceKeyToPlayOrPause !== \"undefined\") {\n        throw new TypeError(`'spaceKeyToPlayOrPause' must be a boolean or undefined but got '${typeof spaceKeyToPlayOrPause}' instead`);\n    }\n    if (typeof numberOfSharedAudioTags !== \"number\" || numberOfSharedAudioTags % 1 !== 0 || !Number.isFinite(numberOfSharedAudioTags) || Number.isNaN(numberOfSharedAudioTags) || numberOfSharedAudioTags < 0) {\n        throw new TypeError(`'numberOfSharedAudioTags' must be an integer but got '${numberOfSharedAudioTags}' instead`);\n    }\n    validatePlaybackRate(currentPlaybackRate);\n    (0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)({\n        \"PlayerFn.useEffect14\": ()=>{\n            setCurrentPlaybackRate(playbackRate);\n        }\n    }[\"PlayerFn.useEffect14\"], [\n        playbackRate\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_2__.useImperativeHandle)(ref, {\n        \"PlayerFn.useImperativeHandle2\": ()=>rootRef.current\n    }[\"PlayerFn.useImperativeHandle2\"], []);\n    (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)({\n        \"PlayerFn.useState13\": ()=>{\n            remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.playbackLogging({\n                logLevel,\n                message: `[player] Mounting <Player>. User agent = ${typeof navigator === \"undefined\" ? \"server\" : navigator.userAgent}`,\n                tag: \"player\",\n                mountTime: Date.now()\n            });\n        }\n    }[\"PlayerFn.useState13\"]);\n    const timelineContextValue = (0,react__WEBPACK_IMPORTED_MODULE_2__.useMemo)({\n        \"PlayerFn.useMemo14[timelineContextValue]\": ()=>{\n            return {\n                frame,\n                playing,\n                rootId,\n                playbackRate: currentPlaybackRate,\n                imperativePlaying,\n                setPlaybackRate: ({\n                    \"PlayerFn.useMemo14[timelineContextValue]\": (rate)=>{\n                        setCurrentPlaybackRate(rate);\n                    }\n                })[\"PlayerFn.useMemo14[timelineContextValue]\"],\n                audioAndVideoTags\n            };\n        }\n    }[\"PlayerFn.useMemo14[timelineContextValue]\"], [\n        frame,\n        currentPlaybackRate,\n        playing,\n        rootId\n    ]);\n    const setTimelineContextValue = (0,react__WEBPACK_IMPORTED_MODULE_2__.useMemo)({\n        \"PlayerFn.useMemo14[setTimelineContextValue]\": ()=>{\n            return {\n                setFrame,\n                setPlaying\n            };\n        }\n    }[\"PlayerFn.useMemo14[setTimelineContextValue]\"], [\n        setFrame\n    ]);\n    if (false) {}\n    const actualInputProps = (0,react__WEBPACK_IMPORTED_MODULE_2__.useMemo)({\n        \"PlayerFn.useMemo14[actualInputProps]\": ()=>inputProps ?? {}\n    }[\"PlayerFn.useMemo14[actualInputProps]\"], [\n        inputProps\n    ]);\n    const browserMediaControlsBehavior = (0,react__WEBPACK_IMPORTED_MODULE_2__.useMemo)({\n        \"PlayerFn.useMemo14[browserMediaControlsBehavior]\": ()=>{\n            return passedBrowserMediaControlsBehavior ?? {\n                mode: \"prevent-media-session\"\n            };\n        }\n    }[\"PlayerFn.useMemo14[browserMediaControlsBehavior]\"], [\n        passedBrowserMediaControlsBehavior\n    ]);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.IsPlayerContextProvider, {\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(SharedPlayerContexts, {\n            timelineContext: timelineContextValue,\n            component,\n            compositionHeight,\n            compositionWidth,\n            durationInFrames,\n            fps,\n            numberOfSharedAudioTags,\n            initiallyMuted,\n            logLevel,\n            children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.Timeline.SetTimelineContext.Provider, {\n                value: setTimelineContextValue,\n                children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(PlayerEmitterProvider, {\n                    currentPlaybackRate,\n                    children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(PlayerUI_default, {\n                        ref: rootRef,\n                        posterFillMode,\n                        renderLoading,\n                        autoPlay: Boolean(autoPlay),\n                        loop: Boolean(loop),\n                        controls: Boolean(controls),\n                        errorFallback,\n                        style: style2,\n                        inputProps: actualInputProps,\n                        allowFullscreen: Boolean(allowFullscreen),\n                        moveToBeginningWhenEnded: Boolean(moveToBeginningWhenEnded),\n                        clickToPlay: typeof clickToPlay === \"boolean\" ? clickToPlay : Boolean(controls),\n                        showVolumeControls: Boolean(showVolumeControls),\n                        doubleClickToFullscreen: Boolean(doubleClickToFullscreen),\n                        spaceKeyToPlayOrPause: Boolean(spaceKeyToPlayOrPause),\n                        playbackRate: currentPlaybackRate,\n                        className: className2 ?? undefined,\n                        showPosterWhenUnplayed: Boolean(showPosterWhenUnplayed),\n                        showPosterWhenEnded: Boolean(showPosterWhenEnded),\n                        showPosterWhenPaused: Boolean(showPosterWhenPaused),\n                        showPosterWhenBuffering: Boolean(showPosterWhenBuffering),\n                        showPosterWhenBufferingAndPaused: Boolean(showPosterWhenBufferingAndPaused),\n                        renderPoster,\n                        inFrame: inFrame ?? null,\n                        outFrame: outFrame ?? null,\n                        initiallyShowControls: initiallyShowControls ?? true,\n                        renderFullscreen: renderFullscreenButton ?? null,\n                        renderPlayPauseButton: renderPlayPauseButton ?? null,\n                        renderMuteButton: renderMuteButton ?? null,\n                        renderVolumeSlider: renderVolumeSlider ?? null,\n                        alwaysShowControls,\n                        showPlaybackRateControl,\n                        bufferStateDelayInMilliseconds: bufferStateDelayInMilliseconds ?? 300,\n                        hideControlsWhenPointerDoesntMove,\n                        overflowVisible,\n                        browserMediaControlsBehavior,\n                        overrideInternalClassName: overrideInternalClassName ?? undefined,\n                        noSuspense: Boolean(noSuspense)\n                    })\n                })\n            })\n        })\n    });\n};\nvar forward = react__WEBPACK_IMPORTED_MODULE_2__.forwardRef;\nvar Player = forward(PlayerFn);\n// src/Thumbnail.tsx\n\n\n// src/ThumbnailUI.tsx\n\n\n// src/use-thumbnail.ts\n\nvar useThumbnail = ()=>{\n    const emitter = (0,react__WEBPACK_IMPORTED_MODULE_2__.useContext)(ThumbnailEmitterContext);\n    if (!emitter) {\n        throw new TypeError(\"Expected Player event emitter context\");\n    }\n    const returnValue = (0,react__WEBPACK_IMPORTED_MODULE_2__.useMemo)({\n        \"useThumbnail.useMemo15[returnValue]\": ()=>{\n            return {\n                emitter\n            };\n        }\n    }[\"useThumbnail.useMemo15[returnValue]\"], [\n        emitter\n    ]);\n    return returnValue;\n};\n// src/ThumbnailUI.tsx\n\nvar reactVersion2 = react__WEBPACK_IMPORTED_MODULE_2__.version.split(\".\")[0];\nif (reactVersion2 === \"0\") {\n    throw new Error(`Version ${reactVersion2} of \"react\" is not supported by Remotion`);\n}\nvar doesReactVersionSupportSuspense2 = parseInt(reactVersion2, 10) >= 18;\nvar ThumbnailUI = ({ style: style2, inputProps, errorFallback, renderLoading, className: className2, overflowVisible, noSuspense, overrideInternalClassName }, ref)=>{\n    const config = remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.useUnsafeVideoConfig();\n    const video = remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.useVideo();\n    const container = (0,react__WEBPACK_IMPORTED_MODULE_2__.useRef)(null);\n    const canvasSize = useElementSize(container, {\n        triggerOnWindowResize: false,\n        shouldApplyCssTransforms: false\n    });\n    const layout = (0,react__WEBPACK_IMPORTED_MODULE_2__.useMemo)({\n        \"ThumbnailUI.useMemo16[layout]\": ()=>{\n            if (!config || !canvasSize) {\n                return null;\n            }\n            return calculateCanvasTransformation({\n                canvasSize,\n                compositionHeight: config.height,\n                compositionWidth: config.width,\n                previewSize: \"auto\"\n            });\n        }\n    }[\"ThumbnailUI.useMemo16[layout]\"], [\n        canvasSize,\n        config\n    ]);\n    const scale = layout?.scale ?? 1;\n    const thumbnail = useThumbnail();\n    useBufferStateEmitter(thumbnail.emitter);\n    (0,react__WEBPACK_IMPORTED_MODULE_2__.useImperativeHandle)(ref, {\n        \"ThumbnailUI.useImperativeHandle3\": ()=>{\n            const methods = {\n                getContainerNode: {\n                    \"ThumbnailUI.useImperativeHandle3\": ()=>container.current\n                }[\"ThumbnailUI.useImperativeHandle3\"],\n                getScale: {\n                    \"ThumbnailUI.useImperativeHandle3\": ()=>scale\n                }[\"ThumbnailUI.useImperativeHandle3\"]\n            };\n            return Object.assign(thumbnail.emitter, methods);\n        }\n    }[\"ThumbnailUI.useImperativeHandle3\"], [\n        scale,\n        thumbnail.emitter\n    ]);\n    const VideoComponent = video ? video.component : null;\n    const outerStyle = (0,react__WEBPACK_IMPORTED_MODULE_2__.useMemo)({\n        \"ThumbnailUI.useMemo16[outerStyle]\": ()=>{\n            return calculateOuterStyle({\n                config,\n                style: style2,\n                canvasSize,\n                overflowVisible,\n                layout\n            });\n        }\n    }[\"ThumbnailUI.useMemo16[outerStyle]\"], [\n        canvasSize,\n        config,\n        layout,\n        overflowVisible,\n        style2\n    ]);\n    const outer = (0,react__WEBPACK_IMPORTED_MODULE_2__.useMemo)({\n        \"ThumbnailUI.useMemo16[outer]\": ()=>{\n            return calculateOuter({\n                config,\n                layout,\n                scale,\n                overflowVisible\n            });\n        }\n    }[\"ThumbnailUI.useMemo16[outer]\"], [\n        config,\n        layout,\n        overflowVisible,\n        scale\n    ]);\n    const containerStyle3 = (0,react__WEBPACK_IMPORTED_MODULE_2__.useMemo)({\n        \"ThumbnailUI.useMemo16[containerStyle3]\": ()=>{\n            return calculateContainerStyle({\n                canvasSize,\n                config,\n                layout,\n                scale,\n                overflowVisible\n            });\n        }\n    }[\"ThumbnailUI.useMemo16[containerStyle3]\"], [\n        canvasSize,\n        config,\n        layout,\n        overflowVisible,\n        scale\n    ]);\n    const onError = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)({\n        \"ThumbnailUI.useCallback13[onError]\": (error)=>{\n            thumbnail.emitter.dispatchError(error);\n        }\n    }[\"ThumbnailUI.useCallback13[onError]\"], [\n        thumbnail.emitter\n    ]);\n    const loadingMarkup = (0,react__WEBPACK_IMPORTED_MODULE_2__.useMemo)({\n        \"ThumbnailUI.useMemo16[loadingMarkup]\": ()=>{\n            return renderLoading ? renderLoading({\n                height: outerStyle.height,\n                width: outerStyle.width,\n                isBuffering: false\n            }) : null;\n        }\n    }[\"ThumbnailUI.useMemo16[loadingMarkup]\"], [\n        outerStyle.height,\n        outerStyle.width,\n        renderLoading\n    ]);\n    const currentScaleContext = (0,react__WEBPACK_IMPORTED_MODULE_2__.useMemo)({\n        \"ThumbnailUI.useMemo16[currentScaleContext]\": ()=>{\n            return {\n                type: \"scale\",\n                scale\n            };\n        }\n    }[\"ThumbnailUI.useMemo16[currentScaleContext]\"], [\n        scale\n    ]);\n    if (!config) {\n        return null;\n    }\n    const content = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n        style: outer,\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n            style: containerStyle3,\n            className: playerCssClassname(overrideInternalClassName),\n            children: VideoComponent ? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(ErrorBoundary, {\n                onError,\n                errorFallback,\n                children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.CurrentScaleContext.Provider, {\n                    value: currentScaleContext,\n                    children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(VideoComponent, {\n                        ...video?.props ?? {},\n                        ...inputProps ?? {}\n                    })\n                })\n            }) : null\n        })\n    });\n    if (noSuspense || IS_NODE && !doesReactVersionSupportSuspense2) {\n        return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n            ref: container,\n            style: outerStyle,\n            className: className2,\n            children: content\n        });\n    }\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n        ref: container,\n        style: outerStyle,\n        className: className2,\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(react__WEBPACK_IMPORTED_MODULE_2__.Suspense, {\n            fallback: loadingMarkup,\n            children: content\n        })\n    });\n};\nvar ThumbnailUI_default = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_2__.forwardRef)(ThumbnailUI);\n// src/Thumbnail.tsx\n\nvar ThumbnailFn = ({ frameToDisplay, style: style2, inputProps, compositionHeight, compositionWidth, durationInFrames, fps, className: className2, errorFallback = ()=>\"⚠️\", renderLoading, overflowVisible = false, overrideInternalClassName, logLevel = \"info\", noSuspense, ...componentProps }, ref)=>{\n    if (false) {}\n    const [thumbnailId] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)({\n        \"ThumbnailFn.useState14\": ()=>String((0,remotion__WEBPACK_IMPORTED_MODULE_1__.random)(null))\n    }[\"ThumbnailFn.useState14\"]);\n    const rootRef = (0,react__WEBPACK_IMPORTED_MODULE_2__.useRef)(null);\n    const timelineState = (0,react__WEBPACK_IMPORTED_MODULE_2__.useMemo)({\n        \"ThumbnailFn.useMemo17[timelineState]\": ()=>{\n            const value = {\n                playing: false,\n                frame: {\n                    [PLAYER_COMP_ID]: frameToDisplay\n                },\n                rootId: thumbnailId,\n                imperativePlaying: {\n                    current: false\n                },\n                playbackRate: 1,\n                setPlaybackRate: {\n                    \"ThumbnailFn.useMemo17[timelineState]\": ()=>{\n                        throw new Error(\"thumbnail\");\n                    }\n                }[\"ThumbnailFn.useMemo17[timelineState]\"],\n                audioAndVideoTags: {\n                    current: []\n                }\n            };\n            return value;\n        }\n    }[\"ThumbnailFn.useMemo17[timelineState]\"], [\n        frameToDisplay,\n        thumbnailId\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_2__.useImperativeHandle)(ref, {\n        \"ThumbnailFn.useImperativeHandle4\": ()=>rootRef.current\n    }[\"ThumbnailFn.useImperativeHandle4\"], []);\n    const Component = remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.useLazyComponent({\n        compProps: componentProps,\n        componentName: \"Thumbnail\",\n        noSuspense: Boolean(noSuspense)\n    });\n    const [emitter] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)({\n        \"ThumbnailFn.useState14\": ()=>new ThumbnailEmitter\n    }[\"ThumbnailFn.useState14\"]);\n    const passedInputProps = (0,react__WEBPACK_IMPORTED_MODULE_2__.useMemo)({\n        \"ThumbnailFn.useMemo17[passedInputProps]\": ()=>{\n            return inputProps ?? {};\n        }\n    }[\"ThumbnailFn.useMemo17[passedInputProps]\"], [\n        inputProps\n    ]);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(remotion__WEBPACK_IMPORTED_MODULE_1__.Internals.IsPlayerContextProvider, {\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(SharedPlayerContexts, {\n            timelineContext: timelineState,\n            component: Component,\n            compositionHeight,\n            compositionWidth,\n            durationInFrames,\n            fps,\n            numberOfSharedAudioTags: 0,\n            initiallyMuted: true,\n            logLevel,\n            children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(ThumbnailEmitterContext.Provider, {\n                value: emitter,\n                children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(ThumbnailUI_default, {\n                    ref: rootRef,\n                    className: className2,\n                    errorFallback,\n                    inputProps: passedInputProps,\n                    renderLoading,\n                    style: style2,\n                    overflowVisible,\n                    overrideInternalClassName,\n                    noSuspense: Boolean(noSuspense)\n                })\n            })\n        })\n    });\n};\nvar forward2 = react__WEBPACK_IMPORTED_MODULE_2__.forwardRef;\nvar Thumbnail = forward2(ThumbnailFn);\n// src/index.ts\nvar PlayerInternals = {\n    PlayerEventEmitterContext,\n    PlayerEmitter,\n    usePlayer,\n    usePlayback,\n    useElementSize,\n    calculateCanvasTransformation,\n    useHoverState,\n    updateAllElementsSizes,\n    PlayerEmitterProvider,\n    BufferingIndicator,\n    useFrameImperative\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/@remotion/player/dist/esm/index.mjs\n");

/***/ })

};
;