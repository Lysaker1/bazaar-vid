/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/winston-daily-rotate-file";
exports.ids = ["vendor-chunks/winston-daily-rotate-file"];
exports.modules = {

/***/ "(rsc)/../../node_modules/winston-daily-rotate-file/daily-rotate-file.js":
/*!*************************************************************************!*\
  !*** ../../node_modules/winston-daily-rotate-file/daily-rotate-file.js ***!
  \*************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const fs = __webpack_require__(/*! fs */ \"fs\");\nconst os = __webpack_require__(/*! os */ \"os\");\nconst path = __webpack_require__(/*! path */ \"path\");\nconst util = __webpack_require__(/*! util */ \"util\");\nconst zlib = __webpack_require__(/*! zlib */ \"zlib\");\nconst hash = __webpack_require__(/*! object-hash */ \"(rsc)/../../node_modules/object-hash/index.js\");\nconst MESSAGE = (__webpack_require__(/*! triple-beam */ \"(rsc)/../../node_modules/triple-beam/index.js\").MESSAGE);\nconst PassThrough = (__webpack_require__(/*! stream */ \"stream\").PassThrough);\nconst Transport = __webpack_require__(/*! winston-transport */ \"(rsc)/../../node_modules/winston-transport/index.js\");\n\nconst loggerDefaults = {\n    json: false,\n    colorize: false,\n    eol: os.EOL,\n    logstash: null,\n    prettyPrint: false,\n    label: null,\n    stringify: false,\n    depth: null,\n    showLevel: true,\n    timestamp: () => {\n        return new Date().toISOString();\n    }\n};\n\nconst DailyRotateFile = function(options) {\n    options = options || {};\n    Transport.call(this, options);\n\n    function throwIf(target /* , illegal... */) {\n        Array.prototype.slice.call(arguments, 1).forEach((name) => {\n            if (options[name]) {\n                throw new Error(\"Cannot set \" + name + \" and \" + target + \" together\");\n            }\n        });\n    }\n\n    function getMaxSize(size) {\n        if (size && typeof size === \"string\") {\n            if (size.toLowerCase().match(/^((?:0\\.)?\\d+)([kmg])$/)) {\n                return size;\n            }\n        } else if (size && Number.isInteger(size)) {\n            const sizeK = Math.round(size / 1024);\n            return sizeK === 0 ? \"1k\" : sizeK + \"k\";\n        }\n\n        return null;\n    }\n\n    function isValidFileName(filename) {\n        // eslint-disable-next-line no-control-regex\n        return !/[\"<>|:*?\\\\/\\x00\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x0a\\x0b\\x0c\\x0d\\x0e\\x0f\\x10\\x11\\x12\\x13\\x14\\x15\\x16\\x17\\x18\\x19\\x1a\\x1b\\x1c\\x1d\\x1e\\x1f]/g.test(\n            filename\n        );\n    }\n\n    function isValidDirName(dirname) {\n        // eslint-disable-next-line no-control-regex\n        return !/[\"<>|\\x00\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x0a\\x0b\\x0c\\x0d\\x0e\\x0f\\x10\\x11\\x12\\x13\\x14\\x15\\x16\\x17\\x18\\x19\\x1a\\x1b\\x1c\\x1d\\x1e\\x1f]/g.test(\n            dirname\n        );\n    }\n\n    this.options = Object.assign({}, loggerDefaults, options);\n\n    if (options.stream) {\n        throwIf(\"stream\", \"filename\", \"maxsize\");\n        this.logStream = new PassThrough();\n        this.logStream.pipe(options.stream);\n    } else {\n        this.filename = options.filename\n            ? path.basename(options.filename)\n            : \"winston.log\";\n        this.dirname = options.dirname || path.dirname(options.filename);\n\n        if (!isValidFileName(this.filename) || !isValidDirName(this.dirname)) {\n            throw new Error(\"Your path or filename contain an invalid character.\");\n        }\n\n        this.logStream = (__webpack_require__(/*! file-stream-rotator */ \"(rsc)/../../node_modules/file-stream-rotator/FileStreamRotator.js\").getStream)({\n            filename: path.join(this.dirname, this.filename),\n            frequency: options.frequency ? options.frequency : \"custom\",\n            date_format: options.datePattern ? options.datePattern : \"YYYY-MM-DD\",\n            verbose: false,\n            size: getMaxSize(options.maxSize),\n            max_logs: options.maxFiles,\n            end_stream: true,\n            audit_file: options.auditFile\n                ? options.auditFile\n                : path.join(this.dirname, \".\" + hash(options) + \"-audit.json\"),\n            file_options: options.options ? options.options : { flags: \"a\" },\n            utc: options.utc ? options.utc : false,\n            extension: options.extension ? options.extension : \"\",\n            create_symlink: options.createSymlink ? options.createSymlink : false,\n            symlink_name: options.symlinkName ? options.symlinkName : \"current.log\",\n            watch_log: options.watchLog ? options.watchLog : false,\n            audit_hash_type: options.auditHashType ? options.auditHashType : \"sha256\"\n        });\n\n        this.logStream.on(\"new\", (newFile) => {\n            this.emit(\"new\", newFile);\n        });\n\n        this.logStream.on(\"rotate\", (oldFile, newFile) => {\n            this.emit(\"rotate\", oldFile, newFile);\n        });\n\n        this.logStream.on(\"logRemoved\", (params) => {\n            if (options.zippedArchive) {\n                const gzName = params.name + \".gz\";\n                try {\n                    fs.unlinkSync(gzName);\n                } catch (err) {\n                    // ENOENT is okay, means file doesn't exist, other errors prevent deletion, so report it\n                    if (err.code !== \"ENOENT\") {\n                        err.message = `Error occurred while removing ${gzName}: ${err.message}`;\n                        this.emit(\"error\", err);\n                        return;\n                    }\n                }\n                this.emit(\"logRemoved\", gzName);\n                return;\n            }\n            this.emit(\"logRemoved\", params.name);\n        });\n\n        if (options.zippedArchive) {\n            this.logStream.on(\"rotate\", (oldFile) => {\n                try {\n                    if (!fs.existsSync(oldFile)) {\n                        return;\n                    }\n                } catch (err) {\n                    err.message = `Error occurred while checking existence of ${oldFile}: ${err.message}`;\n                    this.emit(\"error\", err);\n                    return;\n                }\n                try {\n                    if (fs.existsSync(`${oldFile}.gz`)) {\n                        return;\n                    }\n                } catch (err) {\n                    err.message = `Error occurred while checking existence of ${oldFile}.gz: ${err.message}`;\n                    this.emit(\"error\", err);\n                    return;\n                }\n\n                const gzip = zlib.createGzip();\n                const inp = fs.createReadStream(oldFile);\n                inp.on(\"error\", (err) => {\n                    err.message = `Error occurred while reading ${oldFile}: ${err.message}`;\n                    this.emit(\"error\", err);\n                });\n                const out = fs.createWriteStream(oldFile + \".gz\");\n                out.on(\"error\", (err) => {\n                    err.message = `Error occurred while writing ${oldFile}.gz: ${err.message}`;\n                    this.emit(\"error\", err);\n                });\n                inp\n                    .pipe(gzip)\n                    .pipe(out)\n                    .on(\"finish\", () => {\n                        try {\n                            fs.unlinkSync(oldFile);\n                        } catch (err) {\n                            if (err.code !== \"ENOENT\") {\n                                err.message = `Error occurred while removing ${oldFile}: ${err.message}`;\n                                this.emit(\"error\", err);\n                                return;\n                            }\n                        }\n                        this.emit(\"archive\", oldFile + \".gz\");\n                    });\n            });\n        }\n\n        if (options.watchLog) {\n            this.logStream.on(\"addWatcher\", (newFile) => {\n                this.emit(\"addWatcher\", newFile);\n            });\n        }\n    }\n};\n\nmodule.exports = DailyRotateFile;\n\nutil.inherits(DailyRotateFile, Transport);\n\nDailyRotateFile.prototype.name = \"dailyRotateFile\";\n\nconst noop = function() {};\nDailyRotateFile.prototype.log = function (info, callback) {\n    callback = callback || noop;\n\n    this.logStream.write(info[MESSAGE] + this.options.eol);\n    this.emit(\"logged\", info);\n    callback(null, true);\n};\n\nDailyRotateFile.prototype.close = function () {\n    if (this.logStream) {\n        this.logStream.end(() => {\n            this.emit(\"finish\");\n        });\n    }\n};\n\nDailyRotateFile.prototype.query = function (options, callback) {\n    if (typeof options === \"function\") {\n        callback = options;\n        options = {};\n    }\n\n    if (!this.options.json) {\n        throw new Error(\n            \"query() may not be used without the json option being set to true\"\n        );\n    }\n\n    if (!this.filename) {\n        throw new Error(\"query() may not be used when initializing with a stream\");\n    }\n\n    let results = [];\n    options = options || {};\n\n    // limit\n    options.rows = options.rows || options.limit || 10;\n\n    // starting row offset\n    options.start = options.start || 0;\n\n    // now\n    options.until = options.until || new Date();\n    if (typeof options.until !== \"object\") {\n        options.until = new Date(options.until);\n    }\n\n    // now - 24\n    options.from = options.from || options.until - 24 * 60 * 60 * 1000;\n    if (typeof options.from !== \"object\") {\n        options.from = new Date(options.from);\n    }\n\n    // 'asc' or 'desc'\n    options.order = options.order || \"desc\";\n\n    const logFiles = (() => {\n        const fileRegex = new RegExp(this.filename.replace(\"%DATE%\", \".*\"), \"i\");\n        return fs.readdirSync(this.dirname).filter((file) => path.basename(file).match(fileRegex));\n    })();\n\n    if (logFiles.length === 0 && callback) {\n        callback(null, results);\n    }\n\n    const processLogFile = (file) => {\n        if (!file) {\n            return;\n        }\n\n        const logFile = path.join(this.dirname, file);\n        let buff = \"\";\n\n        let stream;\n\n        if (file.endsWith(\".gz\")) {\n            stream = new PassThrough();\n            const inp = fs.createReadStream(logFile);\n            inp.on(\"error\",  (err) => {\n                err.message = `Error occurred while reading ${logFile}: ${err.message}`;\n                stream.emit(\"error\", err);\n            });\n            inp.pipe(zlib.createGunzip()).pipe(stream);\n        } else {\n            stream = fs.createReadStream(logFile, {\n                encoding: \"utf8\",\n            });\n        }\n\n        stream.on(\"error\",  (err) => {\n            if (stream.readable) {\n                stream.destroy();\n            }\n\n            if (!callback) {\n                return;\n            }\n\n            return err.code === \"ENOENT\" ? callback(null, results) : callback(err);\n        });\n\n        stream.on(\"data\", (data) => {\n            data = (buff + data).split(/\\n+/);\n            const l = data.length - 1;\n\n            for (let i = 0; i < l; i++) {\n                add(data[i]);\n            }\n\n            buff = data[l];\n        });\n\n        stream.on(\"end\",  () => {\n            if (buff) {\n                add(buff, true);\n            }\n\n            if (logFiles.length) {\n                processLogFile(logFiles.shift());\n            } else if (callback) {\n                results.sort( (a, b) => {\n                    const d1 = new Date(a.timestamp).getTime();\n                    const d2 = new Date(b.timestamp).getTime();\n\n                    return d1 > d2 ? 1 : d1 < d2 ? -1 : 0;\n                });\n\n                if (options.order === \"desc\") {\n                    results = results.reverse();\n                }\n\n                const start = options.start || 0;\n                const limit = options.limit || results.length;\n\n                results = results.slice(start, start + limit);\n\n                if (options.fields) {\n                    results = results.map( (log) => {\n                        const obj = {};\n                        options.fields.forEach( (key) => {\n                            obj[key] = log[key];\n                        });\n                        return obj;\n                    });\n                }\n\n                callback(null, results);\n            }\n        });\n\n        function add(buff, attempt) {\n            try {\n                const log = JSON.parse(buff);\n                if (!log || typeof log !== \"object\") {\n                    return;\n                }\n\n                const time = new Date(log.timestamp);\n                if (\n                    (options.from && time < options.from) ||\n                    (options.until && time > options.until) ||\n                    (options.level && options.level !== log.level)\n                ) {\n                    return;\n                }\n\n                results.push(log);\n            } catch (e) {\n                if (!attempt) {\n                    stream.emit(\"error\", e);\n                }\n            }\n        }\n    };\n    processLogFile(logFiles.shift());\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/winston-daily-rotate-file/daily-rotate-file.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/winston-daily-rotate-file/index.js":
/*!*************************************************************!*\
  !*** ../../node_modules/winston-daily-rotate-file/index.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const winston = __webpack_require__(/*! winston */ \"(rsc)/../../node_modules/winston/lib/winston.js\");\nconst DailyRotateFile = __webpack_require__(/*! ./daily-rotate-file */ \"(rsc)/../../node_modules/winston-daily-rotate-file/daily-rotate-file.js\");\n\nwinston.transports.DailyRotateFile = DailyRotateFile;\nmodule.exports = DailyRotateFile;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzL3dpbnN0b24tZGFpbHktcm90YXRlLWZpbGUvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUEsZ0JBQWdCLG1CQUFPLENBQUMsZ0VBQVM7QUFDakMsd0JBQXdCLG1CQUFPLENBQUMsb0dBQXFCOztBQUVyRDtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvbWFya3VzaG9nbmUvRG9jdW1lbnRzL0FQUFMvYmF6YWFyLXZpZC9iYXphYXItdmlkL25vZGVfbW9kdWxlcy93aW5zdG9uLWRhaWx5LXJvdGF0ZS1maWxlL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHdpbnN0b24gPSByZXF1aXJlKFwid2luc3RvblwiKTtcbmNvbnN0IERhaWx5Um90YXRlRmlsZSA9IHJlcXVpcmUoXCIuL2RhaWx5LXJvdGF0ZS1maWxlXCIpO1xuXG53aW5zdG9uLnRyYW5zcG9ydHMuRGFpbHlSb3RhdGVGaWxlID0gRGFpbHlSb3RhdGVGaWxlO1xubW9kdWxlLmV4cG9ydHMgPSBEYWlseVJvdGF0ZUZpbGU7XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/winston-daily-rotate-file/index.js\n");

/***/ })

};
;