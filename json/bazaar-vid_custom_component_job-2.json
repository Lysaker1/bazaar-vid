[{"id":"cd855900-da88-49ac-a739-32cdc3828740","projectId":"00ca3ed0-2787-4532-bf3d-0bcca1f66010","effect":"WizardStrikesAScene","tsxCode":"\"use client\";\n\n// src/remotion/components/scenes/WizardStrikesAScene.tsx\nimport React from 'react';\nimport {\n\tAbsoluteFill,\n\tuseCurrentFrame,\n\tuseVideoConfig,\n\tinterpolate,\n\tEasing,\n\tImg,\n} from 'remotion';\n// import { AnimationDesignBrief } from '~/lib/schemas/animationDesignBrief.schema';\n\ninterface WizardStrikesASceneProps {\n\tbrief: AnimationDesignBrief;\n}\n\nexport const WizardStrikesAScene: React.FC<WizardStrikesASceneProps> = ({ brief }) => {\n\tconst frame = useCurrentFrame();\n\tconst { fps, width, height, durationInFrames } = useVideoConfig();\n\n\t// Destructure brief data\n\tconst { elements, colorPalette } = brief;\n\n\t// Extract image source\n\tconst imageElement = elements.find(\n\t\t(e) => e.id === '88dd9dc0-3cee-497b-bc50-d9592b6d55df'\n\t);\n\tconst imageSrc = imageElement?.content as string;\n\n\t// Element 2 animations (wizard image)\n\tconst fadeIn2 = interpolate(\n\t\tframe,\n\t\t[0, 30],\n\t\t[0, 1],\n\t\t{ extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }\n\t);\n\tconst fadeOut2 = interpolate(\n\t\tframe,\n\t\t[0, 40],\n\t\t[1, 0],\n\t\t{ extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInCubic }\n\t);\n\tconst opacity2 = fadeIn2 * fadeOut2;\n\tconst scale2 = interpolate(\n\t\tframe,\n\t\t[0, 30],\n\t\t[0.8, 1],\n\t\t{ extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutBack }\n\t);\n\n\t// Element 3 animations (green aura shape)\n\tconst fadeIn3 = interpolate(\n\t\tframe,\n\t\t[0, 20],\n\t\t[0, 0.5],\n\t\t{ extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }\n\t);\n\tconst fadeOut3 = interpolate(\n\t\tframe,\n\t\t[0, 40],\n\t\t[0.5, 0],\n\t\t{ extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInQuad }\n\t);\n\tconst opacity3 = fadeIn3 * fadeOut3;\n\tconst scale3 = interpolate(\n\t\tframe,\n\t\t[0, 60],\n\t\t[1, 1.1],\n\t\t{ extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInOutSine }\n\t);\n\n\t// Element 4 animations (Victory Achieved! text)\n\tconst slideY = interpolate(\n\t\tframe,\n\t\t[0, 30],\n\t\t[350, 300],\n\t\t{ extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutQuint }\n\t);\n\tconst fadeIn4 = interpolate(\n\t\tframe,\n\t\t[0, 30],\n\t\t[0, 1],\n\t\t{ extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutQuint }\n\t);\n\tconst fadeOut4 = interpolate(\n\t\tframe,\n\t\t[0, 40],\n\t\t[1, 0],\n\t\t{ extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInCubic }\n\t);\n\tconst opacity4 = fadeIn4 * fadeOut4;\n\n\t// Element 5 animations (fade to black overlay)\n\tconst opacity5 = interpolate(\n\t\tframe,\n\t\t[0, 40],\n\t\t[0, 1],\n\t\t{ extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInOutQuad }\n\t);\n\n\treturn (\n\t\t<AbsoluteFill style={{ backgroundColor: colorPalette?.background || '#1B1B3A' }}>\n\t\t\t{/* Static background shape */}\n\t\t\t<div\n\t\t\t\tstyle={{\n\t\t\t\t\tposition: 'absolute',\n\t\t\t\t\tleft: 0,\n\t\t\t\t\ttop: 0,\n\t\t\t\t\twidth,\n\t\t\t\t\theight,\n\t\t\t\t\tbackgroundColor: '#1B1B3A',\n\t\t\t\t\topacity: 1,\n\t\t\t\t\ttransform: 'rotate(0deg) scale(1)',\n\t\t\t\t}}\n\t\t\t/>\n\n\t\t\t{/* Green aura shape behind wizard */}\n\t\t\t<div\n\t\t\t\tstyle={{\n\t\t\t\t\tposition: 'absolute',\n\t\t\t\t\tleft: 960,\n\t\t\t\t\ttop: 650,\n\t\t\t\t\twidth: 450,\n\t\t\t\t\theight: 650,\n\t\t\t\t\tbackgroundColor: '#70E000',\n\t\t\t\t\topacity: opacity3,\n\t\t\t\t\ttransform: `rotate(0deg) scale(${scale3})`,\n\t\t\t\t}}\n\t\t\t/>\n\n\t\t\t{/* Wizard image enters, scales up, then fades out */}\n\t\t\t<Img\n\t\t\t\tsrc={imageSrc}\n\t\t\t\tstyle={{\n\t\t\t\t\tposition: 'absolute',\n\t\t\t\t\tleft: 960,\n\t\t\t\t\ttop: 650,\n\t\t\t\t\twidth: 400,\n\t\t\t\t\theight: 600,\n\t\t\t\t\topacity: opacity2,\n\t\t\t\t\ttransform: `rotate(0deg) scale(${scale2})`,\n\t\t\t\t}}\n\t\t\t/>\n\n\t\t\t{/* Victory text slides in and fades out */}\n\t\t\t<div\n\t\t\t\tstyle={{\n\t\t\t\t\tposition: 'absolute',\n\t\t\t\t\tleft: 960,\n\t\t\t\t\ttop: slideY,\n\t\t\t\t\twidth: 800,\n\t\t\t\t\theight: 100,\n\t\t\t\t\tcolor: '#FFFFFF',\n\t\t\t\t\tfontFamily: 'Cinzel Decorative',\n\t\t\t\t\tfontSize: 72,\n\t\t\t\t\topacity: opacity4,\n\t\t\t\t\ttransform: 'rotate(0deg) scale(1)',\n\t\t\t\t\tdisplay: 'flex',\n\t\t\t\t\tjustifyContent: 'center',\n\t\t\t\t\talignItems: 'center',\n\t\t\t\t\ttextAlign: 'center',\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\tVictory Achieved!\n\t\t\t</div>\n\n\t\t\t{/* Fade to black at end */}\n\t\t\t<div\n\t\t\t\tstyle={{\n\t\t\t\t\tposition: 'absolute',\n\t\t\t\t\tleft: 0,\n\t\t\t\t\ttop: 0,\n\t\t\t\t\twidth,\n\t\t\t\t\theight,\n\t\t\t\t\tbackgroundColor: '#000000',\n\t\t\t\t\topacity: opacity5,\n\t\t\t\t}}\n\t\t\t/>\n\t\t</AbsoluteFill>\n\t);\n};","status":"building","outputUrl":null,"errorMessage":"TSX code is missing for this job","retryCount":1,"createdAt":"2025-05-10 03:54:51.51926+00","updatedAt":"2025-05-10 03:55:25.327+00","metadata":{"fps":30,"width":1920,"height":1080,"prompt":"### ROLE: You are an Expert Remotion Developer and Senior React Engineer.\n### TASK: Create a production-quality Remotion React functional component in TypeScript.\n### COMPONENT NAME: 'WizardStrikesAScene'\n### OBJECTIVE: Generate a component that precisely implements the provided AnimationDesignBrief with professional animations and visual effects.\n### VIDEO CONFIG: Target video is 1920x1080px, 120 frames total duration, at 30 FPS.\n### MANDATORY REQUIREMENTS:\n- The FIRST line MUST be: // src/remotion/components/scenes/WizardStrikesAScene.tsx\n- The component MUST be a functional component using TypeScript (.tsx).\n- ALWAYS use the Remotion hooks: useCurrentFrame() and useVideoConfig() for timing and dimensions.\n- Component MUST accept props: { brief: AnimationDesignBrief } (assume this type is imported).\n- Utilize appropriate Remotion animation functions based on each element's needs:\n  * interpolate() - For smooth linear or eased transitions between values\n  * spring() - For physics-based, bouncy animations\n  * Easing module - For specifying animation curves (easeInOut, bezier, etc.)\n- Use Remotion timing components when needed:\n  * <Sequence from={startFrame} durationInFrames={duration}> - For sequential animations\n  * <Series> - For orchestrating complex animation sequences\n  * <Loop> - For repeating animations\n- Apply absolute positioning based on initialLayout coordinates.\n\n### BOILERPLATE STRUCTURE (Follow this pattern):\n```typescript\n// src/remotion/components/scenes/WizardStrikesAScene.tsx\nimport { AbsoluteFill, useCurrentFrame, useVideoConfig, interpolate, spring, Sequence, Easing, Img, Audio } from 'remotion';\nimport React from 'react';\n// import { AnimationDesignBrief } from '~/lib/schemas/animationDesignBrief.schema';\n\nexport const WizardStrikesAScene: React.FC<{ brief: AnimationDesignBrief }> = ({ brief }) => {\n  const frame = useCurrentFrame();\n  const { fps, width, height, durationInFrames } = useVideoConfig();\n\n  // Extract key brief properties\n  const { elements, colorPalette, typography, overallStyle } = brief;\n\n  // Define background color from brief\n  const backgroundColor = colorPalette?.background || 'transparent';\n\n  return (\n    <AbsoluteFill style={{ backgroundColor }}>\n      {/* Render each element with its animations */}\n    </AbsoluteFill>\n  );\n};\n```\n\n--- Scene Overview ---\nScene Name: WizardStrikesAScene\nPurpose: Wizard strikes a final triumphant pose as the scene fades out to black\nOverall Style: Fantasy epic with glowing magic and dramatic lighting\n\n--- Color Palette ---\n- Primary Color: #6E44FF\n- Secondary Color: #FFD700\n- Accent Color: #70E000\n- Background Color: #1B1B3A\n- Text Primary Color: #FFFFFF\n- Text Secondary Color: #CCCCCC\n\n--- Typography ---\n- Default Font Family: Cinzel\n- Heading1 Style:\n  - Font Family: Cinzel Decorative\n  - Font Size: 72\n\n### ELEMENT-BY-ELEMENT IMPLEMENTATION GUIDE:\nEach element from the AnimationDesignBrief must be translated into React/Remotion code following these guidelines:\n\n#### ELEMENT TYPE TRANSLATION:\n- 'text' → Use a <div> or <h1>-<h6> with appropriate styling\n- 'image' → Use Remotion's <Img src={content} /> component\n- 'video' → Use Remotion's <Video src={content} /> component\n- 'shape' → Use appropriate shape elements (div with border-radius for circles/rounded rectangles, SVG for complex shapes)\n- 'container' → Use a positioned <div> that may contain child elements\n\n#### INITIAL LAYOUT TRANSLATION:\nAll initialLayout properties MUST be translated to React inline styles:\n- 'x', 'y' → style={{ position: 'absolute', left: x, top: y }}\n- 'width', 'height' → style={{ width, height }}\n- 'opacity' → style={{ opacity }}\n- 'rotation' → style={{ transform: `rotate(${rotation}deg)` }}\n- 'scale' → style={{ transform: `scale(${scale})` }}\n- 'zIndex' → style={{ zIndex }}\n- Multiple transforms should be combined: transform: `rotate(${rotation}deg) scale(${scale})`\n\n#### ANIMATION IMPLEMENTATION:\nFor each animation, use this approach:\n1. Calculate the active animation frames based on delayInFrames and durationInFrames:\n   const animStartFrame = animation.delayInFrames || 0;\n   const animEndFrame = animStartFrame + (animation.durationInFrames || 30);\n2. Apply the appropriate Remotion animation function:\n   - For 'spring' animations or when remotionFunctionHint is 'spring':\n     const animatedValue = spring({\n       frame: frame - animStartFrame,\n       fps,\n       from: property.from,\n       to: property.to,\n       config: property.springConfig || { damping: 10, mass: 1, stiffness: 100 }\n     });\n   - For most other animations, use interpolate:\n     const animatedValue = interpolate(\n       frame,\n       [animStartFrame, animEndFrame],\n       [property.from, property.to],\n       {\n         extrapolateLeft: 'clamp',\n         extrapolateRight: 'clamp',\n         easing: determineEasing(animation.easing)\n       }\n     );\n3. Apply animated values to style properties:\n   - For transform properties (e.g., 'transform.translateX', 'transform.scale'):\n     Extract the specific transform type and apply with appropriate units.\n   - For standard CSS properties (e.g., 'opacity'):\n     Apply directly to the style object.\n   - Example: style={{ opacity: animatedOpacity, transform: `translateX(${animatedX}px) scale(${animatedScale})` }}\n4. For sequence-based timing (startAfter, startWith):\n   - Wrap elements in <Sequence> components with appropriate 'from' and 'durationInFrames' props\n   - Use 'from' attribute based on animation.delayInFrames\n   - Example: <Sequence from={30} durationInFrames={60}>...</Sequence>\n\n### SPECIFIC ELEMENTS TO IMPLEMENT:\n\n#### ELEMENT 1: f8bb4bc2-8b55-47c4-9a89-e9c29e502556 (shape)\n- Initial Layout (CSS equivalent):\n  * x: 0px\n  * y: 0px\n  * width: 1920px\n  * height: 1080px\n  * opacity: 1\n  * rotation: 0deg\n  * scale: 1\n  * backgroundColor: #1B1B3A\n- React style equivalent: style={{ position: 'absolute', left: 0px, top: 0px, width: 1920px, height: 1080px, opacity: 1, transform: 'rotate(0deg) scale(1)', backgroundColor: '#1B1B3A' }}\n\n#### ELEMENT 2: 88dd9dc0-3cee-497b-bc50-d9592b6d55df (image)\n- Initial Layout (CSS equivalent):\n  * x: 960px\n  * y: 650px\n  * width: 400px\n  * height: 600px\n  * opacity: 0\n  * rotation: 0deg\n  * scale: 0.8\n- React style equivalent: style={{ position: 'absolute', left: 960px, top: 650px, width: 400px, height: 600px, opacity: 0, transform: 'rotate(0deg) scale(0.8)' }}\n\n- Animations for 88dd9dc0-3cee-497b-bc50-d9592b6d55df:\n  * Animation 1: fadeIn\n    - Start frame: 0\n    - Duration: 30 frames\n    - End frame: 30\n    - Easing: easeOutCubic → Implement as: Easing.easeOutCubic\n    - Properties to animate:\n      • opacity: from 0 to 1\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 30], \n          [0, 1], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }\n        );`\n  * Animation 2: customProperty\n    - Start frame: 0\n    - Duration: 30 frames\n    - End frame: 30\n    - Easing: easeOutBack → Implement as: Easing.easeOutBack\n    - Properties to animate:\n      • scale: from 0.8 to 1\n        Implementation: `const scaleValue = interpolate(\n          frame, \n          [0, 30], \n          [0.8, 1], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutBack }\n        );`\n  * Animation 3: fadeOut\n    - Start frame: 0\n    - Duration: 40 frames\n    - End frame: 40\n    - Easing: easeInCubic → Implement as: Easing.easeInCubic\n    - Properties to animate:\n      • opacity: from 1 to 0\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 40], \n          [1, 0], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInCubic }\n        );`\n\n#### ELEMENT 3: fc19e24a-fc7c-4f92-8d05-b845f6cbe95b (shape)\n- Initial Layout (CSS equivalent):\n  * x: 960px\n  * y: 650px\n  * width: 450px\n  * height: 650px\n  * opacity: 0\n  * rotation: 0deg\n  * scale: 1\n  * backgroundColor: #70E000\n- React style equivalent: style={{ position: 'absolute', left: 960px, top: 650px, width: 450px, height: 650px, opacity: 0, transform: 'rotate(0deg) scale(1)', backgroundColor: '#70E000' }}\n\n- Animations for fc19e24a-fc7c-4f92-8d05-b845f6cbe95b:\n  * Animation 1: fadeIn\n    - Start frame: 0\n    - Duration: 20 frames\n    - End frame: 20\n    - Easing: easeOutCubic → Implement as: Easing.easeOutCubic\n    - Properties to animate:\n      • opacity: from 0 to 0.5\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 20], \n          [0, 0.5], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }\n        );`\n  * Animation 2: customProperty\n    - Start frame: 0\n    - Duration: 60 frames\n    - End frame: 60\n    - Easing: easeInOutSine → Implement as: Easing.easeInOutSine\n    - Properties to animate:\n      • scale: from 1 to 1.1\n        Implementation: `const scaleValue = interpolate(\n          frame, \n          [0, 60], \n          [1, 1.1], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInOutSine }\n        );`\n  * Animation 3: fadeOut\n    - Start frame: 0\n    - Duration: 40 frames\n    - End frame: 40\n    - Easing: easeInQuad → Implement as: Easing.easeInQuad\n    - Properties to animate:\n      • opacity: from 0.5 to 0\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 40], \n          [0.5, 0], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInQuad }\n        );`\n\n#### ELEMENT 4: c9fe583a-f810-4e62-96e1-b4b9847327e6 (text)\n- Content: Victory Achieved!\n- Initial Layout (CSS equivalent):\n  * x: 960px\n  * y: 300px\n  * width: 800px\n  * height: 100px\n  * opacity: 0\n  * rotation: 0deg\n  * scale: 1\n- React style equivalent: style={{ position: 'absolute', left: 960px, top: 300px, width: 800px, height: 100px, opacity: 0, transform: 'rotate(0deg) scale(1)' }}\n\n- Animations for c9fe583a-f810-4e62-96e1-b4b9847327e6:\n  * Animation 1: slideInUp\n    - Start frame: 0\n    - Duration: 30 frames\n    - End frame: 30\n    - Easing: easeOutQuint → Implement as: Easing.easeOutQuint\n    - Properties to animate:\n      • y: from 350 to 300\n        Implementation: `const yValue = interpolate(\n          frame, \n          [0, 30], \n          [350, 300], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutQuint }\n        );`\n      • opacity: from 0 to 1\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 30], \n          [0, 1], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutQuint }\n        );`\n  * Animation 2: fadeOut\n    - Start frame: 0\n    - Duration: 40 frames\n    - End frame: 40\n    - Easing: easeInCubic → Implement as: Easing.easeInCubic\n    - Properties to animate:\n      • opacity: from 1 to 0\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 40], \n          [1, 0], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInCubic }\n        );`\n\n#### ELEMENT 5: 72492310-da78-4db1-8871-c842be1b0e01 (shape)\n- Initial Layout (CSS equivalent):\n  * x: 0px\n  * y: 0px\n  * width: 1920px\n  * height: 1080px\n  * opacity: 0\n  * rotation: 0deg\n  * scale: 1\n  * backgroundColor: #000000\n- React style equivalent: style={{ position: 'absolute', left: 0px, top: 0px, width: 1920px, height: 1080px, opacity: 0, transform: 'rotate(0deg) scale(1)', backgroundColor: '#000000' }}\n\n- Animations for 72492310-da78-4db1-8871-c842be1b0e01:\n  * Animation 1: fadeIn\n    - Start frame: 0\n    - Duration: 40 frames\n    - End frame: 40\n    - Easing: easeInOutQuad → Implement as: Easing.easeInOutQuad\n    - Properties to animate:\n      • opacity: from 0 to 1\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 40], \n          [0, 1], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInOutQuad }\n        );`\n\n### SEQUENCE ORCHESTRATION & TIMING GUIDELINES:\nWhen implementing multiple animations, carefully orchestrate them to match the design intent:\n1. Use <Sequence> components for elements or animations that should start at specific frames.\n   Example: <Sequence from={30} durationInFrames={60}><YourAnimatedElement /></Sequence>\n2. For animation dependencies between elements (animations that must follow others):\n   - Create a timing map that respects trigger values like 'afterPrevious' by calculating startFrames.\n   - Example: const titleExitFrame = titleStartFrame + titleDuration;\n             const subTitleStartFrame = titleExitFrame; // Starting after title exits\n\n### CODE QUALITY & PERFORMANCE GUIDELINES:\n1. MODULARITY: For complex elements, consider creating sub-components.\n2. PERFORMANCE: Minimize DOM nodes - prefer CSS transforms over creating new elements.\n3. MEMOIZATION: Use React.useMemo() for computationally expensive calculations.\n4. TYPING: Provide proper TypeScript types throughout, including for style objects.\n5. COMMENTS: Add brief comments for complex animation logic or calculations.\n6. ORGANIZATION: Group related animations and separate distinct animation phases.\n7. ERROR HANDLING: Include defensive checks for potentially undefined values.\n\n### CRITICAL REMINDER:\n- PRECISELY follow the AnimationDesignBrief's specifications.\n- RESPECT the timing, durations, and easing specified in the brief.\n- IMPLEMENT ALL elements and animations exactly as detailed above.\n- START with the boilerplate structure provided earlier.\n- REMEMBER the first line MUST be: // src/remotion/components/scenes/WizardStrikesAScene.tsx","sceneId":"967a54e9-7922-4469-a587-9af577d5183a","userData":{"userId":"30c92f68-3935-4e86-8260-7a5fbd1a9dc3"},"projectId":"00ca3ed0-2787-4532-bf3d-0bcca1f66010","componentName":"WizardStrikesAScene","durationInFrames":120,"animationDesignBriefId":"5630d87c-f8bb-44b4-8691-be9100bc6aa1"},"statusMessageId":"b4d946a0-b22e-40c7-bdfe-80da8d5cf857"},{"id":"c186d890-33c0-4345-8350-60bd3ef4a65d","projectId":"00ca3ed0-2787-4532-bf3d-0bcca1f66010","effect":"ColorfulSparklesAndScene","tsxCode":"\"use client\";\n\n// src/remotion/components/scenes/ColorfulSparklesAndScene.tsx\nimport React from 'react';\nimport {\n  AbsoluteFill,\n  useCurrentFrame,\n  useVideoConfig,\n  interpolate,\n  Sequence,\n  Easing,\n  Img,\n} from 'remotion';\n// import { AnimationDesignBrief } from '~/lib/schemas/animationDesignBrief.schema';\n\ninterface AnimationDesignBrief {\n  elements: Array<{\n    id: string;\n    type: string;\n    content?: string;\n  }>;\n  colorPalette?: {\n    background?: string;\n  };\n  typography?: any;\n  overallStyle?: any;\n}\n\nexport const ColorfulSparklesAndScene: React.FC<{ brief: AnimationDesignBrief }> = ({ brief }) => {\n  const frame = useCurrentFrame();\n  const { fps, width, height, durationInFrames } = useVideoConfig();\n\n  // Extract data from brief\n  const { elements, colorPalette } = brief;\n  const backgroundColor = colorPalette?.background || 'transparent';\n\n  // Helper to find an element by ID\n  const findElement = (id: string) => elements.find((el) => el.id === id);\n\n  // Element 1: Full-screen gradient background\n  const bgOpacity = interpolate(\n    frame,\n    [0, 60],\n    [0, 1],\n    { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }\n  );\n\n  // Element 2: Wizard image animations\n  const wizardEl = findElement('8fb0dbbe-b2d0-489e-afd9-f21bb9d0d66a');\n  const wizardSrc = wizardEl?.content || '';\n  const wizardFadeIn = interpolate(\n    frame,\n    [0, 45],\n    [0, 1],\n    { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }\n  );\n  const wizardFadeOut = interpolate(\n    frame,\n    [0, 30],\n    [1, 0],\n    { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInCubic }\n  );\n  const wizardOpacity = wizardFadeIn * wizardFadeOut;\n  const wizardYSlide = interpolate(\n    frame,\n    [0, 60],\n    [900, 720],\n    { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutBack }\n  );\n  const wizardYOsc = interpolate(\n    frame,\n    [0, 60],\n    [720, 710],\n    { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInOutSine }\n  );\n  const wizardY = wizardYSlide + (wizardYOsc - 720);\n\n  // Element 3: Radial glow shape\n  const shapeFadeIn = interpolate(\n    frame,\n    [0, 45],\n    [0, 1],\n    { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }\n  );\n  const shapeFadeOut = interpolate(\n    frame,\n    [0, 30],\n    [1, 0],\n    { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInCubic }\n  );\n  const shapeOpacity = shapeFadeIn * shapeFadeOut;\n  const shapeScale = interpolate(\n    frame,\n    [0, 60],\n    [0.5, 1.2],\n    { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutElastic }\n  );\n  const shapeRotation = interpolate(\n    frame,\n    [0, 90],\n    [0, 360],\n    { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.linear }\n  );\n\n  // Element 4: Custom swirling energy (placeholder path animation)\n  const customFadeIn = interpolate(\n    frame,\n    [0, 40],\n    [0, 1],\n    { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }\n  );\n  const customFadeOut = interpolate(\n    frame,\n    [0, 30],\n    [1, 0],\n    { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInCubic }\n  );\n  const customOpacity = customFadeIn * customFadeOut;\n  const pathProg = interpolate(\n    frame,\n    [0, 100],\n    [0, 1],\n    { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInOutQuad }\n  );\n  const xOffset = Math.cos(pathProg * Math.PI * 2) * 100;\n  const yOffset = Math.sin(pathProg * Math.PI * 2) * 100;\n\n  return (\n    <AbsoluteFill style={{ backgroundColor }}>\n      {/* Element 1: Background Gradient */}\n      <div\n        style={{\n          position: 'absolute',\n          left: 0,\n          top: 0,\n          width: width,\n          height: height,\n          opacity: bgOpacity,\n          transform: 'rotate(0deg) scale(1)',\n          background: 'linear-gradient(180deg, #1a0131 0%, #0d001a 100%)',\n        }}\n      />\n\n      {/* Element 2: Wizard Image */}\n      <Img\n        src={wizardSrc}\n        style={{\n          position: 'absolute',\n          left: 960,\n          top: wizardY,\n          width: 400,\n          height: 800,\n          opacity: wizardOpacity,\n          transform: 'rotate(0deg) scale(0.8)',\n        }}\n      />\n\n      {/* Element 3: Radial Glow Shape */}\n      <div\n        style={{\n          position: 'absolute',\n          left: 960,\n          top: 540,\n          width: 600,\n          height: 600,\n          opacity: shapeOpacity,\n          background: 'radial-gradient(circle, #ff80ff 0%, transparent 70%)',\n          transform: `translate(-50%, -50%) rotate(${shapeRotation}deg) scale(${shapeScale})`,\n        }}\n      />\n\n      {/* Element 4: Custom Swirling Energy */}\n      <div\n        style={{\n          position: 'absolute',\n          left: 960,\n          top: 540,\n          width: 1920,\n          height: 1080,\n          opacity: customOpacity,\n          transform: `translate(-50%, -50%) translateX(${xOffset}px) translateY(${yOffset}px) scale(1)`,\n        }}\n      >\n        {/* Placeholder for custom energy component or layered sparkles */}\n        <div\n          style={{\n            width: '100%',\n            height: '100%',\n            borderRadius: '50%',\n            background: 'radial-gradient(circle, #ffff00 0%, transparent 80%)',\n            opacity: 0.5,\n          }}\n        />\n      </div>\n    </AbsoluteFill>\n  );\n};","status":"building","outputUrl":null,"errorMessage":"TSX code is missing for this job","retryCount":2,"createdAt":"2025-05-10 03:54:09.325168+00","updatedAt":"2025-05-10 03:55:18.462+00","metadata":{"fps":30,"width":1920,"height":1080,"prompt":"### ROLE: You are an Expert Remotion Developer and Senior React Engineer.\n### TASK: Create a production-quality Remotion React functional component in TypeScript.\n### COMPONENT NAME: 'ColorfulSparklesAndScene'\n### OBJECTIVE: Generate a component that precisely implements the provided AnimationDesignBrief with professional animations and visual effects.\n### VIDEO CONFIG: Target video is 1920x1080px, 180 frames total duration, at 30 FPS.\n### MANDATORY REQUIREMENTS:\n- The FIRST line MUST be: // src/remotion/components/scenes/ColorfulSparklesAndScene.tsx\n- The component MUST be a functional component using TypeScript (.tsx).\n- ALWAYS use the Remotion hooks: useCurrentFrame() and useVideoConfig() for timing and dimensions.\n- Component MUST accept props: { brief: AnimationDesignBrief } (assume this type is imported).\n- Utilize appropriate Remotion animation functions based on each element's needs:\n  * interpolate() - For smooth linear or eased transitions between values\n  * spring() - For physics-based, bouncy animations\n  * Easing module - For specifying animation curves (easeInOut, bezier, etc.)\n- Use Remotion timing components when needed:\n  * <Sequence from={startFrame} durationInFrames={duration}> - For sequential animations\n  * <Series> - For orchestrating complex animation sequences\n  * <Loop> - For repeating animations\n- Apply absolute positioning based on initialLayout coordinates.\n\n### BOILERPLATE STRUCTURE (Follow this pattern):\n```typescript\n// src/remotion/components/scenes/ColorfulSparklesAndScene.tsx\nimport { AbsoluteFill, useCurrentFrame, useVideoConfig, interpolate, spring, Sequence, Easing, Img, Audio } from 'remotion';\nimport React from 'react';\n// import { AnimationDesignBrief } from '~/lib/schemas/animationDesignBrief.schema';\n\nexport const ColorfulSparklesAndScene: React.FC<{ brief: AnimationDesignBrief }> = ({ brief }) => {\n  const frame = useCurrentFrame();\n  const { fps, width, height, durationInFrames } = useVideoConfig();\n\n  // Extract key brief properties\n  const { elements, colorPalette, typography, overallStyle } = brief;\n\n  // Define background color from brief\n  const backgroundColor = colorPalette?.background || 'transparent';\n\n  return (\n    <AbsoluteFill style={{ backgroundColor }}>\n      {/* Render each element with its animations */}\n    </AbsoluteFill>\n  );\n};\n```\n\n--- Scene Overview ---\nScene Name: ColorfulSparklesAndScene\nPurpose: Colorful sparkles and swirling magical energy surround and follow the wizard’s movements.\nOverall Style: Mystical and vibrant with fluid, swirling particle effects and glowing gradients\n\n--- Color Palette ---\n- Primary Color: #5e17eb\n- Secondary Color: #ff80ff\n- Accent Color: #ffff00\n- Background Color: #1a0131\n- Text Primary Color: #ffffff\n- Text Secondary Color: #cccccc\n\n--- Typography ---\n- Default Font Family: Cinzel, serif\n- Heading1 Style:\n  - Font Family: Cinzel Decorative\n  - Font Size: 48\n\n### ELEMENT-BY-ELEMENT IMPLEMENTATION GUIDE:\nEach element from the AnimationDesignBrief must be translated into React/Remotion code following these guidelines:\n\n#### ELEMENT TYPE TRANSLATION:\n- 'text' → Use a <div> or <h1>-<h6> with appropriate styling\n- 'image' → Use Remotion's <Img src={content} /> component\n- 'video' → Use Remotion's <Video src={content} /> component\n- 'shape' → Use appropriate shape elements (div with border-radius for circles/rounded rectangles, SVG for complex shapes)\n- 'container' → Use a positioned <div> that may contain child elements\n\n#### INITIAL LAYOUT TRANSLATION:\nAll initialLayout properties MUST be translated to React inline styles:\n- 'x', 'y' → style={{ position: 'absolute', left: x, top: y }}\n- 'width', 'height' → style={{ width, height }}\n- 'opacity' → style={{ opacity }}\n- 'rotation' → style={{ transform: `rotate(${rotation}deg)` }}\n- 'scale' → style={{ transform: `scale(${scale})` }}\n- 'zIndex' → style={{ zIndex }}\n- Multiple transforms should be combined: transform: `rotate(${rotation}deg) scale(${scale})`\n\n#### ANIMATION IMPLEMENTATION:\nFor each animation, use this approach:\n1. Calculate the active animation frames based on delayInFrames and durationInFrames:\n   const animStartFrame = animation.delayInFrames || 0;\n   const animEndFrame = animStartFrame + (animation.durationInFrames || 30);\n2. Apply the appropriate Remotion animation function:\n   - For 'spring' animations or when remotionFunctionHint is 'spring':\n     const animatedValue = spring({\n       frame: frame - animStartFrame,\n       fps,\n       from: property.from,\n       to: property.to,\n       config: property.springConfig || { damping: 10, mass: 1, stiffness: 100 }\n     });\n   - For most other animations, use interpolate:\n     const animatedValue = interpolate(\n       frame,\n       [animStartFrame, animEndFrame],\n       [property.from, property.to],\n       {\n         extrapolateLeft: 'clamp',\n         extrapolateRight: 'clamp',\n         easing: determineEasing(animation.easing)\n       }\n     );\n3. Apply animated values to style properties:\n   - For transform properties (e.g., 'transform.translateX', 'transform.scale'):\n     Extract the specific transform type and apply with appropriate units.\n   - For standard CSS properties (e.g., 'opacity'):\n     Apply directly to the style object.\n   - Example: style={{ opacity: animatedOpacity, transform: `translateX(${animatedX}px) scale(${animatedScale})` }}\n4. For sequence-based timing (startAfter, startWith):\n   - Wrap elements in <Sequence> components with appropriate 'from' and 'durationInFrames' props\n   - Use 'from' attribute based on animation.delayInFrames\n   - Example: <Sequence from={30} durationInFrames={60}>...</Sequence>\n\n### SPECIFIC ELEMENTS TO IMPLEMENT:\n\n#### ELEMENT 1: 0f730278-f5a2-4d6a-b34d-9e7ab01e474e (shape)\n- Initial Layout (CSS equivalent):\n  * x: 0px\n  * y: 0px\n  * width: 1920px\n  * height: 1080px\n  * opacity: 0\n  * rotation: 0deg\n  * scale: 1\n  * backgroundColor: linear-gradient(180deg, #1a0131 0%, #0d001a 100%)\n- React style equivalent: style={{ position: 'absolute', left: 0px, top: 0px, width: 1920px, height: 1080px, opacity: 0, transform: 'rotate(0deg) scale(1)', backgroundColor: 'linear-gradient(180deg, #1a0131 0%, #0d001a 100%)' }}\n\n- Animations for 0f730278-f5a2-4d6a-b34d-9e7ab01e474e:\n  * Animation 1: fadeIn\n    - Start frame: 0\n    - Duration: 60 frames\n    - End frame: 60\n    - Easing: easeOutCubic → Implement as: Easing.easeOutCubic\n    - Properties to animate:\n      • opacity: from 0 to 1\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 60], \n          [0, 1], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }\n        );`\n\n#### ELEMENT 2: 8fb0dbbe-b2d0-489e-afd9-f21bb9d0d66a (image)\n- Content: assets/wizard.png\n- Initial Layout (CSS equivalent):\n  * x: 960px\n  * y: 720px\n  * width: 400px\n  * height: 800px\n  * opacity: 0\n  * rotation: 0deg\n  * scale: 0.8\n- React style equivalent: style={{ position: 'absolute', left: 960px, top: 720px, width: 400px, height: 800px, opacity: 0, transform: 'rotate(0deg) scale(0.8)' }}\n\n- Animations for 8fb0dbbe-b2d0-489e-afd9-f21bb9d0d66a:\n  * Animation 1: fadeIn\n    - Start frame: 0\n    - Duration: 45 frames\n    - End frame: 45\n    - Easing: easeOutCubic → Implement as: Easing.easeOutCubic\n    - Properties to animate:\n      • opacity: from 0 to 1\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 45], \n          [0, 1], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }\n        );`\n  * Animation 2: slideUp\n    - Start frame: 0\n    - Duration: 60 frames\n    - End frame: 60\n    - Easing: easeOutBack → Implement as: Easing.easeOutBack\n    - Properties to animate:\n      • y: from 900 to 720\n        Implementation: `const yValue = interpolate(\n          frame, \n          [0, 60], \n          [900, 720], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutBack }\n        );`\n  * Animation 3: customProperty\n    - Start frame: 0\n    - Duration: 60 frames\n    - End frame: 60\n    - Easing: easeInOutSine → Implement as: Easing.easeInOutSine\n    - Properties to animate:\n      • y: from 720 to 710\n        Implementation: `const yValue = interpolate(\n          frame, \n          [0, 60], \n          [720, 710], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInOutSine }\n        );`\n  * Animation 4: fadeOut\n    - Start frame: 0\n    - Duration: 30 frames\n    - End frame: 30\n    - Easing: easeInCubic → Implement as: Easing.easeInCubic\n    - Properties to animate:\n      • opacity: from 1 to 0\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 30], \n          [1, 0], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInCubic }\n        );`\n\n#### ELEMENT 3: 0a314d33-bb29-477e-9ac2-1591cc4a3d62 (shape)\n- Initial Layout (CSS equivalent):\n  * x: 960px\n  * y: 540px\n  * width: 600px\n  * height: 600px\n  * opacity: 0\n  * rotation: 0deg\n  * scale: 0.5\n  * backgroundColor: radial-gradient(circle, #ff80ff 0%, transparent 70%)\n- React style equivalent: style={{ position: 'absolute', left: 960px, top: 540px, width: 600px, height: 600px, opacity: 0, transform: 'rotate(0deg) scale(0.5)', backgroundColor: 'radial-gradient(circle, #ff80ff 0%, transparent 70%)' }}\n\n- Animations for 0a314d33-bb29-477e-9ac2-1591cc4a3d62:\n  * Animation 1: fadeIn\n    - Start frame: 0\n    - Duration: 45 frames\n    - End frame: 45\n    - Easing: easeOutCubic → Implement as: Easing.easeOutCubic\n    - Properties to animate:\n      • opacity: from 0 to 1\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 45], \n          [0, 1], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }\n        );`\n  * Animation 2: customProperty\n    - Start frame: 0\n    - Duration: 60 frames\n    - End frame: 60\n    - Easing: easeOutElastic → Implement as: Easing.easeOutElastic\n    - Properties to animate:\n      • scale: from 0.5 to 1.2\n        Implementation: `const scaleValue = interpolate(\n          frame, \n          [0, 60], \n          [0.5, 1.2], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutElastic }\n        );`\n  * Animation 3: customProperty\n    - Start frame: 0\n    - Duration: 90 frames\n    - End frame: 90\n    - Easing: linear → Implement as: Easing.linear\n    - Properties to animate:\n      • rotation: from 0 to 360\n        Implementation: `const rotationValue = interpolate(\n          frame, \n          [0, 90], \n          [0, 360], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.linear }\n        );`\n  * Animation 4: fadeOut\n    - Start frame: 0\n    - Duration: 30 frames\n    - End frame: 30\n    - Easing: easeInCubic → Implement as: Easing.easeInCubic\n    - Properties to animate:\n      • opacity: from 1 to 0\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 30], \n          [1, 0], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInCubic }\n        );`\n\n#### ELEMENT 4: 9e6b293f-8f54-49ad-a6d7-2c8adcd97479 (customComponent)\n- Initial Layout (CSS equivalent):\n  * x: 960px\n  * y: 540px\n  * width: 1920px\n  * height: 1080px\n  * opacity: 0\n  * rotation: 0deg\n  * scale: 1\n- React style equivalent: style={{ position: 'absolute', left: 960px, top: 540px, width: 1920px, height: 1080px, opacity: 0, transform: 'rotate(0deg) scale(1)' }}\n\n- Animations for 9e6b293f-8f54-49ad-a6d7-2c8adcd97479:\n  * Animation 1: fadeIn\n    - Start frame: 0\n    - Duration: 40 frames\n    - End frame: 40\n    - Easing: easeOutCubic → Implement as: Easing.easeOutCubic\n    - Properties to animate:\n      • opacity: from 0 to 1\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 40], \n          [0, 1], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }\n        );`\n  * Animation 2: path\n    - Start frame: 0\n    - Duration: 100 frames\n    - End frame: 100\n    - Easing: easeInOutQuad → Implement as: Easing.easeInOutQuad\n  * Animation 3: fadeOut\n    - Start frame: 0\n    - Duration: 30 frames\n    - End frame: 30\n    - Easing: easeInCubic → Implement as: Easing.easeInCubic\n    - Properties to animate:\n      • opacity: from 1 to 0\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 30], \n          [1, 0], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInCubic }\n        );`\n\n### SEQUENCE ORCHESTRATION & TIMING GUIDELINES:\nWhen implementing multiple animations, carefully orchestrate them to match the design intent:\n1. Use <Sequence> components for elements or animations that should start at specific frames.\n   Example: <Sequence from={30} durationInFrames={60}><YourAnimatedElement /></Sequence>\n2. For animation dependencies between elements (animations that must follow others):\n   - Create a timing map that respects trigger values like 'afterPrevious' by calculating startFrames.\n   - Example: const titleExitFrame = titleStartFrame + titleDuration;\n             const subTitleStartFrame = titleExitFrame; // Starting after title exits\n\n### CODE QUALITY & PERFORMANCE GUIDELINES:\n1. MODULARITY: For complex elements, consider creating sub-components.\n2. PERFORMANCE: Minimize DOM nodes - prefer CSS transforms over creating new elements.\n3. MEMOIZATION: Use React.useMemo() for computationally expensive calculations.\n4. TYPING: Provide proper TypeScript types throughout, including for style objects.\n5. COMMENTS: Add brief comments for complex animation logic or calculations.\n6. ORGANIZATION: Group related animations and separate distinct animation phases.\n7. ERROR HANDLING: Include defensive checks for potentially undefined values.\n\n### CRITICAL REMINDER:\n- PRECISELY follow the AnimationDesignBrief's specifications.\n- RESPECT the timing, durations, and easing specified in the brief.\n- IMPLEMENT ALL elements and animations exactly as detailed above.\n- START with the boilerplate structure provided earlier.\n- REMEMBER the first line MUST be: // src/remotion/components/scenes/ColorfulSparklesAndScene.tsx","sceneId":"f47ac10b-58cc-4372-a567-0e02b2c3d479","userData":{"userId":"30c92f68-3935-4e86-8260-7a5fbd1a9dc3"},"projectId":"00ca3ed0-2787-4532-bf3d-0bcca1f66010","componentName":"ColorfulSparklesAndScene","durationInFrames":180,"animationDesignBriefId":"a8238a8a-4a82-445a-b776-f2e7e987c31e"},"statusMessageId":"b4d946a0-b22e-40c7-bdfe-80da8d5cf857"},{"id":"49b958c7-81ec-42c2-a43d-0d03b4f38a51","projectId":"00ca3ed0-2787-4532-bf3d-0bcca1f66010","effect":"WizardPerformsAScene","tsxCode":"\"use client\";\n\n// src/remotion/components/scenes/WizardPerformsAScene.tsx\nimport React from 'react';\nimport {\n\tAbsoluteFill,\n\tuseCurrentFrame,\n\tuseVideoConfig,\n\tinterpolate,\n\tspring,\n\tSequence,\n\tEasing,\n\tImg,\n\tAudio,\n} from 'remotion';\n// import { AnimationDesignBrief } from '~/lib/schemas/animationDesignBrief.schema';\n\nexport const WizardPerformsAScene: React.FC<{ brief: AnimationDesignBrief }> = ({ brief }) => {\n\tconst frame = useCurrentFrame();\n\tconst { fps, width, height, durationInFrames } = useVideoConfig();\n\t// Destructure brief (not used directly per-element here)\n\tconst { elements, colorPalette, typography, overallStyle } = brief;\n\tconst backgroundColor = colorPalette?.background || '#0D1B2A';\n\n\t// Element 1: Background Fade-In (0 -> 30)\n\tconst opacityBg = interpolate(\n\t\tframe,\n\t\t[0, 30],\n\t\t[0, 1],\n\t\t{ extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInOutCubic }\n\t);\n\n\t// Element 2: Accent shape fade to 0.6 then 0.8 (0 -> 20)\n\tconst fadeIn2 = interpolate(\n\t\tframe,\n\t\t[0, 20],\n\t\t[0, 0.6],\n\t\t{ extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }\n\t);\n\tconst fadeTo08_2 = interpolate(\n\t\tframe,\n\t\t[0, 20],\n\t\t[0.6, 0.8],\n\t\t{ extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInOutSine }\n\t);\n\tconst opacityShape2 = Math.max(fadeIn2, fadeTo08_2);\n\n\t// Element 3: Wizard sprite with fadeIn/out, up-down and rotation\n\tconst fadeIn3 = interpolate(\n\t\tframe,\n\t\t[0, 30],\n\t\t[0, 1],\n\t\t{ extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }\n\t);\n\tconst fadeOut3 = interpolate(\n\t\tframe,\n\t\t[0, 30],\n\t\t[1, 0],\n\t\t{ extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInCubic }\n\t);\n\tconst opacitySprite = fadeIn3 * fadeOut3;\n\tconst ySprite = interpolate(\n\t\tframe,\n\t\t[0, 30],\n\t\t[600, 620],\n\t\t{ extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInOutSine }\n\t);\n\tconst rotationSprite = interpolate(\n\t\tframe,\n\t\t[0, 40],\n\t\t[-2, 2],\n\t\t{ extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInOutSine }\n\t);\n\n\t// Element 4: Fullscreen custom component fade-in\n\tconst fadeIn4 = interpolate(\n\t\tframe,\n\t\t[0, 20],\n\t\t[0, 1],\n\t\t{ extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }\n\t);\n\n\t// Element 5: Title text slide & fade\n\tconst fadeIn5 = interpolate(\n\t\tframe,\n\t\t[0, 30],\n\t\t[0, 1],\n\t\t{ extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }\n\t);\n\tconst fadeOut5 = interpolate(\n\t\tframe,\n\t\t[0, 30],\n\t\t[1, 0],\n\t\t{ extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInCubic }\n\t);\n\tconst opacityTitle = fadeIn5 * fadeOut5;\n\tconst yTitle = interpolate(\n\t\tframe,\n\t\t[0, 30],\n\t\t[-100, 100],\n\t\t{ extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutQuint }\n\t);\n\n\treturn (\n\t\t<>\n\t\t\t<Audio src=\"assets/audio/mystical_theme.mp3\" startFrom={0} volume={0.8} />\n\t\t\t<AbsoluteFill style={{ backgroundColor }}>\n\t\t\t\t{/* Background Shape */}\n\t\t\t\t<Sequence from={0} durationInFrames={durationInFrames}>\n\t\t\t\t\t<div\n\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\tposition: 'absolute',\n\t\t\t\t\t\tleft: 0,\n\t\t\t\t\t\ttop: 0,\n\t\t\t\t\t\twidth: 1920,\n\t\t\t\t\t\theight: 1080,\n\t\t\t\t\t\tbackgroundColor: '#0D1B2A',\n\t\t\t\t\t\topacity: opacityBg,\n\t\t\t\t\t\ttransform: 'rotate(0deg) scale(1)',\n\t\t\t\t\t}}\n\t\t\t\t\t/>\n\t\t\t\t</Sequence>\n\n\t\t\t\t{/* Accent Shape */}\n\t\t\t\t<Sequence from={0} durationInFrames={20}>\n\t\t\t\t\t<div\n\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\tposition: 'absolute',\n\t\t\t\t\t\tleft: 960,\n\t\t\t\t\t\ttop: 880,\n\t\t\t\t\t\twidth: 600,\n\t\t\t\t\t\theight: 200,\n\t\t\t\t\t\tbackgroundColor: '#415A77',\n\t\t\t\t\t\topacity: opacityShape2,\n\t\t\t\t\t\ttransform: 'rotate(0deg) scale(0.5)',\n\t\t\t\t\t}}\n\t\t\t\t\t/>\n\t\t\t\t</Sequence>\n\n\t\t\t\t{/* Wizard Sprite */}\n\t\t\t\t<Sequence from={0} durationInFrames={durationInFrames}>\n\t\t\t\t\t<Img\n\t\t\t\t\t\tsrc=\"assets/images/wizard_sprite.png\"\n\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\tposition: 'absolute',\n\t\t\t\t\t\tleft: 960,\n\t\t\t\t\t\ttop: ySprite,\n\t\t\t\t\t\twidth: 300,\n\t\t\t\t\t\theight: 600,\n\t\t\t\t\t\topacity: opacitySprite,\n\t\t\t\t\t\ttransform: `rotate(${rotationSprite}deg) scale(1)`,\n\t\t\t\t\t}}\n\t\t\t\t\t/>\n\t\t\t\t</Sequence>\n\n\t\t\t\t{/* Custom Fullscreen Overlay */}\n\t\t\t\t<Sequence from={0} durationInFrames={durationInFrames}>\n\t\t\t\t\t<div\n\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\tposition: 'absolute',\n\t\t\t\t\t\tleft: 960,\n\t\t\t\t\t\ttop: 540,\n\t\t\t\t\t\twidth: 1920,\n\t\t\t\t\t\theight: 1080,\n\t\t\t\t\t\tbackgroundColor: 'transparent',\n\t\t\t\t\t\topacity: fadeIn4,\n\t\t\t\t\t\ttransform: 'rotate(0deg) scale(1)',\n\t\t\t\t\t}}\n\t\t\t\t\t/>\n\t\t\t\t</Sequence>\n\n\t\t\t\t{/* Title Text */}\n\t\t\t\t<Sequence from={0} durationInFrames={30}>\n\t\t\t\t\t<h1\n\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\tposition: 'absolute',\n\t\t\t\t\t\tleft: 960,\n\t\t\t\t\t\ttop: yTitle,\n\t\t\t\t\t\twidth: 800,\n\t\t\t\t\t\theight: 80,\n\t\t\t\t\t\tmargin: 0,\n\t\t\t\t\t\topacity: opacityTitle,\n\t\t\t\t\t\tfontFamily: 'Cinzel-Bold',\n\t\t\t\t\t\tfontSize: 64,\n\t\t\t\t\t\tcolor: '#FFFFFF',\n\t\t\t\t\t\ttextAlign: 'center',\n\t\t\t\t\t\ttransform: 'translateX(-50%)',\n\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\tThe Wizard's Dance\n\t\t\t\t\t</h1>\n\t\t\t\t</Sequence>\n\t\t\t</AbsoluteFill>\n\t\t</>\n\t);\n};","status":"building","outputUrl":null,"errorMessage":"TSX code is missing for this job","retryCount":2,"createdAt":"2025-05-10 03:53:37.869923+00","updatedAt":"2025-05-10 03:54:17.87+00","metadata":{"fps":30,"width":1920,"height":1080,"prompt":"### ROLE: You are an Expert Remotion Developer and Senior React Engineer.\n### TASK: Create a production-quality Remotion React functional component in TypeScript.\n### COMPONENT NAME: 'WizardPerformsAScene'\n### OBJECTIVE: Generate a component that precisely implements the provided AnimationDesignBrief with professional animations and visual effects.\n### VIDEO CONFIG: Target video is 1920x1080px, 210 frames total duration, at 30 FPS.\n### MANDATORY REQUIREMENTS:\n- The FIRST line MUST be: // src/remotion/components/scenes/WizardPerformsAScene.tsx\n- The component MUST be a functional component using TypeScript (.tsx).\n- ALWAYS use the Remotion hooks: useCurrentFrame() and useVideoConfig() for timing and dimensions.\n- Component MUST accept props: { brief: AnimationDesignBrief } (assume this type is imported).\n- Utilize appropriate Remotion animation functions based on each element's needs:\n  * interpolate() - For smooth linear or eased transitions between values\n  * spring() - For physics-based, bouncy animations\n  * Easing module - For specifying animation curves (easeInOut, bezier, etc.)\n- Use Remotion timing components when needed:\n  * <Sequence from={startFrame} durationInFrames={duration}> - For sequential animations\n  * <Series> - For orchestrating complex animation sequences\n  * <Loop> - For repeating animations\n- Apply absolute positioning based on initialLayout coordinates.\n\n### BOILERPLATE STRUCTURE (Follow this pattern):\n```typescript\n// src/remotion/components/scenes/WizardPerformsAScene.tsx\nimport { AbsoluteFill, useCurrentFrame, useVideoConfig, interpolate, spring, Sequence, Easing, Img, Audio } from 'remotion';\nimport React from 'react';\n// import { AnimationDesignBrief } from '~/lib/schemas/animationDesignBrief.schema';\n\nexport const WizardPerformsAScene: React.FC<{ brief: AnimationDesignBrief }> = ({ brief }) => {\n  const frame = useCurrentFrame();\n  const { fps, width, height, durationInFrames } = useVideoConfig();\n\n  // Extract key brief properties\n  const { elements, colorPalette, typography, overallStyle } = brief;\n\n  // Define background color from brief\n  const backgroundColor = colorPalette?.background || 'transparent';\n\n  return (\n    <AbsoluteFill style={{ backgroundColor }}>\n      {/* Render each element with its animations */}\n    </AbsoluteFill>\n  );\n};\n```\n\n--- Scene Overview ---\nScene Name: WizardPerformsAScene\nPurpose: Wizard performs a smooth, rhythmic dance with subtle footwork and hand waves.\nOverall Style: Magical 2D Fantasy\n\n--- Color Palette ---\n- Primary Color: #1B263B\n- Secondary Color: #415A77\n- Accent Color: #E0AF4C\n- Background Color: #0D1B2A\n- Text Primary Color: #FFFFFF\n- Text Secondary Color: #AAB2BF\n\n--- Typography ---\n- Default Font Family: Cinzel\n- Heading1 Style:\n  - Font Family: Cinzel-Bold\n  - Font Size: 64\n\n### ELEMENT-BY-ELEMENT IMPLEMENTATION GUIDE:\nEach element from the AnimationDesignBrief must be translated into React/Remotion code following these guidelines:\n\n#### ELEMENT TYPE TRANSLATION:\n- 'text' → Use a <div> or <h1>-<h6> with appropriate styling\n- 'image' → Use Remotion's <Img src={content} /> component\n- 'video' → Use Remotion's <Video src={content} /> component\n- 'shape' → Use appropriate shape elements (div with border-radius for circles/rounded rectangles, SVG for complex shapes)\n- 'container' → Use a positioned <div> that may contain child elements\n\n#### INITIAL LAYOUT TRANSLATION:\nAll initialLayout properties MUST be translated to React inline styles:\n- 'x', 'y' → style={{ position: 'absolute', left: x, top: y }}\n- 'width', 'height' → style={{ width, height }}\n- 'opacity' → style={{ opacity }}\n- 'rotation' → style={{ transform: `rotate(${rotation}deg)` }}\n- 'scale' → style={{ transform: `scale(${scale})` }}\n- 'zIndex' → style={{ zIndex }}\n- Multiple transforms should be combined: transform: `rotate(${rotation}deg) scale(${scale})`\n\n#### ANIMATION IMPLEMENTATION:\nFor each animation, use this approach:\n1. Calculate the active animation frames based on delayInFrames and durationInFrames:\n   const animStartFrame = animation.delayInFrames || 0;\n   const animEndFrame = animStartFrame + (animation.durationInFrames || 30);\n2. Apply the appropriate Remotion animation function:\n   - For 'spring' animations or when remotionFunctionHint is 'spring':\n     const animatedValue = spring({\n       frame: frame - animStartFrame,\n       fps,\n       from: property.from,\n       to: property.to,\n       config: property.springConfig || { damping: 10, mass: 1, stiffness: 100 }\n     });\n   - For most other animations, use interpolate:\n     const animatedValue = interpolate(\n       frame,\n       [animStartFrame, animEndFrame],\n       [property.from, property.to],\n       {\n         extrapolateLeft: 'clamp',\n         extrapolateRight: 'clamp',\n         easing: determineEasing(animation.easing)\n       }\n     );\n3. Apply animated values to style properties:\n   - For transform properties (e.g., 'transform.translateX', 'transform.scale'):\n     Extract the specific transform type and apply with appropriate units.\n   - For standard CSS properties (e.g., 'opacity'):\n     Apply directly to the style object.\n   - Example: style={{ opacity: animatedOpacity, transform: `translateX(${animatedX}px) scale(${animatedScale})` }}\n4. For sequence-based timing (startAfter, startWith):\n   - Wrap elements in <Sequence> components with appropriate 'from' and 'durationInFrames' props\n   - Use 'from' attribute based on animation.delayInFrames\n   - Example: <Sequence from={30} durationInFrames={60}>...</Sequence>\n\n### SPECIFIC ELEMENTS TO IMPLEMENT:\n\n#### ELEMENT 1: 9ccb8cbb-bdb3-4def-aff5-b6437981ef0e (shape)\n- Initial Layout (CSS equivalent):\n  * x: 0px\n  * y: 0px\n  * width: 1920px\n  * height: 1080px\n  * opacity: 0\n  * rotation: 0deg\n  * scale: 1\n  * backgroundColor: #0D1B2A\n- React style equivalent: style={{ position: 'absolute', left: 0px, top: 0px, width: 1920px, height: 1080px, opacity: 0, transform: 'rotate(0deg) scale(1)', backgroundColor: '#0D1B2A' }}\n\n- Animations for 9ccb8cbb-bdb3-4def-aff5-b6437981ef0e:\n  * Animation 1: fadeIn\n    - Start frame: 0\n    - Duration: 30 frames\n    - End frame: 30\n    - Easing: easeInOutCubic → Implement as: Easing.easeInOutCubic\n    - Properties to animate:\n      • opacity: from 0 to 1\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 30], \n          [0, 1], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInOutCubic }\n        );`\n\n#### ELEMENT 2: cc24b593-9811-45c7-943d-52bc1b49f6c4 (shape)\n- Initial Layout (CSS equivalent):\n  * x: 960px\n  * y: 880px\n  * width: 600px\n  * height: 200px\n  * opacity: 0\n  * rotation: 0deg\n  * scale: 0.5\n  * backgroundColor: #415A77\n- React style equivalent: style={{ position: 'absolute', left: 960px, top: 880px, width: 600px, height: 200px, opacity: 0, transform: 'rotate(0deg) scale(0.5)', backgroundColor: '#415A77' }}\n\n- Animations for cc24b593-9811-45c7-943d-52bc1b49f6c4:\n  * Animation 1: fadeIn\n    - Start frame: 0\n    - Duration: 20 frames\n    - End frame: 20\n    - Easing: easeOutCubic → Implement as: Easing.easeOutCubic\n    - Properties to animate:\n      • opacity: from 0 to 0.6\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 20], \n          [0, 0.6], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }\n        );`\n  * Animation 2: fade\n    - Start frame: 0\n    - Duration: 20 frames\n    - End frame: 20\n    - Easing: easeInOutSine → Implement as: Easing.easeInOutSine\n    - Properties to animate:\n      • opacity: from 0.6 to 0.8\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 20], \n          [0.6, 0.8], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInOutSine }\n        );`\n\n#### ELEMENT 3: e552ffaf-8c14-49a7-af72-bc6318213713 (image)\n- Content: assets/images/wizard_sprite.png\n- Initial Layout (CSS equivalent):\n  * x: 960px\n  * y: 600px\n  * width: 300px\n  * height: 600px\n  * opacity: 0\n  * rotation: 0deg\n  * scale: 1\n- React style equivalent: style={{ position: 'absolute', left: 960px, top: 600px, width: 300px, height: 600px, opacity: 0, transform: 'rotate(0deg) scale(1)' }}\n\n- Animations for e552ffaf-8c14-49a7-af72-bc6318213713:\n  * Animation 1: fadeIn\n    - Start frame: 0\n    - Duration: 30 frames\n    - End frame: 30\n    - Easing: easeOutCubic → Implement as: Easing.easeOutCubic\n    - Properties to animate:\n      • opacity: from 0 to 1\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 30], \n          [0, 1], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }\n        );`\n  * Animation 2: customProperty\n    - Start frame: 0\n    - Duration: 30 frames\n    - End frame: 30\n    - Easing: easeInOutSine → Implement as: Easing.easeInOutSine\n    - Properties to animate:\n      • y: from 600 to 620\n        Implementation: `const yValue = interpolate(\n          frame, \n          [0, 30], \n          [600, 620], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInOutSine }\n        );`\n  * Animation 3: customProperty\n    - Start frame: 0\n    - Duration: 40 frames\n    - End frame: 40\n    - Easing: easeInOutSine → Implement as: Easing.easeInOutSine\n    - Properties to animate:\n      • rotation: from -2 to 2\n        Implementation: `const rotationValue = interpolate(\n          frame, \n          [0, 40], \n          [-2, 2], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInOutSine }\n        );`\n  * Animation 4: fadeOut\n    - Start frame: 0\n    - Duration: 30 frames\n    - End frame: 30\n    - Easing: easeInCubic → Implement as: Easing.easeInCubic\n    - Properties to animate:\n      • opacity: from 1 to 0\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 30], \n          [1, 0], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInCubic }\n        );`\n\n#### ELEMENT 4: 9d108c9b-f714-47d4-b166-edec539e8352 (customComponent)\n- Initial Layout (CSS equivalent):\n  * x: 960px\n  * y: 540px\n  * width: 1920px\n  * height: 1080px\n  * opacity: 0\n  * rotation: 0deg\n  * scale: 1\n- React style equivalent: style={{ position: 'absolute', left: 960px, top: 540px, width: 1920px, height: 1080px, opacity: 0, transform: 'rotate(0deg) scale(1)' }}\n\n- Animations for 9d108c9b-f714-47d4-b166-edec539e8352:\n  * Animation 1: fadeIn\n    - Start frame: 0\n    - Duration: 20 frames\n    - End frame: 20\n    - Easing: easeOutCubic → Implement as: Easing.easeOutCubic\n    - Properties to animate:\n      • opacity: from 0 to 1\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 20], \n          [0, 1], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }\n        );`\n  * Animation 2: customProperty\n    - Start frame: 0\n    - Duration: 30 frames\n    - End frame: 30\n    - Easing: linear → Implement as: Easing.linear\n    - Properties to animate:\n      • opacity: from 1 to 0.5\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 30], \n          [1, 0.5], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.linear }\n        );`\n  * Animation 3: fadeOut\n    - Start frame: 0\n    - Duration: 20 frames\n    - End frame: 20\n    - Easing: easeInCubic → Implement as: Easing.easeInCubic\n    - Properties to animate:\n      • opacity: from 1 to 0\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 20], \n          [1, 0], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInCubic }\n        );`\n\n#### ELEMENT 5: 04d7f7d3-8e48-47e8-b3cb-e6e61609364e (text)\n- Content: The Wizard's Dance\n- Initial Layout (CSS equivalent):\n  * x: 960px\n  * y: -100px\n  * width: 800px\n  * height: 80px\n  * opacity: 0\n  * rotation: 0deg\n  * scale: 1\n- React style equivalent: style={{ position: 'absolute', left: 960px, top: -100px, width: 800px, height: 80px, opacity: 0, transform: 'rotate(0deg) scale(1)' }}\n\n- Animations for 04d7f7d3-8e48-47e8-b3cb-e6e61609364e:\n  * Animation 1: fadeIn\n    - Start frame: 0\n    - Duration: 30 frames\n    - End frame: 30\n    - Easing: easeOutCubic → Implement as: Easing.easeOutCubic\n    - Properties to animate:\n      • opacity: from 0 to 1\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 30], \n          [0, 1], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }\n        );`\n  * Animation 2: customProperty\n    - Start frame: 0\n    - Duration: 30 frames\n    - End frame: 30\n    - Easing: easeOutQuint → Implement as: Easing.easeOutQuint\n    - Properties to animate:\n      • y: from -100 to 100\n        Implementation: `const yValue = interpolate(\n          frame, \n          [0, 30], \n          [-100, 100], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutQuint }\n        );`\n  * Animation 3: fadeOut\n    - Start frame: 0\n    - Duration: 30 frames\n    - End frame: 30\n    - Easing: easeInCubic → Implement as: Easing.easeInCubic\n    - Properties to animate:\n      • opacity: from 1 to 0\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 30], \n          [1, 0], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInCubic }\n        );`\n\n### SEQUENCE ORCHESTRATION & TIMING GUIDELINES:\nWhen implementing multiple animations, carefully orchestrate them to match the design intent:\n1. Use <Sequence> components for elements or animations that should start at specific frames.\n   Example: <Sequence from={30} durationInFrames={60}><YourAnimatedElement /></Sequence>\n2. For animation dependencies between elements (animations that must follow others):\n   - Create a timing map that respects trigger values like 'afterPrevious' by calculating startFrames.\n   - Example: const titleExitFrame = titleStartFrame + titleDuration;\n             const subTitleStartFrame = titleExitFrame; // Starting after title exits\n\n### AUDIO IMPLEMENTATION:\nThis scene includes the following audio track(s) to implement:\n- Audio 1: t1a2b3c4-3456-7890-abcd-ef1234567890\n  - Source: assets/audio/mystical_theme.mp3\n  - Start at frame: 0\n  - Volume: 0.8\n  - Implementation: <Audio src={\"assets/audio/mystical_theme.mp3\"} startFrom={0} volume={0.8} />\n\n### CODE QUALITY & PERFORMANCE GUIDELINES:\n1. MODULARITY: For complex elements, consider creating sub-components.\n2. PERFORMANCE: Minimize DOM nodes - prefer CSS transforms over creating new elements.\n3. MEMOIZATION: Use React.useMemo() for computationally expensive calculations.\n4. TYPING: Provide proper TypeScript types throughout, including for style objects.\n5. COMMENTS: Add brief comments for complex animation logic or calculations.\n6. ORGANIZATION: Group related animations and separate distinct animation phases.\n7. ERROR HANDLING: Include defensive checks for potentially undefined values.\n\n### CRITICAL REMINDER:\n- PRECISELY follow the AnimationDesignBrief's specifications.\n- RESPECT the timing, durations, and easing specified in the brief.\n- IMPLEMENT ALL elements and animations exactly as detailed above.\n- START with the boilerplate structure provided earlier.\n- REMEMBER the first line MUST be: // src/remotion/components/scenes/WizardPerformsAScene.tsx","sceneId":"9ca3e8b1-349d-42bd-8227-7d1964d55d6f","userData":{"userId":"30c92f68-3935-4e86-8260-7a5fbd1a9dc3"},"projectId":"00ca3ed0-2787-4532-bf3d-0bcca1f66010","componentName":"WizardPerformsAScene","durationInFrames":210,"animationDesignBriefId":"aa6dccfa-c41c-43f1-8cba-a136aadc7ede"},"statusMessageId":"b4d946a0-b22e-40c7-bdfe-80da8d5cf857"},{"id":"43788298-9f38-4f5a-88ed-2e10e913f4ef","projectId":"00ca3ed0-2787-4532-bf3d-0bcca1f66010","effect":"WizardAppearsOnScene","tsxCode":"\"use client\";\n\n// src/remotion/components/scenes/WizardAppearsOnScene.tsx\nimport React from 'react';\nimport {\n  AbsoluteFill,\n  useCurrentFrame,\n  useVideoConfig,\n  interpolate,\n  spring,\n  Sequence,\n  Easing,\n  Img,\n} from 'remotion';\nimport { AnimationDesignBrief } from '~/lib/schemas/animationDesignBrief.schema';\n\nexport const WizardAppearsOnScene: React.FC<{ brief: AnimationDesignBrief }> = ({ brief }) => {\n  const frame = useCurrentFrame();\n  const { fps, width, height, durationInFrames } = useVideoConfig();\n\n  // Extract brief settings\n  const { colorPalette } = brief;\n  const backgroundColor = colorPalette?.background || '#0b0c10';\n\n  // ELEMENT 1 - Fullscreen subtle zoom\n  const scale1 = interpolate(\n    frame,\n    [0, durationInFrames],\n    [1, 1.05],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp',\n      easing: Easing.easeOutCubic,\n    }\n  );\n\n  // ELEMENT 3 - White center panel fade & scale\n  const opacityIn3 = interpolate(\n    frame,\n    [0, 30],\n    [0, 0.8],\n    { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }\n  );\n  const opacityOut3 = interpolate(\n    frame,\n    [0, 20],\n    [0.8, 0],\n    { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInCubic }\n  );\n  const opacity3 = frame <= 20 ? opacityOut3 : opacityIn3;\n  const scale3 = interpolate(\n    frame,\n    [0, 30],\n    [0.8, 1],\n    { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutBack }\n  );\n\n  // ELEMENT 4 - Wizard image slide up & fade\n  const opacityIn4 = interpolate(\n    frame,\n    [0, 30],\n    [0, 1],\n    { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }\n  );\n  const opacityOut4 = interpolate(\n    frame,\n    [0, 30],\n    [1, 0],\n    { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInCubic }\n  );\n  const opacity4 = frame <= 30 ? opacityOut4 : 0;\n  const y4 = interpolate(\n    frame,\n    [0, 30],\n    [1200, 540],\n    { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }\n  );\n\n  // ELEMENT 5 - Mystic glow shape\n  const fadeIn5 = interpolate(\n    frame,\n    [0, 20],\n    [0, 1],\n    { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }\n  );\n  const customOpacity5 = interpolate(\n    frame,\n    [0, 30],\n    [0.8, 0.6],\n    { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInOutSine }\n  );\n  const opacityOut5 = interpolate(\n    frame,\n    [0, 20],\n    [0.6, 0],\n    { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInCubic }\n  );\n  const opacity5 = \n    frame <= 20 ? fadeIn5 : frame <= 30 ? customOpacity5 : 0;\n\n  // ELEMENT 6 - Title text fade\n  const fadeIn6 = interpolate(\n    frame,\n    [0, 20],\n    [0, 1],\n    { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }\n  );\n  const fadeOut6 = interpolate(\n    frame,\n    [0, 20],\n    [1, 0],\n    { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInCubic }\n  );\n  const opacity6 = fadeIn6 * fadeOut6;\n\n  return (\n    <AbsoluteFill style={{ backgroundColor, overflow: 'hidden' }}>\n      <Sequence from={0} durationInFrames={durationInFrames}>\n        {/* Background Zoom */}\n        <div\n          style={{\n            position: 'absolute',\n            left: 0,\n            top: 0,\n            width: width,\n            height: height,\n            opacity: 1,\n            transform: `scale(${scale1})`,\n            zIndex: 1,\n          }}\n        />\n        {/* Base Background Color */}\n        <div\n          style={{\n            position: 'absolute',\n            left: 0,\n            top: 0,\n            width: width,\n            height: height,\n            backgroundColor: '#0b0c10',\n            zIndex: 2,\n          }}\n        />\n        {/* White Panel Center */}\n        <div\n          style={{\n            position: 'absolute',\n            left: 960,\n            top: 300,\n            width: 800,\n            height: 600,\n            backgroundColor: '#ffffff',\n            opacity: opacity3,\n            transform: `scale(${scale3})`,\n            zIndex: 3,\n          }}\n        />\n        {/* Wizard Image */}\n        <Img\n          src=\"https://example.com/wizard.png\"\n          style={{\n            position: 'absolute',\n            left: 960,\n            top: y4,\n            width: 400,\n            height: 600,\n            opacity: opacity4,\n            transform: 'rotate(0deg) scale(1)',\n            zIndex: 4,\n          }}\n        />\n        {/* Mystic Glow Shape */}\n        <div\n          style={{\n            position: 'absolute',\n            left: 960,\n            top: 540,\n            width: 1000,\n            height: 1080,\n            backgroundColor: '#66fcf1',\n            opacity: opacity5,\n            transform: 'rotate(0deg) scale(1)',\n            zIndex: 5,\n          }}\n        />\n        {/* Title Text */}\n        <h1\n          style={{\n            position: 'absolute',\n            left: 960,\n            top: 100,\n            width: 800,\n            height: 80,\n            margin: 0,\n            fontFamily: 'Cinzel Decorative',\n            fontSize: 72,\n            color: '#ffffff',\n            textAlign: 'center',\n            opacity: opacity6,\n            transform: 'translateX(-50%)',\n            zIndex: 6,\n          }}\n        >\n          The Wizard Arrives\n        </h1>\n      </Sequence>\n    </AbsoluteFill>\n  );\n};","status":"building","outputUrl":null,"errorMessage":"TSX code is missing for this job","retryCount":1,"createdAt":"2025-05-10 03:52:51.190905+00","updatedAt":"2025-05-10 03:53:41.29+00","metadata":{"fps":30,"width":1920,"height":1080,"prompt":"### ROLE: You are an Expert Remotion Developer and Senior React Engineer.\n### TASK: Create a production-quality Remotion React functional component in TypeScript.\n### COMPONENT NAME: 'WizardAppearsOnScene'\n### OBJECTIVE: Generate a component that precisely implements the provided AnimationDesignBrief with professional animations and visual effects.\n### VIDEO CONFIG: Target video is 1920x1080px, 90 frames total duration, at 30 FPS.\n### MANDATORY REQUIREMENTS:\n- The FIRST line MUST be: // src/remotion/components/scenes/WizardAppearsOnScene.tsx\n- The component MUST be a functional component using TypeScript (.tsx).\n- ALWAYS use the Remotion hooks: useCurrentFrame() and useVideoConfig() for timing and dimensions.\n- Component MUST accept props: { brief: AnimationDesignBrief } (assume this type is imported).\n- Utilize appropriate Remotion animation functions based on each element's needs:\n  * interpolate() - For smooth linear or eased transitions between values\n  * spring() - For physics-based, bouncy animations\n  * Easing module - For specifying animation curves (easeInOut, bezier, etc.)\n- Use Remotion timing components when needed:\n  * <Sequence from={startFrame} durationInFrames={duration}> - For sequential animations\n  * <Series> - For orchestrating complex animation sequences\n  * <Loop> - For repeating animations\n- Apply absolute positioning based on initialLayout coordinates.\n\n### BOILERPLATE STRUCTURE (Follow this pattern):\n```typescript\n// src/remotion/components/scenes/WizardAppearsOnScene.tsx\nimport { AbsoluteFill, useCurrentFrame, useVideoConfig, interpolate, spring, Sequence, Easing, Img, Audio } from 'remotion';\nimport React from 'react';\n// import { AnimationDesignBrief } from '~/lib/schemas/animationDesignBrief.schema';\n\nexport const WizardAppearsOnScene: React.FC<{ brief: AnimationDesignBrief }> = ({ brief }) => {\n  const frame = useCurrentFrame();\n  const { fps, width, height, durationInFrames } = useVideoConfig();\n\n  // Extract key brief properties\n  const { elements, colorPalette, typography, overallStyle } = brief;\n\n  // Define background color from brief\n  const backgroundColor = colorPalette?.background || 'transparent';\n\n  return (\n    <AbsoluteFill style={{ backgroundColor }}>\n      {/* Render each element with its animations */}\n    </AbsoluteFill>\n  );\n};\n```\n\n--- Scene Overview ---\nScene Name: WizardAppearsOnScene\nPurpose: Wizard appears on a mystic stage under a spotlight, the camera zooms in slightly.\nOverall Style: Mystical Cinematic\n\n--- Color Palette ---\n- Primary Color: #1f2833\n- Secondary Color: #c5c6c7\n- Accent Color: #66fcf1\n- Background Color: #0b0c10\n- Text Primary Color: #ffffff\n- Text Secondary Color: #45a29e\n\n--- Typography ---\n- Default Font Family: Cormorant Garamond\n- Heading1 Style:\n  - Font Family: Cinzel Decorative\n  - Font Size: 72\n\n### ELEMENT-BY-ELEMENT IMPLEMENTATION GUIDE:\nEach element from the AnimationDesignBrief must be translated into React/Remotion code following these guidelines:\n\n#### ELEMENT TYPE TRANSLATION:\n- 'text' → Use a <div> or <h1>-<h6> with appropriate styling\n- 'image' → Use Remotion's <Img src={content} /> component\n- 'video' → Use Remotion's <Video src={content} /> component\n- 'shape' → Use appropriate shape elements (div with border-radius for circles/rounded rectangles, SVG for complex shapes)\n- 'container' → Use a positioned <div> that may contain child elements\n\n#### INITIAL LAYOUT TRANSLATION:\nAll initialLayout properties MUST be translated to React inline styles:\n- 'x', 'y' → style={{ position: 'absolute', left: x, top: y }}\n- 'width', 'height' → style={{ width, height }}\n- 'opacity' → style={{ opacity }}\n- 'rotation' → style={{ transform: `rotate(${rotation}deg)` }}\n- 'scale' → style={{ transform: `scale(${scale})` }}\n- 'zIndex' → style={{ zIndex }}\n- Multiple transforms should be combined: transform: `rotate(${rotation}deg) scale(${scale})`\n\n#### ANIMATION IMPLEMENTATION:\nFor each animation, use this approach:\n1. Calculate the active animation frames based on delayInFrames and durationInFrames:\n   const animStartFrame = animation.delayInFrames || 0;\n   const animEndFrame = animStartFrame + (animation.durationInFrames || 30);\n2. Apply the appropriate Remotion animation function:\n   - For 'spring' animations or when remotionFunctionHint is 'spring':\n     const animatedValue = spring({\n       frame: frame - animStartFrame,\n       fps,\n       from: property.from,\n       to: property.to,\n       config: property.springConfig || { damping: 10, mass: 1, stiffness: 100 }\n     });\n   - For most other animations, use interpolate:\n     const animatedValue = interpolate(\n       frame,\n       [animStartFrame, animEndFrame],\n       [property.from, property.to],\n       {\n         extrapolateLeft: 'clamp',\n         extrapolateRight: 'clamp',\n         easing: determineEasing(animation.easing)\n       }\n     );\n3. Apply animated values to style properties:\n   - For transform properties (e.g., 'transform.translateX', 'transform.scale'):\n     Extract the specific transform type and apply with appropriate units.\n   - For standard CSS properties (e.g., 'opacity'):\n     Apply directly to the style object.\n   - Example: style={{ opacity: animatedOpacity, transform: `translateX(${animatedX}px) scale(${animatedScale})` }}\n4. For sequence-based timing (startAfter, startWith):\n   - Wrap elements in <Sequence> components with appropriate 'from' and 'durationInFrames' props\n   - Use 'from' attribute based on animation.delayInFrames\n   - Example: <Sequence from={30} durationInFrames={60}>...</Sequence>\n\n### SPECIFIC ELEMENTS TO IMPLEMENT:\n\n#### ELEMENT 1: cfc76e58-7e1f-4802-879b-d8ca5d13efdb (customComponent)\n- Initial Layout (CSS equivalent):\n  * x: 0px\n  * y: 0px\n  * width: 1920px\n  * height: 1080px\n  * opacity: 1\n  * rotation: 0deg\n  * scale: 1\n- React style equivalent: style={{ position: 'absolute', left: 0px, top: 0px, width: 1920px, height: 1080px, opacity: 1, transform: 'rotate(0deg) scale(1)' }}\n\n- Animations for cfc76e58-7e1f-4802-879b-d8ca5d13efdb:\n  * Animation 1: customProperty\n    - Start frame: 0\n    - Duration: 90 frames\n    - End frame: 90\n    - Easing: easeOutCubic → Implement as: Easing.easeOutCubic\n    - Properties to animate:\n      • scale: from 1 to 1.05\n        Implementation: `const scaleValue = interpolate(\n          frame, \n          [0, 90], \n          [1, 1.05], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }\n        );`\n\n#### ELEMENT 2: bce4ade7-e539-4d13-80bd-e1310a769011 (shape)\n- Initial Layout (CSS equivalent):\n  * x: 0px\n  * y: 0px\n  * width: 1920px\n  * height: 1080px\n  * opacity: 1\n  * rotation: 0deg\n  * scale: 1\n  * backgroundColor: #0b0c10\n- React style equivalent: style={{ position: 'absolute', left: 0px, top: 0px, width: 1920px, height: 1080px, opacity: 1, transform: 'rotate(0deg) scale(1)', backgroundColor: '#0b0c10' }}\n\n#### ELEMENT 3: 26443180-0b3f-488e-b24c-c2d8c498f773 (shape)\n- Initial Layout (CSS equivalent):\n  * x: 960px\n  * y: 300px\n  * width: 800px\n  * height: 600px\n  * opacity: 0\n  * rotation: 0deg\n  * scale: 0.8\n  * backgroundColor: #ffffff\n- React style equivalent: style={{ position: 'absolute', left: 960px, top: 300px, width: 800px, height: 600px, opacity: 0, transform: 'rotate(0deg) scale(0.8)', backgroundColor: '#ffffff' }}\n\n- Animations for 26443180-0b3f-488e-b24c-c2d8c498f773:\n  * Animation 1: fadeIn\n    - Start frame: 0\n    - Duration: 30 frames\n    - End frame: 30\n    - Easing: easeOutCubic → Implement as: Easing.easeOutCubic\n    - Properties to animate:\n      • opacity: from 0 to 0.8\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 30], \n          [0, 0.8], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }\n        );`\n  * Animation 2: customProperty\n    - Start frame: 0\n    - Duration: 30 frames\n    - End frame: 30\n    - Easing: easeOutBack → Implement as: Easing.easeOutBack\n    - Properties to animate:\n      • scale: from 0.8 to 1\n        Implementation: `const scaleValue = interpolate(\n          frame, \n          [0, 30], \n          [0.8, 1], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutBack }\n        );`\n  * Animation 3: fadeOut\n    - Start frame: 0\n    - Duration: 20 frames\n    - End frame: 20\n    - Easing: easeInCubic → Implement as: Easing.easeInCubic\n    - Properties to animate:\n      • opacity: from 0.8 to 0\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 20], \n          [0.8, 0], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInCubic }\n        );`\n\n#### ELEMENT 4: 43804696-6f29-44c9-8f93-db6ca4084892 (image)\n- Content: https://example.com/wizard.png\n- Initial Layout (CSS equivalent):\n  * x: 960px\n  * y: 1200px\n  * width: 400px\n  * height: 600px\n  * opacity: 0\n  * rotation: 0deg\n  * scale: 1\n- React style equivalent: style={{ position: 'absolute', left: 960px, top: 1200px, width: 400px, height: 600px, opacity: 0, transform: 'rotate(0deg) scale(1)' }}\n\n- Animations for 43804696-6f29-44c9-8f93-db6ca4084892:\n  * Animation 1: fadeIn\n    - Start frame: 0\n    - Duration: 30 frames\n    - End frame: 30\n    - Easing: easeOutCubic → Implement as: Easing.easeOutCubic\n    - Properties to animate:\n      • opacity: from 0 to 1\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 30], \n          [0, 1], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }\n        );`\n  * Animation 2: slideUp\n    - Start frame: 0\n    - Duration: 30 frames\n    - End frame: 30\n    - Easing: easeOutCubic → Implement as: Easing.easeOutCubic\n    - Properties to animate:\n      • y: from 1200 to 540\n        Implementation: `const yValue = interpolate(\n          frame, \n          [0, 30], \n          [1200, 540], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }\n        );`\n  * Animation 3: fadeOut\n    - Start frame: 0\n    - Duration: 30 frames\n    - End frame: 30\n    - Easing: easeInCubic → Implement as: Easing.easeInCubic\n    - Properties to animate:\n      • opacity: from 1 to 0\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 30], \n          [1, 0], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInCubic }\n        );`\n\n#### ELEMENT 5: 38fb2470-3a8f-4733-a7be-89571f1f671a (shape)\n- Initial Layout (CSS equivalent):\n  * x: 960px\n  * y: 540px\n  * width: 1000px\n  * height: 1080px\n  * opacity: 0\n  * rotation: 0deg\n  * scale: 1\n- React style equivalent: style={{ position: 'absolute', left: 960px, top: 540px, width: 1000px, height: 1080px, opacity: 0, transform: 'rotate(0deg) scale(1)' }}\n\n- Animations for 38fb2470-3a8f-4733-a7be-89571f1f671a:\n  * Animation 1: fadeIn\n    - Start frame: 0\n    - Duration: 20 frames\n    - End frame: 20\n    - Easing: easeOutCubic → Implement as: Easing.easeOutCubic\n    - Properties to animate:\n      • opacity: from 0 to 1\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 20], \n          [0, 1], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }\n        );`\n  * Animation 2: customProperty\n    - Start frame: 0\n    - Duration: 30 frames\n    - End frame: 30\n    - Easing: easeInOutSine → Implement as: Easing.easeInOutSine\n    - Properties to animate:\n      • opacity: from 0.8 to 0.6\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 30], \n          [0.8, 0.6], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInOutSine }\n        );`\n  * Animation 3: fadeOut\n    - Start frame: 0\n    - Duration: 20 frames\n    - End frame: 20\n    - Easing: easeInCubic → Implement as: Easing.easeInCubic\n    - Properties to animate:\n      • opacity: from 0.6 to 0\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 20], \n          [0.6, 0], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInCubic }\n        );`\n\n#### ELEMENT 6: 5419a730-5f55-4c94-92c1-6da85a4eb302 (text)\n- Content: The Wizard Arrives\n- Initial Layout (CSS equivalent):\n  * x: 960px\n  * y: 100px\n  * width: 800px\n  * height: 80px\n  * opacity: 0\n  * rotation: 0deg\n  * scale: 1\n- React style equivalent: style={{ position: 'absolute', left: 960px, top: 100px, width: 800px, height: 80px, opacity: 0, transform: 'rotate(0deg) scale(1)' }}\n\n- Animations for 5419a730-5f55-4c94-92c1-6da85a4eb302:\n  * Animation 1: fadeIn\n    - Start frame: 0\n    - Duration: 20 frames\n    - End frame: 20\n    - Easing: easeOutCubic → Implement as: Easing.easeOutCubic\n    - Properties to animate:\n      • opacity: from 0 to 1\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 20], \n          [0, 1], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }\n        );`\n  * Animation 2: fadeOut\n    - Start frame: 0\n    - Duration: 20 frames\n    - End frame: 20\n    - Easing: easeInCubic → Implement as: Easing.easeInCubic\n    - Properties to animate:\n      • opacity: from 1 to 0\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 20], \n          [1, 0], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInCubic }\n        );`\n\n### SEQUENCE ORCHESTRATION & TIMING GUIDELINES:\nWhen implementing multiple animations, carefully orchestrate them to match the design intent:\n1. Use <Sequence> components for elements or animations that should start at specific frames.\n   Example: <Sequence from={30} durationInFrames={60}><YourAnimatedElement /></Sequence>\n2. For animation dependencies between elements (animations that must follow others):\n   - Create a timing map that respects trigger values like 'afterPrevious' by calculating startFrames.\n   - Example: const titleExitFrame = titleStartFrame + titleDuration;\n             const subTitleStartFrame = titleExitFrame; // Starting after title exits\n\n### CODE QUALITY & PERFORMANCE GUIDELINES:\n1. MODULARITY: For complex elements, consider creating sub-components.\n2. PERFORMANCE: Minimize DOM nodes - prefer CSS transforms over creating new elements.\n3. MEMOIZATION: Use React.useMemo() for computationally expensive calculations.\n4. TYPING: Provide proper TypeScript types throughout, including for style objects.\n5. COMMENTS: Add brief comments for complex animation logic or calculations.\n6. ORGANIZATION: Group related animations and separate distinct animation phases.\n7. ERROR HANDLING: Include defensive checks for potentially undefined values.\n\n### CRITICAL REMINDER:\n- PRECISELY follow the AnimationDesignBrief's specifications.\n- RESPECT the timing, durations, and easing specified in the brief.\n- IMPLEMENT ALL elements and animations exactly as detailed above.\n- START with the boilerplate structure provided earlier.\n- REMEMBER the first line MUST be: // src/remotion/components/scenes/WizardAppearsOnScene.tsx","sceneId":"b3ea846b-aafe-419d-8fdc-4558c3d446eb","userData":{"userId":"30c92f68-3935-4e86-8260-7a5fbd1a9dc3"},"projectId":"00ca3ed0-2787-4532-bf3d-0bcca1f66010","componentName":"WizardAppearsOnScene","durationInFrames":90,"animationDesignBriefId":"c36e5fef-43c1-46e3-a499-0a21a879169f"},"statusMessageId":"b4d946a0-b22e-40c7-bdfe-80da8d5cf857"},{"id":"76cb101d-4e3e-40b5-a44d-42e753f7f713","projectId":"ec0cd019-7ea9-4d99-864a-43aae38f631a","effect":"ShowAPhoneScene","tsxCode":"\"use client\";\n\n// src/remotion/components/scenes/ShowAPhoneScene.tsx\nimport React from 'react';\nimport {\n  AbsoluteFill,\n  useCurrentFrame,\n  useVideoConfig,\n  interpolate,\n  Sequence,\n  Easing,\n  Img,\n} from 'remotion';\n// import { AnimationDesignBrief } from '~/lib/schemas/animationDesignBrief.schema';\n\nexport const ShowAPhoneScene: React.FC<{ brief: AnimationDesignBrief }> = ({ brief }) => {\n  const frame = useCurrentFrame();\n  const { fps, width, height, durationInFrames } = useVideoConfig();\n\n  // Background\n  const bgOpacity = interpolate(\n    frame,\n    [0, 15],\n    [0, 1],\n    { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }\n  );\n\n  // Phone container fade-in & fade-out\n  const phoneFadeIn = interpolate(\n    frame,\n    [0, 20],\n    [0, 1],\n    { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }\n  );\n  const phoneFadeOut = interpolate(\n    frame,\n    [130, 150],\n    [1, 0],\n    { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInCubic }\n  );\n  const phoneOpacity = frame < 130 ? phoneFadeIn : phoneFadeOut;\n\n  // Gallery Image 1\n  const img1Opacity = interpolate(\n    frame,\n    [0, 30],\n    [1, 0],\n    { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInOutCubic }\n  );\n  const img1X = interpolate(\n    frame,\n    [0, 30],\n    [960, 600],\n    { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInOutCubic }\n  );\n\n  // Gallery Image 2\n  const img2X = frame < 30\n    ? interpolate(\n        frame,\n        [0, 30],\n        [1320, 960],\n        { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }\n      )\n    : interpolate(\n        frame,\n        [30, 50],\n        [960, 600],\n        { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInOutCubic }\n      );\n  const img2Opacity = frame < 30\n    ? interpolate(\n        frame,\n        [0, 30],\n        [0, 1],\n        { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }\n      )\n    : interpolate(\n        frame,\n        [30, 50],\n        [1, 0],\n        { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInOutCubic }\n      );\n\n  // Gallery Image 3\n  const img3X = interpolate(\n    frame,\n    [0, 20],\n    [1320, 960],\n    { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }\n  );\n  const img3Opacity = interpolate(\n    frame,\n    [0, 20],\n    [0, 1],\n    { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }\n  );\n\n  // Finger animation\n  const fingerOpacity = frame < 15\n    ? interpolate(\n        frame,\n        [0, 15],\n        [0, 1],\n        { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }\n      )\n    : interpolate(\n        frame,\n        [15, 30],\n        [1, 0],\n        { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInCubic }\n      );\n  const fingerX = frame < 15\n    ? interpolate(\n        frame,\n        [0, 15],\n        [1320, 1150],\n        { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }\n      )\n    : interpolate(\n        frame,\n        [15, 45],\n        [1150, 700],\n        { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInOutCubic }\n      );\n\n  // Text animation\n  const textOpacity = frame < 15\n    ? interpolate(\n        frame,\n        [0, 15],\n        [0, 1],\n        { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutQuint }\n      )\n    : interpolate(\n        frame,\n        [15, 30],\n        [1, 0],\n        { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInCubic }\n      );\n\n  return (\n    <AbsoluteFill style={{ backgroundColor: colorPalette?.background || '#f0f0f0' }}>\n      {/* Background Shape */}\n      <div\n        style={{\n          position: 'absolute',\n          left: 960,\n          top: 540,\n          width: 1920,\n          height: 1080,\n          opacity: bgOpacity,\n          transform: 'rotate(0deg) scale(1)',\n          backgroundColor: '#f0f0f0',\n          zIndex: 0,\n        }}\n      />\n\n      {/* Phone White Container */}\n      <div\n        style={{\n          position: 'absolute',\n          left: 960,\n          top: 540,\n          width: 400,\n          height: 800,\n          opacity: phoneOpacity,\n          transform: 'rotate(0deg) scale(1)',\n          backgroundColor: '#ffffff',\n          zIndex: 1,\n        }}\n      />\n\n      {/* Gallery Image 1 */}\n      <div\n        style={{\n          position: 'absolute',\n          left: img1X,\n          top: 540,\n          width: 360,\n          height: 640,\n          opacity: img1Opacity,\n          transform: 'rotate(0deg) scale(1)',\n          zIndex: 2,\n        }}\n      >\n        <Img\n          src={brief.elements.find((e) => e.id === '6eac9fea-ef13-4af3-b4ee-6e8e749f6dde')?.content || 'gallery1.png'}\n          style={{ width: '100%', height: '100%' }}\n        />\n      </div>\n\n      {/* Gallery Image 2 */}\n      <div\n        style={{\n          position: 'absolute',\n          left: img2X,\n          top: 540,\n          width: 360,\n          height: 640,\n          opacity: img2Opacity,\n          transform: 'rotate(0deg) scale(1)',\n          zIndex: 2,\n        }}\n      >\n        <Img\n          src={brief.elements.find((e) => e.id === '952463b7-d31d-4e38-b1dc-b818fc929ced')?.content || 'gallery2.png'}\n          style={{ width: '100%', height: '100%' }}\n        />\n      </div>\n\n      {/* Gallery Image 3 */}\n      <div\n        style={{\n          position: 'absolute',\n          left: img3X,\n          top: 540,\n          width: 360,\n          height: 640,\n          opacity: img3Opacity,\n          transform: 'rotate(0deg) scale(1)',\n          zIndex: 2,\n        }}\n      >\n        <Img\n          src={brief.elements.find((e) => e.id === '57395ec4-efa5-4656-ba7a-7e5df62779ed')?.content || 'gallery3.png'}\n          style={{ width: '100%', height: '100%' }}\n        />\n      </div>\n\n      {/* Finger Swipe */}\n      <div\n        style={{\n          position: 'absolute',\n          left: fingerX,\n          top: 900,\n          width: 100,\n          height: 100,\n          opacity: fingerOpacity,\n          transform: 'rotate(0deg) scale(1)',\n          zIndex: 3,\n        }}\n      >\n        <Img\n          src={brief.elements.find((e) => e.id === 'e51cb553-99e7-43c2-81a5-dc8d7b4a74b6')?.content || 'finger.png'}\n          style={{ width: '100%', height: '100%' }}\n        />\n      </div>\n\n      {/* Instruction Text */}\n      <div\n        style={{\n          position: 'absolute',\n          left: 960,\n          top: 200,\n          width: 600,\n          height: 80,\n          opacity: textOpacity,\n          transform: 'rotate(0deg) scale(1)',\n          fontFamily: brief.typography?.fontFamily || 'Roboto',\n          fontSize: 48,\n          color: brief.colorPalette?.textPrimary || '#333333',\n          textAlign: 'center',\n          lineHeight: '80px',\n          zIndex: 4,\n        }}\n      >\n        {brief.elements.find((e) => e.id === '57e1884f-cd5d-455c-8d02-049eef877b4e')?.content || 'Swipe to Explore'}\n      </div>\n    </AbsoluteFill>\n  );\n};","status":"building","outputUrl":null,"errorMessage":"TSX code is missing for this job","retryCount":1,"createdAt":"2025-05-10 03:47:10.667624+00","updatedAt":"2025-05-10 03:47:58.326+00","metadata":{"fps":30,"width":1920,"height":1080,"prompt":"### ROLE: You are an Expert Remotion Developer and Senior React Engineer.\n### TASK: Create a production-quality Remotion React functional component in TypeScript.\n### COMPONENT NAME: 'ShowAPhoneScene'\n### OBJECTIVE: Generate a component that precisely implements the provided AnimationDesignBrief with professional animations and visual effects.\n### VIDEO CONFIG: Target video is 1920x1080px, 150 frames total duration, at 30 FPS.\n### MANDATORY REQUIREMENTS:\n- The FIRST line MUST be: // src/remotion/components/scenes/ShowAPhoneScene.tsx\n- The component MUST be a functional component using TypeScript (.tsx).\n- ALWAYS use the Remotion hooks: useCurrentFrame() and useVideoConfig() for timing and dimensions.\n- Component MUST accept props: { brief: AnimationDesignBrief } (assume this type is imported).\n- Utilize appropriate Remotion animation functions based on each element's needs:\n  * interpolate() - For smooth linear or eased transitions between values\n  * spring() - For physics-based, bouncy animations\n  * Easing module - For specifying animation curves (easeInOut, bezier, etc.)\n- Use Remotion timing components when needed:\n  * <Sequence from={startFrame} durationInFrames={duration}> - For sequential animations\n  * <Series> - For orchestrating complex animation sequences\n  * <Loop> - For repeating animations\n- Apply absolute positioning based on initialLayout coordinates.\n\n### BOILERPLATE STRUCTURE (Follow this pattern):\n```typescript\n// src/remotion/components/scenes/ShowAPhoneScene.tsx\nimport { AbsoluteFill, useCurrentFrame, useVideoConfig, interpolate, spring, Sequence, Easing, Img, Audio } from 'remotion';\nimport React from 'react';\n// import { AnimationDesignBrief } from '~/lib/schemas/animationDesignBrief.schema';\n\nexport const ShowAPhoneScene: React.FC<{ brief: AnimationDesignBrief }> = ({ brief }) => {\n  const frame = useCurrentFrame();\n  const { fps, width, height, durationInFrames } = useVideoConfig();\n\n  // Extract key brief properties\n  const { elements, colorPalette, typography, overallStyle } = brief;\n\n  // Define background color from brief\n  const backgroundColor = colorPalette?.background || 'transparent';\n\n  return (\n    <AbsoluteFill style={{ backgroundColor }}>\n      {/* Render each element with its animations */}\n    </AbsoluteFill>\n  );\n};\n```\n\n--- Scene Overview ---\nScene Name: ShowAPhoneScene\nPurpose: Show a phone screen mockup with a finger swiping through a gallery of images on the app interface.\nOverall Style: Modern flat material design with smooth, intuitive transitions.\n\n--- Color Palette ---\n- Primary Color: #ffffff\n- Secondary Color: #007AFF\n- Accent Color: #FF9500\n- Background Color: #f0f0f0\n- Text Primary Color: #333333\n- Text Secondary Color: #666666\n\n--- Typography ---\n- Default Font Family: Roboto\n- Heading1 Style:\n  - Font Family: Roboto\n  - Font Size: 48\n\n### ELEMENT-BY-ELEMENT IMPLEMENTATION GUIDE:\nEach element from the AnimationDesignBrief must be translated into React/Remotion code following these guidelines:\n\n#### ELEMENT TYPE TRANSLATION:\n- 'text' → Use a <div> or <h1>-<h6> with appropriate styling\n- 'image' → Use Remotion's <Img src={content} /> component\n- 'video' → Use Remotion's <Video src={content} /> component\n- 'shape' → Use appropriate shape elements (div with border-radius for circles/rounded rectangles, SVG for complex shapes)\n- 'container' → Use a positioned <div> that may contain child elements\n\n#### INITIAL LAYOUT TRANSLATION:\nAll initialLayout properties MUST be translated to React inline styles:\n- 'x', 'y' → style={{ position: 'absolute', left: x, top: y }}\n- 'width', 'height' → style={{ width, height }}\n- 'opacity' → style={{ opacity }}\n- 'rotation' → style={{ transform: `rotate(${rotation}deg)` }}\n- 'scale' → style={{ transform: `scale(${scale})` }}\n- 'zIndex' → style={{ zIndex }}\n- Multiple transforms should be combined: transform: `rotate(${rotation}deg) scale(${scale})`\n\n#### ANIMATION IMPLEMENTATION:\nFor each animation, use this approach:\n1. Calculate the active animation frames based on delayInFrames and durationInFrames:\n   const animStartFrame = animation.delayInFrames || 0;\n   const animEndFrame = animStartFrame + (animation.durationInFrames || 30);\n2. Apply the appropriate Remotion animation function:\n   - For 'spring' animations or when remotionFunctionHint is 'spring':\n     const animatedValue = spring({\n       frame: frame - animStartFrame,\n       fps,\n       from: property.from,\n       to: property.to,\n       config: property.springConfig || { damping: 10, mass: 1, stiffness: 100 }\n     });\n   - For most other animations, use interpolate:\n     const animatedValue = interpolate(\n       frame,\n       [animStartFrame, animEndFrame],\n       [property.from, property.to],\n       {\n         extrapolateLeft: 'clamp',\n         extrapolateRight: 'clamp',\n         easing: determineEasing(animation.easing)\n       }\n     );\n3. Apply animated values to style properties:\n   - For transform properties (e.g., 'transform.translateX', 'transform.scale'):\n     Extract the specific transform type and apply with appropriate units.\n   - For standard CSS properties (e.g., 'opacity'):\n     Apply directly to the style object.\n   - Example: style={{ opacity: animatedOpacity, transform: `translateX(${animatedX}px) scale(${animatedScale})` }}\n4. For sequence-based timing (startAfter, startWith):\n   - Wrap elements in <Sequence> components with appropriate 'from' and 'durationInFrames' props\n   - Use 'from' attribute based on animation.delayInFrames\n   - Example: <Sequence from={30} durationInFrames={60}>...</Sequence>\n\n### SPECIFIC ELEMENTS TO IMPLEMENT:\n\n#### ELEMENT 1: 3554669b-fb3f-4866-bab0-14286ab975b7 (shape)\n- Initial Layout (CSS equivalent):\n  * x: 960px\n  * y: 540px\n  * width: 1920px\n  * height: 1080px\n  * opacity: 0\n  * rotation: 0deg\n  * scale: 1\n  * backgroundColor: #f0f0f0\n- React style equivalent: style={{ position: 'absolute', left: 960px, top: 540px, width: 1920px, height: 1080px, opacity: 0, transform: 'rotate(0deg) scale(1)', backgroundColor: '#f0f0f0' }}\n\n- Animations for 3554669b-fb3f-4866-bab0-14286ab975b7:\n  * Animation 1: fadeIn\n    - Start frame: 0\n    - Duration: 15 frames\n    - End frame: 15\n    - Easing: easeOutCubic → Implement as: Easing.easeOutCubic\n    - Properties to animate:\n      • opacity: from 0 to 1\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 15], \n          [0, 1], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }\n        );`\n\n#### ELEMENT 2: ddab55cd-0fad-4532-ab3b-eb94581841fb (shape)\n- Initial Layout (CSS equivalent):\n  * x: 960px\n  * y: 540px\n  * width: 400px\n  * height: 800px\n  * opacity: 0\n  * rotation: 0deg\n  * scale: 1\n  * backgroundColor: #ffffff\n- React style equivalent: style={{ position: 'absolute', left: 960px, top: 540px, width: 400px, height: 800px, opacity: 0, transform: 'rotate(0deg) scale(1)', backgroundColor: '#ffffff' }}\n\n- Animations for ddab55cd-0fad-4532-ab3b-eb94581841fb:\n  * Animation 1: fadeIn\n    - Start frame: 0\n    - Duration: 20 frames\n    - End frame: 20\n    - Easing: easeOutCubic → Implement as: Easing.easeOutCubic\n    - Properties to animate:\n      • opacity: from 0 to 1\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 20], \n          [0, 1], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }\n        );`\n  * Animation 2: fadeOut\n    - Start frame: 0\n    - Duration: 20 frames\n    - End frame: 20\n    - Easing: easeInCubic → Implement as: Easing.easeInCubic\n    - Properties to animate:\n      • opacity: from 1 to 0\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 20], \n          [1, 0], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInCubic }\n        );`\n\n#### ELEMENT 3: 6eac9fea-ef13-4af3-b4ee-6e8e749f6dde (image)\n- Content: gallery1.png\n- Initial Layout (CSS equivalent):\n  * x: 960px\n  * y: 540px\n  * width: 360px\n  * height: 640px\n  * opacity: 0\n  * rotation: 0deg\n  * scale: 1\n- React style equivalent: style={{ position: 'absolute', left: 960px, top: 540px, width: 360px, height: 640px, opacity: 0, transform: 'rotate(0deg) scale(1)' }}\n\n- Animations for 6eac9fea-ef13-4af3-b4ee-6e8e749f6dde:\n  * Animation 1: fadeIn\n    - Start frame: 0\n    - Duration: 15 frames\n    - End frame: 15\n    - Easing: easeOutCubic → Implement as: Easing.easeOutCubic\n    - Properties to animate:\n      • opacity: from 0 to 1\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 15], \n          [0, 1], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }\n        );`\n  * Animation 2: slideLeft\n    - Start frame: 0\n    - Duration: 30 frames\n    - End frame: 30\n    - Easing: easeInOutCubic → Implement as: Easing.easeInOutCubic\n    - Properties to animate:\n      • x: from 960 to 600\n        Implementation: `const xValue = interpolate(\n          frame, \n          [0, 30], \n          [960, 600], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInOutCubic }\n        );`\n      • opacity: from 1 to 0\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 30], \n          [1, 0], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInOutCubic }\n        );`\n\n#### ELEMENT 4: 952463b7-d31d-4e38-b1dc-b818fc929ced (image)\n- Content: gallery2.png\n- Initial Layout (CSS equivalent):\n  * x: 1320px\n  * y: 540px\n  * width: 360px\n  * height: 640px\n  * opacity: 0\n  * rotation: 0deg\n  * scale: 1\n- React style equivalent: style={{ position: 'absolute', left: 1320px, top: 540px, width: 360px, height: 640px, opacity: 0, transform: 'rotate(0deg) scale(1)' }}\n\n- Animations for 952463b7-d31d-4e38-b1dc-b818fc929ced:\n  * Animation 1: slideInLeft\n    - Start frame: 0\n    - Duration: 30 frames\n    - End frame: 30\n    - Easing: easeOutCubic → Implement as: Easing.easeOutCubic\n    - Properties to animate:\n      • x: from 1320 to 960\n        Implementation: `const xValue = interpolate(\n          frame, \n          [0, 30], \n          [1320, 960], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }\n        );`\n      • opacity: from 0 to 1\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 30], \n          [0, 1], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }\n        );`\n  * Animation 2: slideLeft\n    - Start frame: 0\n    - Duration: 20 frames\n    - End frame: 20\n    - Easing: easeInOutCubic → Implement as: Easing.easeInOutCubic\n    - Properties to animate:\n      • x: from 960 to 600\n        Implementation: `const xValue = interpolate(\n          frame, \n          [0, 20], \n          [960, 600], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInOutCubic }\n        );`\n      • opacity: from 1 to 0\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 20], \n          [1, 0], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInOutCubic }\n        );`\n\n#### ELEMENT 5: 57395ec4-efa5-4656-ba7a-7e5df62779ed (image)\n- Content: gallery3.png\n- Initial Layout (CSS equivalent):\n  * x: 1320px\n  * y: 540px\n  * width: 360px\n  * height: 640px\n  * opacity: 0\n  * rotation: 0deg\n  * scale: 1\n- React style equivalent: style={{ position: 'absolute', left: 1320px, top: 540px, width: 360px, height: 640px, opacity: 0, transform: 'rotate(0deg) scale(1)' }}\n\n- Animations for 57395ec4-efa5-4656-ba7a-7e5df62779ed:\n  * Animation 1: slideInLeft\n    - Start frame: 0\n    - Duration: 20 frames\n    - End frame: 20\n    - Easing: easeOutCubic → Implement as: Easing.easeOutCubic\n    - Properties to animate:\n      • x: from 1320 to 960\n        Implementation: `const xValue = interpolate(\n          frame, \n          [0, 20], \n          [1320, 960], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }\n        );`\n      • opacity: from 0 to 1\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 20], \n          [0, 1], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }\n        );`\n\n#### ELEMENT 6: e51cb553-99e7-43c2-81a5-dc8d7b4a74b6 (image)\n- Content: finger.png\n- Initial Layout (CSS equivalent):\n  * x: 1320px\n  * y: 900px\n  * width: 100px\n  * height: 100px\n  * opacity: 0\n  * rotation: 0deg\n  * scale: 1\n- React style equivalent: style={{ position: 'absolute', left: 1320px, top: 900px, width: 100px, height: 100px, opacity: 0, transform: 'rotate(0deg) scale(1)' }}\n\n- Animations for e51cb553-99e7-43c2-81a5-dc8d7b4a74b6:\n  * Animation 1: fadeIn\n    - Start frame: 0\n    - Duration: 15 frames\n    - End frame: 15\n    - Easing: easeOutCubic → Implement as: Easing.easeOutCubic\n    - Properties to animate:\n      • opacity: from 0 to 1\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 15], \n          [0, 1], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }\n        );`\n      • x: from 1320 to 1150\n        Implementation: `const xValue = interpolate(\n          frame, \n          [0, 15], \n          [1320, 1150], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }\n        );`\n  * Animation 2: slideLeft\n    - Start frame: 0\n    - Duration: 30 frames\n    - End frame: 30\n    - Easing: easeInOutCubic → Implement as: Easing.easeInOutCubic\n    - Properties to animate:\n      • x: from 1150 to 700\n        Implementation: `const xValue = interpolate(\n          frame, \n          [0, 30], \n          [1150, 700], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInOutCubic }\n        );`\n  * Animation 3: fadeOut\n    - Start frame: 0\n    - Duration: 15 frames\n    - End frame: 15\n    - Easing: easeInCubic → Implement as: Easing.easeInCubic\n    - Properties to animate:\n      • opacity: from 1 to 0\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 15], \n          [1, 0], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInCubic }\n        );`\n\n#### ELEMENT 7: 57e1884f-cd5d-455c-8d02-049eef877b4e (text)\n- Content: Swipe to Explore\n- Initial Layout (CSS equivalent):\n  * x: 960px\n  * y: 200px\n  * width: 600px\n  * height: 80px\n  * opacity: 0\n  * rotation: 0deg\n  * scale: 1\n- React style equivalent: style={{ position: 'absolute', left: 960px, top: 200px, width: 600px, height: 80px, opacity: 0, transform: 'rotate(0deg) scale(1)' }}\n\n- Animations for 57e1884f-cd5d-455c-8d02-049eef877b4e:\n  * Animation 1: fadeIn\n    - Start frame: 0\n    - Duration: 15 frames\n    - End frame: 15\n    - Easing: easeOutQuint → Implement as: Easing.easeOutQuint\n    - Properties to animate:\n      • opacity: from 0 to 1\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 15], \n          [0, 1], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutQuint }\n        );`\n  * Animation 2: fadeOut\n    - Start frame: 0\n    - Duration: 15 frames\n    - End frame: 15\n    - Easing: easeInCubic → Implement as: Easing.easeInCubic\n    - Properties to animate:\n      • opacity: from 1 to 0\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 15], \n          [1, 0], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInCubic }\n        );`\n\n### SEQUENCE ORCHESTRATION & TIMING GUIDELINES:\nWhen implementing multiple animations, carefully orchestrate them to match the design intent:\n1. Use <Sequence> components for elements or animations that should start at specific frames.\n   Example: <Sequence from={30} durationInFrames={60}><YourAnimatedElement /></Sequence>\n2. For animation dependencies between elements (animations that must follow others):\n   - Create a timing map that respects trigger values like 'afterPrevious' by calculating startFrames.\n   - Example: const titleExitFrame = titleStartFrame + titleDuration;\n             const subTitleStartFrame = titleExitFrame; // Starting after title exits\n\n### CODE QUALITY & PERFORMANCE GUIDELINES:\n1. MODULARITY: For complex elements, consider creating sub-components.\n2. PERFORMANCE: Minimize DOM nodes - prefer CSS transforms over creating new elements.\n3. MEMOIZATION: Use React.useMemo() for computationally expensive calculations.\n4. TYPING: Provide proper TypeScript types throughout, including for style objects.\n5. COMMENTS: Add brief comments for complex animation logic or calculations.\n6. ORGANIZATION: Group related animations and separate distinct animation phases.\n7. ERROR HANDLING: Include defensive checks for potentially undefined values.\n\n### CRITICAL REMINDER:\n- PRECISELY follow the AnimationDesignBrief's specifications.\n- RESPECT the timing, durations, and easing specified in the brief.\n- IMPLEMENT ALL elements and animations exactly as detailed above.\n- START with the boilerplate structure provided earlier.\n- REMEMBER the first line MUST be: // src/remotion/components/scenes/ShowAPhoneScene.tsx","sceneId":"94f7818a-3bbd-4008-8bd0-694bb29cf183","userData":{"userId":"92256ac9-495a-4ba2-aecc-fa4ce6756baa"},"projectId":"ec0cd019-7ea9-4d99-864a-43aae38f631a","componentName":"ShowAPhoneScene","durationInFrames":150,"animationDesignBriefId":"98ae72b6-cb52-486a-8bd9-a6ea71cb7196"},"statusMessageId":"f46a3463-8b07-478e-b7e9-e684f28d9b6b"},{"id":"c0b5c59c-9fef-4676-b821-e4d8959ea304","projectId":"2858ead5-d5a7-42bc-ba32-86612b879dbf","effect":"MultipleFireworksExplodingScene","tsxCode":"\"use client\";\n\n// src/remotion/components/scenes/MultipleFireworksExplodingScene.tsx\nimport {\n  AbsoluteFill,\n  useCurrentFrame,\n  useVideoConfig,\n  interpolate,\n  spring,\n  Sequence,\n  Easing,\n  Img,\n  Audio,\n} from 'remotion';\nimport React from 'react';\n// import { AnimationDesignBrief } from '~/lib/schemas/animationDesignBrief.schema';\n\ntype AnimationDesignBrief = any; // Replace with actual import\n\nexport const MultipleFireworksExplodingScene: React.FC<{ brief: AnimationDesignBrief }> = ({ brief }) => {\n  const frame = useCurrentFrame();\n  const { fps, width, height, durationInFrames } = useVideoConfig();\n\n  // Extract color palette with defaults\n  const primaryColor = brief.colorPalette?.primaryColor || '#ff0055';\n  const secondaryColor = brief.colorPalette?.secondaryColor || '#00eaff';\n  const accentColor = brief.colorPalette?.accentColor || '#ffd700';\n  const backgroundColor = brief.colorPalette?.backgroundColor || '#090a17';\n\n  // Helper for fade out interpolation\n  const fadeOut = (start: number, end: number) =>\n    interpolate(frame, [start, end], [1, 0], {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp',\n      easing: Easing.easeInQuad,\n    });\n\n  return (\n    <AbsoluteFill style={{ backgroundColor, overflow: 'hidden' }}>\n      {/* Audio track */}\n      <Audio src=\"fireworks.mp3\" startFrom={0} volume={0.5} />\n\n      {/* Firework Burst 1 (element 2) */}\n      {\n        (() => {\n          const fadeInEnd = 15;\n          const scaleUpEnd = 30;\n          const opacityIn = interpolate(frame, [0, fadeInEnd], [0, 1], {\n            extrapolateLeft: 'clamp',\n            extrapolateRight: 'clamp',\n            easing: Easing.easeOutQuart,\n          });\n          const opacityVal = frame <= fadeInEnd ? opacityIn : fadeOut(0, scaleUpEnd);\n\n          const scaleIn = interpolate(frame, [0, fadeInEnd], [0, 1], {\n            extrapolateLeft: 'clamp',\n            extrapolateRight: 'clamp',\n            easing: Easing.easeOutQuart,\n          });\n          const scaleUp = interpolate(frame, [0, scaleUpEnd], [1, 3], {\n            extrapolateLeft: 'clamp',\n            extrapolateRight: 'clamp',\n            easing: Easing.easeOutSine,\n          });\n          const scaleVal = frame <= fadeInEnd ? scaleIn : scaleUp;\n\n          return (\n            <div\n              style={{\n                position: 'absolute',\n                left: 480,\n                top: 300,\n                width: 200,\n                height: 200,\n                opacity: opacityVal,\n                transform: `rotate(0deg) scale(${scaleVal})`,\n                backgroundColor: accentColor,\n                borderRadius: '50%',\n              }}\n            />\n          );\n        })()\n      }\n\n      {/* Sparkle cluster (element 3) */}\n      {\n        (() => {\n          const fadeInEnd = 10;\n          const fadeOutEnd = 15;\n          const pulseEnd = 20;\n\n          const opacityIn = interpolate(frame, [0, fadeInEnd], [0, 1], {\n            extrapolateLeft: 'clamp',\n            extrapolateRight: 'clamp',\n            easing: Easing.linear,\n          });\n          const opacityOut = interpolate(frame, [0, fadeOutEnd], [1, 0], {\n            extrapolateLeft: 'clamp',\n            extrapolateRight: 'clamp',\n            easing: Easing.easeInCubic,\n          });\n          const opacityVal = frame <= fadeInEnd ? opacityIn : opacityOut;\n\n          const scalePulse = interpolate(frame, [0, pulseEnd], [1, 1.2], {\n            extrapolateLeft: 'clamp',\n            extrapolateRight: 'clamp',\n            easing: Easing.easeInOutCubic,\n          });\n\n          return (\n            <div\n              style={{\n                position: 'absolute',\n                left: 480,\n                top: 300,\n                width: 200,\n                height: 200,\n                opacity: opacityVal,\n                transform: `rotate(0deg) scale(${scalePulse})`,\n                backgroundColor: secondaryColor,\n                borderRadius: '50%',\n              }}\n            />\n          );\n        })()\n      }\n\n      {/* Firework Burst 2 (element 4) */}\n      {\n        (() => {\n          const fadeInEnd = 15;\n          const scaleUpEnd = 30;\n\n          const opacityIn = interpolate(frame, [0, fadeInEnd], [0, 1], {\n            extrapolateLeft: 'clamp',\n            extrapolateRight: 'clamp',\n            easing: Easing.easeOutQuart,\n          });\n          const opacityVal = frame <= fadeInEnd ? opacityIn : fadeOut(0, scaleUpEnd);\n\n          const scaleIn = interpolate(frame, [0, fadeInEnd], [0, 1], {\n            extrapolateLeft: 'clamp',\n            extrapolateRight: 'clamp',\n            easing: Easing.easeOutQuart,\n          });\n          const scaleUp = interpolate(frame, [0, scaleUpEnd], [1, 3], {\n            extrapolateLeft: 'clamp',\n            extrapolateRight: 'clamp',\n            easing: Easing.easeOutSine,\n          });\n          const scaleVal = frame <= fadeInEnd ? scaleIn : scaleUp;\n\n          return (\n            <div\n              style={{\n                position: 'absolute',\n                left: 960,\n                top: 250,\n                width: 250,\n                height: 250,\n                opacity: opacityVal,\n                transform: `rotate(0deg) scale(${scaleVal})`,\n                backgroundColor: accentColor,\n                borderRadius: '50%',\n              }}\n            />\n          );\n        })()\n      }\n\n      {/* Sparkle cluster (element 5) */}\n      {\n        (() => {\n          const fadeInEnd = 10;\n          const fadeOutEnd = 15;\n          const pulseEnd = 20;\n\n          const opacityIn = interpolate(frame, [0, fadeInEnd], [0, 1], {\n            extrapolateLeft: 'clamp',\n            extrapolateRight: 'clamp',\n            easing: Easing.linear,\n          });\n          const opacityOut = interpolate(frame, [0, fadeOutEnd], [1, 0], {\n            extrapolateLeft: 'clamp',\n            extrapolateRight: 'clamp',\n            easing: Easing.easeInCubic,\n          });\n          const opacityVal = frame <= fadeInEnd ? opacityIn : opacityOut;\n\n          const scalePulse = interpolate(frame, [0, pulseEnd], [1, 1.3], {\n            extrapolateLeft: 'clamp',\n            extrapolateRight: 'clamp',\n            easing: Easing.easeInOutCubic,\n          });\n\n          return (\n            <div\n              style={{\n                position: 'absolute',\n                left: 960,\n                top: 250,\n                width: 250,\n                height: 250,\n                opacity: opacityVal,\n                transform: `rotate(0deg) scale(${scalePulse})`,\n                backgroundColor: secondaryColor,\n                borderRadius: '50%',\n              }}\n            />\n          );\n        })()\n      }\n\n      {/* Firework Burst 3 (element 6) */}\n      {\n        (() => {\n          const fadeInEnd = 15;\n          const scaleUpEnd = 30;\n\n          const opacityIn = interpolate(frame, [0, fadeInEnd], [0, 1], {\n            extrapolateLeft: 'clamp',\n            extrapolateRight: 'clamp',\n            easing: Easing.easeOutQuart,\n          });\n          const opacityVal = frame <= fadeInEnd ? opacityIn : fadeOut(0, scaleUpEnd);\n\n          const scaleIn = interpolate(frame, [0, fadeInEnd], [0, 1], {\n            extrapolateLeft: 'clamp',\n            extrapolateRight: 'clamp',\n            easing: Easing.easeOutQuart,\n          });\n          const scaleUp = interpolate(frame, [0, scaleUpEnd], [1, 3], {\n            extrapolateLeft: 'clamp',\n            extrapolateRight: 'clamp',\n            easing: Easing.easeOutSine,\n          });\n          const scaleVal = frame <= fadeInEnd ? scaleIn : scaleUp;\n\n          return (\n            <div\n              style={{\n                position: 'absolute',\n                left: 1440,\n                top: 280,\n                width: 220,\n                height: 220,\n                opacity: opacityVal,\n                transform: `rotate(0deg) scale(${scaleVal})`,\n                backgroundColor: accentColor,\n                borderRadius: '50%',\n              }}\n            />\n          );\n        })()\n      }\n\n      {/* Sparkle cluster (element 7) */}\n      {\n        (() => {\n          const fadeInEnd = 10;\n          const fadeOutEnd = 15;\n          const pulseEnd = 20;\n\n          const opacityIn = interpolate(frame, [0, fadeInEnd], [0, 1], {\n            extrapolateLeft: 'clamp',\n            extrapolateRight: 'clamp',\n            easing: Easing.linear,\n          });\n          const opacityOut = interpolate(frame, [0, fadeOutEnd], [1, 0], {\n            extrapolateLeft: 'clamp',\n            extrapolateRight: 'clamp',\n            easing: Easing.easeInCubic,\n          });\n          const opacityVal = frame <= fadeInEnd ? opacityIn : opacityOut;\n\n          const scalePulse = interpolate(frame, [0, pulseEnd], [1, 1.25], {\n            extrapolateLeft: 'clamp',\n            extrapolateRight: 'clamp',\n            easing: Easing.easeInOutCubic,\n          });\n\n          return (\n            <div\n              style={{\n                position: 'absolute',\n                left: 1440,\n                top: 280,\n                width: 220,\n                height: 220,\n                opacity: opacityVal,\n                transform: `rotate(0deg) scale(${scalePulse})`,\n                backgroundColor: secondaryColor,\n                borderRadius: '50%',\n              }}\n            />\n          );\n        })()\n      }\n    </AbsoluteFill>\n  );\n};","status":"building","outputUrl":null,"errorMessage":"TSX code is missing for this job","retryCount":1,"createdAt":"2025-05-10 02:36:53.612199+00","updatedAt":"2025-05-10 02:37:34.533+00","metadata":{"fps":30,"width":1920,"height":1080,"prompt":"### ROLE: You are an Expert Remotion Developer and Senior React Engineer.\n### TASK: Create a production-quality Remotion React functional component in TypeScript.\n### COMPONENT NAME: 'MultipleFireworksExplodingScene'\n### OBJECTIVE: Generate a component that precisely implements the provided AnimationDesignBrief with professional animations and visual effects.\n### VIDEO CONFIG: Target video is 1920x1080px, 210 frames total duration, at 30 FPS.\n### MANDATORY REQUIREMENTS:\n- The FIRST line MUST be: // src/remotion/components/scenes/MultipleFireworksExplodingScene.tsx\n- The component MUST be a functional component using TypeScript (.tsx).\n- ALWAYS use the Remotion hooks: useCurrentFrame() and useVideoConfig() for timing and dimensions.\n- Component MUST accept props: { brief: AnimationDesignBrief } (assume this type is imported).\n- Utilize appropriate Remotion animation functions based on each element's needs:\n  * interpolate() - For smooth linear or eased transitions between values\n  * spring() - For physics-based, bouncy animations\n  * Easing module - For specifying animation curves (easeInOut, bezier, etc.)\n- Use Remotion timing components when needed:\n  * <Sequence from={startFrame} durationInFrames={duration}> - For sequential animations\n  * <Series> - For orchestrating complex animation sequences\n  * <Loop> - For repeating animations\n- Apply absolute positioning based on initialLayout coordinates.\n\n### BOILERPLATE STRUCTURE (Follow this pattern):\n```typescript\n// src/remotion/components/scenes/MultipleFireworksExplodingScene.tsx\nimport { AbsoluteFill, useCurrentFrame, useVideoConfig, interpolate, spring, Sequence, Easing, Img, Audio } from 'remotion';\nimport React from 'react';\n// import { AnimationDesignBrief } from '~/lib/schemas/animationDesignBrief.schema';\n\nexport const MultipleFireworksExplodingScene: React.FC<{ brief: AnimationDesignBrief }> = ({ brief }) => {\n  const frame = useCurrentFrame();\n  const { fps, width, height, durationInFrames } = useVideoConfig();\n\n  // Extract key brief properties\n  const { elements, colorPalette, typography, overallStyle } = brief;\n\n  // Define background color from brief\n  const backgroundColor = colorPalette?.background || 'transparent';\n\n  return (\n    <AbsoluteFill style={{ backgroundColor }}>\n      {/* Render each element with its animations */}\n    </AbsoluteFill>\n  );\n};\n```\n\n--- Scene Overview ---\nScene Name: MultipleFireworksExplodingScene\nPurpose: Multiple fireworks exploding overhead with colorful bursts and fading sparkles\nOverall Style: Vibrant celebratory 2D animation with glowing bursts and trailing sparkles\n\n--- Color Palette ---\n- Primary Color: #ff0055\n- Secondary Color: #00eaff\n- Accent Color: #ffd700\n- Background Color: #090a17\n- Text Primary Color: #ffffff\n- Text Secondary Color: #888888\n\n--- Typography ---\n- Default Font Family: Arial\n- Heading1 Style:\n  - Font Family: Arial Black\n  - Font Size: 48\n\n### ELEMENT-BY-ELEMENT IMPLEMENTATION GUIDE:\nEach element from the AnimationDesignBrief must be translated into React/Remotion code following these guidelines:\n\n#### ELEMENT TYPE TRANSLATION:\n- 'text' → Use a <div> or <h1>-<h6> with appropriate styling\n- 'image' → Use Remotion's <Img src={content} /> component\n- 'video' → Use Remotion's <Video src={content} /> component\n- 'shape' → Use appropriate shape elements (div with border-radius for circles/rounded rectangles, SVG for complex shapes)\n- 'container' → Use a positioned <div> that may contain child elements\n\n#### INITIAL LAYOUT TRANSLATION:\nAll initialLayout properties MUST be translated to React inline styles:\n- 'x', 'y' → style={{ position: 'absolute', left: x, top: y }}\n- 'width', 'height' → style={{ width, height }}\n- 'opacity' → style={{ opacity }}\n- 'rotation' → style={{ transform: `rotate(${rotation}deg)` }}\n- 'scale' → style={{ transform: `scale(${scale})` }}\n- 'zIndex' → style={{ zIndex }}\n- Multiple transforms should be combined: transform: `rotate(${rotation}deg) scale(${scale})`\n\n#### ANIMATION IMPLEMENTATION:\nFor each animation, use this approach:\n1. Calculate the active animation frames based on delayInFrames and durationInFrames:\n   const animStartFrame = animation.delayInFrames || 0;\n   const animEndFrame = animStartFrame + (animation.durationInFrames || 30);\n2. Apply the appropriate Remotion animation function:\n   - For 'spring' animations or when remotionFunctionHint is 'spring':\n     const animatedValue = spring({\n       frame: frame - animStartFrame,\n       fps,\n       from: property.from,\n       to: property.to,\n       config: property.springConfig || { damping: 10, mass: 1, stiffness: 100 }\n     });\n   - For most other animations, use interpolate:\n     const animatedValue = interpolate(\n       frame,\n       [animStartFrame, animEndFrame],\n       [property.from, property.to],\n       {\n         extrapolateLeft: 'clamp',\n         extrapolateRight: 'clamp',\n         easing: determineEasing(animation.easing)\n       }\n     );\n3. Apply animated values to style properties:\n   - For transform properties (e.g., 'transform.translateX', 'transform.scale'):\n     Extract the specific transform type and apply with appropriate units.\n   - For standard CSS properties (e.g., 'opacity'):\n     Apply directly to the style object.\n   - Example: style={{ opacity: animatedOpacity, transform: `translateX(${animatedX}px) scale(${animatedScale})` }}\n4. For sequence-based timing (startAfter, startWith):\n   - Wrap elements in <Sequence> components with appropriate 'from' and 'durationInFrames' props\n   - Use 'from' attribute based on animation.delayInFrames\n   - Example: <Sequence from={30} durationInFrames={60}>...</Sequence>\n\n### SPECIFIC ELEMENTS TO IMPLEMENT:\n\n#### ELEMENT 1: e2b0bae8-7955-4d2d-86f1-7b95c1efb7aa (shape)\n- Initial Layout (CSS equivalent):\n  * x: 0px\n  * y: 0px\n  * width: 1920px\n  * height: 1080px\n  * opacity: 1\n  * rotation: 0deg\n  * scale: 1\n  * backgroundColor: #090a17\n- React style equivalent: style={{ position: 'absolute', left: 0px, top: 0px, width: 1920px, height: 1080px, opacity: 1, transform: 'rotate(0deg) scale(1)', backgroundColor: '#090a17' }}\n\n#### ELEMENT 2: 3a2e3c0f-47e9-4cba-a7b3-bb60f09e596e (customComponent)\n- Initial Layout (CSS equivalent):\n  * x: 480px\n  * y: 300px\n  * width: 200px\n  * height: 200px\n  * opacity: 0\n  * rotation: 0deg\n  * scale: 0\n- React style equivalent: style={{ position: 'absolute', left: 480px, top: 300px, width: 200px, height: 200px, opacity: 0, transform: 'rotate(0deg) scale(0)' }}\n\n- Animations for 3a2e3c0f-47e9-4cba-a7b3-bb60f09e596e:\n  * Animation 1: fadeIn\n    - Start frame: 0\n    - Duration: 15 frames\n    - End frame: 15\n    - Easing: easeOutQuart → Implement as: Easing.easeOutQuart\n    - Properties to animate:\n      • opacity: from 0 to 1\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 15], \n          [0, 1], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutQuart }\n        );`\n  * Animation 2: customProperty\n    - Start frame: 0\n    - Duration: 15 frames\n    - End frame: 15\n    - Easing: easeOutQuart → Implement as: Easing.easeOutQuart\n    - Properties to animate:\n      • scale: from 0 to 1\n        Implementation: `const scaleValue = interpolate(\n          frame, \n          [0, 15], \n          [0, 1], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutQuart }\n        );`\n  * Animation 3: customProperty\n    - Start frame: 0\n    - Duration: 30 frames\n    - End frame: 30\n    - Easing: easeOutSine → Implement as: Easing.easeOutSine\n    - Properties to animate:\n      • scale: from 1 to 3\n        Implementation: `const scaleValue = interpolate(\n          frame, \n          [0, 30], \n          [1, 3], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutSine }\n        );`\n  * Animation 4: fadeOut\n    - Start frame: 0\n    - Duration: 30 frames\n    - End frame: 30\n    - Easing: easeInQuad → Implement as: Easing.easeInQuad\n    - Properties to animate:\n      • opacity: from 1 to 0\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 30], \n          [1, 0], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInQuad }\n        );`\n\n#### ELEMENT 3: bfa85393-1562-4a68-83ed-848fa127fe4c (shape)\n- Initial Layout (CSS equivalent):\n  * x: 480px\n  * y: 300px\n  * width: 200px\n  * height: 200px\n  * opacity: 0\n  * rotation: 0deg\n  * scale: 1\n- React style equivalent: style={{ position: 'absolute', left: 480px, top: 300px, width: 200px, height: 200px, opacity: 0, transform: 'rotate(0deg) scale(1)' }}\n\n- Animations for bfa85393-1562-4a68-83ed-848fa127fe4c:\n  * Animation 1: fadeIn\n    - Start frame: 0\n    - Duration: 10 frames\n    - End frame: 10\n    - Easing: linear → Implement as: Easing.linear\n    - Properties to animate:\n      • opacity: from 0 to 1\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 10], \n          [0, 1], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.linear }\n        );`\n  * Animation 2: pulse\n    - Start frame: 0\n    - Duration: 20 frames\n    - End frame: 20\n    - Easing: easeInOutCubic → Implement as: Easing.easeInOutCubic\n    - Properties to animate:\n      • scale: from 1 to 1.2\n        Implementation: `const scaleValue = interpolate(\n          frame, \n          [0, 20], \n          [1, 1.2], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInOutCubic }\n        );`\n  * Animation 3: fadeOut\n    - Start frame: 0\n    - Duration: 15 frames\n    - End frame: 15\n    - Easing: easeInCubic → Implement as: Easing.easeInCubic\n    - Properties to animate:\n      • opacity: from 1 to 0\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 15], \n          [1, 0], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInCubic }\n        );`\n\n#### ELEMENT 4: 046bce1c-ee83-47a7-8db6-0041d094427a (customComponent)\n- Initial Layout (CSS equivalent):\n  * x: 960px\n  * y: 250px\n  * width: 250px\n  * height: 250px\n  * opacity: 0\n  * rotation: 0deg\n  * scale: 0\n- React style equivalent: style={{ position: 'absolute', left: 960px, top: 250px, width: 250px, height: 250px, opacity: 0, transform: 'rotate(0deg) scale(0)' }}\n\n- Animations for 046bce1c-ee83-47a7-8db6-0041d094427a:\n  * Animation 1: fadeIn\n    - Start frame: 0\n    - Duration: 15 frames\n    - End frame: 15\n    - Easing: easeOutQuart → Implement as: Easing.easeOutQuart\n    - Properties to animate:\n      • opacity: from 0 to 1\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 15], \n          [0, 1], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutQuart }\n        );`\n  * Animation 2: customProperty\n    - Start frame: 0\n    - Duration: 15 frames\n    - End frame: 15\n    - Easing: easeOutQuart → Implement as: Easing.easeOutQuart\n    - Properties to animate:\n      • scale: from 0 to 1\n        Implementation: `const scaleValue = interpolate(\n          frame, \n          [0, 15], \n          [0, 1], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutQuart }\n        );`\n  * Animation 3: customProperty\n    - Start frame: 0\n    - Duration: 30 frames\n    - End frame: 30\n    - Easing: easeOutSine → Implement as: Easing.easeOutSine\n    - Properties to animate:\n      • scale: from 1 to 3\n        Implementation: `const scaleValue = interpolate(\n          frame, \n          [0, 30], \n          [1, 3], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutSine }\n        );`\n  * Animation 4: fadeOut\n    - Start frame: 0\n    - Duration: 30 frames\n    - End frame: 30\n    - Easing: easeInQuad → Implement as: Easing.easeInQuad\n    - Properties to animate:\n      • opacity: from 1 to 0\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 30], \n          [1, 0], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInQuad }\n        );`\n\n#### ELEMENT 5: 8ce0e7f6-7233-454b-84b6-0d9069f2d67c (shape)\n- Initial Layout (CSS equivalent):\n  * x: 960px\n  * y: 250px\n  * width: 250px\n  * height: 250px\n  * opacity: 0\n  * rotation: 0deg\n  * scale: 1\n- React style equivalent: style={{ position: 'absolute', left: 960px, top: 250px, width: 250px, height: 250px, opacity: 0, transform: 'rotate(0deg) scale(1)' }}\n\n- Animations for 8ce0e7f6-7233-454b-84b6-0d9069f2d67c:\n  * Animation 1: fadeIn\n    - Start frame: 0\n    - Duration: 10 frames\n    - End frame: 10\n    - Easing: linear → Implement as: Easing.linear\n    - Properties to animate:\n      • opacity: from 0 to 1\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 10], \n          [0, 1], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.linear }\n        );`\n  * Animation 2: pulse\n    - Start frame: 0\n    - Duration: 20 frames\n    - End frame: 20\n    - Easing: easeInOutCubic → Implement as: Easing.easeInOutCubic\n    - Properties to animate:\n      • scale: from 1 to 1.3\n        Implementation: `const scaleValue = interpolate(\n          frame, \n          [0, 20], \n          [1, 1.3], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInOutCubic }\n        );`\n  * Animation 3: fadeOut\n    - Start frame: 0\n    - Duration: 15 frames\n    - End frame: 15\n    - Easing: easeInCubic → Implement as: Easing.easeInCubic\n    - Properties to animate:\n      • opacity: from 1 to 0\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 15], \n          [1, 0], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInCubic }\n        );`\n\n#### ELEMENT 6: 48ce5e65-5f07-44fc-98f5-08fc6a91f217 (customComponent)\n- Initial Layout (CSS equivalent):\n  * x: 1440px\n  * y: 280px\n  * width: 220px\n  * height: 220px\n  * opacity: 0\n  * rotation: 0deg\n  * scale: 0\n- React style equivalent: style={{ position: 'absolute', left: 1440px, top: 280px, width: 220px, height: 220px, opacity: 0, transform: 'rotate(0deg) scale(0)' }}\n\n- Animations for 48ce5e65-5f07-44fc-98f5-08fc6a91f217:\n  * Animation 1: fadeIn\n    - Start frame: 0\n    - Duration: 15 frames\n    - End frame: 15\n    - Easing: easeOutQuart → Implement as: Easing.easeOutQuart\n    - Properties to animate:\n      • opacity: from 0 to 1\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 15], \n          [0, 1], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutQuart }\n        );`\n  * Animation 2: customProperty\n    - Start frame: 0\n    - Duration: 15 frames\n    - End frame: 15\n    - Easing: easeOutQuart → Implement as: Easing.easeOutQuart\n    - Properties to animate:\n      • scale: from 0 to 1\n        Implementation: `const scaleValue = interpolate(\n          frame, \n          [0, 15], \n          [0, 1], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutQuart }\n        );`\n  * Animation 3: customProperty\n    - Start frame: 0\n    - Duration: 30 frames\n    - End frame: 30\n    - Easing: easeOutSine → Implement as: Easing.easeOutSine\n    - Properties to animate:\n      • scale: from 1 to 3\n        Implementation: `const scaleValue = interpolate(\n          frame, \n          [0, 30], \n          [1, 3], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutSine }\n        );`\n  * Animation 4: fadeOut\n    - Start frame: 0\n    - Duration: 30 frames\n    - End frame: 30\n    - Easing: easeInQuad → Implement as: Easing.easeInQuad\n    - Properties to animate:\n      • opacity: from 1 to 0\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 30], \n          [1, 0], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInQuad }\n        );`\n\n#### ELEMENT 7: c6eb0520-e1df-4377-8baa-0d3048b010f1 (shape)\n- Initial Layout (CSS equivalent):\n  * x: 1440px\n  * y: 280px\n  * width: 220px\n  * height: 220px\n  * opacity: 0\n  * rotation: 0deg\n  * scale: 1\n- React style equivalent: style={{ position: 'absolute', left: 1440px, top: 280px, width: 220px, height: 220px, opacity: 0, transform: 'rotate(0deg) scale(1)' }}\n\n- Animations for c6eb0520-e1df-4377-8baa-0d3048b010f1:\n  * Animation 1: fadeIn\n    - Start frame: 0\n    - Duration: 10 frames\n    - End frame: 10\n    - Easing: linear → Implement as: Easing.linear\n    - Properties to animate:\n      • opacity: from 0 to 1\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 10], \n          [0, 1], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.linear }\n        );`\n  * Animation 2: pulse\n    - Start frame: 0\n    - Duration: 20 frames\n    - End frame: 20\n    - Easing: easeInOutCubic → Implement as: Easing.easeInOutCubic\n    - Properties to animate:\n      • scale: from 1 to 1.25\n        Implementation: `const scaleValue = interpolate(\n          frame, \n          [0, 20], \n          [1, 1.25], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInOutCubic }\n        );`\n  * Animation 3: fadeOut\n    - Start frame: 0\n    - Duration: 15 frames\n    - End frame: 15\n    - Easing: easeInCubic → Implement as: Easing.easeInCubic\n    - Properties to animate:\n      • opacity: from 1 to 0\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 15], \n          [1, 0], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInCubic }\n        );`\n\n### SEQUENCE ORCHESTRATION & TIMING GUIDELINES:\nWhen implementing multiple animations, carefully orchestrate them to match the design intent:\n1. Use <Sequence> components for elements or animations that should start at specific frames.\n   Example: <Sequence from={30} durationInFrames={60}><YourAnimatedElement /></Sequence>\n2. For animation dependencies between elements (animations that must follow others):\n   - Create a timing map that respects trigger values like 'afterPrevious' by calculating startFrames.\n   - Example: const titleExitFrame = titleStartFrame + titleDuration;\n             const subTitleStartFrame = titleExitFrame; // Starting after title exits\n\n### AUDIO IMPLEMENTATION:\nThis scene includes the following audio track(s) to implement:\n- Audio 1: audio-fireworks\n  - Source: fireworks.mp3\n  - Start at frame: 0\n  - Volume: 0.5\n  - Implementation: <Audio src={\"fireworks.mp3\"} startFrom={0} volume={0.5} />\n\n### CODE QUALITY & PERFORMANCE GUIDELINES:\n1. MODULARITY: For complex elements, consider creating sub-components.\n2. PERFORMANCE: Minimize DOM nodes - prefer CSS transforms over creating new elements.\n3. MEMOIZATION: Use React.useMemo() for computationally expensive calculations.\n4. TYPING: Provide proper TypeScript types throughout, including for style objects.\n5. COMMENTS: Add brief comments for complex animation logic or calculations.\n6. ORGANIZATION: Group related animations and separate distinct animation phases.\n7. ERROR HANDLING: Include defensive checks for potentially undefined values.\n\n### CRITICAL REMINDER:\n- PRECISELY follow the AnimationDesignBrief's specifications.\n- RESPECT the timing, durations, and easing specified in the brief.\n- IMPLEMENT ALL elements and animations exactly as detailed above.\n- START with the boilerplate structure provided earlier.\n- REMEMBER the first line MUST be: // src/remotion/components/scenes/MultipleFireworksExplodingScene.tsx","sceneId":"4785a17d-4bb6-4e72-b7f5-289c0b719097","userData":{"userId":"30c92f68-3935-4e86-8260-7a5fbd1a9dc3"},"projectId":"2858ead5-d5a7-42bc-ba32-86612b879dbf","componentName":"MultipleFireworksExplodingScene","durationInFrames":210,"animationDesignBriefId":"9982d888-9376-41cb-af0e-c8c28596790f"},"statusMessageId":"2583acbf-da09-47af-9075-9ce0beef82f7"},{"id":"7efc2bf2-c834-458d-805e-88bdae429d60","projectId":"2858ead5-d5a7-42bc-ba32-86612b879dbf","effect":"FireworkRocketsLaunchingScene","tsxCode":"\"use client\";\n\n// src/remotion/components/scenes/FireworkRocketsLaunchingScene.tsx\nimport React from 'react';\nimport {\n  AbsoluteFill,\n  useCurrentFrame,\n  useVideoConfig,\n  interpolate,\n  Easing,\n  Sequence,\n  Img,\n  Audio,\n} from 'remotion';\n// import { AnimationDesignBrief } from '~/lib/schemas/animationDesignBrief.schema';\n\nexport const FireworkRocketsLaunchingScene: React.FC<{\n  brief: AnimationDesignBrief;\n}> = ({ brief }) => {\n  const frame = useCurrentFrame();\n  const { fps, width, height, durationInFrames } = useVideoConfig();\n\n  // Extract brief properties\n  const { colorPalette, typography } = brief;\n  const backgroundColor = colorPalette?.background || '#0a0a30';\n  const textColor = colorPalette?.textPrimary || '#ffffff';\n\n  // Title animations\n  const titleFadeIn = interpolate(\n    frame,\n    [0, 30],\n    [0, 1],\n    { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }\n  );\n  // Secondary fade-out\n  const titleFadeOut = interpolate(\n    frame,\n    [0, 10],\n    [1, 0],\n    { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInCubic }\n  );\n  const titleOpacity = titleFadeIn * titleFadeOut;\n\n  // Rocket 1 animations\n  const rocket1Y = interpolate(\n    frame,\n    [0, 60],\n    [1150, -200],\n    { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }\n  );\n  const trail1Height = interpolate(\n    frame,\n    [0, 60],\n    [0, 500],\n    { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutQuad }\n  );\n  const trail1Y = interpolate(\n    frame,\n    [0, 60],\n    [1150, -200],\n    { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutQuad }\n  );\n  const trail1Opacity = interpolate(\n    frame,\n    [0, 60],\n    [0.5, 0],\n    { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutQuad }\n  );\n  const spark1Size = interpolate(\n    frame,\n    [0, 20],\n    [0, 200],\n    { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutQuad }\n  );\n  const spark1Opacity = interpolate(\n    frame,\n    [0, 20],\n    [1, 0],\n    { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutQuad }\n  );\n\n  // Rocket 2 animations\n  const rocket2Y = interpolate(\n    frame,\n    [0, 60],\n    [1150, -200],\n    { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }\n  );\n  const trail2Height = interpolate(\n    frame,\n    [0, 60],\n    [0, 500],\n    { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutQuad }\n  );\n  const trail2Y = interpolate(\n    frame,\n    [0, 60],\n    [1150, -200],\n    { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutQuad }\n  );\n  const trail2Opacity = interpolate(\n    frame,\n    [0, 60],\n    [0.5, 0],\n    { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutQuad }\n  );\n  const spark2Size = interpolate(\n    frame,\n    [0, 20],\n    [0, 200],\n    { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutQuad }\n  );\n  const spark2Opacity = interpolate(\n    frame,\n    [0, 20],\n    [1, 0],\n    { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutQuad }\n  );\n\n  // Rocket 3 animations\n  const rocket3Y = interpolate(\n    frame,\n    [0, 60],\n    [1150, -200],\n    { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }\n  );\n  const trail3Height = interpolate(\n    frame,\n    [0, 60],\n    [0, 500],\n    { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutQuad }\n  );\n  const trail3Y = interpolate(\n    frame,\n    [0, 60],\n    [1150, -200],\n    { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutQuad }\n  );\n  const trail3Opacity = interpolate(\n    frame,\n    [0, 60],\n    [0.5, 0],\n    { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutQuad }\n  );\n  const spark3Size = interpolate(\n    frame,\n    [0, 20],\n    [0, 200],\n    { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutQuad }\n  );\n  const spark3Opacity = interpolate(\n    frame,\n    [0, 20],\n    [1, 0],\n    { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutQuad }\n  );\n\n  return (\n    <AbsoluteFill style={{ backgroundColor }}>\n      {/* Audio track of fireworks */}\n      <Audio src=\"assets/fireworks.mp3\" startFrom={0} volume={0.5} />\n\n      {/* Title */}\n      <Sequence from={0} durationInFrames={durationInFrames}>\n        <div\n          style={{\n            position: 'absolute',\n            left: 960,\n            top: 100,\n            width: 800,\n            height: 100,\n            opacity: titleOpacity,\n            transform: 'rotate(0deg) scale(1)',\n            fontFamily: typography.heading1?.fontFamily || 'Arial Black',\n            fontSize: typography.heading1?.fontSize || 72,\n            color: textColor,\n            textAlign: 'center',\n            lineHeight: '100px',\n          }}\n        >\n          Firework Show\n        </div>\n      </Sequence>\n\n      {/* Rocket 1 + effects */}\n      <Sequence from={0} durationInFrames={60}>\n        <Img\n          src=\"assets/rocket.png\"\n          style={{\n            position: 'absolute',\n            left: 460,\n            top: rocket1Y,\n            width: 50,\n            height: 200,\n            opacity: 1,\n            transform: 'rotate(0deg) scale(1)',\n          }}\n        />\n        {/* Trail */}\n        <div\n          style={{\n            position: 'absolute',\n            left: 485,\n            top: trail1Y,\n            width: 10,\n            height: trail1Height,\n            backgroundColor: '#ffd700',\n            opacity: trail1Opacity,\n            transform: 'rotate(0deg) scale(1)',\n          }}\n        />\n        {/* Spark */}\n        <div\n          style={{\n            position: 'absolute',\n            left: 485,\n            top: 1150,\n            width: spark1Size,\n            height: spark1Size,\n            backgroundColor: '#ffd700',\n            opacity: spark1Opacity,\n            transform: 'rotate(0deg) scale(1)',\n          }}\n        />\n      </Sequence>\n\n      {/* Rocket 2 + effects */}\n      <Sequence from={0} durationInFrames={60}>\n        <Img\n          src=\"assets/rocket.png\"\n          style={{\n            position: 'absolute',\n            left: 910,\n            top: rocket2Y,\n            width: 50,\n            height: 200,\n            opacity: 1,\n            transform: 'rotate(0deg) scale(1)',\n          }}\n        />\n        {/* Trail */}\n        <div\n          style={{\n            position: 'absolute',\n            left: 935,\n            top: trail2Y,\n            width: 10,\n            height: trail2Height,\n            backgroundColor: '#ffd700',\n            opacity: trail2Opacity,\n            transform: 'rotate(0deg) scale(1)',\n          }}\n        />\n        {/* Spark */}\n        <div\n          style={{\n            position: 'absolute',\n            left: 935,\n            top: 1150,\n            width: spark2Size,\n            height: spark2Size,\n            backgroundColor: '#ffd700',\n            opacity: spark2Opacity,\n            transform: 'rotate(0deg) scale(1)',\n          }}\n        />\n      </Sequence>\n\n      {/* Rocket 3 + effects */}\n      <Sequence from={0} durationInFrames={60}>\n        <Img\n          src=\"assets/rocket.png\"\n          style={{\n            position: 'absolute',\n            left: 1360,\n            top: rocket3Y,\n            width: 50,\n            height: 200,\n            opacity: 1,\n            transform: 'rotate(0deg) scale(1)',\n          }}\n        />\n        {/* Trail */}\n        <div\n          style={{\n            position: 'absolute',\n            left: 1385,\n            top: trail3Y,\n            width: 10,\n            height: trail3Height,\n            backgroundColor: '#ffd700',\n            opacity: trail3Opacity,\n            transform: 'rotate(0deg) scale(1)',\n          }}\n        />\n        {/* Spark */}\n        <div\n          style={{\n            position: 'absolute',\n            left: 1385,\n            top: 1150,\n            width: spark3Size,\n            height: spark3Size,\n            backgroundColor: '#ffd700',\n            opacity: spark3Opacity,\n            transform: 'rotate(0deg) scale(1)',\n          }}\n        />\n      </Sequence>\n    </AbsoluteFill>\n  );\n};","status":"building","outputUrl":null,"errorMessage":"TSX code is missing for this job","retryCount":1,"createdAt":"2025-05-10 02:35:34.567174+00","updatedAt":"2025-05-10 02:36:21.46+00","metadata":{"fps":30,"width":1920,"height":1080,"prompt":"### ROLE: You are an Expert Remotion Developer and Senior React Engineer.\n### TASK: Create a production-quality Remotion React functional component in TypeScript.\n### COMPONENT NAME: 'FireworkRocketsLaunchingScene'\n### OBJECTIVE: Generate a component that precisely implements the provided AnimationDesignBrief with professional animations and visual effects.\n### VIDEO CONFIG: Target video is 1920x1080px, 150 frames total duration, at 30 FPS.\n### MANDATORY REQUIREMENTS:\n- The FIRST line MUST be: // src/remotion/components/scenes/FireworkRocketsLaunchingScene.tsx\n- The component MUST be a functional component using TypeScript (.tsx).\n- ALWAYS use the Remotion hooks: useCurrentFrame() and useVideoConfig() for timing and dimensions.\n- Component MUST accept props: { brief: AnimationDesignBrief } (assume this type is imported).\n- Utilize appropriate Remotion animation functions based on each element's needs:\n  * interpolate() - For smooth linear or eased transitions between values\n  * spring() - For physics-based, bouncy animations\n  * Easing module - For specifying animation curves (easeInOut, bezier, etc.)\n- Use Remotion timing components when needed:\n  * <Sequence from={startFrame} durationInFrames={duration}> - For sequential animations\n  * <Series> - For orchestrating complex animation sequences\n  * <Loop> - For repeating animations\n- Apply absolute positioning based on initialLayout coordinates.\n\n### BOILERPLATE STRUCTURE (Follow this pattern):\n```typescript\n// src/remotion/components/scenes/FireworkRocketsLaunchingScene.tsx\nimport { AbsoluteFill, useCurrentFrame, useVideoConfig, interpolate, spring, Sequence, Easing, Img, Audio } from 'remotion';\nimport React from 'react';\n// import { AnimationDesignBrief } from '~/lib/schemas/animationDesignBrief.schema';\n\nexport const FireworkRocketsLaunchingScene: React.FC<{ brief: AnimationDesignBrief }> = ({ brief }) => {\n  const frame = useCurrentFrame();\n  const { fps, width, height, durationInFrames } = useVideoConfig();\n\n  // Extract key brief properties\n  const { elements, colorPalette, typography, overallStyle } = brief;\n\n  // Define background color from brief\n  const backgroundColor = colorPalette?.background || 'transparent';\n\n  return (\n    <AbsoluteFill style={{ backgroundColor }}>\n      {/* Render each element with its animations */}\n    </AbsoluteFill>\n  );\n};\n```\n\n--- Scene Overview ---\nScene Name: FireworkRocketsLaunchingScene\nPurpose: Firework rockets launching into the sky with glowing trails\nOverall Style: Vibrant and dynamic with neon glow effects\n\n--- Color Palette ---\n- Primary Color: #ff4e50\n- Secondary Color: #ffd700\n- Accent Color: #00e5ff\n- Background Color: #0a0a30\n- Text Primary Color: #ffffff\n- Text Secondary Color: #cccccc\n\n--- Typography ---\n- Default Font Family: Arial\n- Heading1 Style:\n  - Font Family: Arial Black\n  - Font Size: 72\n\n### ELEMENT-BY-ELEMENT IMPLEMENTATION GUIDE:\nEach element from the AnimationDesignBrief must be translated into React/Remotion code following these guidelines:\n\n#### ELEMENT TYPE TRANSLATION:\n- 'text' → Use a <div> or <h1>-<h6> with appropriate styling\n- 'image' → Use Remotion's <Img src={content} /> component\n- 'video' → Use Remotion's <Video src={content} /> component\n- 'shape' → Use appropriate shape elements (div with border-radius for circles/rounded rectangles, SVG for complex shapes)\n- 'container' → Use a positioned <div> that may contain child elements\n\n#### INITIAL LAYOUT TRANSLATION:\nAll initialLayout properties MUST be translated to React inline styles:\n- 'x', 'y' → style={{ position: 'absolute', left: x, top: y }}\n- 'width', 'height' → style={{ width, height }}\n- 'opacity' → style={{ opacity }}\n- 'rotation' → style={{ transform: `rotate(${rotation}deg)` }}\n- 'scale' → style={{ transform: `scale(${scale})` }}\n- 'zIndex' → style={{ zIndex }}\n- Multiple transforms should be combined: transform: `rotate(${rotation}deg) scale(${scale})`\n\n#### ANIMATION IMPLEMENTATION:\nFor each animation, use this approach:\n1. Calculate the active animation frames based on delayInFrames and durationInFrames:\n   const animStartFrame = animation.delayInFrames || 0;\n   const animEndFrame = animStartFrame + (animation.durationInFrames || 30);\n2. Apply the appropriate Remotion animation function:\n   - For 'spring' animations or when remotionFunctionHint is 'spring':\n     const animatedValue = spring({\n       frame: frame - animStartFrame,\n       fps,\n       from: property.from,\n       to: property.to,\n       config: property.springConfig || { damping: 10, mass: 1, stiffness: 100 }\n     });\n   - For most other animations, use interpolate:\n     const animatedValue = interpolate(\n       frame,\n       [animStartFrame, animEndFrame],\n       [property.from, property.to],\n       {\n         extrapolateLeft: 'clamp',\n         extrapolateRight: 'clamp',\n         easing: determineEasing(animation.easing)\n       }\n     );\n3. Apply animated values to style properties:\n   - For transform properties (e.g., 'transform.translateX', 'transform.scale'):\n     Extract the specific transform type and apply with appropriate units.\n   - For standard CSS properties (e.g., 'opacity'):\n     Apply directly to the style object.\n   - Example: style={{ opacity: animatedOpacity, transform: `translateX(${animatedX}px) scale(${animatedScale})` }}\n4. For sequence-based timing (startAfter, startWith):\n   - Wrap elements in <Sequence> components with appropriate 'from' and 'durationInFrames' props\n   - Use 'from' attribute based on animation.delayInFrames\n   - Example: <Sequence from={30} durationInFrames={60}>...</Sequence>\n\n### SPECIFIC ELEMENTS TO IMPLEMENT:\n\n#### ELEMENT 1: 57e21e6a-6d0c-4168-80a2-424d79187efb (shape)\n- Initial Layout (CSS equivalent):\n  * x: 0px\n  * y: 0px\n  * width: 1920px\n  * height: 1080px\n  * opacity: 1\n  * rotation: 0deg\n  * scale: 1\n  * backgroundColor: #0a0a30\n- React style equivalent: style={{ position: 'absolute', left: 0px, top: 0px, width: 1920px, height: 1080px, opacity: 1, transform: 'rotate(0deg) scale(1)', backgroundColor: '#0a0a30' }}\n\n#### ELEMENT 2: c8b298a0-6726-4727-ae9d-2e04e9332a1a (text)\n- Content: Firework Show\n- Initial Layout (CSS equivalent):\n  * x: 960px\n  * y: 100px\n  * width: 800px\n  * height: 100px\n  * opacity: 0\n  * rotation: 0deg\n  * scale: 1\n- React style equivalent: style={{ position: 'absolute', left: 960px, top: 100px, width: 800px, height: 100px, opacity: 0, transform: 'rotate(0deg) scale(1)' }}\n\n- Animations for c8b298a0-6726-4727-ae9d-2e04e9332a1a:\n  * Animation 1: fadeIn\n    - Start frame: 0\n    - Duration: 30 frames\n    - End frame: 30\n    - Easing: easeOutCubic → Implement as: Easing.easeOutCubic\n    - Properties to animate:\n      • opacity: from 0 to 1\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 30], \n          [0, 1], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }\n        );`\n  * Animation 2: fadeOut\n    - Start frame: 0\n    - Duration: 10 frames\n    - End frame: 10\n    - Easing: easeInCubic → Implement as: Easing.easeInCubic\n    - Properties to animate:\n      • opacity: from 1 to 0\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 10], \n          [1, 0], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInCubic }\n        );`\n\n#### ELEMENT 3: 1d9b0ae7-8975-4ed9-b119-0d5991020316 (image)\n- Content: assets/rocket.png\n- Initial Layout (CSS equivalent):\n  * x: 460px\n  * y: 1150px\n  * width: 50px\n  * height: 200px\n  * opacity: 1\n  * rotation: 0deg\n  * scale: 1\n- React style equivalent: style={{ position: 'absolute', left: 460px, top: 1150px, width: 50px, height: 200px, opacity: 1, transform: 'rotate(0deg) scale(1)' }}\n\n- Animations for 1d9b0ae7-8975-4ed9-b119-0d5991020316:\n  * Animation 1: slideUp\n    - Start frame: 0\n    - Duration: 60 frames\n    - End frame: 60\n    - Easing: easeOutCubic → Implement as: Easing.easeOutCubic\n    - Properties to animate:\n      • y: from 1150 to -200\n        Implementation: `const yValue = interpolate(\n          frame, \n          [0, 60], \n          [1150, -200], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }\n        );`\n\n#### ELEMENT 4: 4aee6f89-58e7-4c91-974f-5859dd86bedc (shape)\n- Initial Layout (CSS equivalent):\n  * x: 485px\n  * y: 1150px\n  * width: 10px\n  * height: 0px\n  * opacity: 0.5\n  * rotation: 0deg\n  * scale: 1\n  * backgroundColor: #ffd700\n- React style equivalent: style={{ position: 'absolute', left: 485px, top: 1150px, width: 10px, height: 0px, opacity: 0.5, transform: 'rotate(0deg) scale(1)', backgroundColor: '#ffd700' }}\n\n- Animations for 4aee6f89-58e7-4c91-974f-5859dd86bedc:\n  * Animation 1: growAndFade\n    - Start frame: 0\n    - Duration: 60 frames\n    - End frame: 60\n    - Easing: easeOutQuad → Implement as: Easing.easeOutQuad\n    - Properties to animate:\n      • height: from 0 to 500\n        Implementation: `const heightValue = interpolate(\n          frame, \n          [0, 60], \n          [0, 500], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutQuad }\n        );`\n      • y: from 1150 to -200\n        Implementation: `const yValue = interpolate(\n          frame, \n          [0, 60], \n          [1150, -200], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutQuad }\n        );`\n      • opacity: from 0.5 to 0\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 60], \n          [0.5, 0], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutQuad }\n        );`\n\n#### ELEMENT 5: 97f0e377-3b87-46d9-bd06-a62f7c8cf6f1 (shape)\n- Initial Layout (CSS equivalent):\n  * x: 485px\n  * y: 1150px\n  * width: 0px\n  * height: 0px\n  * opacity: 1\n  * rotation: 0deg\n  * scale: 1\n  * backgroundColor: #ffd700\n- React style equivalent: style={{ position: 'absolute', left: 485px, top: 1150px, width: 0px, height: 0px, opacity: 1, transform: 'rotate(0deg) scale(1)', backgroundColor: '#ffd700' }}\n\n- Animations for 97f0e377-3b87-46d9-bd06-a62f7c8cf6f1:\n  * Animation 1: customProperty\n    - Start frame: 0\n    - Duration: 20 frames\n    - End frame: 20\n    - Easing: easeOutQuad → Implement as: Easing.easeOutQuad\n    - Properties to animate:\n      • width: from 0 to 200\n        Implementation: `const widthValue = interpolate(\n          frame, \n          [0, 20], \n          [0, 200], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutQuad }\n        );`\n      • height: from 0 to 200\n        Implementation: `const heightValue = interpolate(\n          frame, \n          [0, 20], \n          [0, 200], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutQuad }\n        );`\n      • opacity: from 1 to 0\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 20], \n          [1, 0], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutQuad }\n        );`\n\n#### ELEMENT 6: ea3be170-1bab-45e7-91d1-eaed1953655c (image)\n- Content: assets/rocket.png\n- Initial Layout (CSS equivalent):\n  * x: 910px\n  * y: 1150px\n  * width: 50px\n  * height: 200px\n  * opacity: 1\n  * rotation: 0deg\n  * scale: 1\n- React style equivalent: style={{ position: 'absolute', left: 910px, top: 1150px, width: 50px, height: 200px, opacity: 1, transform: 'rotate(0deg) scale(1)' }}\n\n- Animations for ea3be170-1bab-45e7-91d1-eaed1953655c:\n  * Animation 1: slideUp\n    - Start frame: 0\n    - Duration: 60 frames\n    - End frame: 60\n    - Easing: easeOutCubic → Implement as: Easing.easeOutCubic\n    - Properties to animate:\n      • y: from 1150 to -200\n        Implementation: `const yValue = interpolate(\n          frame, \n          [0, 60], \n          [1150, -200], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }\n        );`\n\n#### ELEMENT 7: caaea258-cfda-49d1-bf8a-e42036815db5 (shape)\n- Initial Layout (CSS equivalent):\n  * x: 935px\n  * y: 1150px\n  * width: 10px\n  * height: 0px\n  * opacity: 0.5\n  * rotation: 0deg\n  * scale: 1\n  * backgroundColor: #ffd700\n- React style equivalent: style={{ position: 'absolute', left: 935px, top: 1150px, width: 10px, height: 0px, opacity: 0.5, transform: 'rotate(0deg) scale(1)', backgroundColor: '#ffd700' }}\n\n- Animations for caaea258-cfda-49d1-bf8a-e42036815db5:\n  * Animation 1: growAndFade\n    - Start frame: 0\n    - Duration: 60 frames\n    - End frame: 60\n    - Easing: easeOutQuad → Implement as: Easing.easeOutQuad\n    - Properties to animate:\n      • height: from 0 to 500\n        Implementation: `const heightValue = interpolate(\n          frame, \n          [0, 60], \n          [0, 500], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutQuad }\n        );`\n      • y: from 1150 to -200\n        Implementation: `const yValue = interpolate(\n          frame, \n          [0, 60], \n          [1150, -200], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutQuad }\n        );`\n      • opacity: from 0.5 to 0\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 60], \n          [0.5, 0], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutQuad }\n        );`\n\n#### ELEMENT 8: e2f4bfc8-14c9-43fc-bfb7-9308e60d9cf2 (shape)\n- Initial Layout (CSS equivalent):\n  * x: 935px\n  * y: 1150px\n  * width: 0px\n  * height: 0px\n  * opacity: 1\n  * rotation: 0deg\n  * scale: 1\n  * backgroundColor: #ffd700\n- React style equivalent: style={{ position: 'absolute', left: 935px, top: 1150px, width: 0px, height: 0px, opacity: 1, transform: 'rotate(0deg) scale(1)', backgroundColor: '#ffd700' }}\n\n- Animations for e2f4bfc8-14c9-43fc-bfb7-9308e60d9cf2:\n  * Animation 1: customProperty\n    - Start frame: 0\n    - Duration: 20 frames\n    - End frame: 20\n    - Easing: easeOutQuad → Implement as: Easing.easeOutQuad\n    - Properties to animate:\n      • width: from 0 to 200\n        Implementation: `const widthValue = interpolate(\n          frame, \n          [0, 20], \n          [0, 200], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutQuad }\n        );`\n      • height: from 0 to 200\n        Implementation: `const heightValue = interpolate(\n          frame, \n          [0, 20], \n          [0, 200], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutQuad }\n        );`\n      • opacity: from 1 to 0\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 20], \n          [1, 0], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutQuad }\n        );`\n\n#### ELEMENT 9: 71278484-0b24-4ba5-bcb3-39b1e0b0cfad (image)\n- Content: assets/rocket.png\n- Initial Layout (CSS equivalent):\n  * x: 1360px\n  * y: 1150px\n  * width: 50px\n  * height: 200px\n  * opacity: 1\n  * rotation: 0deg\n  * scale: 1\n- React style equivalent: style={{ position: 'absolute', left: 1360px, top: 1150px, width: 50px, height: 200px, opacity: 1, transform: 'rotate(0deg) scale(1)' }}\n\n- Animations for 71278484-0b24-4ba5-bcb3-39b1e0b0cfad:\n  * Animation 1: slideUp\n    - Start frame: 0\n    - Duration: 60 frames\n    - End frame: 60\n    - Easing: easeOutCubic → Implement as: Easing.easeOutCubic\n    - Properties to animate:\n      • y: from 1150 to -200\n        Implementation: `const yValue = interpolate(\n          frame, \n          [0, 60], \n          [1150, -200], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }\n        );`\n\n#### ELEMENT 10: 2320943b-6345-436c-889d-5d42a0fd498f (shape)\n- Initial Layout (CSS equivalent):\n  * x: 1385px\n  * y: 1150px\n  * width: 10px\n  * height: 0px\n  * opacity: 0.5\n  * rotation: 0deg\n  * scale: 1\n  * backgroundColor: #ffd700\n- React style equivalent: style={{ position: 'absolute', left: 1385px, top: 1150px, width: 10px, height: 0px, opacity: 0.5, transform: 'rotate(0deg) scale(1)', backgroundColor: '#ffd700' }}\n\n- Animations for 2320943b-6345-436c-889d-5d42a0fd498f:\n  * Animation 1: growAndFade\n    - Start frame: 0\n    - Duration: 60 frames\n    - End frame: 60\n    - Easing: easeOutQuad → Implement as: Easing.easeOutQuad\n    - Properties to animate:\n      • height: from 0 to 500\n        Implementation: `const heightValue = interpolate(\n          frame, \n          [0, 60], \n          [0, 500], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutQuad }\n        );`\n      • y: from 1150 to -200\n        Implementation: `const yValue = interpolate(\n          frame, \n          [0, 60], \n          [1150, -200], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutQuad }\n        );`\n      • opacity: from 0.5 to 0\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 60], \n          [0.5, 0], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutQuad }\n        );`\n\n#### ELEMENT 11: 47a314e2-f219-4a0e-9335-68e6f2d0c2d3 (shape)\n- Initial Layout (CSS equivalent):\n  * x: 1385px\n  * y: 1150px\n  * width: 0px\n  * height: 0px\n  * opacity: 1\n  * rotation: 0deg\n  * scale: 1\n  * backgroundColor: #ffd700\n- React style equivalent: style={{ position: 'absolute', left: 1385px, top: 1150px, width: 0px, height: 0px, opacity: 1, transform: 'rotate(0deg) scale(1)', backgroundColor: '#ffd700' }}\n\n- Animations for 47a314e2-f219-4a0e-9335-68e6f2d0c2d3:\n  * Animation 1: customProperty\n    - Start frame: 0\n    - Duration: 20 frames\n    - End frame: 20\n    - Easing: easeOutQuad → Implement as: Easing.easeOutQuad\n    - Properties to animate:\n      • width: from 0 to 200\n        Implementation: `const widthValue = interpolate(\n          frame, \n          [0, 20], \n          [0, 200], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutQuad }\n        );`\n      • height: from 0 to 200\n        Implementation: `const heightValue = interpolate(\n          frame, \n          [0, 20], \n          [0, 200], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutQuad }\n        );`\n      • opacity: from 1 to 0\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 20], \n          [1, 0], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutQuad }\n        );`\n\n### SEQUENCE ORCHESTRATION & TIMING GUIDELINES:\nWhen implementing multiple animations, carefully orchestrate them to match the design intent:\n1. Use <Sequence> components for elements or animations that should start at specific frames.\n   Example: <Sequence from={30} durationInFrames={60}><YourAnimatedElement /></Sequence>\n2. For animation dependencies between elements (animations that must follow others):\n   - Create a timing map that respects trigger values like 'afterPrevious' by calculating startFrames.\n   - Example: const titleExitFrame = titleStartFrame + titleDuration;\n             const subTitleStartFrame = titleExitFrame; // Starting after title exits\n\n### AUDIO IMPLEMENTATION:\nThis scene includes the following audio track(s) to implement:\n- Audio 1: audio-1\n  - Source: assets/fireworks.mp3\n  - Start at frame: 0\n  - Volume: 0.5\n  - Implementation: <Audio src={\"assets/fireworks.mp3\"} startFrom={0} volume={0.5} />\n\n### CODE QUALITY & PERFORMANCE GUIDELINES:\n1. MODULARITY: For complex elements, consider creating sub-components.\n2. PERFORMANCE: Minimize DOM nodes - prefer CSS transforms over creating new elements.\n3. MEMOIZATION: Use React.useMemo() for computationally expensive calculations.\n4. TYPING: Provide proper TypeScript types throughout, including for style objects.\n5. COMMENTS: Add brief comments for complex animation logic or calculations.\n6. ORGANIZATION: Group related animations and separate distinct animation phases.\n7. ERROR HANDLING: Include defensive checks for potentially undefined values.\n\n### CRITICAL REMINDER:\n- PRECISELY follow the AnimationDesignBrief's specifications.\n- RESPECT the timing, durations, and easing specified in the brief.\n- IMPLEMENT ALL elements and animations exactly as detailed above.\n- START with the boilerplate structure provided earlier.\n- REMEMBER the first line MUST be: // src/remotion/components/scenes/FireworkRocketsLaunchingScene.tsx","sceneId":"23e339a0-006a-4d9d-970c-ad1df9e54210","userData":{"userId":"30c92f68-3935-4e86-8260-7a5fbd1a9dc3"},"projectId":"2858ead5-d5a7-42bc-ba32-86612b879dbf","componentName":"FireworkRocketsLaunchingScene","durationInFrames":150,"animationDesignBriefId":"c62eb681-cee0-432f-9de0-ece9246fee78"},"statusMessageId":"2583acbf-da09-47af-9075-9ce0beef82f7"},{"id":"029d10cc-f66f-4001-a6be-99db62ba4e42","projectId":"ac65d592-419d-4f40-ae0d-0733a6497a49","effect":"ALivelyCartoonstyleScene","tsxCode":"\"use client\";\n\n// src/remotion/components/scenes/ALivelyCartoonstyleScene.tsx\nimport React from 'react';\nimport {\n  AbsoluteFill,\n  useCurrentFrame,\n  useVideoConfig,\n  interpolate,\n  Easing,\n  Img,\n} from 'remotion';\n// import { AnimationDesignBrief } from '~/lib/schemas/animationDesignBrief.schema';\n\ninterface ALivelyCartoonstyleSceneProps {\n  brief: AnimationDesignBrief;\n}\n\nexport const ALivelyCartoonstyleScene: React.FC<ALivelyCartoonstyleSceneProps> = ({ brief }) => {\n  const frame = useCurrentFrame();\n  const { fps, width, height, durationInFrames } = useVideoConfig();\n\n  const { colorPalette } = brief;\n  const backgroundColor = colorPalette?.background || 'transparent';\n\n  return (\n    <AbsoluteFill style={{ backgroundColor }}>\n      {/* Frog jump animation */}\n      <Frog frame={frame} fps={fps} />\n      {/* Shadow under frog */}\n      <Shadow frame={frame} fps={fps} />\n    </AbsoluteFill>\n  );\n};\n\ninterface FrogProps {\n  frame: number;\n  fps: number;\n}\n\nconst Frog: React.FC<FrogProps> = ({ frame, fps }) => {\n  // Squash phase (0-15)\n  const squashScaleY = interpolate(\n    frame,\n    [0, 15],\n    [1, 0.8],\n    { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutQuad }\n  );\n  const squashScaleX = interpolate(\n    frame,\n    [0, 15],\n    [1, 1.2],\n    { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutQuad }\n  );\n  const squashY = interpolate(\n    frame,\n    [0, 15],\n    [980, 1000],\n    { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutQuad }\n  );\n\n  // Jump up (15-75)\n  const jumpUpY = interpolate(\n    frame,\n    [15, 75],\n    [1000, 300],\n    { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutQuad }\n  );\n  const jumpUpScaleY = interpolate(\n    frame,\n    [15, 75],\n    [0.8, 1],\n    { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutQuad }\n  );\n  const jumpUpScaleX = interpolate(\n    frame,\n    [15, 75],\n    [1.2, 1],\n    { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutQuad }\n  );\n\n  // Descent (75-135)\n  const descendY = interpolate(\n    frame,\n    [75, 135],\n    [300, 1000],\n    { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInQuad }\n  );\n\n  // Landing bounce up (135-155)\n  const bounceUpY = interpolate(\n    frame,\n    [135, 155],\n    [1000, 950],\n    { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutQuad }\n  );\n\n  // Landing bounce down (155-165)\n  const bounceDownY = interpolate(\n    frame,\n    [155, 165],\n    [950, 1000],\n    { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInQuad }\n  );\n\n  // Fade In (0-15) & Fade Out (170-180)\n  const fadeInOpacity = interpolate(\n    frame,\n    [0, 15],\n    [0, 1],\n    { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }\n  );\n  const fadeOutOpacity = interpolate(\n    frame,\n    [170, 180],\n    [1, 0],\n    { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInCubic }\n  );\n\n  // Determine final transforms and positioning\n  let yPos = 1000;\n  let scaleX = 1;\n  let scaleY = 1;\n\n  if (frame < 15) {\n    yPos = squashY;\n    scaleX = squashScaleX;\n    scaleY = squashScaleY;\n  } else if (frame < 75) {\n    yPos = jumpUpY;\n    scaleX = jumpUpScaleX;\n    scaleY = jumpUpScaleY;\n  } else if (frame < 135) {\n    yPos = descendY;\n  } else if (frame < 155) {\n    yPos = bounceUpY;\n  } else if (frame < 165) {\n    yPos = bounceDownY;\n  } else {\n    yPos = 1000;\n  }\n\n  const opacity = frame < 15 ? fadeInOpacity : frame > 170 ? fadeOutOpacity : 1;\n\n  return (\n    <Img\n      src={brief && (brief.elements.find((el) => el.id === 'f1e65a67-1234-4cde-9f8b-abcdef123456') as any)?.content || 'assets/frog.png'}\n      style={{\n        position: 'absolute',\n        left: 960,\n        top: yPos,\n        width: 150,\n        height: 120,\n        opacity,\n        transform: `rotate(0deg) scaleX(${scaleX}) scaleY(${scaleY})`,\n      }}\n    />\n  );\n};\n\ninterface ShadowProps {\n  frame: number;\n  fps: number;\n}\n\nconst Shadow: React.FC<ShadowProps> = ({ frame }) => {\n  // Fade In (0-15)\n  const inOpacity = interpolate(\n    frame,\n    [0, 15],\n    [0, 0.2],\n    { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }\n  );\n  // Squash (15-75)\n  const squashOpacity = interpolate(\n    frame,\n    [15, 75],\n    [0.2, 0.1],\n    { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutQuad }\n  );\n  const squashScaleX = interpolate(\n    frame,\n    [15, 75],\n    [1, 0.3],\n    { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutQuad }\n  );\n  // Expand (75-135)\n  const expandOpacity = interpolate(\n    frame,\n    [75, 135],\n    [0.1, 0.2],\n    { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInQuad }\n  );\n  const expandScaleX = interpolate(\n    frame,\n    [75, 135],\n    [0.3, 1],\n    { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInQuad }\n  );\n  // Fade Out (170-180)\n  const outOpacity = interpolate(\n    frame,\n    [170, 180],\n    [0.2, 0],\n    { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInCubic }\n  );\n\n  let opacity = 0;\n  let scaleX = 1;\n\n  if (frame < 15) {\n    opacity = inOpacity;\n  } else if (frame < 75) {\n    opacity = squashOpacity;\n    scaleX = squashScaleX;\n  } else if (frame < 135) {\n    opacity = expandOpacity;\n    scaleX = expandScaleX;\n  } else if (frame > 170) {\n    opacity = outOpacity;\n  } else {\n    opacity = 0.2;\n    scaleX = 1;\n  }\n\n  return (\n    <div\n      style={{\n        position: 'absolute',\n        left: 960,\n        top: 1040,\n        width: 160,\n        height: 40,\n        backgroundColor: 'rgba(0,0,0,0.2)',\n        opacity,\n        transform: `scaleX(${scaleX})`,\n        borderRadius: '50%',\n      }}\n    />\n  );\n};","status":"building","outputUrl":null,"errorMessage":"TSX code is missing for this job","retryCount":1,"createdAt":"2025-05-10 02:34:48.009838+00","updatedAt":"2025-05-10 02:35:44.947+00","metadata":{"fps":30,"width":1920,"height":1080,"prompt":"### ROLE: You are an Expert Remotion Developer and Senior React Engineer.\n### TASK: Create a production-quality Remotion React functional component in TypeScript.\n### COMPONENT NAME: 'ALivelyCartoonstyleScene'\n### OBJECTIVE: Generate a component that precisely implements the provided AnimationDesignBrief with professional animations and visual effects.\n### VIDEO CONFIG: Target video is 1920x1080px, 180 frames total duration, at 30 FPS.\n### MANDATORY REQUIREMENTS:\n- The FIRST line MUST be: // src/remotion/components/scenes/ALivelyCartoonstyleScene.tsx\n- The component MUST be a functional component using TypeScript (.tsx).\n- ALWAYS use the Remotion hooks: useCurrentFrame() and useVideoConfig() for timing and dimensions.\n- Component MUST accept props: { brief: AnimationDesignBrief } (assume this type is imported).\n- Utilize appropriate Remotion animation functions based on each element's needs:\n  * interpolate() - For smooth linear or eased transitions between values\n  * spring() - For physics-based, bouncy animations\n  * Easing module - For specifying animation curves (easeInOut, bezier, etc.)\n- Use Remotion timing components when needed:\n  * <Sequence from={startFrame} durationInFrames={duration}> - For sequential animations\n  * <Series> - For orchestrating complex animation sequences\n  * <Loop> - For repeating animations\n- Apply absolute positioning based on initialLayout coordinates.\n\n### BOILERPLATE STRUCTURE (Follow this pattern):\n```typescript\n// src/remotion/components/scenes/ALivelyCartoonstyleScene.tsx\nimport { AbsoluteFill, useCurrentFrame, useVideoConfig, interpolate, spring, Sequence, Easing, Img, Audio } from 'remotion';\nimport React from 'react';\n// import { AnimationDesignBrief } from '~/lib/schemas/animationDesignBrief.schema';\n\nexport const ALivelyCartoonstyleScene: React.FC<{ brief: AnimationDesignBrief }> = ({ brief }) => {\n  const frame = useCurrentFrame();\n  const { fps, width, height, durationInFrames } = useVideoConfig();\n\n  // Extract key brief properties\n  const { elements, colorPalette, typography, overallStyle } = brief;\n\n  // Define background color from brief\n  const backgroundColor = colorPalette?.background || 'transparent';\n\n  return (\n    <AbsoluteFill style={{ backgroundColor }}>\n      {/* Render each element with its animations */}\n    </AbsoluteFill>\n  );\n};\n```\n\n--- Scene Overview ---\nScene Name: ALivelyCartoonstyleScene\nPurpose: A lively, cartoon-style green frog that performs a smooth jumping animation: the frog starts crouched at the bottom center of the frame, then leaps upward in an arc using squash-and-stretch principles for natural movement. It reaches the apex mid-frame, then descends and lands with a slight bounce on the same spot, including a subtle shadow beneath the frog to convey depth. The background is transparent to allow overlay on any scene.\nOverall Style: Lively cartoon style with squash-and-stretch principles\n\n--- Color Palette ---\n- Primary Color: #5CB85C\n- Secondary Color: #4A8A3D\n- Accent Color: #A8D08D\n- Background Color: rgba(0,0,0,0)\n- Text Primary Color: #FFFFFF\n- Text Secondary Color: #CCCCCC\n\n### ELEMENT-BY-ELEMENT IMPLEMENTATION GUIDE:\nEach element from the AnimationDesignBrief must be translated into React/Remotion code following these guidelines:\n\n#### ELEMENT TYPE TRANSLATION:\n- 'text' → Use a <div> or <h1>-<h6> with appropriate styling\n- 'image' → Use Remotion's <Img src={content} /> component\n- 'video' → Use Remotion's <Video src={content} /> component\n- 'shape' → Use appropriate shape elements (div with border-radius for circles/rounded rectangles, SVG for complex shapes)\n- 'container' → Use a positioned <div> that may contain child elements\n\n#### INITIAL LAYOUT TRANSLATION:\nAll initialLayout properties MUST be translated to React inline styles:\n- 'x', 'y' → style={{ position: 'absolute', left: x, top: y }}\n- 'width', 'height' → style={{ width, height }}\n- 'opacity' → style={{ opacity }}\n- 'rotation' → style={{ transform: `rotate(${rotation}deg)` }}\n- 'scale' → style={{ transform: `scale(${scale})` }}\n- 'zIndex' → style={{ zIndex }}\n- Multiple transforms should be combined: transform: `rotate(${rotation}deg) scale(${scale})`\n\n#### ANIMATION IMPLEMENTATION:\nFor each animation, use this approach:\n1. Calculate the active animation frames based on delayInFrames and durationInFrames:\n   const animStartFrame = animation.delayInFrames || 0;\n   const animEndFrame = animStartFrame + (animation.durationInFrames || 30);\n2. Apply the appropriate Remotion animation function:\n   - For 'spring' animations or when remotionFunctionHint is 'spring':\n     const animatedValue = spring({\n       frame: frame - animStartFrame,\n       fps,\n       from: property.from,\n       to: property.to,\n       config: property.springConfig || { damping: 10, mass: 1, stiffness: 100 }\n     });\n   - For most other animations, use interpolate:\n     const animatedValue = interpolate(\n       frame,\n       [animStartFrame, animEndFrame],\n       [property.from, property.to],\n       {\n         extrapolateLeft: 'clamp',\n         extrapolateRight: 'clamp',\n         easing: determineEasing(animation.easing)\n       }\n     );\n3. Apply animated values to style properties:\n   - For transform properties (e.g., 'transform.translateX', 'transform.scale'):\n     Extract the specific transform type and apply with appropriate units.\n   - For standard CSS properties (e.g., 'opacity'):\n     Apply directly to the style object.\n   - Example: style={{ opacity: animatedOpacity, transform: `translateX(${animatedX}px) scale(${animatedScale})` }}\n4. For sequence-based timing (startAfter, startWith):\n   - Wrap elements in <Sequence> components with appropriate 'from' and 'durationInFrames' props\n   - Use 'from' attribute based on animation.delayInFrames\n   - Example: <Sequence from={30} durationInFrames={60}>...</Sequence>\n\n### SPECIFIC ELEMENTS TO IMPLEMENT:\n\n#### ELEMENT 1: f1e65a67-1234-4cde-9f8b-abcdef123456 (image)\n- Content: assets/frog.png\n- Initial Layout (CSS equivalent):\n  * x: 960px\n  * y: 980px\n  * width: 150px\n  * height: 120px\n  * opacity: 0\n  * rotation: 0deg\n  * scale: 1\n- React style equivalent: style={{ position: 'absolute', left: 960px, top: 980px, width: 150px, height: 120px, opacity: 0, transform: 'rotate(0deg) scale(1)' }}\n\n- Animations for f1e65a67-1234-4cde-9f8b-abcdef123456:\n  * Animation 1: fadeIn\n    - Start frame: 0\n    - Duration: 15 frames\n    - End frame: 15\n    - Easing: easeOutCubic → Implement as: Easing.easeOutCubic\n    - Properties to animate:\n      • opacity: from 0 to 1\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 15], \n          [0, 1], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }\n        );`\n  * Animation 2: customProperty\n    - Start frame: 0\n    - Duration: 15 frames\n    - End frame: 15\n    - Easing: easeOutQuad → Implement as: Easing.easeOutQuad\n    - Properties to animate:\n      • scaleY: from 1 to 0.8\n        Implementation: `const scaleYValue = interpolate(\n          frame, \n          [0, 15], \n          [1, 0.8], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutQuad }\n        );`\n      • scaleX: from 1 to 1.2\n        Implementation: `const scaleXValue = interpolate(\n          frame, \n          [0, 15], \n          [1, 1.2], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutQuad }\n        );`\n      • y: from 980 to 1000\n        Implementation: `const yValue = interpolate(\n          frame, \n          [0, 15], \n          [980, 1000], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutQuad }\n        );`\n  * Animation 3: customProperty\n    - Start frame: 0\n    - Duration: 60 frames\n    - End frame: 60\n    - Easing: easeOutQuad → Implement as: Easing.easeOutQuad\n    - Properties to animate:\n      • y: from 1000 to 300\n        Implementation: `const yValue = interpolate(\n          frame, \n          [0, 60], \n          [1000, 300], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutQuad }\n        );`\n      • scaleY: from 0.8 to 1\n        Implementation: `const scaleYValue = interpolate(\n          frame, \n          [0, 60], \n          [0.8, 1], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutQuad }\n        );`\n      • scaleX: from 1.2 to 1\n        Implementation: `const scaleXValue = interpolate(\n          frame, \n          [0, 60], \n          [1.2, 1], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutQuad }\n        );`\n  * Animation 4: customProperty\n    - Start frame: 0\n    - Duration: 60 frames\n    - End frame: 60\n    - Easing: easeInQuad → Implement as: Easing.easeInQuad\n    - Properties to animate:\n      • y: from 300 to 1000\n        Implementation: `const yValue = interpolate(\n          frame, \n          [0, 60], \n          [300, 1000], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInQuad }\n        );`\n  * Animation 5: customProperty\n    - Start frame: 0\n    - Duration: 20 frames\n    - End frame: 20\n    - Easing: easeOutQuad → Implement as: Easing.easeOutQuad\n    - Properties to animate:\n      • y: from 1000 to 950\n        Implementation: `const yValue = interpolate(\n          frame, \n          [0, 20], \n          [1000, 950], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutQuad }\n        );`\n  * Animation 6: customProperty\n    - Start frame: 0\n    - Duration: 10 frames\n    - End frame: 10\n    - Easing: easeInQuad → Implement as: Easing.easeInQuad\n    - Properties to animate:\n      • y: from 950 to 1000\n        Implementation: `const yValue = interpolate(\n          frame, \n          [0, 10], \n          [950, 1000], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInQuad }\n        );`\n  * Animation 7: fadeOut\n    - Start frame: 0\n    - Duration: 10 frames\n    - End frame: 10\n    - Easing: easeInCubic → Implement as: Easing.easeInCubic\n    - Properties to animate:\n      • opacity: from 1 to 0\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 10], \n          [1, 0], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInCubic }\n        );`\n\n#### ELEMENT 2: a32cf71d-a49b-4629-939a-6091a99b615a (shape)\n- Initial Layout (CSS equivalent):\n  * x: 960px\n  * y: 1040px\n  * width: 160px\n  * height: 40px\n  * opacity: 0\n  * rotation: 0deg\n  * scale: 1\n  * backgroundColor: rgba(0,0,0,0.2)\n- React style equivalent: style={{ position: 'absolute', left: 960px, top: 1040px, width: 160px, height: 40px, opacity: 0, transform: 'rotate(0deg) scale(1)', backgroundColor: 'rgba(0,0,0,0.2)' }}\n\n- Animations for a32cf71d-a49b-4629-939a-6091a99b615a:\n  * Animation 1: fadeIn\n    - Start frame: 0\n    - Duration: 15 frames\n    - End frame: 15\n    - Easing: easeOutCubic → Implement as: Easing.easeOutCubic\n    - Properties to animate:\n      • opacity: from 0 to 0.2\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 15], \n          [0, 0.2], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }\n        );`\n  * Animation 2: customProperty\n    - Start frame: 0\n    - Duration: 60 frames\n    - End frame: 60\n    - Easing: easeOutQuad → Implement as: Easing.easeOutQuad\n    - Properties to animate:\n      • scaleX: from 1 to 0.3\n        Implementation: `const scaleXValue = interpolate(\n          frame, \n          [0, 60], \n          [1, 0.3], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutQuad }\n        );`\n      • opacity: from 0.2 to 0.1\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 60], \n          [0.2, 0.1], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutQuad }\n        );`\n  * Animation 3: customProperty\n    - Start frame: 0\n    - Duration: 60 frames\n    - End frame: 60\n    - Easing: easeInQuad → Implement as: Easing.easeInQuad\n    - Properties to animate:\n      • scaleX: from 0.3 to 1\n        Implementation: `const scaleXValue = interpolate(\n          frame, \n          [0, 60], \n          [0.3, 1], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInQuad }\n        );`\n      • opacity: from 0.1 to 0.2\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 60], \n          [0.1, 0.2], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInQuad }\n        );`\n  * Animation 4: fadeOut\n    - Start frame: 0\n    - Duration: 10 frames\n    - End frame: 10\n    - Easing: easeInCubic → Implement as: Easing.easeInCubic\n    - Properties to animate:\n      • opacity: from 0.2 to 0\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 10], \n          [0.2, 0], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInCubic }\n        );`\n\n### SEQUENCE ORCHESTRATION & TIMING GUIDELINES:\nWhen implementing multiple animations, carefully orchestrate them to match the design intent:\n1. Use <Sequence> components for elements or animations that should start at specific frames.\n   Example: <Sequence from={30} durationInFrames={60}><YourAnimatedElement /></Sequence>\n2. For animation dependencies between elements (animations that must follow others):\n   - Create a timing map that respects trigger values like 'afterPrevious' by calculating startFrames.\n   - Example: const titleExitFrame = titleStartFrame + titleDuration;\n             const subTitleStartFrame = titleExitFrame; // Starting after title exits\n\n### CODE QUALITY & PERFORMANCE GUIDELINES:\n1. MODULARITY: For complex elements, consider creating sub-components.\n2. PERFORMANCE: Minimize DOM nodes - prefer CSS transforms over creating new elements.\n3. MEMOIZATION: Use React.useMemo() for computationally expensive calculations.\n4. TYPING: Provide proper TypeScript types throughout, including for style objects.\n5. COMMENTS: Add brief comments for complex animation logic or calculations.\n6. ORGANIZATION: Group related animations and separate distinct animation phases.\n7. ERROR HANDLING: Include defensive checks for potentially undefined values.\n\n### CRITICAL REMINDER:\n- PRECISELY follow the AnimationDesignBrief's specifications.\n- RESPECT the timing, durations, and easing specified in the brief.\n- IMPLEMENT ALL elements and animations exactly as detailed above.\n- START with the boilerplate structure provided earlier.\n- REMEMBER the first line MUST be: // src/remotion/components/scenes/ALivelyCartoonstyleScene.tsx","sceneId":"f9e2a6b3-4d52-4f58-9e3b-abc123def456","userData":{"userId":"30c92f68-3935-4e86-8260-7a5fbd1a9dc3"},"projectId":"ac65d592-419d-4f40-ae0d-0733a6497a49","componentName":"ALivelyCartoonstyleScene","durationInFrames":180,"animationDesignBriefId":"f2dcd5bb-39b5-43a3-bae2-adad5f2df5b7"},"statusMessageId":"dcf97f81-a500-4bdc-8b3c-07f46d3ad1a1"},{"id":"7654af99-e9a3-4655-a3b9-fef141ad99f4","projectId":"ac65d592-419d-4f40-ae0d-0733a6497a49","effect":"TheFrogExplodesScene","tsxCode":"\"use client\";\n\n// src/remotion/components/scenes/TheFrogExplodesScene.tsx\nimport React, { useMemo } from 'react';\nimport {\n\tAbsoluteFill,\n\tuseCurrentFrame,\n\tuseVideoConfig,\n\tinterpolate,\n\tspring,\n\tEasing,\n\tImg,\n\tSequence,\n} from 'remotion';\n// import { AnimationDesignBrief } from '~/lib/schemas/animationDesignBrief.schema';\n\nexport const TheFrogExplodesScene: React.FC<{ brief: AnimationDesignBrief }> = ({ brief }) => {\n\tconst frame = useCurrentFrame();\n\tconst { fps, width, height, durationInFrames } = useVideoConfig();\n\n\t// Extract brief properties\n\tconst { colorPalette, typography } = brief;\n\tconst backgroundColor = colorPalette?.background || '#1E1E1E';\n\n\t// --- Element 1: Frog Image ---\n\tconst frogScale = interpolate(\n\t\tframe,\n\t\t[0, 10],\n\t\t[1, 0.5],\n\t\t{ extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInCubic }\n\t);\n\tconst frogOpacity = interpolate(\n\t\tframe,\n\t\t[0, 10],\n\t\t[1, 0],\n\t\t{ extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInCubic }\n\t);\n\n\t// --- Element 2: Particle Burst Container ---\n\tconst fadeIn2 = interpolate(\n\t\tframe,\n\t\t[0, 5],\n\t\t[0, 1],\n\t\t{ extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }\n\t);\n\tconst fadeOut2 = interpolate(\n\t\tframe,\n\t\t[0, 10],\n\t\t[1, 0],\n\t\t{ extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInQuad }\n\t);\n\tconst customOpacity = frame <= 5 ? fadeIn2 : frame <= 10 ? fadeOut2 : 0;\n\n\t// Pre-generate particle angles\n\tconst particles = useMemo(\n\t\t() => Array.from({ length: 30 }).map(() => ({ angle: Math.random() * 2 * Math.PI })),\n\t\t[]\n\t);\n\tconst burstRadius = interpolate(\n\t\tframe,\n\t\t[0, 40],\n\t\t[0, 500],\n\t\t{ extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutQuad }\n\t);\n\tconst particleOpacity = interpolate(\n\t\tframe,\n\t\t[0, 40],\n\t\t[1, 0],\n\t\t{ extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutQuad }\n\t);\n\n\t// --- Element 3: Shockwave Shape ---\n\tconst shapeOpacityIn = interpolate(\n\t\tframe,\n\t\t[0, 5],\n\t\t[0, 1],\n\t\t{ extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutQuad }\n\t);\n\tconst shapeOpacityOut = interpolate(\n\t\tframe,\n\t\t[0, 15],\n\t\t[1, 0],\n\t\t{ extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInQuad }\n\t);\n\tconst shapeOpacity = frame <= 5 ? shapeOpacityIn : frame <= 15 ? shapeOpacityOut : 0;\n\tconst shapeWidth = interpolate(\n\t\tframe,\n\t\t[0, 40],\n\t\t[0, 1200],\n\t\t{ extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutQuad }\n\t);\n\tconst shapeHeight = interpolate(\n\t\tframe,\n\t\t[0, 40],\n\t\t[0, 1200],\n\t\t{ extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutQuad }\n\t);\n\tconst shapeLeft = width / 2 - shapeWidth / 2;\n\tconst shapeTop = height / 2 - shapeHeight / 2;\n\n\t// --- Element 4: Text BOOM! ---\n\tconst textFadeIn = interpolate(\n\t\tframe,\n\t\t[0, 10],\n\t\t[0, 1],\n\t\t{ extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutBack }\n\t);\n\tconst textFadeOut = interpolate(\n\t\tframe,\n\t\t[0, 10],\n\t\t[1, 0],\n\t\t{ extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInQuad }\n\t);\n\tconst textOpacity = textFadeIn * textFadeOut;\n\tconst textScale = interpolate(\n\t\tframe,\n\t\t[0, 15],\n\t\t[0.5, 1.5],\n\t\t{ extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutBack }\n\t);\n\n\t// --- Element 5: Full-screen Black Fade-in ---\n\tconst bgOpacity = interpolate(\n\t\tframe,\n\t\t[0, 30],\n\t\t[0, 1],\n\t\t{ extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInOutCubic }\n\t);\n\n\treturn (\n\t\t<AbsoluteFill style={{ backgroundColor, overflow: 'hidden' }}>\n\t\t\t{/* Frog Image */}\n\t\t\t<Img\n\t\t\t\tsrc=\"https://example.com/assets/frog.png\"\n\t\t\t\tstyle={{\n\t\t\t\t\tposition: 'absolute',\n\t\t\t\t\tleft: width / 2,\n\t\t\t\t\ttop: height / 2,\n\t\t\t\t\twidth: 300,\n\t\t\t\t\theight: 300,\n\t\t\t\t\topacity: frogOpacity,\n\t\t\t\t\ttransform: `rotate(0deg) scale(${frogScale})`,\n\t\t\t\t}}\n\t\t\t/>\n\n\t\t\t{/* Particle Burst & Container */}\n\t\t\t<div\n\t\t\t\tstyle={{\n\t\t\t\t\tposition: 'absolute',\n\t\t\t\t\tleft: width / 2,\n\t\t\t\t\ttop: height / 2,\n\t\t\t\t\twidth,\n\t\t\t\t\theight,\n\t\t\t\t\topacity: customOpacity,\n\t\t\t\t\ttransform: 'rotate(0deg) scale(1)',\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t{particles.map((p, i) => {\n\t\t\t\t\tconst px = Math.cos(p.angle) * burstRadius;\n\t\t\t\t\tconst py = Math.sin(p.angle) * burstRadius;\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tkey={i}\n\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\tposition: 'absolute',\n\t\t\t\t\t\t\t\tleft: px,\n\t\t\t\t\t\t\t\ttop: py,\n\t\t\t\t\t\t\t\twidth: 10,\n\t\t\t\t\t\t\t\theight: 10,\n\t\t\t\t\t\t\t\tborderRadius: '50%',\n\t\t\t\t\t\t\t\tbackgroundColor: colorPalette?.primary || '#7BEA00',\n\t\t\t\t\t\t\t\topacity: particleOpacity,\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t/>\n\t\t\t\t\t);\n\t\t\t\t})}\n\t\t\t</div>\n\n\t\t\t{/* Shockwave Shape */}\n\t\t\t<div\n\t\t\t\tstyle={{\n\t\t\t\t\tposition: 'absolute',\n\t\t\t\t\tleft: shapeLeft,\n\t\t\t\t\ttop: shapeTop,\n\t\t\t\t\twidth: shapeWidth,\n\t\t\t\t\theight: shapeHeight,\n\t\t\t\t\topacity: shapeOpacity,\n\t\t\t\t\tborderRadius: '50%',\n\t\t\t\t\tborder: '10px solid #FFFFFF',\n\t\t\t\t\tbackgroundColor: 'transparent',\n\t\t\t\t\ttransform: 'rotate(0deg) scale(1)',\n\t\t\t\t}}\n\t\t\t/>\n\n\t\t\t{/* BOOM! Text */}\n\t\t\t<div\n\t\t\t\tstyle={{\n\t\t\t\t\tposition: 'absolute',\n\t\t\t\t\tleft: width / 2,\n\t\t\t\t\ttop: height / 2 - 20,\n\t\t\t\t\twidth: 600,\n\t\t\t\t\theight: 200,\n\t\t\t\t\tdisplay: 'flex',\n\t\t\t\t\talignItems: 'center',\n\t\t\t\t\tjustifyContent: 'center',\n\t\t\t\t\topacity: textOpacity,\n\t\t\t\t\ttransform: `rotate(0deg) scale(${textScale})`,\n\t\t\t\t\tcolor: colorPalette?.textPrimary || '#FFFFFF',\n\t\t\t\t\tfontSize: typography?.fontSize || 100,\n\t\t\t\t\tfontFamily: typography?.fontFamily || 'Arial, sans-serif',\n\t\t\t\t\ttextAlign: 'center'\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\tBOOM!\n\t\t\t</div>\n\n\t\t\t{/* Full-screen Black Fade-in */}\n\t\t\t<div\n\t\t\t\tstyle={{\n\t\t\t\t\tposition: 'absolute',\n\t\t\t\t\tleft: 0,\n\t\t\t\t\ttop: 0,\n\t\t\t\t\twidth,\n\t\t\t\t\theight,\n\t\t\t\t\tbackgroundColor: '#000000',\n\t\t\t\t\topacity: bgOpacity,\n\t\t\t\t\ttransform: 'rotate(0deg) scale(1)',\n\t\t\t\t}}\n\t\t\t/>\n\t\t</AbsoluteFill>\n\t);\n};","status":"building","outputUrl":null,"errorMessage":"TSX code is missing for this job","retryCount":1,"createdAt":"2025-05-10 02:34:03.083965+00","updatedAt":"2025-05-10 02:34:52.524+00","metadata":{"fps":30,"width":1920,"height":1080,"prompt":"### ROLE: You are an Expert Remotion Developer and Senior React Engineer.\n### TASK: Create a production-quality Remotion React functional component in TypeScript.\n### COMPONENT NAME: 'TheFrogExplodesScene'\n### OBJECTIVE: Generate a component that precisely implements the provided AnimationDesignBrief with professional animations and visual effects.\n### VIDEO CONFIG: Target video is 1920x1080px, 180 frames total duration, at 30 FPS.\n### MANDATORY REQUIREMENTS:\n- The FIRST line MUST be: // src/remotion/components/scenes/TheFrogExplodesScene.tsx\n- The component MUST be a functional component using TypeScript (.tsx).\n- ALWAYS use the Remotion hooks: useCurrentFrame() and useVideoConfig() for timing and dimensions.\n- Component MUST accept props: { brief: AnimationDesignBrief } (assume this type is imported).\n- Utilize appropriate Remotion animation functions based on each element's needs:\n  * interpolate() - For smooth linear or eased transitions between values\n  * spring() - For physics-based, bouncy animations\n  * Easing module - For specifying animation curves (easeInOut, bezier, etc.)\n- Use Remotion timing components when needed:\n  * <Sequence from={startFrame} durationInFrames={duration}> - For sequential animations\n  * <Series> - For orchestrating complex animation sequences\n  * <Loop> - For repeating animations\n- Apply absolute positioning based on initialLayout coordinates.\n\n### BOILERPLATE STRUCTURE (Follow this pattern):\n```typescript\n// src/remotion/components/scenes/TheFrogExplodesScene.tsx\nimport { AbsoluteFill, useCurrentFrame, useVideoConfig, interpolate, spring, Sequence, Easing, Img, Audio } from 'remotion';\nimport React from 'react';\n// import { AnimationDesignBrief } from '~/lib/schemas/animationDesignBrief.schema';\n\nexport const TheFrogExplodesScene: React.FC<{ brief: AnimationDesignBrief }> = ({ brief }) => {\n  const frame = useCurrentFrame();\n  const { fps, width, height, durationInFrames } = useVideoConfig();\n\n  // Extract key brief properties\n  const { elements, colorPalette, typography, overallStyle } = brief;\n\n  // Define background color from brief\n  const backgroundColor = colorPalette?.background || 'transparent';\n\n  return (\n    <AbsoluteFill style={{ backgroundColor }}>\n      {/* Render each element with its animations */}\n    </AbsoluteFill>\n  );\n};\n```\n\n--- Scene Overview ---\nScene Name: TheFrogExplodesScene\nPurpose: The frog explodes in a burst of green, animated particles and a shockwave effect, ending with a brief fade out.\nOverall Style: Dynamic cartoon style with fluid organic motion\n\n--- Color Palette ---\n- Primary Color: #7BEA00\n- Secondary Color: #3D3D3D\n- Accent Color: #FFFFFF\n- Background Color: #1E1E1E\n- Text Primary Color: #FFFFFF\n- Text Secondary Color: #CCCCCC\n\n### ELEMENT-BY-ELEMENT IMPLEMENTATION GUIDE:\nEach element from the AnimationDesignBrief must be translated into React/Remotion code following these guidelines:\n\n#### ELEMENT TYPE TRANSLATION:\n- 'text' → Use a <div> or <h1>-<h6> with appropriate styling\n- 'image' → Use Remotion's <Img src={content} /> component\n- 'video' → Use Remotion's <Video src={content} /> component\n- 'shape' → Use appropriate shape elements (div with border-radius for circles/rounded rectangles, SVG for complex shapes)\n- 'container' → Use a positioned <div> that may contain child elements\n\n#### INITIAL LAYOUT TRANSLATION:\nAll initialLayout properties MUST be translated to React inline styles:\n- 'x', 'y' → style={{ position: 'absolute', left: x, top: y }}\n- 'width', 'height' → style={{ width, height }}\n- 'opacity' → style={{ opacity }}\n- 'rotation' → style={{ transform: `rotate(${rotation}deg)` }}\n- 'scale' → style={{ transform: `scale(${scale})` }}\n- 'zIndex' → style={{ zIndex }}\n- Multiple transforms should be combined: transform: `rotate(${rotation}deg) scale(${scale})`\n\n#### ANIMATION IMPLEMENTATION:\nFor each animation, use this approach:\n1. Calculate the active animation frames based on delayInFrames and durationInFrames:\n   const animStartFrame = animation.delayInFrames || 0;\n   const animEndFrame = animStartFrame + (animation.durationInFrames || 30);\n2. Apply the appropriate Remotion animation function:\n   - For 'spring' animations or when remotionFunctionHint is 'spring':\n     const animatedValue = spring({\n       frame: frame - animStartFrame,\n       fps,\n       from: property.from,\n       to: property.to,\n       config: property.springConfig || { damping: 10, mass: 1, stiffness: 100 }\n     });\n   - For most other animations, use interpolate:\n     const animatedValue = interpolate(\n       frame,\n       [animStartFrame, animEndFrame],\n       [property.from, property.to],\n       {\n         extrapolateLeft: 'clamp',\n         extrapolateRight: 'clamp',\n         easing: determineEasing(animation.easing)\n       }\n     );\n3. Apply animated values to style properties:\n   - For transform properties (e.g., 'transform.translateX', 'transform.scale'):\n     Extract the specific transform type and apply with appropriate units.\n   - For standard CSS properties (e.g., 'opacity'):\n     Apply directly to the style object.\n   - Example: style={{ opacity: animatedOpacity, transform: `translateX(${animatedX}px) scale(${animatedScale})` }}\n4. For sequence-based timing (startAfter, startWith):\n   - Wrap elements in <Sequence> components with appropriate 'from' and 'durationInFrames' props\n   - Use 'from' attribute based on animation.delayInFrames\n   - Example: <Sequence from={30} durationInFrames={60}>...</Sequence>\n\n### SPECIFIC ELEMENTS TO IMPLEMENT:\n\n#### ELEMENT 1: 940f9f54-f638-42be-ba72-41d317ab9644 (image)\n- Content: https://example.com/assets/frog.png\n- Initial Layout (CSS equivalent):\n  * x: 960px\n  * y: 540px\n  * width: 300px\n  * height: 300px\n  * opacity: 1\n  * rotation: 0deg\n  * scale: 1\n- React style equivalent: style={{ position: 'absolute', left: 960px, top: 540px, width: 300px, height: 300px, opacity: 1, transform: 'rotate(0deg) scale(1)' }}\n\n- Animations for 940f9f54-f638-42be-ba72-41d317ab9644:\n  * Animation 1: scaleDown\n    - Start frame: 0\n    - Duration: 10 frames\n    - End frame: 10\n    - Easing: easeInCubic → Implement as: Easing.easeInCubic\n    - Properties to animate:\n      • scale: from 1 to 0.5\n        Implementation: `const scaleValue = interpolate(\n          frame, \n          [0, 10], \n          [1, 0.5], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInCubic }\n        );`\n  * Animation 2: fadeOut\n    - Start frame: 0\n    - Duration: 10 frames\n    - End frame: 10\n    - Easing: easeInCubic → Implement as: Easing.easeInCubic\n    - Properties to animate:\n      • opacity: from 1 to 0\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 10], \n          [1, 0], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInCubic }\n        );`\n\n#### ELEMENT 2: 4757b551-6b8b-4433-b796-24bfb21bbe70 (customComponent)\n- Initial Layout (CSS equivalent):\n  * x: 960px\n  * y: 540px\n  * width: 1920px\n  * height: 1080px\n  * opacity: 0\n  * rotation: 0deg\n  * scale: 1\n- React style equivalent: style={{ position: 'absolute', left: 960px, top: 540px, width: 1920px, height: 1080px, opacity: 0, transform: 'rotate(0deg) scale(1)' }}\n\n- Animations for 4757b551-6b8b-4433-b796-24bfb21bbe70:\n  * Animation 1: fadeIn\n    - Start frame: 0\n    - Duration: 5 frames\n    - End frame: 5\n    - Easing: easeOutCubic → Implement as: Easing.easeOutCubic\n    - Properties to animate:\n      • opacity: from 0 to 1\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 5], \n          [0, 1], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }\n        );`\n  * Animation 2: particleBurst\n    - Start frame: 0\n    - Duration: 40 frames\n    - End frame: 40\n    - Easing: easeOutQuad → Implement as: Easing.easeOutQuad\n  * Animation 3: fadeOut\n    - Start frame: 0\n    - Duration: 10 frames\n    - End frame: 10\n    - Easing: easeInQuad → Implement as: Easing.easeInQuad\n    - Properties to animate:\n      • opacity: from 1 to 0\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 10], \n          [1, 0], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInQuad }\n        );`\n\n#### ELEMENT 3: 737e3eee-da9f-475d-a12e-b69a9f28a8f0 (shape)\n- Initial Layout (CSS equivalent):\n  * x: 960px\n  * y: 540px\n  * width: 0px\n  * height: 0px\n  * opacity: 0\n  * rotation: 0deg\n  * scale: 1\n  * backgroundColor: transparent\n- React style equivalent: style={{ position: 'absolute', left: 960px, top: 540px, width: 0px, height: 0px, opacity: 0, transform: 'rotate(0deg) scale(1)', backgroundColor: 'transparent' }}\n\n- Animations for 737e3eee-da9f-475d-a12e-b69a9f28a8f0:\n  * Animation 1: fadeIn\n    - Start frame: 0\n    - Duration: 5 frames\n    - End frame: 5\n    - Easing: easeOutQuad → Implement as: Easing.easeOutQuad\n    - Properties to animate:\n      • opacity: from 0 to 1\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 5], \n          [0, 1], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutQuad }\n        );`\n  * Animation 2: scaleUp\n    - Start frame: 0\n    - Duration: 40 frames\n    - End frame: 40\n    - Easing: easeOutQuad → Implement as: Easing.easeOutQuad\n    - Properties to animate:\n      • width: from 0 to 1200\n        Implementation: `const widthValue = interpolate(\n          frame, \n          [0, 40], \n          [0, 1200], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutQuad }\n        );`\n      • height: from 0 to 1200\n        Implementation: `const heightValue = interpolate(\n          frame, \n          [0, 40], \n          [0, 1200], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutQuad }\n        );`\n  * Animation 3: fadeOut\n    - Start frame: 0\n    - Duration: 15 frames\n    - End frame: 15\n    - Easing: easeInQuad → Implement as: Easing.easeInQuad\n    - Properties to animate:\n      • opacity: from 1 to 0\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 15], \n          [1, 0], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInQuad }\n        );`\n\n#### ELEMENT 4: fb5d51c1-df2f-4c06-9542-d6099c943dc0 (text)\n- Content: BOOM!\n- Initial Layout (CSS equivalent):\n  * x: 960px\n  * y: 520px\n  * width: 600px\n  * height: 200px\n  * opacity: 0\n  * rotation: 0deg\n  * scale: 0.5\n- React style equivalent: style={{ position: 'absolute', left: 960px, top: 520px, width: 600px, height: 200px, opacity: 0, transform: 'rotate(0deg) scale(0.5)' }}\n\n- Animations for fb5d51c1-df2f-4c06-9542-d6099c943dc0:\n  * Animation 1: fadeIn\n    - Start frame: 0\n    - Duration: 10 frames\n    - End frame: 10\n    - Easing: easeOutBack → Implement as: Easing.easeOutBack\n    - Properties to animate:\n      • opacity: from 0 to 1\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 10], \n          [0, 1], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutBack }\n        );`\n  * Animation 2: scaleUp\n    - Start frame: 0\n    - Duration: 15 frames\n    - End frame: 15\n    - Easing: easeOutBack → Implement as: Easing.easeOutBack\n    - Properties to animate:\n      • scale: from 0.5 to 1.5\n        Implementation: `const scaleValue = interpolate(\n          frame, \n          [0, 15], \n          [0.5, 1.5], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutBack }\n        );`\n  * Animation 3: fadeOut\n    - Start frame: 0\n    - Duration: 10 frames\n    - End frame: 10\n    - Easing: easeInQuad → Implement as: Easing.easeInQuad\n    - Properties to animate:\n      • opacity: from 1 to 0\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 10], \n          [1, 0], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInQuad }\n        );`\n\n#### ELEMENT 5: 25922fbc-fdcf-46e0-aedb-18eff1e23191 (shape)\n- Initial Layout (CSS equivalent):\n  * x: 0px\n  * y: 0px\n  * width: 1920px\n  * height: 1080px\n  * opacity: 0\n  * rotation: 0deg\n  * scale: 1\n  * backgroundColor: #000000\n- React style equivalent: style={{ position: 'absolute', left: 0px, top: 0px, width: 1920px, height: 1080px, opacity: 0, transform: 'rotate(0deg) scale(1)', backgroundColor: '#000000' }}\n\n- Animations for 25922fbc-fdcf-46e0-aedb-18eff1e23191:\n  * Animation 1: fadeIn\n    - Start frame: 0\n    - Duration: 30 frames\n    - End frame: 30\n    - Easing: easeInOutCubic → Implement as: Easing.easeInOutCubic\n    - Properties to animate:\n      • opacity: from 0 to 1\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 30], \n          [0, 1], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInOutCubic }\n        );`\n\n### SEQUENCE ORCHESTRATION & TIMING GUIDELINES:\nWhen implementing multiple animations, carefully orchestrate them to match the design intent:\n1. Use <Sequence> components for elements or animations that should start at specific frames.\n   Example: <Sequence from={30} durationInFrames={60}><YourAnimatedElement /></Sequence>\n2. For animation dependencies between elements (animations that must follow others):\n   - Create a timing map that respects trigger values like 'afterPrevious' by calculating startFrames.\n   - Example: const titleExitFrame = titleStartFrame + titleDuration;\n             const subTitleStartFrame = titleExitFrame; // Starting after title exits\n\n### CODE QUALITY & PERFORMANCE GUIDELINES:\n1. MODULARITY: For complex elements, consider creating sub-components.\n2. PERFORMANCE: Minimize DOM nodes - prefer CSS transforms over creating new elements.\n3. MEMOIZATION: Use React.useMemo() for computationally expensive calculations.\n4. TYPING: Provide proper TypeScript types throughout, including for style objects.\n5. COMMENTS: Add brief comments for complex animation logic or calculations.\n6. ORGANIZATION: Group related animations and separate distinct animation phases.\n7. ERROR HANDLING: Include defensive checks for potentially undefined values.\n\n### CRITICAL REMINDER:\n- PRECISELY follow the AnimationDesignBrief's specifications.\n- RESPECT the timing, durations, and easing specified in the brief.\n- IMPLEMENT ALL elements and animations exactly as detailed above.\n- START with the boilerplate structure provided earlier.\n- REMEMBER the first line MUST be: // src/remotion/components/scenes/TheFrogExplodesScene.tsx","sceneId":"0dc70a22-6c19-46ad-83a3-8b4692dc3cbe","userData":{"userId":"30c92f68-3935-4e86-8260-7a5fbd1a9dc3"},"projectId":"ac65d592-419d-4f40-ae0d-0733a6497a49","componentName":"TheFrogExplodesScene","durationInFrames":180,"animationDesignBriefId":"902742ff-e35d-43a8-ada2-23a0cdb7c055"},"statusMessageId":"8284cb21-a934-4cce-b105-d4f525cc8aa9"},{"id":"895e3ff2-6aa8-4a95-a1f4-b7fdf56abb31","projectId":"ec550e08-b173-4feb-9f0a-98a8c84bf065","effect":"AnimatedFrogHoppingScene","tsxCode":"\"use client\";\n\n// src/remotion/components/scenes/AnimatedFrogHoppingScene.tsx\nimport React from 'react';\nimport {\n  AbsoluteFill,\n  useCurrentFrame,\n  useVideoConfig,\n  interpolate,\n  Easing,\n  Img,\n} from 'remotion';\n// import { AnimationDesignBrief } from '~/lib/schemas/animationDesignBrief.schema';\n\ntype AnimationDesignBrief = any; // Replace with actual import\n\nexport const AnimatedFrogHoppingScene: React.FC<{ brief: AnimationDesignBrief }> = ({ brief }) => {\n  const frame = useCurrentFrame();\n  const { fps, width, height, durationInFrames } = useVideoConfig();\n  const { colorPalette } = brief;\n\n  // Background\n  const backgroundColor = colorPalette?.background || '#A1E0E0';\n\n  // --- Lily Pad Animations ---\n  const padFadeIn = interpolate(\n    frame,\n    [0, 30],\n    [0, 1],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp',\n      easing: Easing.easeOutBack,\n    }\n  );\n  const padFadeOut = interpolate(\n    frame,\n    [30, 50],\n    [1, 0],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp',\n      easing: Easing.easeInCubic,\n    }\n  );\n  const padOpacity = frame < 30 ? padFadeIn : padFadeOut;\n  const padScale = interpolate(\n    frame,\n    [0, 30],\n    [0.5, 1],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp',\n      easing: Easing.easeOutBack,\n    }\n  );\n\n  // --- Frog Image Animations ---\n  const frogFadeIn = interpolate(\n    frame,\n    [0, 20],\n    [0, 1],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp',\n      easing: Easing.easeOutCubic,\n    }\n  );\n  const frogFadeOut = interpolate(\n    frame,\n    [20, 40],\n    [1, 0],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp',\n      easing: Easing.easeInCubic,\n    }\n  );\n  const frogOpacity = frame < 20 ? frogFadeIn : frogFadeOut;\n  const frogY = interpolate(\n    frame,\n    [0, 20],\n    [500, 450],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp',\n      easing: Easing.easeInOutQuad,\n    }\n  );\n\n  // --- Title Text Animations ---\n  const titleInY = interpolate(\n    frame,\n    [0, 20],\n    [-100, 100],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp',\n      easing: Easing.easeOutQuint,\n    }\n  );\n  const titleOutY = interpolate(\n    frame,\n    [20, 40],\n    [100, -100],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp',\n      easing: Easing.easeInQuint,\n    }\n  );\n  const titleY = frame < 20 ? titleInY : titleOutY;\n  const titleInOpacity = interpolate(\n    frame,\n    [0, 20],\n    [0, 1],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp',\n      easing: Easing.easeOutQuint,\n    }\n  );\n  const titleOutOpacity = interpolate(\n    frame,\n    [20, 40],\n    [1, 0],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp',\n      easing: Easing.easeInQuint,\n    }\n  );\n  const titleOpacity = frame < 20 ? titleInOpacity : titleOutOpacity;\n\n  return (\n    <AbsoluteFill style={{ backgroundColor }}>\n      {/* Lily Pad */}\n      <div\n        style={{\n          position: 'absolute',\n          left: 760,\n          top: 540,\n          width: 400,\n          height: 200,\n          backgroundColor: '#74C476',\n          opacity: padOpacity,\n          transform: `scale(${padScale})`,\n          zIndex: 1,\n        }}\n      />\n\n      {/* Frog Image */}\n      <Img\n        src=\"assets/frog.png\"\n        style={{\n          position: 'absolute',\n          left: 935,\n          top: frogY,\n          width: 150,\n          height: 150,\n          opacity: frogOpacity,\n          transform: 'scale(1)',\n          zIndex: 2,\n        }}\n      />\n\n      {/* Title Text */}\n      <h1\n        style={{\n          position: 'absolute',\n          left: 960,\n          top: titleY,\n          width: 800,\n          height: 60,\n          margin: 0,\n          opacity: titleOpacity,\n          transform: 'scale(1)',\n          fontFamily: 'Arial, sans-serif',\n          fontSize: 48,\n          fontWeight: 'bold',\n          color: '#FFFFFF',\n          textAlign: 'center',\n          zIndex: 3,\n        }}\n      >\n        Frog's Leap\n      </h1>\n    </AbsoluteFill>\n  );\n};","status":"building","outputUrl":null,"errorMessage":"TSX code is missing for this job","retryCount":1,"createdAt":"2025-05-10 02:33:11.71378+00","updatedAt":"2025-05-10 02:33:50.953+00","metadata":{"fps":30,"width":1920,"height":1080,"prompt":"### ROLE: You are an Expert Remotion Developer and Senior React Engineer.\n### TASK: Create a production-quality Remotion React functional component in TypeScript.\n### COMPONENT NAME: 'AnimatedFrogHoppingScene'\n### OBJECTIVE: Generate a component that precisely implements the provided AnimationDesignBrief with professional animations and visual effects.\n### VIDEO CONFIG: Target video is 1920x1080px, 150 frames total duration, at 30 FPS.\n### MANDATORY REQUIREMENTS:\n- The FIRST line MUST be: // src/remotion/components/scenes/AnimatedFrogHoppingScene.tsx\n- The component MUST be a functional component using TypeScript (.tsx).\n- ALWAYS use the Remotion hooks: useCurrentFrame() and useVideoConfig() for timing and dimensions.\n- Component MUST accept props: { brief: AnimationDesignBrief } (assume this type is imported).\n- Utilize appropriate Remotion animation functions based on each element's needs:\n  * interpolate() - For smooth linear or eased transitions between values\n  * spring() - For physics-based, bouncy animations\n  * Easing module - For specifying animation curves (easeInOut, bezier, etc.)\n- Use Remotion timing components when needed:\n  * <Sequence from={startFrame} durationInFrames={duration}> - For sequential animations\n  * <Series> - For orchestrating complex animation sequences\n  * <Loop> - For repeating animations\n- Apply absolute positioning based on initialLayout coordinates.\n\n### BOILERPLATE STRUCTURE (Follow this pattern):\n```typescript\n// src/remotion/components/scenes/AnimatedFrogHoppingScene.tsx\nimport { AbsoluteFill, useCurrentFrame, useVideoConfig, interpolate, spring, Sequence, Easing, Img, Audio } from 'remotion';\nimport React from 'react';\n// import { AnimationDesignBrief } from '~/lib/schemas/animationDesignBrief.schema';\n\nexport const AnimatedFrogHoppingScene: React.FC<{ brief: AnimationDesignBrief }> = ({ brief }) => {\n  const frame = useCurrentFrame();\n  const { fps, width, height, durationInFrames } = useVideoConfig();\n\n  // Extract key brief properties\n  const { elements, colorPalette, typography, overallStyle } = brief;\n\n  // Define background color from brief\n  const backgroundColor = colorPalette?.background || 'transparent';\n\n  return (\n    <AbsoluteFill style={{ backgroundColor }}>\n      {/* Render each element with its animations */}\n    </AbsoluteFill>\n  );\n};\n```\n\n--- Scene Overview ---\nScene Name: AnimatedFrogHoppingScene\nPurpose: Animated frog hopping in the center on a pond lily pad\nOverall Style: Flat cartoon with vibrant colors\n\n--- Color Palette ---\n- Primary Color: #74C476\n- Secondary Color: #4B8FED\n- Accent Color: #FFD54F\n- Background Color: #A1E0E0\n- Text Primary Color: #FFFFFF\n- Text Secondary Color: #333333\n\n--- Typography ---\n- Default Font Family: Arial\n- Heading1 Style:\n  - Font Family: Arial Bold\n  - Font Size: 48\n\n### ELEMENT-BY-ELEMENT IMPLEMENTATION GUIDE:\nEach element from the AnimationDesignBrief must be translated into React/Remotion code following these guidelines:\n\n#### ELEMENT TYPE TRANSLATION:\n- 'text' → Use a <div> or <h1>-<h6> with appropriate styling\n- 'image' → Use Remotion's <Img src={content} /> component\n- 'video' → Use Remotion's <Video src={content} /> component\n- 'shape' → Use appropriate shape elements (div with border-radius for circles/rounded rectangles, SVG for complex shapes)\n- 'container' → Use a positioned <div> that may contain child elements\n\n#### INITIAL LAYOUT TRANSLATION:\nAll initialLayout properties MUST be translated to React inline styles:\n- 'x', 'y' → style={{ position: 'absolute', left: x, top: y }}\n- 'width', 'height' → style={{ width, height }}\n- 'opacity' → style={{ opacity }}\n- 'rotation' → style={{ transform: `rotate(${rotation}deg)` }}\n- 'scale' → style={{ transform: `scale(${scale})` }}\n- 'zIndex' → style={{ zIndex }}\n- Multiple transforms should be combined: transform: `rotate(${rotation}deg) scale(${scale})`\n\n#### ANIMATION IMPLEMENTATION:\nFor each animation, use this approach:\n1. Calculate the active animation frames based on delayInFrames and durationInFrames:\n   const animStartFrame = animation.delayInFrames || 0;\n   const animEndFrame = animStartFrame + (animation.durationInFrames || 30);\n2. Apply the appropriate Remotion animation function:\n   - For 'spring' animations or when remotionFunctionHint is 'spring':\n     const animatedValue = spring({\n       frame: frame - animStartFrame,\n       fps,\n       from: property.from,\n       to: property.to,\n       config: property.springConfig || { damping: 10, mass: 1, stiffness: 100 }\n     });\n   - For most other animations, use interpolate:\n     const animatedValue = interpolate(\n       frame,\n       [animStartFrame, animEndFrame],\n       [property.from, property.to],\n       {\n         extrapolateLeft: 'clamp',\n         extrapolateRight: 'clamp',\n         easing: determineEasing(animation.easing)\n       }\n     );\n3. Apply animated values to style properties:\n   - For transform properties (e.g., 'transform.translateX', 'transform.scale'):\n     Extract the specific transform type and apply with appropriate units.\n   - For standard CSS properties (e.g., 'opacity'):\n     Apply directly to the style object.\n   - Example: style={{ opacity: animatedOpacity, transform: `translateX(${animatedX}px) scale(${animatedScale})` }}\n4. For sequence-based timing (startAfter, startWith):\n   - Wrap elements in <Sequence> components with appropriate 'from' and 'durationInFrames' props\n   - Use 'from' attribute based on animation.delayInFrames\n   - Example: <Sequence from={30} durationInFrames={60}>...</Sequence>\n\n### SPECIFIC ELEMENTS TO IMPLEMENT:\n\n#### ELEMENT 1: 277f904f-6ab3-4458-ae89-0e3a3d38283b (shape)\n- Initial Layout (CSS equivalent):\n  * x: 0px\n  * y: 0px\n  * width: 1920px\n  * height: 1080px\n  * opacity: 1\n  * rotation: 0deg\n  * scale: 1\n  * backgroundColor: #A1E0E0\n- React style equivalent: style={{ position: 'absolute', left: 0px, top: 0px, width: 1920px, height: 1080px, opacity: 1, transform: 'rotate(0deg) scale(1)', backgroundColor: '#A1E0E0' }}\n\n#### ELEMENT 2: 640f9315-925c-4637-82bb-7c814bcd2eb1 (shape)\n- Initial Layout (CSS equivalent):\n  * x: 760px\n  * y: 540px\n  * width: 400px\n  * height: 200px\n  * opacity: 0\n  * rotation: 0deg\n  * scale: 0.5\n  * backgroundColor: #74C476\n- React style equivalent: style={{ position: 'absolute', left: 760px, top: 540px, width: 400px, height: 200px, opacity: 0, transform: 'rotate(0deg) scale(0.5)', backgroundColor: '#74C476' }}\n\n- Animations for 640f9315-925c-4637-82bb-7c814bcd2eb1:\n  * Animation 1: customProperty\n    - Start frame: 0\n    - Duration: 30 frames\n    - End frame: 30\n    - Easing: easeOutBack → Implement as: Easing.easeOutBack\n    - Properties to animate:\n      • opacity: from 0 to 1\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 30], \n          [0, 1], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutBack }\n        );`\n      • scale: from 0.5 to 1\n        Implementation: `const scaleValue = interpolate(\n          frame, \n          [0, 30], \n          [0.5, 1], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutBack }\n        );`\n  * Animation 2: fadeOut\n    - Start frame: 0\n    - Duration: 20 frames\n    - End frame: 20\n    - Easing: easeInCubic → Implement as: Easing.easeInCubic\n    - Properties to animate:\n      • opacity: from 1 to 0\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 20], \n          [1, 0], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInCubic }\n        );`\n\n#### ELEMENT 3: 959434e5-b285-40ed-9381-cb2d91e0afff (image)\n- Content: assets/frog.png\n- Initial Layout (CSS equivalent):\n  * x: 935px\n  * y: 500px\n  * width: 150px\n  * height: 150px\n  * opacity: 0\n  * rotation: 0deg\n  * scale: 1\n- React style equivalent: style={{ position: 'absolute', left: 935px, top: 500px, width: 150px, height: 150px, opacity: 0, transform: 'rotate(0deg) scale(1)' }}\n\n- Animations for 959434e5-b285-40ed-9381-cb2d91e0afff:\n  * Animation 1: fadeIn\n    - Start frame: 0\n    - Duration: 20 frames\n    - End frame: 20\n    - Easing: easeOutCubic → Implement as: Easing.easeOutCubic\n    - Properties to animate:\n      • opacity: from 0 to 1\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 20], \n          [0, 1], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }\n        );`\n  * Animation 2: customProperty\n    - Start frame: 0\n    - Duration: 20 frames\n    - End frame: 20\n    - Easing: easeInOutQuad → Implement as: Easing.easeInOutQuad\n    - Properties to animate:\n      • y: from 500 to 450\n        Implementation: `const yValue = interpolate(\n          frame, \n          [0, 20], \n          [500, 450], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInOutQuad }\n        );`\n  * Animation 3: fadeOut\n    - Start frame: 0\n    - Duration: 20 frames\n    - End frame: 20\n    - Easing: easeInCubic → Implement as: Easing.easeInCubic\n    - Properties to animate:\n      • opacity: from 1 to 0\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 20], \n          [1, 0], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInCubic }\n        );`\n\n#### ELEMENT 4: 9494be61-7438-4d8b-8ace-bed1ade7bf10 (text)\n- Content: Frog's Leap\n- Initial Layout (CSS equivalent):\n  * x: 960px\n  * y: -100px\n  * width: 800px\n  * height: 60px\n  * opacity: 0\n  * rotation: 0deg\n  * scale: 1\n- React style equivalent: style={{ position: 'absolute', left: 960px, top: -100px, width: 800px, height: 60px, opacity: 0, transform: 'rotate(0deg) scale(1)' }}\n\n- Animations for 9494be61-7438-4d8b-8ace-bed1ade7bf10:\n  * Animation 1: slideInDown\n    - Start frame: 0\n    - Duration: 20 frames\n    - End frame: 20\n    - Easing: easeOutQuint → Implement as: Easing.easeOutQuint\n    - Properties to animate:\n      • y: from -100 to 100\n        Implementation: `const yValue = interpolate(\n          frame, \n          [0, 20], \n          [-100, 100], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutQuint }\n        );`\n      • opacity: from 0 to 1\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 20], \n          [0, 1], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutQuint }\n        );`\n  * Animation 2: slideOutUp\n    - Start frame: 0\n    - Duration: 20 frames\n    - End frame: 20\n    - Easing: easeInQuint → Implement as: Easing.easeInQuint\n    - Properties to animate:\n      • y: from 100 to -100\n        Implementation: `const yValue = interpolate(\n          frame, \n          [0, 20], \n          [100, -100], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInQuint }\n        );`\n      • opacity: from 1 to 0\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 20], \n          [1, 0], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInQuint }\n        );`\n\n### SEQUENCE ORCHESTRATION & TIMING GUIDELINES:\nWhen implementing multiple animations, carefully orchestrate them to match the design intent:\n1. Use <Sequence> components for elements or animations that should start at specific frames.\n   Example: <Sequence from={30} durationInFrames={60}><YourAnimatedElement /></Sequence>\n2. For animation dependencies between elements (animations that must follow others):\n   - Create a timing map that respects trigger values like 'afterPrevious' by calculating startFrames.\n   - Example: const titleExitFrame = titleStartFrame + titleDuration;\n             const subTitleStartFrame = titleExitFrame; // Starting after title exits\n\n### CODE QUALITY & PERFORMANCE GUIDELINES:\n1. MODULARITY: For complex elements, consider creating sub-components.\n2. PERFORMANCE: Minimize DOM nodes - prefer CSS transforms over creating new elements.\n3. MEMOIZATION: Use React.useMemo() for computationally expensive calculations.\n4. TYPING: Provide proper TypeScript types throughout, including for style objects.\n5. COMMENTS: Add brief comments for complex animation logic or calculations.\n6. ORGANIZATION: Group related animations and separate distinct animation phases.\n7. ERROR HANDLING: Include defensive checks for potentially undefined values.\n\n### CRITICAL REMINDER:\n- PRECISELY follow the AnimationDesignBrief's specifications.\n- RESPECT the timing, durations, and easing specified in the brief.\n- IMPLEMENT ALL elements and animations exactly as detailed above.\n- START with the boilerplate structure provided earlier.\n- REMEMBER the first line MUST be: // src/remotion/components/scenes/AnimatedFrogHoppingScene.tsx","sceneId":"69dc5349-3001-4f9a-925b-e9a384195b5e","userData":{"userId":"30c92f68-3935-4e86-8260-7a5fbd1a9dc3"},"projectId":"ec550e08-b173-4feb-9f0a-98a8c84bf065","componentName":"AnimatedFrogHoppingScene","durationInFrames":150,"animationDesignBriefId":"a5312e0b-e01b-47d1-8a2a-5c3cd298de6b"},"statusMessageId":"aa4cb8ff-057c-47ff-99d1-70f946eecdc8"}]