[{"id":"46f4517e-a2b1-491d-b1d0-af488baf329e","projectId":"94c11fc4-884a-4893-842d-daecebe189f7","effect":"TemperatureSlideupAnimateScene","tsxCode":"\"use client\";\n\n// src/remotion/components/scenes/TemperatureSlideupAnimateScene.tsx\nimport React from 'react';\nimport {\n  AbsoluteFill,\n  useCurrentFrame,\n  useVideoConfig,\n  interpolate,\n  Sequence,\n  Easing,\n} from 'remotion';\n// import { AnimationDesignBrief } from '~/lib/schemas/animationDesignBrief.schema';\n\nexport const TemperatureSlideupAnimateScene: React.FC<{\n  brief: AnimationDesignBrief;\n}> = ({ brief }) => {\n  const frame = useCurrentFrame();\n  const { fps, width, height, durationInFrames } = useVideoConfig();\n\n  // Extract brief properties with fallbacks\n  const {\n    colorPalette = {\n      primary: '#ff6f61',\n      secondary: '#6baed6',\n      accent: '#ffd54f',\n      background: '#f0f4f8',\n      textPrimary: '#333333',\n      textSecondary: '#666666',\n    },\n    typography = {\n      defaultFontFamily: 'Roboto',\n      heading1: { fontFamily: 'Roboto Bold', fontSize: 64 },\n    },\n  } = brief;\n\n  const {\n    primary,\n    secondary,\n    accent,\n    background: bgColor,\n    textPrimary,\n    textSecondary,\n  } = colorPalette;\n\n  const headingFont = typography.heading1.fontFamily;\n  const headingSize = typography.heading1.fontSize;\n  const defaultFont = typography.defaultFontFamily;\n  const defaultSize = 60;\n\n  return (\n    <AbsoluteFill style={{ backgroundColor: bgColor || 'transparent' }}>\n      {/* ELEMENT 1: Title: Temperature Range */}\n      {\n        (() => {\n          // Fade In 0→1 over [0,30], Fade Out 1→0 over [0,15]\n          const fadeIn = interpolate(\n            frame,\n            [0, 30],\n            [0, 1],\n            {\n              extrapolateLeft: 'clamp',\n              extrapolateRight: 'clamp',\n              easing: Easing.easeOutCubic,\n            }\n          );\n          const fadeOut = interpolate(\n            frame,\n            [0, 15],\n            [1, 0],\n            {\n              extrapolateLeft: 'clamp',\n              extrapolateRight: 'clamp',\n              easing: Easing.easeInCubic,\n            }\n          );\n          const opacity = Math.min(fadeIn, fadeOut);\n\n          return (\n            <div\n              style={{\n                position: 'absolute',\n                left: 960,\n                top: 100,\n                width: 800,\n                height: 80,\n                display: 'flex',\n                alignItems: 'center',\n                justifyContent: 'center',\n                fontFamily: headingFont,\n                fontSize: headingSize,\n                color: textPrimary,\n                opacity,\n                transform: 'rotate(0deg) scale(1)',\n                pointerEvents: 'none',\n              }}\n            >\n              Temperature Range\n            </div>\n          );\n        })()\n      }\n\n      {/* ELEMENTS 2–8: Temperatures sliding up */}\n      {[\n        { content: '0°C', endY: 900 },\n        { content: '5°C', endY: 800 },\n        { content: '10°C', endY: 700 },\n        { content: '15°C', endY: 600 },\n        { content: '20°C', endY: 500 },\n        { content: '25°C', endY: 400 },\n        { content: '30°C', endY: 300 },\n      ].map((item, idx) => {\n        // Common delays all start at frame 0\n        const fadeIn = interpolate(\n          frame,\n          [0, 15],\n          [0, 1],\n          {\n            extrapolateLeft: 'clamp',\n            extrapolateRight: 'clamp',\n            easing: Easing.easeOutCubic,\n          }\n        );\n        const slideY = interpolate(\n          frame,\n          [0, 30],\n          [1200, item.endY],\n          {\n            extrapolateLeft: 'clamp',\n            extrapolateRight: 'clamp',\n            easing: Easing.easeOutQuint,\n          }\n        );\n        const fadeOut = interpolate(\n          frame,\n          [0, 15],\n          [1, 0],\n          {\n            extrapolateLeft: 'clamp',\n            extrapolateRight: 'clamp',\n            easing: Easing.easeInCubic,\n          }\n        );\n        const opacity = Math.min(fadeIn, fadeOut);\n\n        return (\n          <div\n            key={item.content}\n            style={{\n              position: 'absolute',\n              left: 960,\n              top: slideY,\n              width: 200,\n              height: 60,\n              display: 'flex',\n              alignItems: 'center',\n              justifyContent: 'center',\n              fontFamily: defaultFont,\n              fontSize: defaultSize,\n              color: textSecondary,\n              opacity,\n              transform: 'rotate(0deg) scale(1)',\n              pointerEvents: 'none',\n            }}\n          >\n            {item.content}\n          </div>\n        );\n      })}\n    </AbsoluteFill>\n  );\n};","status":"complete","outputUrl":"https://pub-80969e2c6b73496db98ed52f98a48681.r2.dev/custom-components/46f4517e-a2b1-491d-b1d0-af488baf329e.js","errorMessage":null,"retryCount":0,"createdAt":"2025-05-10 16:25:38.626459+00","updatedAt":"2025-05-10 16:26:16.23+00","metadata":{"fps":30,"width":1920,"height":1080,"prompt":"### ROLE: You are an Expert Remotion Developer and Senior React Engineer.\n### TASK: Create a production-quality Remotion React functional component in TypeScript.\n### COMPONENT NAME: 'TemperatureSlideupAnimateScene'\n### OBJECTIVE: Generate a component that precisely implements the provided AnimationDesignBrief with professional animations and visual effects.\n### VIDEO CONFIG: Target video is 1920x1080px, 90 frames total duration, at 30 FPS.\n### MANDATORY REQUIREMENTS:\n- The FIRST line MUST be: // src/remotion/components/scenes/TemperatureSlideupAnimateScene.tsx\n- The component MUST be a functional component using TypeScript (.tsx).\n- ALWAYS use the Remotion hooks: useCurrentFrame() and useVideoConfig() for timing and dimensions.\n- Component MUST accept props: { brief: AnimationDesignBrief } (assume this type is imported).\n- Utilize appropriate Remotion animation functions based on each element's needs:\n  * interpolate() - For smooth linear or eased transitions between values\n  * spring() - For physics-based, bouncy animations\n  * Easing module - For specifying animation curves (easeInOut, bezier, etc.)\n- Use Remotion timing components when needed:\n  * <Sequence from={startFrame} durationInFrames={duration}> - For sequential animations\n  * <Series> - For orchestrating complex animation sequences\n  * <Loop> - For repeating animations\n- Apply absolute positioning based on initialLayout coordinates.\n\n### BOILERPLATE STRUCTURE (Follow this pattern):\n```typescript\n// src/remotion/components/scenes/TemperatureSlideupAnimateScene.tsx\nimport { AbsoluteFill, useCurrentFrame, useVideoConfig, interpolate, spring, Sequence, Easing, Img, Audio } from 'remotion';\nimport React from 'react';\n// import { AnimationDesignBrief } from '~/lib/schemas/animationDesignBrief.schema';\n\nexport const TemperatureSlideupAnimateScene: React.FC<{ brief: AnimationDesignBrief }> = ({ brief }) => {\n  const frame = useCurrentFrame();\n  const { fps, width, height, durationInFrames } = useVideoConfig();\n\n  // Extract key brief properties\n  const { elements, colorPalette, typography, overallStyle } = brief;\n\n  // Define background color from brief\n  const backgroundColor = colorPalette?.background || 'transparent';\n\n  return (\n    <AbsoluteFill style={{ backgroundColor }}>\n      {/* Render each element with its animations */}\n    </AbsoluteFill>\n  );\n};\n```\n\n--- Scene Overview ---\nScene Name: TemperatureSlideupAnimateScene\nPurpose: Temperature slide-up: Animate temperature numbers sliding up from the bottom, showing a range of temperatures.\nOverall Style: Clean modern infographic style\n\n--- Color Palette ---\n- Primary Color: #ff6f61\n- Secondary Color: #6baed6\n- Accent Color: #ffd54f\n- Background Color: #f0f4f8\n- Text Primary Color: #333333\n- Text Secondary Color: #666666\n\n--- Typography ---\n- Default Font Family: Roboto\n- Heading1 Style:\n  - Font Family: Roboto Bold\n  - Font Size: 64\n\n### ELEMENT-BY-ELEMENT IMPLEMENTATION GUIDE:\nEach element from the AnimationDesignBrief must be translated into React/Remotion code following these guidelines:\n\n### IMPORTANT RESTRICTION - NO EXTERNAL ASSETS:\n- DO NOT reference or try to load any external images, videos, or other media files\n- DO NOT use the <Img> component from Remotion to load any image files\n- If the AnimationDesignBrief mentions image elements, implement them as:\n  * Colored rectangles or circles using <div> with backgroundColor and borderRadius\n  * SVG graphics created programmatically (rectangles, circles, paths)\n  * CSS gradients for more visual interest\n- Focus ONLY on animations, shapes, text elements, and colors\n- This temporary restriction ensures component reliability while asset management is being developed\n\n#### ELEMENT TYPE TRANSLATION:\n- 'text' → Use a <div> or <h1>-<h6> with appropriate styling\n- 'image' → DO NOT USE <Img>. Instead, use a <div> with solid background color or gradient\n- 'video' → DO NOT USE <Video>. Instead, use animated <div> elements\n- 'shape' → Use appropriate shape elements (div with border-radius for circles/rounded rectangles, SVG for complex shapes)\n- 'container' → Use a positioned <div> that may contain child elements\n\n#### INITIAL LAYOUT TRANSLATION:\nAll initialLayout properties MUST be translated to React inline styles:\n- 'x', 'y' → style={{ position: 'absolute', left: x, top: y }}\n- 'width', 'height' → style={{ width, height }}\n- 'opacity' → style={{ opacity }}\n- 'rotation' → style={{ transform: `rotate(${rotation}deg)` }}\n- 'scale' → style={{ transform: `scale(${scale})` }}\n- 'zIndex' → style={{ zIndex }}\n- Multiple transforms should be combined: transform: `rotate(${rotation}deg) scale(${scale})`\n\n#### ANIMATION IMPLEMENTATION:\nFor each animation, use this approach:\n1. Calculate the active animation frames based on delayInFrames and durationInFrames:\n   const animStartFrame = animation.delayInFrames || 0;\n   const animEndFrame = animStartFrame + (animation.durationInFrames || 30);\n2. Apply the appropriate Remotion animation function:\n   - For 'spring' animations or when remotionFunctionHint is 'spring':\n     const animatedValue = spring({\n       frame: frame - animStartFrame,\n       fps,\n       from: property.from,\n       to: property.to,\n       config: property.springConfig || { damping: 10, mass: 1, stiffness: 100 }\n     });\n   - For most other animations, use interpolate:\n     const animatedValue = interpolate(\n       frame,\n       [animStartFrame, animEndFrame],\n       [property.from, property.to],\n       {\n         extrapolateLeft: 'clamp',\n         extrapolateRight: 'clamp',\n         easing: determineEasing(animation.easing)\n       }\n     );\n3. Apply animated values to style properties:\n   - For transform properties (e.g., 'transform.translateX', 'transform.scale'):\n     Extract the specific transform type and apply with appropriate units.\n   - For standard CSS properties (e.g., 'opacity'):\n     Apply directly to the style object.\n   - Example: style={{ opacity: animatedOpacity, transform: `translateX(${animatedX}px) scale(${animatedScale})` }}\n4. For sequence-based timing (startAfter, startWith):\n   - Wrap elements in <Sequence> components with appropriate 'from' and 'durationInFrames' props\n   - Use 'from' attribute based on animation.delayInFrames\n   - Example: <Sequence from={30} durationInFrames={60}>...</Sequence>\n\n### SPECIFIC ELEMENTS TO IMPLEMENT:\n\n#### ELEMENT 1: 6ed7c0e6-a950-43b6-a729-b561b9cece55 (text)\n- Content: Temperature Range\n- Initial Layout (CSS equivalent):\n  * x: 960px\n  * y: 100px\n  * width: 800px\n  * height: 80px\n  * opacity: 0\n  * rotation: 0deg\n  * scale: 1\n- React style equivalent: style={{ position: 'absolute', left: 960px, top: 100px, width: 800px, height: 80px, opacity: 0, transform: 'rotate(0deg) scale(1)' }}\n\n- Animations for 6ed7c0e6-a950-43b6-a729-b561b9cece55:\n  * Animation 1: fadeIn\n    - Start frame: 0\n    - Duration: 30 frames\n    - End frame: 30\n    - Easing: easeOutCubic → Implement as: Easing.easeOutCubic\n    - Properties to animate:\n      • opacity: from 0 to 1\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 30], \n          [0, 1], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }\n        );`\n  * Animation 2: fadeOut\n    - Start frame: 0\n    - Duration: 15 frames\n    - End frame: 15\n    - Easing: easeInCubic → Implement as: Easing.easeInCubic\n    - Properties to animate:\n      • opacity: from 1 to 0\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 15], \n          [1, 0], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInCubic }\n        );`\n\n#### ELEMENT 2: 7746486d-fec3-48bc-bb1d-9c322d353468 (text)\n- Content: 0°C\n- Initial Layout (CSS equivalent):\n  * x: 960px\n  * y: 1200px\n  * width: 200px\n  * height: 60px\n  * opacity: 0\n  * rotation: 0deg\n  * scale: 1\n- React style equivalent: style={{ position: 'absolute', left: 960px, top: 1200px, width: 200px, height: 60px, opacity: 0, transform: 'rotate(0deg) scale(1)' }}\n\n- Animations for 7746486d-fec3-48bc-bb1d-9c322d353468:\n  * Animation 1: fadeIn\n    - Start frame: 0\n    - Duration: 15 frames\n    - End frame: 15\n    - Easing: easeOutCubic → Implement as: Easing.easeOutCubic\n    - Properties to animate:\n      • opacity: from 0 to 1\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 15], \n          [0, 1], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }\n        );`\n  * Animation 2: slideUp\n    - Start frame: 0\n    - Duration: 30 frames\n    - End frame: 30\n    - Easing: easeOutQuint → Implement as: Easing.easeOutQuint\n    - Properties to animate:\n      • y: from 1200 to 900\n        Implementation: `const yValue = interpolate(\n          frame, \n          [0, 30], \n          [1200, 900], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutQuint }\n        );`\n  * Animation 3: fadeOut\n    - Start frame: 0\n    - Duration: 15 frames\n    - End frame: 15\n    - Easing: easeInCubic → Implement as: Easing.easeInCubic\n    - Properties to animate:\n      • opacity: from 1 to 0\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 15], \n          [1, 0], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInCubic }\n        );`\n\n#### ELEMENT 3: b7ae17e1-efb8-438a-a6e0-809e8ff2189f (text)\n- Content: 5°C\n- Initial Layout (CSS equivalent):\n  * x: 960px\n  * y: 1200px\n  * width: 200px\n  * height: 60px\n  * opacity: 0\n  * rotation: 0deg\n  * scale: 1\n- React style equivalent: style={{ position: 'absolute', left: 960px, top: 1200px, width: 200px, height: 60px, opacity: 0, transform: 'rotate(0deg) scale(1)' }}\n\n- Animations for b7ae17e1-efb8-438a-a6e0-809e8ff2189f:\n  * Animation 1: fadeIn\n    - Start frame: 0\n    - Duration: 15 frames\n    - End frame: 15\n    - Easing: easeOutCubic → Implement as: Easing.easeOutCubic\n    - Properties to animate:\n      • opacity: from 0 to 1\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 15], \n          [0, 1], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }\n        );`\n  * Animation 2: slideUp\n    - Start frame: 0\n    - Duration: 30 frames\n    - End frame: 30\n    - Easing: easeOutQuint → Implement as: Easing.easeOutQuint\n    - Properties to animate:\n      • y: from 1200 to 800\n        Implementation: `const yValue = interpolate(\n          frame, \n          [0, 30], \n          [1200, 800], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutQuint }\n        );`\n  * Animation 3: fadeOut\n    - Start frame: 0\n    - Duration: 15 frames\n    - End frame: 15\n    - Easing: easeInCubic → Implement as: Easing.easeInCubic\n    - Properties to animate:\n      • opacity: from 1 to 0\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 15], \n          [1, 0], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInCubic }\n        );`\n\n#### ELEMENT 4: 0708b86f-a0cb-41d8-b9c0-6c813be175f4 (text)\n- Content: 10°C\n- Initial Layout (CSS equivalent):\n  * x: 960px\n  * y: 1200px\n  * width: 200px\n  * height: 60px\n  * opacity: 0\n  * rotation: 0deg\n  * scale: 1\n- React style equivalent: style={{ position: 'absolute', left: 960px, top: 1200px, width: 200px, height: 60px, opacity: 0, transform: 'rotate(0deg) scale(1)' }}\n\n- Animations for 0708b86f-a0cb-41d8-b9c0-6c813be175f4:\n  * Animation 1: fadeIn\n    - Start frame: 0\n    - Duration: 15 frames\n    - End frame: 15\n    - Easing: easeOutCubic → Implement as: Easing.easeOutCubic\n    - Properties to animate:\n      • opacity: from 0 to 1\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 15], \n          [0, 1], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }\n        );`\n  * Animation 2: slideUp\n    - Start frame: 0\n    - Duration: 30 frames\n    - End frame: 30\n    - Easing: easeOutQuint → Implement as: Easing.easeOutQuint\n    - Properties to animate:\n      • y: from 1200 to 700\n        Implementation: `const yValue = interpolate(\n          frame, \n          [0, 30], \n          [1200, 700], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutQuint }\n        );`\n  * Animation 3: fadeOut\n    - Start frame: 0\n    - Duration: 15 frames\n    - End frame: 15\n    - Easing: easeInCubic → Implement as: Easing.easeInCubic\n    - Properties to animate:\n      • opacity: from 1 to 0\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 15], \n          [1, 0], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInCubic }\n        );`\n\n#### ELEMENT 5: eeb22f74-7c38-4324-9f99-e1816f790ccc (text)\n- Content: 15°C\n- Initial Layout (CSS equivalent):\n  * x: 960px\n  * y: 1200px\n  * width: 200px\n  * height: 60px\n  * opacity: 0\n  * rotation: 0deg\n  * scale: 1\n- React style equivalent: style={{ position: 'absolute', left: 960px, top: 1200px, width: 200px, height: 60px, opacity: 0, transform: 'rotate(0deg) scale(1)' }}\n\n- Animations for eeb22f74-7c38-4324-9f99-e1816f790ccc:\n  * Animation 1: fadeIn\n    - Start frame: 0\n    - Duration: 15 frames\n    - End frame: 15\n    - Easing: easeOutCubic → Implement as: Easing.easeOutCubic\n    - Properties to animate:\n      • opacity: from 0 to 1\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 15], \n          [0, 1], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }\n        );`\n  * Animation 2: slideUp\n    - Start frame: 0\n    - Duration: 30 frames\n    - End frame: 30\n    - Easing: easeOutQuint → Implement as: Easing.easeOutQuint\n    - Properties to animate:\n      • y: from 1200 to 600\n        Implementation: `const yValue = interpolate(\n          frame, \n          [0, 30], \n          [1200, 600], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutQuint }\n        );`\n  * Animation 3: fadeOut\n    - Start frame: 0\n    - Duration: 15 frames\n    - End frame: 15\n    - Easing: easeInCubic → Implement as: Easing.easeInCubic\n    - Properties to animate:\n      • opacity: from 1 to 0\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 15], \n          [1, 0], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInCubic }\n        );`\n\n#### ELEMENT 6: be7ab19e-8116-4be7-b3b2-ca8b3c2e0171 (text)\n- Content: 20°C\n- Initial Layout (CSS equivalent):\n  * x: 960px\n  * y: 1200px\n  * width: 200px\n  * height: 60px\n  * opacity: 0\n  * rotation: 0deg\n  * scale: 1\n- React style equivalent: style={{ position: 'absolute', left: 960px, top: 1200px, width: 200px, height: 60px, opacity: 0, transform: 'rotate(0deg) scale(1)' }}\n\n- Animations for be7ab19e-8116-4be7-b3b2-ca8b3c2e0171:\n  * Animation 1: fadeIn\n    - Start frame: 0\n    - Duration: 15 frames\n    - End frame: 15\n    - Easing: easeOutCubic → Implement as: Easing.easeOutCubic\n    - Properties to animate:\n      • opacity: from 0 to 1\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 15], \n          [0, 1], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }\n        );`\n  * Animation 2: slideUp\n    - Start frame: 0\n    - Duration: 30 frames\n    - End frame: 30\n    - Easing: easeOutQuint → Implement as: Easing.easeOutQuint\n    - Properties to animate:\n      • y: from 1200 to 500\n        Implementation: `const yValue = interpolate(\n          frame, \n          [0, 30], \n          [1200, 500], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutQuint }\n        );`\n  * Animation 3: fadeOut\n    - Start frame: 0\n    - Duration: 15 frames\n    - End frame: 15\n    - Easing: easeInCubic → Implement as: Easing.easeInCubic\n    - Properties to animate:\n      • opacity: from 1 to 0\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 15], \n          [1, 0], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInCubic }\n        );`\n\n#### ELEMENT 7: 3a3a47c0-0afb-4dc5-b888-622f1dabf255 (text)\n- Content: 25°C\n- Initial Layout (CSS equivalent):\n  * x: 960px\n  * y: 1200px\n  * width: 200px\n  * height: 60px\n  * opacity: 0\n  * rotation: 0deg\n  * scale: 1\n- React style equivalent: style={{ position: 'absolute', left: 960px, top: 1200px, width: 200px, height: 60px, opacity: 0, transform: 'rotate(0deg) scale(1)' }}\n\n- Animations for 3a3a47c0-0afb-4dc5-b888-622f1dabf255:\n  * Animation 1: fadeIn\n    - Start frame: 0\n    - Duration: 15 frames\n    - End frame: 15\n    - Easing: easeOutCubic → Implement as: Easing.easeOutCubic\n    - Properties to animate:\n      • opacity: from 0 to 1\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 15], \n          [0, 1], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }\n        );`\n  * Animation 2: slideUp\n    - Start frame: 0\n    - Duration: 30 frames\n    - End frame: 30\n    - Easing: easeOutQuint → Implement as: Easing.easeOutQuint\n    - Properties to animate:\n      • y: from 1200 to 400\n        Implementation: `const yValue = interpolate(\n          frame, \n          [0, 30], \n          [1200, 400], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutQuint }\n        );`\n  * Animation 3: fadeOut\n    - Start frame: 0\n    - Duration: 15 frames\n    - End frame: 15\n    - Easing: easeInCubic → Implement as: Easing.easeInCubic\n    - Properties to animate:\n      • opacity: from 1 to 0\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 15], \n          [1, 0], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInCubic }\n        );`\n\n#### ELEMENT 8: 97e9065d-12d5-424b-b28a-07b60b8aa152 (text)\n- Content: 30°C\n- Initial Layout (CSS equivalent):\n  * x: 960px\n  * y: 1200px\n  * width: 200px\n  * height: 60px\n  * opacity: 0\n  * rotation: 0deg\n  * scale: 1\n- React style equivalent: style={{ position: 'absolute', left: 960px, top: 1200px, width: 200px, height: 60px, opacity: 0, transform: 'rotate(0deg) scale(1)' }}\n\n- Animations for 97e9065d-12d5-424b-b28a-07b60b8aa152:\n  * Animation 1: fadeIn\n    - Start frame: 0\n    - Duration: 15 frames\n    - End frame: 15\n    - Easing: easeOutCubic → Implement as: Easing.easeOutCubic\n    - Properties to animate:\n      • opacity: from 0 to 1\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 15], \n          [0, 1], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }\n        );`\n  * Animation 2: slideUp\n    - Start frame: 0\n    - Duration: 30 frames\n    - End frame: 30\n    - Easing: easeOutQuint → Implement as: Easing.easeOutQuint\n    - Properties to animate:\n      • y: from 1200 to 300\n        Implementation: `const yValue = interpolate(\n          frame, \n          [0, 30], \n          [1200, 300], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutQuint }\n        );`\n  * Animation 3: fadeOut\n    - Start frame: 0\n    - Duration: 15 frames\n    - End frame: 15\n    - Easing: easeInCubic → Implement as: Easing.easeInCubic\n    - Properties to animate:\n      • opacity: from 1 to 0\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 15], \n          [1, 0], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInCubic }\n        );`\n\n### SEQUENCE ORCHESTRATION & TIMING GUIDELINES:\nWhen implementing multiple animations, carefully orchestrate them to match the design intent:\n1. Use <Sequence> components for elements or animations that should start at specific frames.\n   Example: <Sequence from={30} durationInFrames={60}><YourAnimatedElement /></Sequence>\n2. For animation dependencies between elements (animations that must follow others):\n   - Create a timing map that respects trigger values like 'afterPrevious' by calculating startFrames.\n   - Example: const titleExitFrame = titleStartFrame + titleDuration;\n             const subTitleStartFrame = titleExitFrame; // Starting after title exits\n\n### CODE QUALITY & PERFORMANCE GUIDELINES:\n1. MODULARITY: For complex elements, consider creating sub-components.\n2. PERFORMANCE: Minimize DOM nodes - prefer CSS transforms over creating new elements.\n3. MEMOIZATION: Use React.useMemo() for computationally expensive calculations.\n4. TYPING: Provide proper TypeScript types throughout, including for style objects.\n5. COMMENTS: Add brief comments for complex animation logic or calculations.\n6. ORGANIZATION: Group related animations and separate distinct animation phases.\n7. ERROR HANDLING: Include defensive checks for potentially undefined values.\n\n### CRITICAL REMINDER:\n- PRECISELY follow the AnimationDesignBrief's specifications.\n- RESPECT the timing, durations, and easing specified in the brief.\n- IMPLEMENT ALL elements and animations exactly as detailed above.\n- START with the boilerplate structure provided earlier.\n- REMEMBER the first line MUST be: // src/remotion/components/scenes/TemperatureSlideupAnimateScene.tsx","sceneId":"b6d6bdea-a6f0-405c-9dc0-62b7da7a116d","userData":{"userId":"92256ac9-495a-4ba2-aecc-fa4ce6756baa"},"projectId":"94c11fc4-884a-4893-842d-daecebe189f7","componentName":"TemperatureSlideupAnimateScene","durationInFrames":90,"animationDesignBriefId":"078259a5-6a69-49cd-832f-7536a3ed360a"},"statusMessageId":"5e78fa33-7270-4e55-8659-6e558c5473e0"},{"id":"0f744e23-0d35-45b8-86cf-bf2714028187","projectId":"94c11fc4-884a-4893-842d-daecebe189f7","effect":"IconMorphShowScene","tsxCode":"\"use client\";\n\n// src/remotion/components/scenes/IconMorphShowScene.tsx\nimport React from 'react';\nimport {\n  AbsoluteFill,\n  useCurrentFrame,\n  useVideoConfig,\n  interpolate,\n  Sequence,\n  Easing,\n} from 'remotion';\n// import { AnimationDesignBrief } from '~/lib/schemas/animationDesignBrief.schema';\n\ninterface IconMorphShowSceneProps {\n  brief: AnimationDesignBrief;\n}\n\nexport const IconMorphShowScene: React.FC<IconMorphShowSceneProps> = ({ brief }) => {\n  const frame = useCurrentFrame();\n  const { fps, width, height, durationInFrames } = useVideoConfig();\n\n  // Extract key brief properties\n  const { colorPalette } = brief;\n  const backgroundColor = colorPalette?.background || '#E1F5FE';\n\n  // Shape element animations\n  // Fade in: 0 -> 30, easeOutCubic\n  const opacityFadeIn = interpolate(\n    frame,\n    [0, 30],\n    [0, 1],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp',\n      easing: Easing.easeOutCubic,\n    }\n  );\n  // Fade out: 30 -> 60, easeInCubic\n  const opacityFadeOut = interpolate(\n    frame,\n    [30, 60],\n    [1, 0],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp',\n      easing: Easing.easeInCubic,\n    }\n  );\n  // Final opacity: fade in then fade out\n  const opacityValue = frame < 30 ? opacityFadeIn : opacityFadeOut;\n\n  // Morph fill color: 0 -> 60, easeInOutQuad\n  const fillColorValue = interpolate(\n    frame,\n    [0, 60],\n    [colorPalette.primary || '#FFD54F', colorPalette.secondary || '#90A4AE'],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp',\n      easing: Easing.easeInOutQuad,\n    }\n  );\n\n  return (\n    <AbsoluteFill style={{ backgroundColor, overflow: 'hidden' }}>\n      {/* Centered shape morphing from sun (yellow) to cloud (gray) */}\n      <Sequence from={0} durationInFrames={60}>\n        <div\n          style={{\n            position: 'absolute',\n            left: width / 2 - 100,\n            top: height / 2 - 100,\n            width: 200,\n            height: 200,\n            borderRadius: 100,\n            backgroundColor: fillColorValue,\n            opacity: opacityValue,\n            transform: `rotate(0deg) scale(1)`,\n            zIndex: 1,\n          }}\n        />\n      </Sequence>\n    </AbsoluteFill>\n  );\n};","status":"complete","outputUrl":"https://pub-80969e2c6b73496db98ed52f98a48681.r2.dev/custom-components/0f744e23-0d35-45b8-86cf-bf2714028187.js","errorMessage":null,"retryCount":0,"createdAt":"2025-05-10 16:25:05.113239+00","updatedAt":"2025-05-10 16:25:35.043+00","metadata":{"fps":30,"width":1920,"height":1080,"prompt":"### ROLE: You are an Expert Remotion Developer and Senior React Engineer.\n### TASK: Create a production-quality Remotion React functional component in TypeScript.\n### COMPONENT NAME: 'IconMorphShowScene'\n### OBJECTIVE: Generate a component that precisely implements the provided AnimationDesignBrief with professional animations and visual effects.\n### VIDEO CONFIG: Target video is 1920x1080px, 120 frames total duration, at 30 FPS.\n### MANDATORY REQUIREMENTS:\n- The FIRST line MUST be: // src/remotion/components/scenes/IconMorphShowScene.tsx\n- The component MUST be a functional component using TypeScript (.tsx).\n- ALWAYS use the Remotion hooks: useCurrentFrame() and useVideoConfig() for timing and dimensions.\n- Component MUST accept props: { brief: AnimationDesignBrief } (assume this type is imported).\n- Utilize appropriate Remotion animation functions based on each element's needs:\n  * interpolate() - For smooth linear or eased transitions between values\n  * spring() - For physics-based, bouncy animations\n  * Easing module - For specifying animation curves (easeInOut, bezier, etc.)\n- Use Remotion timing components when needed:\n  * <Sequence from={startFrame} durationInFrames={duration}> - For sequential animations\n  * <Series> - For orchestrating complex animation sequences\n  * <Loop> - For repeating animations\n- Apply absolute positioning based on initialLayout coordinates.\n\n### BOILERPLATE STRUCTURE (Follow this pattern):\n```typescript\n// src/remotion/components/scenes/IconMorphShowScene.tsx\nimport { AbsoluteFill, useCurrentFrame, useVideoConfig, interpolate, spring, Sequence, Easing, Img, Audio } from 'remotion';\nimport React from 'react';\n// import { AnimationDesignBrief } from '~/lib/schemas/animationDesignBrief.schema';\n\nexport const IconMorphShowScene: React.FC<{ brief: AnimationDesignBrief }> = ({ brief }) => {\n  const frame = useCurrentFrame();\n  const { fps, width, height, durationInFrames } = useVideoConfig();\n\n  // Extract key brief properties\n  const { elements, colorPalette, typography, overallStyle } = brief;\n\n  // Define background color from brief\n  const backgroundColor = colorPalette?.background || 'transparent';\n\n  return (\n    <AbsoluteFill style={{ backgroundColor }}>\n      {/* Render each element with its animations */}\n    </AbsoluteFill>\n  );\n};\n```\n\n--- Scene Overview ---\nScene Name: IconMorphShowScene\nPurpose: Icon morph: Show a sun icon smoothly morphing into a rain cloud icon to highlight dynamic weather changes.\nOverall Style: Minimalistic flat vector animation with smooth, organic morphing transitions.\n\n--- Color Palette ---\n- Primary Color: #FFD54F\n- Secondary Color: #90A4AE\n- Accent Color: #4FC3F7\n- Background Color: #E1F5FE\n- Text Primary Color: #263238\n- Text Secondary Color: #FFFFFF\n\n### ELEMENT-BY-ELEMENT IMPLEMENTATION GUIDE:\nEach element from the AnimationDesignBrief must be translated into React/Remotion code following these guidelines:\n\n### IMPORTANT RESTRICTION - NO EXTERNAL ASSETS:\n- DO NOT reference or try to load any external images, videos, or other media files\n- DO NOT use the <Img> component from Remotion to load any image files\n- If the AnimationDesignBrief mentions image elements, implement them as:\n  * Colored rectangles or circles using <div> with backgroundColor and borderRadius\n  * SVG graphics created programmatically (rectangles, circles, paths)\n  * CSS gradients for more visual interest\n- Focus ONLY on animations, shapes, text elements, and colors\n- This temporary restriction ensures component reliability while asset management is being developed\n\n#### ELEMENT TYPE TRANSLATION:\n- 'text' → Use a <div> or <h1>-<h6> with appropriate styling\n- 'image' → DO NOT USE <Img>. Instead, use a <div> with solid background color or gradient\n- 'video' → DO NOT USE <Video>. Instead, use animated <div> elements\n- 'shape' → Use appropriate shape elements (div with border-radius for circles/rounded rectangles, SVG for complex shapes)\n- 'container' → Use a positioned <div> that may contain child elements\n\n#### INITIAL LAYOUT TRANSLATION:\nAll initialLayout properties MUST be translated to React inline styles:\n- 'x', 'y' → style={{ position: 'absolute', left: x, top: y }}\n- 'width', 'height' → style={{ width, height }}\n- 'opacity' → style={{ opacity }}\n- 'rotation' → style={{ transform: `rotate(${rotation}deg)` }}\n- 'scale' → style={{ transform: `scale(${scale})` }}\n- 'zIndex' → style={{ zIndex }}\n- Multiple transforms should be combined: transform: `rotate(${rotation}deg) scale(${scale})`\n\n#### ANIMATION IMPLEMENTATION:\nFor each animation, use this approach:\n1. Calculate the active animation frames based on delayInFrames and durationInFrames:\n   const animStartFrame = animation.delayInFrames || 0;\n   const animEndFrame = animStartFrame + (animation.durationInFrames || 30);\n2. Apply the appropriate Remotion animation function:\n   - For 'spring' animations or when remotionFunctionHint is 'spring':\n     const animatedValue = spring({\n       frame: frame - animStartFrame,\n       fps,\n       from: property.from,\n       to: property.to,\n       config: property.springConfig || { damping: 10, mass: 1, stiffness: 100 }\n     });\n   - For most other animations, use interpolate:\n     const animatedValue = interpolate(\n       frame,\n       [animStartFrame, animEndFrame],\n       [property.from, property.to],\n       {\n         extrapolateLeft: 'clamp',\n         extrapolateRight: 'clamp',\n         easing: determineEasing(animation.easing)\n       }\n     );\n3. Apply animated values to style properties:\n   - For transform properties (e.g., 'transform.translateX', 'transform.scale'):\n     Extract the specific transform type and apply with appropriate units.\n   - For standard CSS properties (e.g., 'opacity'):\n     Apply directly to the style object.\n   - Example: style={{ opacity: animatedOpacity, transform: `translateX(${animatedX}px) scale(${animatedScale})` }}\n4. For sequence-based timing (startAfter, startWith):\n   - Wrap elements in <Sequence> components with appropriate 'from' and 'durationInFrames' props\n   - Use 'from' attribute based on animation.delayInFrames\n   - Example: <Sequence from={30} durationInFrames={60}>...</Sequence>\n\n### SPECIFIC ELEMENTS TO IMPLEMENT:\n\n#### ELEMENT 1: 883e6b87-87de-4517-a7e8-f4566e481f61 (shape)\n- Initial Layout (CSS equivalent):\n  * x: 960px\n  * y: 540px\n  * width: 200px\n  * height: 200px\n  * opacity: 0\n  * rotation: 0deg\n  * scale: 1\n  * backgroundColor: transparent\n- React style equivalent: style={{ position: 'absolute', left: 960px, top: 540px, width: 200px, height: 200px, opacity: 0, transform: 'rotate(0deg) scale(1)', backgroundColor: 'transparent' }}\n\n- Animations for 883e6b87-87de-4517-a7e8-f4566e481f61:\n  * Animation 1: fadeIn\n    - Start frame: 0\n    - Duration: 30 frames\n    - End frame: 30\n    - Easing: easeOutCubic → Implement as: Easing.easeOutCubic\n    - Properties to animate:\n      • opacity: from 0 to 1\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 30], \n          [0, 1], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }\n        );`\n  * Animation 2: morphPath\n    - Start frame: 0\n    - Duration: 60 frames\n    - End frame: 60\n    - Easing: easeInOutQuad → Implement as: Easing.easeInOutQuad\n    - Properties to animate:\n      • fillColor: from \"#FFD54F\" to \"#90A4AE\"\n        Implementation: `const fillColorValue = interpolate(\n          frame, \n          [0, 60], \n          [\"#FFD54F\", \"#90A4AE\"], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInOutQuad }\n        );`\n  * Animation 3: fadeOut\n    - Start frame: 0\n    - Duration: 30 frames\n    - End frame: 30\n    - Easing: easeInCubic → Implement as: Easing.easeInCubic\n    - Properties to animate:\n      • opacity: from 1 to 0\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 30], \n          [1, 0], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInCubic }\n        );`\n\n### SEQUENCE ORCHESTRATION & TIMING GUIDELINES:\nWhen implementing multiple animations, carefully orchestrate them to match the design intent:\n1. Use <Sequence> components for elements or animations that should start at specific frames.\n   Example: <Sequence from={30} durationInFrames={60}><YourAnimatedElement /></Sequence>\n2. For animation dependencies between elements (animations that must follow others):\n   - Create a timing map that respects trigger values like 'afterPrevious' by calculating startFrames.\n   - Example: const titleExitFrame = titleStartFrame + titleDuration;\n             const subTitleStartFrame = titleExitFrame; // Starting after title exits\n\n### CODE QUALITY & PERFORMANCE GUIDELINES:\n1. MODULARITY: For complex elements, consider creating sub-components.\n2. PERFORMANCE: Minimize DOM nodes - prefer CSS transforms over creating new elements.\n3. MEMOIZATION: Use React.useMemo() for computationally expensive calculations.\n4. TYPING: Provide proper TypeScript types throughout, including for style objects.\n5. COMMENTS: Add brief comments for complex animation logic or calculations.\n6. ORGANIZATION: Group related animations and separate distinct animation phases.\n7. ERROR HANDLING: Include defensive checks for potentially undefined values.\n\n### CRITICAL REMINDER:\n- PRECISELY follow the AnimationDesignBrief's specifications.\n- RESPECT the timing, durations, and easing specified in the brief.\n- IMPLEMENT ALL elements and animations exactly as detailed above.\n- START with the boilerplate structure provided earlier.\n- REMEMBER the first line MUST be: // src/remotion/components/scenes/IconMorphShowScene.tsx","sceneId":"d513b631-2ffa-41ca-a934-38964e316740","userData":{"userId":"92256ac9-495a-4ba2-aecc-fa4ce6756baa"},"projectId":"94c11fc4-884a-4893-842d-daecebe189f7","componentName":"IconMorphShowScene","durationInFrames":120,"animationDesignBriefId":"930aa6b9-809e-40ef-8573-58dd52981059"},"statusMessageId":"5e78fa33-7270-4e55-8659-6e558c5473e0"}]