[{"id":"7bff90dd-a813-455e-9622-c2d7eb7fa36f","projectId":"21c57855-c7b3-4940-953d-e41681408544","effect":"ASingleOrangeScene","tsxCode":"\"use client\";\n\n// src/remotion/components/scenes/ASingleOrangeScene.tsx\nimport React from 'react';\nimport {\n  AbsoluteFill,\n  Sequence,\n  useCurrentFrame,\n  useVideoConfig,\n  interpolate,\n  Easing,\n} from 'remotion';\n// import { AnimationDesignBrief } from '~/lib/schemas/animationDesignBrief.schema';\n\nexport const ASingleOrangeScene: React.FC<{ brief: AnimationDesignBrief }> = ({ brief }) => {\n  const frame = useCurrentFrame();\n  const { fps, width, height, durationInFrames } = useVideoConfig();\n\n  // Destructure palette from brief, fallback to provided defaults\n  const backgroundColor = brief.colorPalette?.background || '#111111';\n  const primaryColor = brief.colorPalette?.primary || '#FFA500';\n\n  // Fade-in animation (0 to 15 frames)\n  const fadeInOpacity = interpolate(\n    frame,\n    [0, 15],\n    [0, 1],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp',\n      easing: Easing.easeOutCubic,\n    }\n  );\n\n  // Fade-out animation (last 15 frames)\n  const fadeOutOpacity = interpolate(\n    frame,\n    [durationInFrames - 15, durationInFrames],\n    [1, 0],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp',\n      easing: Easing.easeInCubic,\n    }\n  );\n\n  // Composite opacity: use fade-in until hold, then fade-out\n  const opacity = frame < durationInFrames - 15 ? fadeInOpacity : fadeOutOpacity;\n\n  // Scale animation over full duration\n  const scale = interpolate(\n    frame,\n    [0, durationInFrames],\n    [0, 10],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp',\n      easing: Easing.easeOutQuad,\n    }\n  );\n\n  // Center coordinates for initial layout\n  const centerX = width / 2;\n  const centerY = height / 2;\n\n  // Style for the expanding circle\n  const circleStyle: React.CSSProperties = {\n    position: 'absolute',\n    left: centerX,\n    top: centerY,\n    width: 100,\n    height: 100,\n    backgroundColor: primaryColor,\n    borderRadius: '50%',\n    opacity,\n    transform: `translate(-50%, -50%) scale(${scale})`,\n    transformOrigin: 'center',\n  };\n\n  return (\n    <AbsoluteFill style={{ backgroundColor }}>\n      {/* Single orange circle expanding with fade in/out */}\n      <Sequence from={0} durationInFrames={durationInFrames}>\n        <div style={circleStyle} />\n      </Sequence>\n    </AbsoluteFill>\n  );\n};","status":"complete","outputUrl":"https://pub-80969e2c6b73496db98ed52f98a48681.r2.dev/custom-components/7bff90dd-a813-455e-9622-c2d7eb7fa36f.js","errorMessage":null,"retryCount":0,"createdAt":"2025-05-12 05:22:39.387948+00","updatedAt":"2025-05-12 05:23:02.589+00","metadata":{"fps":30,"width":1920,"height":1080,"prompt":"### ROLE: You are an Expert Remotion Developer and Senior React Engineer.\n### TASK: Create a production-quality Remotion React functional component in TypeScript.\n### COMPONENT NAME: 'ASingleOrangeScene'\n### OBJECTIVE: Generate a component that precisely implements the provided AnimationDesignBrief with professional animations and visual effects.\n### VIDEO CONFIG: Target video is 1920x1080px, 150 frames total duration, at 30 FPS.\n### MANDATORY REQUIREMENTS:\n- The FIRST line MUST be: // src/remotion/components/scenes/ASingleOrangeScene.tsx\n- The component MUST be a functional component using TypeScript (.tsx).\n- ALWAYS use the Remotion hooks: useCurrentFrame() and useVideoConfig() for timing and dimensions.\n- Component MUST accept props: { brief: AnimationDesignBrief } (assume this type is imported).\n- Utilize appropriate Remotion animation functions based on each element's needs:\n  * interpolate() - For smooth linear or eased transitions between values\n  * spring() - For physics-based, bouncy animations\n  * Easing module - For specifying animation curves (easeInOut, bezier, etc.)\n- Use Remotion timing components when needed:\n  * <Sequence from={startFrame} durationInFrames={duration}> - For sequential animations\n  * <Series> - For orchestrating complex animation sequences\n  * <Loop> - For repeating animations\n- Apply absolute positioning based on initialLayout coordinates.\n\n### BOILERPLATE STRUCTURE (Follow this pattern):\n```typescript\n// src/remotion/components/scenes/ASingleOrangeScene.tsx\nimport { AbsoluteFill, useCurrentFrame, useVideoConfig, interpolate, spring, Sequence, Easing, Img, Audio } from 'remotion';\nimport React from 'react';\n// import { AnimationDesignBrief } from '~/lib/schemas/animationDesignBrief.schema';\n\nexport const ASingleOrangeScene: React.FC<{ brief: AnimationDesignBrief }> = ({ brief }) => {\n  const frame = useCurrentFrame();\n  const { fps, width, height, durationInFrames } = useVideoConfig();\n\n  // Extract key brief properties\n  const { elements, colorPalette, typography, overallStyle } = brief;\n\n  // Define background color from brief\n  const backgroundColor = colorPalette?.background || 'transparent';\n\n  return (\n    <AbsoluteFill style={{ backgroundColor }}>\n      {/* Render each element with its animations */}\n    </AbsoluteFill>\n  );\n};\n```\n\n--- Scene Overview ---\nScene Name: ASingleOrangeScene\nPurpose: A single orange circle starts small at the center of a dark background, gradually expanding in size over 5 seconds with smooth fade in and fade out transitions.\nOverall Style: Minimalist flat vector animation\n\n--- Color Palette ---\n- Primary Color: #FFA500\n- Background Color: #111111\n\n### ELEMENT-BY-ELEMENT IMPLEMENTATION GUIDE:\nEach element from the AnimationDesignBrief must be translated into React/Remotion code following these guidelines:\n\n### IMPORTANT RESTRICTION - NO EXTERNAL ASSETS:\n- DO NOT reference or try to load any external images, videos, or other media files\n- DO NOT use the <Img> component from Remotion to load any image files\n- If the AnimationDesignBrief mentions image elements, implement them as:\n  * Colored rectangles or circles using <div> with backgroundColor and borderRadius\n  * SVG graphics created programmatically (rectangles, circles, paths)\n  * CSS gradients for more visual interest\n- Focus ONLY on animations, shapes, text elements, and colors\n- This temporary restriction ensures component reliability while asset management is being developed\n\n#### ELEMENT TYPE TRANSLATION:\n- 'text' → Use a <div> or <h1>-<h6> with appropriate styling\n- 'image' → DO NOT USE <Img>. Instead, use a <div> with solid background color or gradient\n- 'video' → DO NOT USE <Video>. Instead, use animated <div> elements\n- 'shape' → Use appropriate shape elements (div with border-radius for circles/rounded rectangles, SVG for complex shapes)\n- 'container' → Use a positioned <div> that may contain child elements\n\n#### INITIAL LAYOUT TRANSLATION:\nAll initialLayout properties MUST be translated to React inline styles:\n- 'x', 'y' → style={{ position: 'absolute', left: x, top: y }}\n- 'width', 'height' → style={{ width, height }}\n- 'opacity' → style={{ opacity }}\n- 'rotation' → style={{ transform: `rotate(${rotation}deg)` }}\n- 'scale' → style={{ transform: `scale(${scale})` }}\n- 'zIndex' → style={{ zIndex }}\n- Multiple transforms should be combined: transform: `rotate(${rotation}deg) scale(${scale})`\n\n#### ANIMATION IMPLEMENTATION:\nFor each animation, use this approach:\n1. Calculate the active animation frames based on delayInFrames and durationInFrames:\n   const animStartFrame = animation.delayInFrames || 0;\n   const animEndFrame = animStartFrame + (animation.durationInFrames || 30);\n2. Apply the appropriate Remotion animation function:\n   - For 'spring' animations or when remotionFunctionHint is 'spring':\n     const animatedValue = spring({\n       frame: frame - animStartFrame,\n       fps,\n       from: property.from,\n       to: property.to,\n       config: property.springConfig || { damping: 10, mass: 1, stiffness: 100 }\n     });\n   - For most other animations, use interpolate:\n     const animatedValue = interpolate(\n       frame,\n       [animStartFrame, animEndFrame],\n       [property.from, property.to],\n       {\n         extrapolateLeft: 'clamp',\n         extrapolateRight: 'clamp',\n         easing: determineEasing(animation.easing)\n       }\n     );\n3. Apply animated values to style properties:\n   - For transform properties (e.g., 'transform.translateX', 'transform.scale'):\n     Extract the specific transform type and apply with appropriate units.\n   - For standard CSS properties (e.g., 'opacity'):\n     Apply directly to the style object.\n   - Example: style={{ opacity: animatedOpacity, transform: `translateX(${animatedX}px) scale(${animatedScale})` }}\n4. For sequence-based timing (startAfter, startWith):\n   - Wrap elements in <Sequence> components with appropriate 'from' and 'durationInFrames' props\n   - Use 'from' attribute based on animation.delayInFrames\n   - Example: <Sequence from={30} durationInFrames={60}>...</Sequence>\n\n### SPECIFIC ELEMENTS TO IMPLEMENT:\n\n#### ELEMENT 1: c93ab0cb-bb7b-4ada-a306-ad7438b75bc5 (shape)\n- Initial Layout (CSS equivalent):\n  * x: 960px\n  * y: 540px\n  * width: 100px\n  * height: 100px\n  * opacity: 0\n  * rotation: 0deg\n  * scale: 0\n  * backgroundColor: #FFA500\n- React style equivalent: style={{ position: 'absolute', left: 960px, top: 540px, width: 100px, height: 100px, opacity: 0, transform: 'rotate(0deg) scale(0)', backgroundColor: '#FFA500' }}\n\n- Animations for c93ab0cb-bb7b-4ada-a306-ad7438b75bc5:\n  * Animation 1: fadeIn\n    - Start frame: 0\n    - Duration: 15 frames\n    - End frame: 15\n    - Easing: easeOutCubic → Implement as: Easing.easeOutCubic\n    - Properties to animate:\n      • opacity: from 0 to 1\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 15], \n          [0, 1], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }\n        );`\n  * Animation 2: customProperty\n    - Start frame: 0\n    - Duration: 150 frames\n    - End frame: 150\n    - Easing: easeOutQuad → Implement as: Easing.easeOutQuad\n    - Properties to animate:\n      • scale: from 0 to 10\n        Implementation: `const scaleValue = interpolate(\n          frame, \n          [0, 150], \n          [0, 10], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutQuad }\n        );`\n  * Animation 3: fadeOut\n    - Start frame: 0\n    - Duration: 15 frames\n    - End frame: 15\n    - Easing: easeInCubic → Implement as: Easing.easeInCubic\n    - Properties to animate:\n      • opacity: from 1 to 0\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 15], \n          [1, 0], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInCubic }\n        );`\n\n### SEQUENCE ORCHESTRATION & TIMING GUIDELINES:\nWhen implementing multiple animations, carefully orchestrate them to match the design intent:\n1. Use <Sequence> components for elements or animations that should start at specific frames.\n   Example: <Sequence from={30} durationInFrames={60}><YourAnimatedElement /></Sequence>\n2. For animation dependencies between elements (animations that must follow others):\n   - Create a timing map that respects trigger values like 'afterPrevious' by calculating startFrames.\n   - Example: const titleExitFrame = titleStartFrame + titleDuration;\n             const subTitleStartFrame = titleExitFrame; // Starting after title exits\n\n### CODE QUALITY & PERFORMANCE GUIDELINES:\n1. MODULARITY: For complex elements, consider creating sub-components.\n2. PERFORMANCE: Minimize DOM nodes - prefer CSS transforms over creating new elements.\n3. MEMOIZATION: Use React.useMemo() for computationally expensive calculations.\n4. TYPING: Provide proper TypeScript types throughout, including for style objects.\n5. COMMENTS: Add brief comments for complex animation logic or calculations.\n6. ORGANIZATION: Group related animations and separate distinct animation phases.\n7. ERROR HANDLING: Include defensive checks for potentially undefined values.\n\n### CRITICAL REMINDER:\n- PRECISELY follow the AnimationDesignBrief's specifications.\n- RESPECT the timing, durations, and easing specified in the brief.\n- IMPLEMENT ALL elements and animations exactly as detailed above.\n- START with the boilerplate structure provided earlier.\n- REMEMBER the first line MUST be: // src/remotion/components/scenes/ASingleOrangeScene.tsx","sceneId":"b585f365-299f-468f-8d4f-020b7253b0d2","userData":{"userId":"92256ac9-495a-4ba2-aecc-fa4ce6756baa"},"projectId":"21c57855-c7b3-4940-953d-e41681408544","componentName":"ASingleOrangeScene","durationInFrames":150,"animationDesignBriefId":"15b124e4-cede-43cd-84de-220258cec7ea"},"statusMessageId":"da9ad649-d065-42aa-9ab9-8c1d9542c919"}]