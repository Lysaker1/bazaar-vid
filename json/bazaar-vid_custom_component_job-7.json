[{"id":"9ffec4f7-9af7-4af6-97d7-d3183b914ee0","projectId":"aadc79a4-f7bb-4c61-ac15-d8e0ea80662b","effect":"BlueCircleBurstsScene","tsxCode":"\"use client\";\n\n// src/remotion/components/scenes/BlueCircleBurstsScene.tsx\nimport React from 'react';\nimport {\n\tAbsoluteFill,\n\tuseCurrentFrame,\n\tuseVideoConfig,\n\tinterpolate,\n\tSequence,\n\tEasing,\n} from 'remotion';\nimport { AnimationDesignBrief } from '~/lib/schemas/animationDesignBrief.schema';\n\nexport const BlueCircleBurstsScene: React.FC<{ brief: AnimationDesignBrief }> = ({ brief }) => {\n\tconst frame = useCurrentFrame();\n\tconst { fps, width, height, durationInFrames } = useVideoConfig();\n\n\t// Extract color palette\n\tconst { colorPalette } = brief;\n\tconst primary = colorPalette?.primary || '#1E90FF';\n\tconst secondary = colorPalette?.secondary || '#87CEFA';\n\tconst backgroundColor = colorPalette?.background || '#000000';\n\n\t// Element 1: Main blue circle\n\tconst opacityIn1 = interpolate(\n\t\tframe,\n\t\t[0, 15],\n\t\t[0, 1],\n\t\t{ extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutBack }\n\t);\n\tconst opacityOut1 = interpolate(\n\t\tframe,\n\t\t[0, 10],\n\t\t[1, 0],\n\t\t{ extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInCubic }\n\t);\n\tconst opacity1 = frame <= 10 ? opacityOut1 : opacityIn1;\n\tconst scale1 = interpolate(\n\t\tframe,\n\t\t[0, 15],\n\t\t[0.5, 1],\n\t\t{ extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutBack }\n\t);\n\n\t// Helper for small bursts\n\tconst createBurst = (\n\t\tkey: string,\n\t\txFrom: number,\n\t\txTo: number,\n\t\tyFrom: number,\n\t\tyTo: number\n\t) => {\n\t\tconst opacityIn = interpolate(\n\t\t\tframe,\n\t\t\t[0, 5],\n\t\t\t[0, 1],\n\t\t\t{ extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }\n\t\t);\n\t\tconst opacityOut = interpolate(\n\t\t\tframe,\n\t\t\t[0, 10],\n\t\t\t[1, 0],\n\t\t\t{ extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInCubic }\n\t\t);\n\t\tconst opacity = frame <= 10 ? opacityOut : opacityIn;\n\t\tconst x = interpolate(\n\t\t\tframe,\n\t\t\t[0, 30],\n\t\t\t[xFrom, xTo],\n\t\t\t{ extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutQuad }\n\t\t);\n\t\tconst y = interpolate(\n\t\t\tframe,\n\t\t\t[0, 30],\n\t\t\t[yFrom, yTo],\n\t\t\t{ extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutQuad }\n\t\t);\n\t\treturn (\n\t\t\t<div\n\t\t\t\tkey={key}\n\t\t\t\tstyle={{\n\t\t\t\t\tposition: 'absolute',\n\t\t\t\t\tleft: x,\n\t\t\t\t\ttop: y,\n\t\t\t\t\twidth: 10,\n\t\t\t\t\theight: 10,\n\t\t\t\t\tborderRadius: 5,\n\t\t\t\t\tbackgroundColor: secondary,\n\t\t\t\t\topacity,\n\t\t\t\t}}\n\t\t\t/>\n\t\t);\n\t};\n\n\treturn (\n\t\t<AbsoluteFill style={{ backgroundColor }}>\n\t\t\t{/* Main blue circle burst */}\n\t\t\t<div\n\t\t\t\tstyle={{\n\t\t\t\t\tposition: 'absolute',\n\t\t\t\t\tleft: 960,\n\t\t\t\t\ttop: 540,\n\t\t\t\t\twidth: 200,\n\t\t\t\t\theight: 200,\n\t\t\t\t\tborderRadius: 100,\n\t\t\t\t\tbackgroundColor: primary,\n\t\t\t\t\topacity: opacity1,\n\t\t\t\t\ttransform: `rotate(0deg) scale(${scale1})`,\n\t\t\t\t}}\n\t\t\t/>\n\n\t\t\t{/* Small particles */}\n\t\t\t{createBurst('p1', 960, 960, 540, 200)}\n\t\t\t{createBurst('p2', 960, 960, 540, 880)}\n\t\t\t{createBurst('p3', 960, 400, 540, 540)}\n\t\t\t{createBurst('p4', 960, 1520, 540, 540)}\n\t\t\t{createBurst('p5', 960, 500, 540, 200)}\n\t\t\t{createBurst('p6', 960, 1520, 540, 880)}\n\t\t\t{createBurst('p7', 960, 400, 540, 880)}\n\t\t</AbsoluteFill>\n\t);\n};","status":"complete","outputUrl":"https://pub-80969e2c6b73496db98ed52f98a48681.r2.dev/custom-components/9ffec4f7-9af7-4af6-97d7-d3183b914ee0.js","errorMessage":null,"retryCount":0,"createdAt":"2025-05-10 15:45:07.67419+00","updatedAt":"2025-05-10 15:45:31.783+00","metadata":{"fps":30,"width":1920,"height":1080,"prompt":"### ROLE: You are an Expert Remotion Developer and Senior React Engineer.\n### TASK: Create a production-quality Remotion React functional component in TypeScript.\n### COMPONENT NAME: 'BlueCircleBurstsScene'\n### OBJECTIVE: Generate a component that precisely implements the provided AnimationDesignBrief with professional animations and visual effects.\n### VIDEO CONFIG: Target video is 1920x1080px, 90 frames total duration, at 30 FPS.\n### MANDATORY REQUIREMENTS:\n- The FIRST line MUST be: // src/remotion/components/scenes/BlueCircleBurstsScene.tsx\n- The component MUST be a functional component using TypeScript (.tsx).\n- ALWAYS use the Remotion hooks: useCurrentFrame() and useVideoConfig() for timing and dimensions.\n- Component MUST accept props: { brief: AnimationDesignBrief } (assume this type is imported).\n- Utilize appropriate Remotion animation functions based on each element's needs:\n  * interpolate() - For smooth linear or eased transitions between values\n  * spring() - For physics-based, bouncy animations\n  * Easing module - For specifying animation curves (easeInOut, bezier, etc.)\n- Use Remotion timing components when needed:\n  * <Sequence from={startFrame} durationInFrames={duration}> - For sequential animations\n  * <Series> - For orchestrating complex animation sequences\n  * <Loop> - For repeating animations\n- Apply absolute positioning based on initialLayout coordinates.\n\n### BOILERPLATE STRUCTURE (Follow this pattern):\n```typescript\n// src/remotion/components/scenes/BlueCircleBurstsScene.tsx\nimport { AbsoluteFill, useCurrentFrame, useVideoConfig, interpolate, spring, Sequence, Easing, Img, Audio } from 'remotion';\nimport React from 'react';\n// import { AnimationDesignBrief } from '~/lib/schemas/animationDesignBrief.schema';\n\nexport const BlueCircleBurstsScene: React.FC<{ brief: AnimationDesignBrief }> = ({ brief }) => {\n  const frame = useCurrentFrame();\n  const { fps, width, height, durationInFrames } = useVideoConfig();\n\n  // Extract key brief properties\n  const { elements, colorPalette, typography, overallStyle } = brief;\n\n  // Define background color from brief\n  const backgroundColor = colorPalette?.background || 'transparent';\n\n  return (\n    <AbsoluteFill style={{ backgroundColor }}>\n      {/* Render each element with its animations */}\n    </AbsoluteFill>\n  );\n};\n```\n\n--- Scene Overview ---\nScene Name: BlueCircleBurstsScene\nPurpose: Blue circle bursts into particles and explodes outward\nOverall Style: Dynamic particle explosion with flat colors\n\n--- Color Palette ---\n- Primary Color: #1E90FF\n- Secondary Color: #87CEFA\n- Accent Color: #FFFFFF\n- Background Color: #000000\n\n### ELEMENT-BY-ELEMENT IMPLEMENTATION GUIDE:\nEach element from the AnimationDesignBrief must be translated into React/Remotion code following these guidelines:\n\n### IMPORTANT RESTRICTION - NO EXTERNAL ASSETS:\n- DO NOT reference or try to load any external images, videos, or other media files\n- DO NOT use the <Img> component from Remotion to load any image files\n- If the AnimationDesignBrief mentions image elements, implement them as:\n  * Colored rectangles or circles using <div> with backgroundColor and borderRadius\n  * SVG graphics created programmatically (rectangles, circles, paths)\n  * CSS gradients for more visual interest\n- Focus ONLY on animations, shapes, text elements, and colors\n- This temporary restriction ensures component reliability while asset management is being developed\n\n#### ELEMENT TYPE TRANSLATION:\n- 'text' → Use a <div> or <h1>-<h6> with appropriate styling\n- 'image' → DO NOT USE <Img>. Instead, use a <div> with solid background color or gradient\n- 'video' → DO NOT USE <Video>. Instead, use animated <div> elements\n- 'shape' → Use appropriate shape elements (div with border-radius for circles/rounded rectangles, SVG for complex shapes)\n- 'container' → Use a positioned <div> that may contain child elements\n\n#### INITIAL LAYOUT TRANSLATION:\nAll initialLayout properties MUST be translated to React inline styles:\n- 'x', 'y' → style={{ position: 'absolute', left: x, top: y }}\n- 'width', 'height' → style={{ width, height }}\n- 'opacity' → style={{ opacity }}\n- 'rotation' → style={{ transform: `rotate(${rotation}deg)` }}\n- 'scale' → style={{ transform: `scale(${scale})` }}\n- 'zIndex' → style={{ zIndex }}\n- Multiple transforms should be combined: transform: `rotate(${rotation}deg) scale(${scale})`\n\n#### ANIMATION IMPLEMENTATION:\nFor each animation, use this approach:\n1. Calculate the active animation frames based on delayInFrames and durationInFrames:\n   const animStartFrame = animation.delayInFrames || 0;\n   const animEndFrame = animStartFrame + (animation.durationInFrames || 30);\n2. Apply the appropriate Remotion animation function:\n   - For 'spring' animations or when remotionFunctionHint is 'spring':\n     const animatedValue = spring({\n       frame: frame - animStartFrame,\n       fps,\n       from: property.from,\n       to: property.to,\n       config: property.springConfig || { damping: 10, mass: 1, stiffness: 100 }\n     });\n   - For most other animations, use interpolate:\n     const animatedValue = interpolate(\n       frame,\n       [animStartFrame, animEndFrame],\n       [property.from, property.to],\n       {\n         extrapolateLeft: 'clamp',\n         extrapolateRight: 'clamp',\n         easing: determineEasing(animation.easing)\n       }\n     );\n3. Apply animated values to style properties:\n   - For transform properties (e.g., 'transform.translateX', 'transform.scale'):\n     Extract the specific transform type and apply with appropriate units.\n   - For standard CSS properties (e.g., 'opacity'):\n     Apply directly to the style object.\n   - Example: style={{ opacity: animatedOpacity, transform: `translateX(${animatedX}px) scale(${animatedScale})` }}\n4. For sequence-based timing (startAfter, startWith):\n   - Wrap elements in <Sequence> components with appropriate 'from' and 'durationInFrames' props\n   - Use 'from' attribute based on animation.delayInFrames\n   - Example: <Sequence from={30} durationInFrames={60}>...</Sequence>\n\n### SPECIFIC ELEMENTS TO IMPLEMENT:\n\n#### ELEMENT 1: 09daea0e-8626-4cda-9940-2ed52463a44e (shape)\n- Initial Layout (CSS equivalent):\n  * x: 960px\n  * y: 540px\n  * width: 200px\n  * height: 200px\n  * opacity: 0\n  * rotation: 0deg\n  * scale: 0.5\n  * backgroundColor: #1E90FF\n- React style equivalent: style={{ position: 'absolute', left: 960px, top: 540px, width: 200px, height: 200px, opacity: 0, transform: 'rotate(0deg) scale(0.5)', backgroundColor: '#1E90FF' }}\n\n- Animations for 09daea0e-8626-4cda-9940-2ed52463a44e:\n  * Animation 1: fadeIn\n    - Start frame: 0\n    - Duration: 15 frames\n    - End frame: 15\n    - Easing: easeOutBack → Implement as: Easing.easeOutBack\n    - Properties to animate:\n      • opacity: from 0 to 1\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 15], \n          [0, 1], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutBack }\n        );`\n  * Animation 2: customProperty\n    - Start frame: 0\n    - Duration: 15 frames\n    - End frame: 15\n    - Easing: easeOutBack → Implement as: Easing.easeOutBack\n    - Properties to animate:\n      • scale: from 0.5 to 1\n        Implementation: `const scaleValue = interpolate(\n          frame, \n          [0, 15], \n          [0.5, 1], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutBack }\n        );`\n  * Animation 3: fadeOut\n    - Start frame: 0\n    - Duration: 10 frames\n    - End frame: 10\n    - Easing: easeInCubic → Implement as: Easing.easeInCubic\n    - Properties to animate:\n      • opacity: from 1 to 0\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 10], \n          [1, 0], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInCubic }\n        );`\n\n#### ELEMENT 2: 7e61ef8a-d373-45d6-bc8e-235e4bf45478 (shape)\n- Initial Layout (CSS equivalent):\n  * x: 960px\n  * y: 540px\n  * width: 10px\n  * height: 10px\n  * opacity: 0\n  * rotation: 0deg\n  * scale: 1\n  * backgroundColor: #87CEFA\n- React style equivalent: style={{ position: 'absolute', left: 960px, top: 540px, width: 10px, height: 10px, opacity: 0, transform: 'rotate(0deg) scale(1)', backgroundColor: '#87CEFA' }}\n\n- Animations for 7e61ef8a-d373-45d6-bc8e-235e4bf45478:\n  * Animation 1: fadeIn\n    - Start frame: 0\n    - Duration: 5 frames\n    - End frame: 5\n    - Easing: easeOutCubic → Implement as: Easing.easeOutCubic\n    - Properties to animate:\n      • opacity: from 0 to 1\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 5], \n          [0, 1], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }\n        );`\n  * Animation 2: customProperty\n    - Start frame: 0\n    - Duration: 30 frames\n    - End frame: 30\n    - Easing: easeOutQuad → Implement as: Easing.easeOutQuad\n    - Properties to animate:\n      • y: from 540 to 200\n        Implementation: `const yValue = interpolate(\n          frame, \n          [0, 30], \n          [540, 200], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutQuad }\n        );`\n  * Animation 3: fadeOut\n    - Start frame: 0\n    - Duration: 10 frames\n    - End frame: 10\n    - Easing: easeInCubic → Implement as: Easing.easeInCubic\n    - Properties to animate:\n      • opacity: from 1 to 0\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 10], \n          [1, 0], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInCubic }\n        );`\n\n#### ELEMENT 3: 373d10d1-422c-4f37-bf8c-84ff9db04046 (shape)\n- Initial Layout (CSS equivalent):\n  * x: 960px\n  * y: 540px\n  * width: 10px\n  * height: 10px\n  * opacity: 0\n  * rotation: 0deg\n  * scale: 1\n  * backgroundColor: #87CEFA\n- React style equivalent: style={{ position: 'absolute', left: 960px, top: 540px, width: 10px, height: 10px, opacity: 0, transform: 'rotate(0deg) scale(1)', backgroundColor: '#87CEFA' }}\n\n- Animations for 373d10d1-422c-4f37-bf8c-84ff9db04046:\n  * Animation 1: fadeIn\n    - Start frame: 0\n    - Duration: 5 frames\n    - End frame: 5\n    - Easing: easeOutCubic → Implement as: Easing.easeOutCubic\n    - Properties to animate:\n      • opacity: from 0 to 1\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 5], \n          [0, 1], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }\n        );`\n  * Animation 2: customProperty\n    - Start frame: 0\n    - Duration: 30 frames\n    - End frame: 30\n    - Easing: easeOutQuad → Implement as: Easing.easeOutQuad\n    - Properties to animate:\n      • y: from 540 to 880\n        Implementation: `const yValue = interpolate(\n          frame, \n          [0, 30], \n          [540, 880], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutQuad }\n        );`\n  * Animation 3: fadeOut\n    - Start frame: 0\n    - Duration: 10 frames\n    - End frame: 10\n    - Easing: easeInCubic → Implement as: Easing.easeInCubic\n    - Properties to animate:\n      • opacity: from 1 to 0\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 10], \n          [1, 0], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInCubic }\n        );`\n\n#### ELEMENT 4: 914518b3-b335-4d45-8b99-3b0219325e8a (shape)\n- Initial Layout (CSS equivalent):\n  * x: 960px\n  * y: 540px\n  * width: 10px\n  * height: 10px\n  * opacity: 0\n  * rotation: 0deg\n  * scale: 1\n  * backgroundColor: #87CEFA\n- React style equivalent: style={{ position: 'absolute', left: 960px, top: 540px, width: 10px, height: 10px, opacity: 0, transform: 'rotate(0deg) scale(1)', backgroundColor: '#87CEFA' }}\n\n- Animations for 914518b3-b335-4d45-8b99-3b0219325e8a:\n  * Animation 1: fadeIn\n    - Start frame: 0\n    - Duration: 5 frames\n    - End frame: 5\n    - Easing: easeOutCubic → Implement as: Easing.easeOutCubic\n    - Properties to animate:\n      • opacity: from 0 to 1\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 5], \n          [0, 1], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }\n        );`\n  * Animation 2: customProperty\n    - Start frame: 0\n    - Duration: 30 frames\n    - End frame: 30\n    - Easing: easeOutQuad → Implement as: Easing.easeOutQuad\n    - Properties to animate:\n      • x: from 960 to 400\n        Implementation: `const xValue = interpolate(\n          frame, \n          [0, 30], \n          [960, 400], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutQuad }\n        );`\n  * Animation 3: fadeOut\n    - Start frame: 0\n    - Duration: 10 frames\n    - End frame: 10\n    - Easing: easeInCubic → Implement as: Easing.easeInCubic\n    - Properties to animate:\n      • opacity: from 1 to 0\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 10], \n          [1, 0], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInCubic }\n        );`\n\n#### ELEMENT 5: ab382b49-3c0a-49dc-9c7a-5fbffe8f5213 (shape)\n- Initial Layout (CSS equivalent):\n  * x: 960px\n  * y: 540px\n  * width: 10px\n  * height: 10px\n  * opacity: 0\n  * rotation: 0deg\n  * scale: 1\n  * backgroundColor: #87CEFA\n- React style equivalent: style={{ position: 'absolute', left: 960px, top: 540px, width: 10px, height: 10px, opacity: 0, transform: 'rotate(0deg) scale(1)', backgroundColor: '#87CEFA' }}\n\n- Animations for ab382b49-3c0a-49dc-9c7a-5fbffe8f5213:\n  * Animation 1: fadeIn\n    - Start frame: 0\n    - Duration: 5 frames\n    - End frame: 5\n    - Easing: easeOutCubic → Implement as: Easing.easeOutCubic\n    - Properties to animate:\n      • opacity: from 0 to 1\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 5], \n          [0, 1], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }\n        );`\n  * Animation 2: customProperty\n    - Start frame: 0\n    - Duration: 30 frames\n    - End frame: 30\n    - Easing: easeOutQuad → Implement as: Easing.easeOutQuad\n    - Properties to animate:\n      • x: from 960 to 1520\n        Implementation: `const xValue = interpolate(\n          frame, \n          [0, 30], \n          [960, 1520], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutQuad }\n        );`\n  * Animation 3: fadeOut\n    - Start frame: 0\n    - Duration: 10 frames\n    - End frame: 10\n    - Easing: easeInCubic → Implement as: Easing.easeInCubic\n    - Properties to animate:\n      • opacity: from 1 to 0\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 10], \n          [1, 0], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInCubic }\n        );`\n\n#### ELEMENT 6: 3dcfb4b0-fce9-4acc-9d3f-7e8796d73d2c (shape)\n- Initial Layout (CSS equivalent):\n  * x: 960px\n  * y: 540px\n  * width: 10px\n  * height: 10px\n  * opacity: 0\n  * rotation: 0deg\n  * scale: 1\n  * backgroundColor: #87CEFA\n- React style equivalent: style={{ position: 'absolute', left: 960px, top: 540px, width: 10px, height: 10px, opacity: 0, transform: 'rotate(0deg) scale(1)', backgroundColor: '#87CEFA' }}\n\n- Animations for 3dcfb4b0-fce9-4acc-9d3f-7e8796d73d2c:\n  * Animation 1: fadeIn\n    - Start frame: 0\n    - Duration: 5 frames\n    - End frame: 5\n    - Easing: easeOutCubic → Implement as: Easing.easeOutCubic\n    - Properties to animate:\n      • opacity: from 0 to 1\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 5], \n          [0, 1], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }\n        );`\n  * Animation 2: customProperty\n    - Start frame: 0\n    - Duration: 30 frames\n    - End frame: 30\n    - Easing: easeOutQuad → Implement as: Easing.easeOutQuad\n    - Properties to animate:\n      • x: from 960 to 500\n        Implementation: `const xValue = interpolate(\n          frame, \n          [0, 30], \n          [960, 500], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutQuad }\n        );`\n      • y: from 540 to 200\n        Implementation: `const yValue = interpolate(\n          frame, \n          [0, 30], \n          [540, 200], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutQuad }\n        );`\n  * Animation 3: fadeOut\n    - Start frame: 0\n    - Duration: 10 frames\n    - End frame: 10\n    - Easing: easeInCubic → Implement as: Easing.easeInCubic\n    - Properties to animate:\n      • opacity: from 1 to 0\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 10], \n          [1, 0], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInCubic }\n        );`\n\n#### ELEMENT 7: 9231f94c-c488-46ea-9a6d-138bc5f2d4fa (shape)\n- Initial Layout (CSS equivalent):\n  * x: 960px\n  * y: 540px\n  * width: 10px\n  * height: 10px\n  * opacity: 0\n  * rotation: 0deg\n  * scale: 1\n  * backgroundColor: #87CEFA\n- React style equivalent: style={{ position: 'absolute', left: 960px, top: 540px, width: 10px, height: 10px, opacity: 0, transform: 'rotate(0deg) scale(1)', backgroundColor: '#87CEFA' }}\n\n- Animations for 9231f94c-c488-46ea-9a6d-138bc5f2d4fa:\n  * Animation 1: fadeIn\n    - Start frame: 0\n    - Duration: 5 frames\n    - End frame: 5\n    - Easing: easeOutCubic → Implement as: Easing.easeOutCubic\n    - Properties to animate:\n      • opacity: from 0 to 1\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 5], \n          [0, 1], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }\n        );`\n  * Animation 2: customProperty\n    - Start frame: 0\n    - Duration: 30 frames\n    - End frame: 30\n    - Easing: easeOutQuad → Implement as: Easing.easeOutQuad\n    - Properties to animate:\n      • x: from 960 to 1520\n        Implementation: `const xValue = interpolate(\n          frame, \n          [0, 30], \n          [960, 1520], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutQuad }\n        );`\n      • y: from 540 to 880\n        Implementation: `const yValue = interpolate(\n          frame, \n          [0, 30], \n          [540, 880], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutQuad }\n        );`\n  * Animation 3: fadeOut\n    - Start frame: 0\n    - Duration: 10 frames\n    - End frame: 10\n    - Easing: easeInCubic → Implement as: Easing.easeInCubic\n    - Properties to animate:\n      • opacity: from 1 to 0\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 10], \n          [1, 0], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInCubic }\n        );`\n\n### SEQUENCE ORCHESTRATION & TIMING GUIDELINES:\nWhen implementing multiple animations, carefully orchestrate them to match the design intent:\n1. Use <Sequence> components for elements or animations that should start at specific frames.\n   Example: <Sequence from={30} durationInFrames={60}><YourAnimatedElement /></Sequence>\n2. For animation dependencies between elements (animations that must follow others):\n   - Create a timing map that respects trigger values like 'afterPrevious' by calculating startFrames.\n   - Example: const titleExitFrame = titleStartFrame + titleDuration;\n             const subTitleStartFrame = titleExitFrame; // Starting after title exits\n\n### CODE QUALITY & PERFORMANCE GUIDELINES:\n1. MODULARITY: For complex elements, consider creating sub-components.\n2. PERFORMANCE: Minimize DOM nodes - prefer CSS transforms over creating new elements.\n3. MEMOIZATION: Use React.useMemo() for computationally expensive calculations.\n4. TYPING: Provide proper TypeScript types throughout, including for style objects.\n5. COMMENTS: Add brief comments for complex animation logic or calculations.\n6. ORGANIZATION: Group related animations and separate distinct animation phases.\n7. ERROR HANDLING: Include defensive checks for potentially undefined values.\n\n### CRITICAL REMINDER:\n- PRECISELY follow the AnimationDesignBrief's specifications.\n- RESPECT the timing, durations, and easing specified in the brief.\n- IMPLEMENT ALL elements and animations exactly as detailed above.\n- START with the boilerplate structure provided earlier.\n- REMEMBER the first line MUST be: // src/remotion/components/scenes/BlueCircleBurstsScene.tsx","sceneId":"c90ab1c0-a5d0-4052-8351-0f99c0390e25","userData":{"userId":"92256ac9-495a-4ba2-aecc-fa4ce6756baa"},"projectId":"aadc79a4-f7bb-4c61-ac15-d8e0ea80662b","componentName":"BlueCircleBurstsScene","durationInFrames":90,"animationDesignBriefId":"705247be-cbce-43f1-ad82-cd63a96f3b29"},"statusMessageId":"80d80d09-1df3-41cd-b0b5-d96ada6bcd23"},{"id":"d4846eac-293e-4b75-aa6c-9d6849dbff6e","projectId":"aadc79a4-f7bb-4c61-ac15-d8e0ea80662b","effect":"BlueCircleScalesScene","tsxCode":"\"use client\";\n\n// src/remotion/components/scenes/BlueCircleScalesScene.tsx\nimport React, {useMemo} from 'react';\nimport {\n  AbsoluteFill,\n  useCurrentFrame,\n  useVideoConfig,\n  interpolate,\n  Sequence,\n  Easing,\n} from 'remotion';\nimport type {AnimationDesignBrief} from '~/lib/schemas/animationDesignBrief.schema';\n\nexport const BlueCircleScalesScene: React.FC<{brief: AnimationDesignBrief}> = ({brief}) => {\n  const frame = useCurrentFrame();\n  const {fps, width, height, durationInFrames} = useVideoConfig();\n\n  // Extract color palette (with fallbacks)\n  const backgroundColor = useMemo(\n    () => brief.colorPalette?.background || '#FFFFFF',\n    [brief.colorPalette]\n  );\n  const primaryColor = useMemo(\n    () => brief.colorPalette?.primary || '#007BFF',\n    [brief.colorPalette]\n  );\n  const textColor = useMemo(\n    () => brief.colorPalette?.textPrimary || '#333333',\n    [brief.colorPalette]\n  );\n\n  // Element 1: Blue circle animations\n  // Fade In: frame [0,15]\n  const circleFadeIn = interpolate(\n    frame,\n    [0, 15],\n    [0, 1],\n    {extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic}\n  );\n  // Scale Up: frame [0,90]\n  const circleScale = interpolate(\n    frame,\n    [0, 90],\n    [1, 2],\n    {extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInOutCubic}\n  );\n  // Fade Out: frame [0,10]\n  const circleFadeOut = interpolate(\n    frame,\n    [0, 10],\n    [1, 0],\n    {extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInCubic}\n  );\n  // Combined opacity (applying both fadeIn and fadeOut per spec)\n  const circleOpacity = useMemo(\n    () => circleFadeIn * circleFadeOut,\n    [circleFadeIn, circleFadeOut]\n  );\n\n  // Element 2: Text animations\n  const textFadeIn = interpolate(\n    frame,\n    [0, 15],\n    [0, 1],\n    {extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic}\n  );\n  const textFadeOut = interpolate(\n    frame,\n    [0, 15],\n    [1, 0],\n    {extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInCubic}\n  );\n  const textOpacity = useMemo(\n    () => textFadeIn * textFadeOut,\n    [textFadeIn, textFadeOut]\n  );\n\n  return (\n    <AbsoluteFill style={{backgroundColor}}>\n      {/* Blue circle scaling and fading */}\n      <Sequence from={0} durationInFrames={90} name=\"BlueCircle\">\n        <div\n          style={{\n            position: 'absolute',\n            left: 960,\n            top: 540,\n            width: 200,\n            height: 200,\n            borderRadius: 100,\n            backgroundColor: primaryColor,\n            opacity: circleOpacity,\n            transform: `translate(-50%, -50%) scale(${circleScale})`,\n            willChange: 'opacity, transform',\n            zIndex: 1,\n          }}\n        />\n      </Sequence>\n\n      {/* Title text fade in/out */}\n      <Sequence from={0} durationInFrames={15} name=\"TitleText\">\n        <div\n          style={{\n            position: 'absolute',\n            left: 960,\n            top: 100,\n            width: 600,\n            height: 60,\n            transform: 'translateX(-50%)',\n            opacity: textOpacity,\n            color: textColor,\n            fontSize: 48,\n            fontWeight: 600,\n            textAlign: 'center',\n            lineHeight: '60px',\n            willChange: 'opacity',\n            zIndex: 2,\n          }}\n        >\n          Doubling the Radius\n        </div>\n      </Sequence>\n    </AbsoluteFill>\n  );\n};","status":"complete","outputUrl":"https://pub-80969e2c6b73496db98ed52f98a48681.r2.dev/custom-components/d4846eac-293e-4b75-aa6c-9d6849dbff6e.js","errorMessage":null,"retryCount":0,"createdAt":"2025-05-10 15:44:20.72629+00","updatedAt":"2025-05-10 15:45:03.218+00","metadata":{"fps":30,"width":1920,"height":1080,"prompt":"### ROLE: You are an Expert Remotion Developer and Senior React Engineer.\n### TASK: Create a production-quality Remotion React functional component in TypeScript.\n### COMPONENT NAME: 'BlueCircleScalesScene'\n### OBJECTIVE: Generate a component that precisely implements the provided AnimationDesignBrief with professional animations and visual effects.\n### VIDEO CONFIG: Target video is 1920x1080px, 120 frames total duration, at 30 FPS.\n### MANDATORY REQUIREMENTS:\n- The FIRST line MUST be: // src/remotion/components/scenes/BlueCircleScalesScene.tsx\n- The component MUST be a functional component using TypeScript (.tsx).\n- ALWAYS use the Remotion hooks: useCurrentFrame() and useVideoConfig() for timing and dimensions.\n- Component MUST accept props: { brief: AnimationDesignBrief } (assume this type is imported).\n- Utilize appropriate Remotion animation functions based on each element's needs:\n  * interpolate() - For smooth linear or eased transitions between values\n  * spring() - For physics-based, bouncy animations\n  * Easing module - For specifying animation curves (easeInOut, bezier, etc.)\n- Use Remotion timing components when needed:\n  * <Sequence from={startFrame} durationInFrames={duration}> - For sequential animations\n  * <Series> - For orchestrating complex animation sequences\n  * <Loop> - For repeating animations\n- Apply absolute positioning based on initialLayout coordinates.\n\n### BOILERPLATE STRUCTURE (Follow this pattern):\n```typescript\n// src/remotion/components/scenes/BlueCircleScalesScene.tsx\nimport { AbsoluteFill, useCurrentFrame, useVideoConfig, interpolate, spring, Sequence, Easing, Img, Audio } from 'remotion';\nimport React from 'react';\n// import { AnimationDesignBrief } from '~/lib/schemas/animationDesignBrief.schema';\n\nexport const BlueCircleScalesScene: React.FC<{ brief: AnimationDesignBrief }> = ({ brief }) => {\n  const frame = useCurrentFrame();\n  const { fps, width, height, durationInFrames } = useVideoConfig();\n\n  // Extract key brief properties\n  const { elements, colorPalette, typography, overallStyle } = brief;\n\n  // Define background color from brief\n  const backgroundColor = colorPalette?.background || 'transparent';\n\n  return (\n    <AbsoluteFill style={{ backgroundColor }}>\n      {/* Render each element with its animations */}\n    </AbsoluteFill>\n  );\n};\n```\n\n--- Scene Overview ---\nScene Name: BlueCircleScalesScene\nPurpose: Blue circle scales up smoothly from original size to double its radius\nOverall Style: Clean and minimalistic flat design\n\n--- Color Palette ---\n- Primary Color: #007BFF\n- Background Color: #FFFFFF\n- Text Primary Color: #333333\n\n### ELEMENT-BY-ELEMENT IMPLEMENTATION GUIDE:\nEach element from the AnimationDesignBrief must be translated into React/Remotion code following these guidelines:\n\n### IMPORTANT RESTRICTION - NO EXTERNAL ASSETS:\n- DO NOT reference or try to load any external images, videos, or other media files\n- DO NOT use the <Img> component from Remotion to load any image files\n- If the AnimationDesignBrief mentions image elements, implement them as:\n  * Colored rectangles or circles using <div> with backgroundColor and borderRadius\n  * SVG graphics created programmatically (rectangles, circles, paths)\n  * CSS gradients for more visual interest\n- Focus ONLY on animations, shapes, text elements, and colors\n- This temporary restriction ensures component reliability while asset management is being developed\n\n#### ELEMENT TYPE TRANSLATION:\n- 'text' → Use a <div> or <h1>-<h6> with appropriate styling\n- 'image' → DO NOT USE <Img>. Instead, use a <div> with solid background color or gradient\n- 'video' → DO NOT USE <Video>. Instead, use animated <div> elements\n- 'shape' → Use appropriate shape elements (div with border-radius for circles/rounded rectangles, SVG for complex shapes)\n- 'container' → Use a positioned <div> that may contain child elements\n\n#### INITIAL LAYOUT TRANSLATION:\nAll initialLayout properties MUST be translated to React inline styles:\n- 'x', 'y' → style={{ position: 'absolute', left: x, top: y }}\n- 'width', 'height' → style={{ width, height }}\n- 'opacity' → style={{ opacity }}\n- 'rotation' → style={{ transform: `rotate(${rotation}deg)` }}\n- 'scale' → style={{ transform: `scale(${scale})` }}\n- 'zIndex' → style={{ zIndex }}\n- Multiple transforms should be combined: transform: `rotate(${rotation}deg) scale(${scale})`\n\n#### ANIMATION IMPLEMENTATION:\nFor each animation, use this approach:\n1. Calculate the active animation frames based on delayInFrames and durationInFrames:\n   const animStartFrame = animation.delayInFrames || 0;\n   const animEndFrame = animStartFrame + (animation.durationInFrames || 30);\n2. Apply the appropriate Remotion animation function:\n   - For 'spring' animations or when remotionFunctionHint is 'spring':\n     const animatedValue = spring({\n       frame: frame - animStartFrame,\n       fps,\n       from: property.from,\n       to: property.to,\n       config: property.springConfig || { damping: 10, mass: 1, stiffness: 100 }\n     });\n   - For most other animations, use interpolate:\n     const animatedValue = interpolate(\n       frame,\n       [animStartFrame, animEndFrame],\n       [property.from, property.to],\n       {\n         extrapolateLeft: 'clamp',\n         extrapolateRight: 'clamp',\n         easing: determineEasing(animation.easing)\n       }\n     );\n3. Apply animated values to style properties:\n   - For transform properties (e.g., 'transform.translateX', 'transform.scale'):\n     Extract the specific transform type and apply with appropriate units.\n   - For standard CSS properties (e.g., 'opacity'):\n     Apply directly to the style object.\n   - Example: style={{ opacity: animatedOpacity, transform: `translateX(${animatedX}px) scale(${animatedScale})` }}\n4. For sequence-based timing (startAfter, startWith):\n   - Wrap elements in <Sequence> components with appropriate 'from' and 'durationInFrames' props\n   - Use 'from' attribute based on animation.delayInFrames\n   - Example: <Sequence from={30} durationInFrames={60}>...</Sequence>\n\n### SPECIFIC ELEMENTS TO IMPLEMENT:\n\n#### ELEMENT 1: c2694de6-f0ab-47f8-9998-5c3a9f8fbfb8 (shape)\n- Initial Layout (CSS equivalent):\n  * x: 960px\n  * y: 540px\n  * width: 200px\n  * height: 200px\n  * opacity: 0\n  * rotation: 0deg\n  * scale: 1\n  * backgroundColor: #007BFF\n- React style equivalent: style={{ position: 'absolute', left: 960px, top: 540px, width: 200px, height: 200px, opacity: 0, transform: 'rotate(0deg) scale(1)', backgroundColor: '#007BFF' }}\n\n- Animations for c2694de6-f0ab-47f8-9998-5c3a9f8fbfb8:\n  * Animation 1: fadeIn\n    - Start frame: 0\n    - Duration: 15 frames\n    - End frame: 15\n    - Easing: easeOutCubic → Implement as: Easing.easeOutCubic\n    - Properties to animate:\n      • opacity: from 0 to 1\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 15], \n          [0, 1], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }\n        );`\n  * Animation 2: customProperty\n    - Start frame: 0\n    - Duration: 90 frames\n    - End frame: 90\n    - Easing: easeInOutCubic → Implement as: Easing.easeInOutCubic\n    - Properties to animate:\n      • scale: from 1 to 2\n        Implementation: `const scaleValue = interpolate(\n          frame, \n          [0, 90], \n          [1, 2], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInOutCubic }\n        );`\n  * Animation 3: fadeOut\n    - Start frame: 0\n    - Duration: 10 frames\n    - End frame: 10\n    - Easing: easeInCubic → Implement as: Easing.easeInCubic\n    - Properties to animate:\n      • opacity: from 1 to 0\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 10], \n          [1, 0], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInCubic }\n        );`\n\n#### ELEMENT 2: 27157be3-be13-44d8-acb8-3d1cd867b588 (text)\n- Content: Doubling the Radius\n- Initial Layout (CSS equivalent):\n  * x: 960px\n  * y: 100px\n  * width: 600px\n  * height: 60px\n  * opacity: 0\n  * rotation: 0deg\n  * scale: 1\n- React style equivalent: style={{ position: 'absolute', left: 960px, top: 100px, width: 600px, height: 60px, opacity: 0, transform: 'rotate(0deg) scale(1)' }}\n\n- Animations for 27157be3-be13-44d8-acb8-3d1cd867b588:\n  * Animation 1: fadeIn\n    - Start frame: 0\n    - Duration: 15 frames\n    - End frame: 15\n    - Easing: easeOutCubic → Implement as: Easing.easeOutCubic\n    - Properties to animate:\n      • opacity: from 0 to 1\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 15], \n          [0, 1], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }\n        );`\n  * Animation 2: fadeOut\n    - Start frame: 0\n    - Duration: 15 frames\n    - End frame: 15\n    - Easing: easeInCubic → Implement as: Easing.easeInCubic\n    - Properties to animate:\n      • opacity: from 1 to 0\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 15], \n          [1, 0], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInCubic }\n        );`\n\n### SEQUENCE ORCHESTRATION & TIMING GUIDELINES:\nWhen implementing multiple animations, carefully orchestrate them to match the design intent:\n1. Use <Sequence> components for elements or animations that should start at specific frames.\n   Example: <Sequence from={30} durationInFrames={60}><YourAnimatedElement /></Sequence>\n2. For animation dependencies between elements (animations that must follow others):\n   - Create a timing map that respects trigger values like 'afterPrevious' by calculating startFrames.\n   - Example: const titleExitFrame = titleStartFrame + titleDuration;\n             const subTitleStartFrame = titleExitFrame; // Starting after title exits\n\n### CODE QUALITY & PERFORMANCE GUIDELINES:\n1. MODULARITY: For complex elements, consider creating sub-components.\n2. PERFORMANCE: Minimize DOM nodes - prefer CSS transforms over creating new elements.\n3. MEMOIZATION: Use React.useMemo() for computationally expensive calculations.\n4. TYPING: Provide proper TypeScript types throughout, including for style objects.\n5. COMMENTS: Add brief comments for complex animation logic or calculations.\n6. ORGANIZATION: Group related animations and separate distinct animation phases.\n7. ERROR HANDLING: Include defensive checks for potentially undefined values.\n\n### CRITICAL REMINDER:\n- PRECISELY follow the AnimationDesignBrief's specifications.\n- RESPECT the timing, durations, and easing specified in the brief.\n- IMPLEMENT ALL elements and animations exactly as detailed above.\n- START with the boilerplate structure provided earlier.\n- REMEMBER the first line MUST be: // src/remotion/components/scenes/BlueCircleScalesScene.tsx","sceneId":"eae594c8-2b73-4d1a-842b-c1c3562137c6","userData":{"userId":"92256ac9-495a-4ba2-aecc-fa4ce6756baa"},"projectId":"aadc79a4-f7bb-4c61-ac15-d8e0ea80662b","componentName":"BlueCircleScalesScene","durationInFrames":120,"animationDesignBriefId":"4a8199fc-841f-49fc-8945-17d98334a180"},"statusMessageId":"80d80d09-1df3-41cd-b0b5-d96ada6bcd23"},{"id":"e1311ef0-2040-4c62-b828-830316afd5f2","projectId":"aadc79a4-f7bb-4c61-ac15-d8e0ea80662b","effect":"BlueCircleCenteredScene","tsxCode":"\"use client\";\n\n// src/remotion/components/scenes/BlueCircleCenteredScene.tsx\nimport React from 'react';\nimport {\n\tAbsoluteFill,\n\tuseCurrentFrame,\n\tuseVideoConfig,\n\tinterpolate,\n\tSequence,\n\tEasing,\n} from 'remotion';\nimport { AnimationDesignBrief } from '~/lib/schemas/animationDesignBrief.schema';\n\n/**\n * BlueCircleCenteredScene\n * Renders a centered blue circle that fades in and out over a 90-frame sequence.\n */\nexport const BlueCircleCenteredScene: React.FC<{ brief: AnimationDesignBrief }> = ({ brief }) => {\n\t// Current frame and video configuration\n\tconst frame = useCurrentFrame();\n\tconst { fps, width, height, durationInFrames } = useVideoConfig();\n\n\t// Extract background color or default to white\n\tconst backgroundColor = brief.colorPalette?.background || '#FFFFFF';\n\n\t// Fade-in animation: 0 → 1 opacity over frames 0–30 with easeOutCubic\n\tconst fadeInOpacity = interpolate(\n\t\tframe,\n\t\t[0, 30],\n\t\t[0, 1],\n\t\t{\n\t\t\textrapolateLeft: 'clamp',\n\t\t\textrapolateRight: 'clamp',\n\t\t\teasing: Easing.easeOutCubic,\n\t\t}\n\t);\n\n\t// Fade-out animation: 1 → 0 opacity over frames 60–90 with easeInCubic\n\tconst fadeOutOpacity = interpolate(\n\t\tframe,\n\t\t[60, 90],\n\t\t[1, 0],\n\t\t{\n\t\t\textrapolateLeft: 'clamp',\n\t\t\textrapolateRight: 'clamp',\n\t\t\teasing: Easing.easeInCubic,\n\t\t}\n\t);\n\n\t// Determine final opacity: fade in, hold, then fade out\n\tlet opacityValue: number;\n\tif (frame < 30) {\n\t\topacityValue = fadeInOpacity;\n\t} else if (frame >= 60) {\n\t\topacityValue = fadeOutOpacity;\n\t} else {\n\t\topacityValue = 1;\n\t}\n\n\t// Circle dimensions\n\tconst circleSize = 400;\n\tconst circleX = width / 2 - circleSize / 2;\n\tconst circleY = height / 2 - circleSize / 2;\n\n\treturn (\n\t\t<AbsoluteFill style={{ backgroundColor }}>\n\t\t\t{/* Sequence wraps the circle over the full duration */}\n\t\t\t<Sequence from={0} durationInFrames={durationInFrames}>\n\t\t\t\t<div\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\tposition: 'absolute',\n\t\t\t\t\t\tleft: circleX,\n\t\t\t\t\t\ttop: circleY,\n\t\t\t\t\t\twidth: circleSize,\n\t\t\t\t\t\theight: circleSize,\n\t\t\t\t\t\tborderRadius: '50%',\n\t\t\t\t\t\tbackgroundColor: '#3498db', // Primary color\n\t\t\t\t\t\topacity: opacityValue,\n\t\t\t\t\t\ttransform: 'scale(1)',\n\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t\t</Sequence>\n\t\t</AbsoluteFill>\n\t);\n};","status":"complete","outputUrl":"https://pub-80969e2c6b73496db98ed52f98a48681.r2.dev/custom-components/e1311ef0-2040-4c62-b828-830316afd5f2.js","errorMessage":null,"retryCount":0,"createdAt":"2025-05-10 15:44:03.619892+00","updatedAt":"2025-05-10 15:44:27.587+00","metadata":{"fps":30,"width":1920,"height":1080,"prompt":"### ROLE: You are an Expert Remotion Developer and Senior React Engineer.\n### TASK: Create a production-quality Remotion React functional component in TypeScript.\n### COMPONENT NAME: 'BlueCircleCenteredScene'\n### OBJECTIVE: Generate a component that precisely implements the provided AnimationDesignBrief with professional animations and visual effects.\n### VIDEO CONFIG: Target video is 1920x1080px, 90 frames total duration, at 30 FPS.\n### MANDATORY REQUIREMENTS:\n- The FIRST line MUST be: // src/remotion/components/scenes/BlueCircleCenteredScene.tsx\n- The component MUST be a functional component using TypeScript (.tsx).\n- ALWAYS use the Remotion hooks: useCurrentFrame() and useVideoConfig() for timing and dimensions.\n- Component MUST accept props: { brief: AnimationDesignBrief } (assume this type is imported).\n- Utilize appropriate Remotion animation functions based on each element's needs:\n  * interpolate() - For smooth linear or eased transitions between values\n  * spring() - For physics-based, bouncy animations\n  * Easing module - For specifying animation curves (easeInOut, bezier, etc.)\n- Use Remotion timing components when needed:\n  * <Sequence from={startFrame} durationInFrames={duration}> - For sequential animations\n  * <Series> - For orchestrating complex animation sequences\n  * <Loop> - For repeating animations\n- Apply absolute positioning based on initialLayout coordinates.\n\n### BOILERPLATE STRUCTURE (Follow this pattern):\n```typescript\n// src/remotion/components/scenes/BlueCircleCenteredScene.tsx\nimport { AbsoluteFill, useCurrentFrame, useVideoConfig, interpolate, spring, Sequence, Easing, Img, Audio } from 'remotion';\nimport React from 'react';\n// import { AnimationDesignBrief } from '~/lib/schemas/animationDesignBrief.schema';\n\nexport const BlueCircleCenteredScene: React.FC<{ brief: AnimationDesignBrief }> = ({ brief }) => {\n  const frame = useCurrentFrame();\n  const { fps, width, height, durationInFrames } = useVideoConfig();\n\n  // Extract key brief properties\n  const { elements, colorPalette, typography, overallStyle } = brief;\n\n  // Define background color from brief\n  const backgroundColor = colorPalette?.background || 'transparent';\n\n  return (\n    <AbsoluteFill style={{ backgroundColor }}>\n      {/* Render each element with its animations */}\n    </AbsoluteFill>\n  );\n};\n```\n\n--- Scene Overview ---\nScene Name: BlueCircleCenteredScene\nPurpose: Blue circle centered on the canvas fades in from 0% to 100% opacity\nOverall Style: Minimalistic Flat Design\n\n--- Color Palette ---\n- Primary Color: #3498db\n- Secondary Color: #2c3e50\n- Accent Color: #e74c3c\n- Background Color: #FFFFFF\n- Text Primary Color: #333333\n- Text Secondary Color: #7f8c8d\n\n--- Typography ---\n- Default Font Family: Arial\n\n### ELEMENT-BY-ELEMENT IMPLEMENTATION GUIDE:\nEach element from the AnimationDesignBrief must be translated into React/Remotion code following these guidelines:\n\n### IMPORTANT RESTRICTION - NO EXTERNAL ASSETS:\n- DO NOT reference or try to load any external images, videos, or other media files\n- DO NOT use the <Img> component from Remotion to load any image files\n- If the AnimationDesignBrief mentions image elements, implement them as:\n  * Colored rectangles or circles using <div> with backgroundColor and borderRadius\n  * SVG graphics created programmatically (rectangles, circles, paths)\n  * CSS gradients for more visual interest\n- Focus ONLY on animations, shapes, text elements, and colors\n- This temporary restriction ensures component reliability while asset management is being developed\n\n#### ELEMENT TYPE TRANSLATION:\n- 'text' → Use a <div> or <h1>-<h6> with appropriate styling\n- 'image' → DO NOT USE <Img>. Instead, use a <div> with solid background color or gradient\n- 'video' → DO NOT USE <Video>. Instead, use animated <div> elements\n- 'shape' → Use appropriate shape elements (div with border-radius for circles/rounded rectangles, SVG for complex shapes)\n- 'container' → Use a positioned <div> that may contain child elements\n\n#### INITIAL LAYOUT TRANSLATION:\nAll initialLayout properties MUST be translated to React inline styles:\n- 'x', 'y' → style={{ position: 'absolute', left: x, top: y }}\n- 'width', 'height' → style={{ width, height }}\n- 'opacity' → style={{ opacity }}\n- 'rotation' → style={{ transform: `rotate(${rotation}deg)` }}\n- 'scale' → style={{ transform: `scale(${scale})` }}\n- 'zIndex' → style={{ zIndex }}\n- Multiple transforms should be combined: transform: `rotate(${rotation}deg) scale(${scale})`\n\n#### ANIMATION IMPLEMENTATION:\nFor each animation, use this approach:\n1. Calculate the active animation frames based on delayInFrames and durationInFrames:\n   const animStartFrame = animation.delayInFrames || 0;\n   const animEndFrame = animStartFrame + (animation.durationInFrames || 30);\n2. Apply the appropriate Remotion animation function:\n   - For 'spring' animations or when remotionFunctionHint is 'spring':\n     const animatedValue = spring({\n       frame: frame - animStartFrame,\n       fps,\n       from: property.from,\n       to: property.to,\n       config: property.springConfig || { damping: 10, mass: 1, stiffness: 100 }\n     });\n   - For most other animations, use interpolate:\n     const animatedValue = interpolate(\n       frame,\n       [animStartFrame, animEndFrame],\n       [property.from, property.to],\n       {\n         extrapolateLeft: 'clamp',\n         extrapolateRight: 'clamp',\n         easing: determineEasing(animation.easing)\n       }\n     );\n3. Apply animated values to style properties:\n   - For transform properties (e.g., 'transform.translateX', 'transform.scale'):\n     Extract the specific transform type and apply with appropriate units.\n   - For standard CSS properties (e.g., 'opacity'):\n     Apply directly to the style object.\n   - Example: style={{ opacity: animatedOpacity, transform: `translateX(${animatedX}px) scale(${animatedScale})` }}\n4. For sequence-based timing (startAfter, startWith):\n   - Wrap elements in <Sequence> components with appropriate 'from' and 'durationInFrames' props\n   - Use 'from' attribute based on animation.delayInFrames\n   - Example: <Sequence from={30} durationInFrames={60}>...</Sequence>\n\n### SPECIFIC ELEMENTS TO IMPLEMENT:\n\n#### ELEMENT 1: e8a65432-1abc-4def-9876-fedcba987654 (shape)\n- Initial Layout (CSS equivalent):\n  * x: 960px\n  * y: 540px\n  * width: 400px\n  * height: 400px\n  * opacity: 0\n  * rotation: 0deg\n  * scale: 1\n  * backgroundColor: #3498db\n- React style equivalent: style={{ position: 'absolute', left: 960px, top: 540px, width: 400px, height: 400px, opacity: 0, transform: 'rotate(0deg) scale(1)', backgroundColor: '#3498db' }}\n\n- Animations for e8a65432-1abc-4def-9876-fedcba987654:\n  * Animation 1: fadeIn\n    - Start frame: 0\n    - Duration: 30 frames\n    - End frame: 30\n    - Easing: easeOutCubic → Implement as: Easing.easeOutCubic\n    - Properties to animate:\n      • opacity: from 0 to 1\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 30], \n          [0, 1], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }\n        );`\n  * Animation 2: fadeOut\n    - Start frame: 0\n    - Duration: 30 frames\n    - End frame: 30\n    - Easing: easeInCubic → Implement as: Easing.easeInCubic\n    - Properties to animate:\n      • opacity: from 1 to 0\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 30], \n          [1, 0], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInCubic }\n        );`\n\n### SEQUENCE ORCHESTRATION & TIMING GUIDELINES:\nWhen implementing multiple animations, carefully orchestrate them to match the design intent:\n1. Use <Sequence> components for elements or animations that should start at specific frames.\n   Example: <Sequence from={30} durationInFrames={60}><YourAnimatedElement /></Sequence>\n2. For animation dependencies between elements (animations that must follow others):\n   - Create a timing map that respects trigger values like 'afterPrevious' by calculating startFrames.\n   - Example: const titleExitFrame = titleStartFrame + titleDuration;\n             const subTitleStartFrame = titleExitFrame; // Starting after title exits\n\n### CODE QUALITY & PERFORMANCE GUIDELINES:\n1. MODULARITY: For complex elements, consider creating sub-components.\n2. PERFORMANCE: Minimize DOM nodes - prefer CSS transforms over creating new elements.\n3. MEMOIZATION: Use React.useMemo() for computationally expensive calculations.\n4. TYPING: Provide proper TypeScript types throughout, including for style objects.\n5. COMMENTS: Add brief comments for complex animation logic or calculations.\n6. ORGANIZATION: Group related animations and separate distinct animation phases.\n7. ERROR HANDLING: Include defensive checks for potentially undefined values.\n\n### CRITICAL REMINDER:\n- PRECISELY follow the AnimationDesignBrief's specifications.\n- RESPECT the timing, durations, and easing specified in the brief.\n- IMPLEMENT ALL elements and animations exactly as detailed above.\n- START with the boilerplate structure provided earlier.\n- REMEMBER the first line MUST be: // src/remotion/components/scenes/BlueCircleCenteredScene.tsx","sceneId":"1c1da30e-1cd9-4fa8-aefd-efbcc0de337c","userData":{"userId":"92256ac9-495a-4ba2-aecc-fa4ce6756baa"},"projectId":"aadc79a4-f7bb-4c61-ac15-d8e0ea80662b","componentName":"BlueCircleCenteredScene","durationInFrames":90,"animationDesignBriefId":"3cead9a8-9e68-40c7-be63-fd202e3c9f76"},"statusMessageId":"80d80d09-1df3-41cd-b0b5-d96ada6bcd23"}]