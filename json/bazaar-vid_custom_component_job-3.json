[{"id":"12559deb-5500-4fd6-b489-ef3d3dc41584","projectId":"c3ec02e0-5bfd-484a-953b-b35ed645623f","effect":"SwipeupCalltoactionAnimatedScene","tsxCode":"\"use client\";\n\n// src/remotion/components/scenes/SwipeupCalltoactionAnimatedScene.tsx\nimport React from 'react';\nimport {\n\tAbsoluteFill,\n\tuseCurrentFrame,\n\tuseVideoConfig,\n\tinterpolate,\n\tSequence,\n\tEasing,\n\tImg,\n\tAudio,\n} from 'remotion';\n// import { AnimationDesignBrief } from '~/lib/schemas/animationDesignBrief.schema';\n\nexport const SwipeupCalltoactionAnimatedScene: React.FC<{ brief: AnimationDesignBrief }> = ({ brief }) => {\n\tconst frame = useCurrentFrame();\n\tconst { fps, width, height, durationInFrames } = useVideoConfig();\n\n\t// Background fade-in\n\tconst bgOpacity = interpolate(\n\t\tframe,\n\t\t[0, 15],\n\t\t[0, 1],\n\t\t{ extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }\n\t);\n\n\t// Chef whisk image animations\n\tconst chefFadeIn = interpolate(\n\t\tframe,\n\t\t[0, 15],\n\t\t[0, 1],\n\t\t{ extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }\n\t);\n\tconst rotate1 = interpolate(\n\t\tframe,\n\t\t[0, 10],\n\t\t[0, 20],\n\t\t{ extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInOutSine }\n\t);\n\tconst rotate2 = interpolate(\n\t\tframe,\n\t\t[10, 20],\n\t\t[20, -20],\n\t\t{ extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInOutSine }\n\t);\n\tconst rotate3 = interpolate(\n\t\tframe,\n\t\t[20, 30],\n\t\t[-20, 0],\n\t\t{ extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInOutSine }\n\t);\n\tconst chefRotation = frame <= 10 ? rotate1 : frame <= 20 ? rotate2 : rotate3;\n\n\t// Text animations\n\tconst textFadeIn = interpolate(\n\t\tframe,\n\t\t[0, 20],\n\t\t[0, 1],\n\t\t{ extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }\n\t);\n\tconst textScaleUp = interpolate(\n\t\tframe,\n\t\t[0, 20],\n\t\t[0.8, 1.05],\n\t\t{ extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutBack }\n\t);\n\tconst textScaleDown = interpolate(\n\t\tframe,\n\t\t[20, 30],\n\t\t[1.05, 1],\n\t\t{ extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutBounce }\n\t);\n\tconst textScale = frame <= 20 ? textScaleUp : textScaleDown;\n\n\t// Swipe-up indicator (orange shape) animations\n\tconst shapeFadeIn = interpolate(\n\t\tframe,\n\t\t[0, 15],\n\t\t[0, 1],\n\t\t{ extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }\n\t);\n\tconst shapeY = interpolate(\n\t\tframe,\n\t\t[0, 15],\n\t\t[950, 920],\n\t\t{ extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }\n\t);\n\tconst shapePulseScale = interpolate(\n\t\tframe,\n\t\t[0, 20],\n\t\t[1, 1.2],\n\t\t{ extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInOutCubic }\n\t);\n\tconst shapePulseOpacity = interpolate(\n\t\tframe,\n\t\t[0, 20],\n\t\t[1, 0.8],\n\t\t{ extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInOutCubic }\n\t);\n\n\treturn (\n\t\t<AbsoluteFill style={{ backgroundColor: '#FFF5E1', opacity: bgOpacity }}>\n\t\t\t{/* Chef whisk flourish */}\n\t\t\t<Img\n\t\t\t\tsrc={brief.elements.find((e) => e.id === 'eec3e1ed-b4b0-486f-a0ea-fb01d4b39f77')?.content || 'assets/chef-whisk.png'}\n\t\t\t\tstyle={{\n\t\t\t\t\tposition: 'absolute',\n\t\t\t\t\tleft: 760,\n\t\t\t\t\ttop: 240,\n\t\t\t\t\twidth: 400,\n\t\t\t\t\theight: 400,\n\t\t\t\t\topacity: chefFadeIn,\n\t\t\t\t\ttransform: `rotate(${chefRotation}deg) scale(1)`,\n\t\t\t\t}}\n\t\t\t/> \n\n\t\t\t{/* Call-to-action text */}\n\t\t\t<div\n\t\t\t\tstyle={{\n\t\t\t\t\tposition: 'absolute',\n\t\t\t\t\tleft: 960,\n\t\t\t\t\ttop: 800,\n\t\t\t\t\twidth: 800,\n\t\t\t\t\theight: 100,\n\t\t\t\t\topacity: textFadeIn,\n\t\t\t\t\ttransform: `rotate(0deg) scale(${textScale})`,\n\t\t\t\t\tcolor: '#212121',\n\t\t\t\t\tfontFamily: 'Lato, sans-serif',\n\t\t\t\t\tfontWeight: 700,\n\t\t\t\t\tfontSize: 72,\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\tTry FoodieFlash Free!\n\t\t\t</div>\n\n\t\t\t{/* Swipe-up indicator */}\n\t\t\t<div\n\t\t\t\tstyle={{\n\t\t\t\t\tposition: 'absolute',\n\t\t\t\t\tleft: 960,\n\t\t\t\t\ttop: shapeY,\n\t\t\t\t\twidth: 40,\n\t\t\t\t\theight: 60,\n\t\t\t\t\topacity: shapeFadeIn * shapePulseOpacity,\n\t\t\t\t\ttransform: `rotate(0deg) scale(${shapePulseScale})`,\n\t\t\t\t\tbackgroundColor: '#FF6F00',\n\t\t\t\t\tborderRadius: 4,\n\t\t\t\t}}\n\t\t\t/>\n\n\t\t\t{/* Whoosh audio */}\n\t\t\t<Sequence from={15} durationInFrames={durationInFrames - 15}>\n\t\t\t\t<Audio src={brief.assets?.whoosh || 'assets/whoosh.mp3'} volume={0.8} />\n\t\t\t</Sequence>\n\t\t</AbsoluteFill>\n\t);\n};","status":"building","outputUrl":null,"errorMessage":"TSX code is missing for this job","retryCount":1,"createdAt":"2025-05-10 04:39:43.19987+00","updatedAt":"2025-05-10 04:40:18.692+00","metadata":{"fps":30,"width":1920,"height":1080,"prompt":"### ROLE: You are an Expert Remotion Developer and Senior React Engineer.\n### TASK: Create a production-quality Remotion React functional component in TypeScript.\n### COMPONENT NAME: 'SwipeupCalltoactionAnimatedScene'\n### OBJECTIVE: Generate a component that precisely implements the provided AnimationDesignBrief with professional animations and visual effects.\n### VIDEO CONFIG: Target video is 1920x1080px, 90 frames total duration, at 30 FPS.\n### MANDATORY REQUIREMENTS:\n- The FIRST line MUST be: // src/remotion/components/scenes/SwipeupCalltoactionAnimatedScene.tsx\n- The component MUST be a functional component using TypeScript (.tsx).\n- ALWAYS use the Remotion hooks: useCurrentFrame() and useVideoConfig() for timing and dimensions.\n- Component MUST accept props: { brief: AnimationDesignBrief } (assume this type is imported).\n- Utilize appropriate Remotion animation functions based on each element's needs:\n  * interpolate() - For smooth linear or eased transitions between values\n  * spring() - For physics-based, bouncy animations\n  * Easing module - For specifying animation curves (easeInOut, bezier, etc.)\n- Use Remotion timing components when needed:\n  * <Sequence from={startFrame} durationInFrames={duration}> - For sequential animations\n  * <Series> - For orchestrating complex animation sequences\n  * <Loop> - For repeating animations\n- Apply absolute positioning based on initialLayout coordinates.\n\n### BOILERPLATE STRUCTURE (Follow this pattern):\n```typescript\n// src/remotion/components/scenes/SwipeupCalltoactionAnimatedScene.tsx\nimport { AbsoluteFill, useCurrentFrame, useVideoConfig, interpolate, spring, Sequence, Easing, Img, Audio } from 'remotion';\nimport React from 'react';\n// import { AnimationDesignBrief } from '~/lib/schemas/animationDesignBrief.schema';\n\nexport const SwipeupCalltoactionAnimatedScene: React.FC<{ brief: AnimationDesignBrief }> = ({ brief }) => {\n  const frame = useCurrentFrame();\n  const { fps, width, height, durationInFrames } = useVideoConfig();\n\n  // Extract key brief properties\n  const { elements, colorPalette, typography, overallStyle } = brief;\n\n  // Define background color from brief\n  const backgroundColor = colorPalette?.background || 'transparent';\n\n  return (\n    <AbsoluteFill style={{ backgroundColor }}>\n      {/* Render each element with its animations */}\n    </AbsoluteFill>\n  );\n};\n```\n\n--- Scene Overview ---\nScene Name: SwipeupCalltoactionAnimatedScene\nPurpose: Swipe-up call-to-action animated like a chef’s flourish with text 'Try FoodieFlash Free!' and an upward swipe gesture indicator.\nOverall Style: Playful culinary flourish\n\n--- Color Palette ---\n- Primary Color: #FF6F00\n- Secondary Color: #D84315\n- Accent Color: #795548\n- Background Color: #FFF5E1\n- Text Primary Color: #212121\n- Text Secondary Color: #757575\n\n--- Typography ---\n- Default Font Family: Lato, sans-serif\n- Heading1 Style:\n  - Font Family: Lato Bold\n  - Font Size: 72\n\n### ELEMENT-BY-ELEMENT IMPLEMENTATION GUIDE:\nEach element from the AnimationDesignBrief must be translated into React/Remotion code following these guidelines:\n\n#### ELEMENT TYPE TRANSLATION:\n- 'text' → Use a <div> or <h1>-<h6> with appropriate styling\n- 'image' → Use Remotion's <Img src={content} /> component\n- 'video' → Use Remotion's <Video src={content} /> component\n- 'shape' → Use appropriate shape elements (div with border-radius for circles/rounded rectangles, SVG for complex shapes)\n- 'container' → Use a positioned <div> that may contain child elements\n\n#### INITIAL LAYOUT TRANSLATION:\nAll initialLayout properties MUST be translated to React inline styles:\n- 'x', 'y' → style={{ position: 'absolute', left: x, top: y }}\n- 'width', 'height' → style={{ width, height }}\n- 'opacity' → style={{ opacity }}\n- 'rotation' → style={{ transform: `rotate(${rotation}deg)` }}\n- 'scale' → style={{ transform: `scale(${scale})` }}\n- 'zIndex' → style={{ zIndex }}\n- Multiple transforms should be combined: transform: `rotate(${rotation}deg) scale(${scale})`\n\n#### ANIMATION IMPLEMENTATION:\nFor each animation, use this approach:\n1. Calculate the active animation frames based on delayInFrames and durationInFrames:\n   const animStartFrame = animation.delayInFrames || 0;\n   const animEndFrame = animStartFrame + (animation.durationInFrames || 30);\n2. Apply the appropriate Remotion animation function:\n   - For 'spring' animations or when remotionFunctionHint is 'spring':\n     const animatedValue = spring({\n       frame: frame - animStartFrame,\n       fps,\n       from: property.from,\n       to: property.to,\n       config: property.springConfig || { damping: 10, mass: 1, stiffness: 100 }\n     });\n   - For most other animations, use interpolate:\n     const animatedValue = interpolate(\n       frame,\n       [animStartFrame, animEndFrame],\n       [property.from, property.to],\n       {\n         extrapolateLeft: 'clamp',\n         extrapolateRight: 'clamp',\n         easing: determineEasing(animation.easing)\n       }\n     );\n3. Apply animated values to style properties:\n   - For transform properties (e.g., 'transform.translateX', 'transform.scale'):\n     Extract the specific transform type and apply with appropriate units.\n   - For standard CSS properties (e.g., 'opacity'):\n     Apply directly to the style object.\n   - Example: style={{ opacity: animatedOpacity, transform: `translateX(${animatedX}px) scale(${animatedScale})` }}\n4. For sequence-based timing (startAfter, startWith):\n   - Wrap elements in <Sequence> components with appropriate 'from' and 'durationInFrames' props\n   - Use 'from' attribute based on animation.delayInFrames\n   - Example: <Sequence from={30} durationInFrames={60}>...</Sequence>\n\n### SPECIFIC ELEMENTS TO IMPLEMENT:\n\n#### ELEMENT 1: 0a603eb9-3ced-47aa-889f-d23cbb65d96d (shape)\n- Initial Layout (CSS equivalent):\n  * x: 0px\n  * y: 0px\n  * width: 1920px\n  * height: 1080px\n  * opacity: 1\n  * rotation: 0deg\n  * scale: 1\n  * backgroundColor: #FFF5E1\n- React style equivalent: style={{ position: 'absolute', left: 0px, top: 0px, width: 1920px, height: 1080px, opacity: 1, transform: 'rotate(0deg) scale(1)', backgroundColor: '#FFF5E1' }}\n\n- Animations for 0a603eb9-3ced-47aa-889f-d23cbb65d96d:\n  * Animation 1: fadeIn\n    - Start frame: 0\n    - Duration: 15 frames\n    - End frame: 15\n    - Easing: easeOutCubic → Implement as: Easing.easeOutCubic\n    - Properties to animate:\n      • opacity: from 0 to 1\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 15], \n          [0, 1], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }\n        );`\n\n#### ELEMENT 2: eec3e1ed-b4b0-486f-a0ea-fb01d4b39f77 (image)\n- Content: assets/chef-whisk.png\n- Initial Layout (CSS equivalent):\n  * x: 760px\n  * y: 240px\n  * width: 400px\n  * height: 400px\n  * opacity: 0\n  * rotation: 0deg\n  * scale: 1\n- React style equivalent: style={{ position: 'absolute', left: 760px, top: 240px, width: 400px, height: 400px, opacity: 0, transform: 'rotate(0deg) scale(1)' }}\n\n- Animations for eec3e1ed-b4b0-486f-a0ea-fb01d4b39f77:\n  * Animation 1: fadeIn\n    - Start frame: 0\n    - Duration: 15 frames\n    - End frame: 15\n    - Easing: easeOutCubic → Implement as: Easing.easeOutCubic\n    - Properties to animate:\n      • opacity: from 0 to 1\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 15], \n          [0, 1], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }\n        );`\n  * Animation 2: customProperty\n    - Start frame: 0\n    - Duration: 10 frames\n    - End frame: 10\n    - Easing: easeInOutSine → Implement as: Easing.easeInOutSine\n    - Properties to animate:\n      • rotation: from 0 to 20\n        Implementation: `const rotationValue = interpolate(\n          frame, \n          [0, 10], \n          [0, 20], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInOutSine }\n        );`\n  * Animation 3: customProperty\n    - Start frame: 0\n    - Duration: 20 frames\n    - End frame: 20\n    - Easing: easeInOutSine → Implement as: Easing.easeInOutSine\n    - Properties to animate:\n      • rotation: from 20 to -20\n        Implementation: `const rotationValue = interpolate(\n          frame, \n          [0, 20], \n          [20, -20], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInOutSine }\n        );`\n  * Animation 4: customProperty\n    - Start frame: 0\n    - Duration: 10 frames\n    - End frame: 10\n    - Easing: easeInOutSine → Implement as: Easing.easeInOutSine\n    - Properties to animate:\n      • rotation: from -20 to 0\n        Implementation: `const rotationValue = interpolate(\n          frame, \n          [0, 10], \n          [-20, 0], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInOutSine }\n        );`\n  * Animation 5: fadeOut\n    - Start frame: 0\n    - Duration: 15 frames\n    - End frame: 15\n    - Easing: easeInCubic → Implement as: Easing.easeInCubic\n    - Properties to animate:\n      • opacity: from 1 to 0\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 15], \n          [1, 0], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInCubic }\n        );`\n\n#### ELEMENT 3: 1c961cf7-50d2-4fd8-9d42-9b3ebfd7278b (text)\n- Content: Try FoodieFlash Free!\n- Initial Layout (CSS equivalent):\n  * x: 960px\n  * y: 800px\n  * width: 800px\n  * height: 100px\n  * opacity: 0\n  * rotation: 0deg\n  * scale: 0.8\n- React style equivalent: style={{ position: 'absolute', left: 960px, top: 800px, width: 800px, height: 100px, opacity: 0, transform: 'rotate(0deg) scale(0.8)' }}\n\n- Animations for 1c961cf7-50d2-4fd8-9d42-9b3ebfd7278b:\n  * Animation 1: fadeIn\n    - Start frame: 0\n    - Duration: 20 frames\n    - End frame: 20\n    - Easing: easeOutCubic → Implement as: Easing.easeOutCubic\n    - Properties to animate:\n      • opacity: from 0 to 1\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 20], \n          [0, 1], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }\n        );`\n  * Animation 2: customProperty\n    - Start frame: 0\n    - Duration: 20 frames\n    - End frame: 20\n    - Easing: easeOutBack → Implement as: Easing.easeOutBack\n    - Properties to animate:\n      • scale: from 0.8 to 1.05\n        Implementation: `const scaleValue = interpolate(\n          frame, \n          [0, 20], \n          [0.8, 1.05], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutBack }\n        );`\n  * Animation 3: customProperty\n    - Start frame: 0\n    - Duration: 10 frames\n    - End frame: 10\n    - Easing: easeOutBounce → Implement as: Easing.easeOutBounce\n    - Properties to animate:\n      • scale: from 1.05 to 1\n        Implementation: `const scaleValue = interpolate(\n          frame, \n          [0, 10], \n          [1.05, 1], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutBounce }\n        );`\n  * Animation 4: fadeOut\n    - Start frame: 0\n    - Duration: 10 frames\n    - End frame: 10\n    - Easing: easeInCubic → Implement as: Easing.easeInCubic\n    - Properties to animate:\n      • opacity: from 1 to 0\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 10], \n          [1, 0], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInCubic }\n        );`\n\n#### ELEMENT 4: ace868dc-e5f8-4163-84d2-cdb7ae060901 (shape)\n- Initial Layout (CSS equivalent):\n  * x: 960px\n  * y: 920px\n  * width: 40px\n  * height: 60px\n  * opacity: 0\n  * rotation: 0deg\n  * scale: 1\n  * backgroundColor: #FF6F00\n- React style equivalent: style={{ position: 'absolute', left: 960px, top: 920px, width: 40px, height: 60px, opacity: 0, transform: 'rotate(0deg) scale(1)', backgroundColor: '#FF6F00' }}\n\n- Animations for ace868dc-e5f8-4163-84d2-cdb7ae060901:\n  * Animation 1: fadeIn\n    - Start frame: 0\n    - Duration: 15 frames\n    - End frame: 15\n    - Easing: easeOutCubic → Implement as: Easing.easeOutCubic\n    - Properties to animate:\n      • opacity: from 0 to 1\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 15], \n          [0, 1], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }\n        );`\n  * Animation 2: customProperty\n    - Start frame: 0\n    - Duration: 15 frames\n    - End frame: 15\n    - Easing: easeOutCubic → Implement as: Easing.easeOutCubic\n    - Properties to animate:\n      • y: from 950 to 920\n        Implementation: `const yValue = interpolate(\n          frame, \n          [0, 15], \n          [950, 920], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }\n        );`\n  * Animation 3: pulse\n    - Start frame: 0\n    - Duration: 20 frames\n    - End frame: 20\n    - Easing: easeInOutCubic → Implement as: Easing.easeInOutCubic\n    - Properties to animate:\n      • scale: from 1 to 1.2\n        Implementation: `const scaleValue = interpolate(\n          frame, \n          [0, 20], \n          [1, 1.2], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInOutCubic }\n        );`\n      • opacity: from 1 to 0.8\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 20], \n          [1, 0.8], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInOutCubic }\n        );`\n  * Animation 4: fadeOut\n    - Start frame: 0\n    - Duration: 10 frames\n    - End frame: 10\n    - Easing: easeInCubic → Implement as: Easing.easeInCubic\n    - Properties to animate:\n      • opacity: from 0.8 to 0\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 10], \n          [0.8, 0], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInCubic }\n        );`\n\n### SEQUENCE ORCHESTRATION & TIMING GUIDELINES:\nWhen implementing multiple animations, carefully orchestrate them to match the design intent:\n1. Use <Sequence> components for elements or animations that should start at specific frames.\n   Example: <Sequence from={30} durationInFrames={60}><YourAnimatedElement /></Sequence>\n2. For animation dependencies between elements (animations that must follow others):\n   - Create a timing map that respects trigger values like 'afterPrevious' by calculating startFrames.\n   - Example: const titleExitFrame = titleStartFrame + titleDuration;\n             const subTitleStartFrame = titleExitFrame; // Starting after title exits\n\n### AUDIO IMPLEMENTATION:\nThis scene includes the following audio track(s) to implement:\n- Audio 1: audio-1\n  - Source: assets/whoosh.mp3\n  - Start at frame: 15\n  - Volume: 0.8\n  - Implementation: <Audio src={\"assets/whoosh.mp3\"} startFrom={15} volume={0.8} />\n\n### CODE QUALITY & PERFORMANCE GUIDELINES:\n1. MODULARITY: For complex elements, consider creating sub-components.\n2. PERFORMANCE: Minimize DOM nodes - prefer CSS transforms over creating new elements.\n3. MEMOIZATION: Use React.useMemo() for computationally expensive calculations.\n4. TYPING: Provide proper TypeScript types throughout, including for style objects.\n5. COMMENTS: Add brief comments for complex animation logic or calculations.\n6. ORGANIZATION: Group related animations and separate distinct animation phases.\n7. ERROR HANDLING: Include defensive checks for potentially undefined values.\n\n### CRITICAL REMINDER:\n- PRECISELY follow the AnimationDesignBrief's specifications.\n- RESPECT the timing, durations, and easing specified in the brief.\n- IMPLEMENT ALL elements and animations exactly as detailed above.\n- START with the boilerplate structure provided earlier.\n- REMEMBER the first line MUST be: // src/remotion/components/scenes/SwipeupCalltoactionAnimatedScene.tsx","sceneId":"a1df9e6c-c606-4611-9b85-f6ea4504af73","userData":{"userId":"92256ac9-495a-4ba2-aecc-fa4ce6756baa"},"projectId":"c3ec02e0-5bfd-484a-953b-b35ed645623f","componentName":"SwipeupCalltoactionAnimatedScene","durationInFrames":90,"animationDesignBriefId":"9cb9ba90-9d47-428a-84f4-3f73f01ce5cd"},"statusMessageId":"524a3b99-a6b5-4130-b043-541d80d5142c"},{"id":"ca16ab14-e057-4977-9ca7-1f1552cebaee","projectId":"c3ec02e0-5bfd-484a-953b-b35ed645623f","effect":"FeatureListBurstsScene","tsxCode":"\"use client\";\n\n// src/remotion/components/scenes/FeatureListBurstsScene.tsx\nimport React, { useMemo } from 'react';\nimport {\n  AbsoluteFill,\n  useCurrentFrame,\n  useVideoConfig,\n  interpolate,\n  spring,\n  Easing,\n  Img,\n} from 'remotion';\n// import { AnimationDesignBrief } from '~/lib/schemas/animationDesignBrief.schema';\n\nexport const FeatureListBurstsScene: React.FC<{ brief: AnimationDesignBrief }> = ({ brief }) => {\n  const frame = useCurrentFrame();\n  const { fps, width, height, durationInFrames } = useVideoConfig();\n\n  // Extract color palette\n  const backgroundColor = useMemo(\n    () => brief.colorPalette?.background || '#F8F8F8',\n    [brief.colorPalette]\n  );\n\n  // ---- Element 1: Full-screen background shape with fadeIn ----\n  const shapeOpacity = interpolate(\n    frame,\n    [0, 10],\n    [0, 1],\n    { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }\n  );\n\n  // ---- Elements 2-7 share similar animation patterns ----\n  // Utility to create icon burst animation\n  const createIconBurst = (\n    src: string,\n    x: number,\n    y: number\n  ): { opacity: number; scale: number } => {\n    // Spring in\n    const popScale = spring({\n      frame,\n      fps,\n      from: 0,\n      to: 1,\n      config: { damping: 10, stiffness: 100, mass: 1 },\n    });\n    const popOpacity = spring({\n      frame,\n      fps,\n      from: 0,\n      to: 1,\n      config: { damping: 10, stiffness: 100, mass: 1 },\n    });\n    // Pulse\n    const pulseScale = interpolate(\n      frame,\n      [0, 10],\n      [1.1, 1],\n      { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInOutQuad }\n    );\n    // Fade out\n    const fadeOutOp = interpolate(\n      frame,\n      [0, 20],\n      [1, 0],\n      { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInCubic }\n    );\n    const scale = frame < 10 ? pulseScale : popScale;\n    const opacity = popOpacity * fadeOutOp;\n    return { opacity, scale };\n  };\n\n  // Utility to create text burst animation\n  const createTextBurst = (\n    x0: number,\n    y0: number\n  ): { opacity: number; top: number } => {\n    const fadeInOp = interpolate(\n      frame,\n      [0, 20],\n      [0, 1],\n      { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }\n    );\n    const slideUpY = interpolate(\n      frame,\n      [0, 20],\n      [y0 + 20, y0],\n      { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }\n    );\n    const fadeOutOp = interpolate(\n      frame,\n      [0, 20],\n      [1, 0],\n      { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInCubic }\n    );\n    return { opacity: fadeInOp * fadeOutOp, top: slideUpY };\n  };\n\n  // Prepare bursts\n  const instantBurst = createIconBurst('instant_recipes_icon.png', 480, 300);\n  const scanBurst = createIconBurst('ingredient_scanner_icon.png', 960, 300);\n  const listBurst = createIconBurst('shopping_list_icon.png', 1440, 300);\n\n  const instantText = createTextBurst(480, 480);\n  const scanText = createTextBurst(960, 480);\n  const listText = createTextBurst(1440, 480);\n\n  return (\n    <AbsoluteFill style={{ backgroundColor, overflow: 'hidden' }}>\n      {/* Background shape */}\n      <div\n        style={{\n          position: 'absolute',\n          left: 0,\n          top: 0,\n          width: width,\n          height: height,\n          backgroundColor: backgroundColor,\n          opacity: shapeOpacity,\n          transform: 'rotate(0deg) scale(1)',\n          zIndex: 0,\n        }}\n      />\n\n      {/* Instant Recipes Icon */}\n      <Img\n        src=\"instant_recipes_icon.png\"\n        style={{\n          position: 'absolute',\n          left: 480,\n          top: 300,\n          width: 200,\n          height: 200,\n          opacity: instantBurst.opacity,\n          transform: `rotate(0deg) scale(${instantBurst.scale})`,\n          zIndex: 1,\n        }}\n      />\n      {/* Instant Recipes Text */}\n      <div\n        style={{\n          position: 'absolute',\n          left: 480,\n          top: instantText.top,\n          width: 300,\n          height: 50,\n          color: brief.colorPalette?.textPrimary || '#333333',\n          fontFamily: brief.typography?.fontFamily || 'Helvetica, Arial, sans-serif',\n          fontSize: 36,\n          fontWeight: 'bold',\n          opacity: instantText.opacity,\n          transform: 'rotate(0deg) scale(1)',\n          zIndex: 1,\n        }}\n      >\n        Instant Recipes\n      </div>\n\n      {/* Ingredient Scanner Icon */}\n      <Img\n        src=\"ingredient_scanner_icon.png\"\n        style={{\n          position: 'absolute',\n          left: 960,\n          top: 300,\n          width: 200,\n          height: 200,\n          opacity: scanBurst.opacity,\n          transform: `rotate(0deg) scale(${scanBurst.scale})`,\n          zIndex: 1,\n        }}\n      />\n      {/* Ingredient Scanner Text */}\n      <div\n        style={{\n          position: 'absolute',\n          left: 960,\n          top: scanText.top,\n          width: 300,\n          height: 50,\n          color: brief.colorPalette?.textPrimary || '#333333',\n          fontFamily: brief.typography?.fontFamily || 'Helvetica, Arial, sans-serif',\n          fontSize: 36,\n          fontWeight: 'bold',\n          opacity: scanText.opacity,\n          transform: 'rotate(0deg) scale(1)',\n          zIndex: 1,\n        }}\n      >\n        Ingredient Scanner\n      </div>\n\n      {/* Shopping List Icon */}\n      <Img\n        src=\"shopping_list_icon.png\"\n        style={{\n          position: 'absolute',\n          left: 1440,\n          top: 300,\n          width: 200,\n          height: 200,\n          opacity: listBurst.opacity,\n          transform: `rotate(0deg) scale(${listBurst.scale})`,\n          zIndex: 1,\n        }}\n      />\n      {/* Shopping List Text */}\n      <div\n        style={{\n          position: 'absolute',\n          left: 1440,\n          top: listText.top,\n          width: 300,\n          height: 50,\n          color: brief.colorPalette?.textPrimary || '#333333',\n          fontFamily: brief.typography?.fontFamily || 'Helvetica, Arial, sans-serif',\n          fontSize: 36,\n          fontWeight: 'bold',\n          opacity: listText.opacity,\n          transform: 'rotate(0deg) scale(1)',\n          zIndex: 1,\n        }}\n      >\n        Shopping List\n      </div>\n    </AbsoluteFill>\n  );\n};","status":"building","outputUrl":null,"errorMessage":"TSX code is missing for this job","retryCount":1,"createdAt":"2025-05-10 04:38:50.952193+00","updatedAt":"2025-05-10 04:39:30.215+00","metadata":{"fps":30,"width":1920,"height":1080,"prompt":"### ROLE: You are an Expert Remotion Developer and Senior React Engineer.\n### TASK: Create a production-quality Remotion React functional component in TypeScript.\n### COMPONENT NAME: 'FeatureListBurstsScene'\n### OBJECTIVE: Generate a component that precisely implements the provided AnimationDesignBrief with professional animations and visual effects.\n### VIDEO CONFIG: Target video is 1920x1080px, 150 frames total duration, at 30 FPS.\n### MANDATORY REQUIREMENTS:\n- The FIRST line MUST be: // src/remotion/components/scenes/FeatureListBurstsScene.tsx\n- The component MUST be a functional component using TypeScript (.tsx).\n- ALWAYS use the Remotion hooks: useCurrentFrame() and useVideoConfig() for timing and dimensions.\n- Component MUST accept props: { brief: AnimationDesignBrief } (assume this type is imported).\n- Utilize appropriate Remotion animation functions based on each element's needs:\n  * interpolate() - For smooth linear or eased transitions between values\n  * spring() - For physics-based, bouncy animations\n  * Easing module - For specifying animation curves (easeInOut, bezier, etc.)\n- Use Remotion timing components when needed:\n  * <Sequence from={startFrame} durationInFrames={duration}> - For sequential animations\n  * <Series> - For orchestrating complex animation sequences\n  * <Loop> - For repeating animations\n- Apply absolute positioning based on initialLayout coordinates.\n\n### BOILERPLATE STRUCTURE (Follow this pattern):\n```typescript\n// src/remotion/components/scenes/FeatureListBurstsScene.tsx\nimport { AbsoluteFill, useCurrentFrame, useVideoConfig, interpolate, spring, Sequence, Easing, Img, Audio } from 'remotion';\nimport React from 'react';\n// import { AnimationDesignBrief } from '~/lib/schemas/animationDesignBrief.schema';\n\nexport const FeatureListBurstsScene: React.FC<{ brief: AnimationDesignBrief }> = ({ brief }) => {\n  const frame = useCurrentFrame();\n  const { fps, width, height, durationInFrames } = useVideoConfig();\n\n  // Extract key brief properties\n  const { elements, colorPalette, typography, overallStyle } = brief;\n\n  // Define background color from brief\n  const backgroundColor = colorPalette?.background || 'transparent';\n\n  return (\n    <AbsoluteFill style={{ backgroundColor }}>\n      {/* Render each element with its animations */}\n    </AbsoluteFill>\n  );\n};\n```\n\n--- Scene Overview ---\nScene Name: FeatureListBurstsScene\nPurpose: Feature list bursts in: playful animations of three food-themed icons with text labels: “Instant Recipes”, “Ingredient Scanner”, “Shopping List”.\nOverall Style: Playful and vibrant with bouncy, spring animations\n\n--- Color Palette ---\n- Primary Color: #FF6B6B\n- Secondary Color: #4ECDC4\n- Accent Color: #FFE66D\n- Background Color: #F8F8F8\n- Text Primary Color: #333333\n- Text Secondary Color: #777777\n\n--- Typography ---\n- Default Font Family: Helvetica, Arial, sans-serif\n- Heading1 Style:\n  - Font Family: Helvetica Bold\n  - Font Size: 36\n\n### ELEMENT-BY-ELEMENT IMPLEMENTATION GUIDE:\nEach element from the AnimationDesignBrief must be translated into React/Remotion code following these guidelines:\n\n#### ELEMENT TYPE TRANSLATION:\n- 'text' → Use a <div> or <h1>-<h6> with appropriate styling\n- 'image' → Use Remotion's <Img src={content} /> component\n- 'video' → Use Remotion's <Video src={content} /> component\n- 'shape' → Use appropriate shape elements (div with border-radius for circles/rounded rectangles, SVG for complex shapes)\n- 'container' → Use a positioned <div> that may contain child elements\n\n#### INITIAL LAYOUT TRANSLATION:\nAll initialLayout properties MUST be translated to React inline styles:\n- 'x', 'y' → style={{ position: 'absolute', left: x, top: y }}\n- 'width', 'height' → style={{ width, height }}\n- 'opacity' → style={{ opacity }}\n- 'rotation' → style={{ transform: `rotate(${rotation}deg)` }}\n- 'scale' → style={{ transform: `scale(${scale})` }}\n- 'zIndex' → style={{ zIndex }}\n- Multiple transforms should be combined: transform: `rotate(${rotation}deg) scale(${scale})`\n\n#### ANIMATION IMPLEMENTATION:\nFor each animation, use this approach:\n1. Calculate the active animation frames based on delayInFrames and durationInFrames:\n   const animStartFrame = animation.delayInFrames || 0;\n   const animEndFrame = animStartFrame + (animation.durationInFrames || 30);\n2. Apply the appropriate Remotion animation function:\n   - For 'spring' animations or when remotionFunctionHint is 'spring':\n     const animatedValue = spring({\n       frame: frame - animStartFrame,\n       fps,\n       from: property.from,\n       to: property.to,\n       config: property.springConfig || { damping: 10, mass: 1, stiffness: 100 }\n     });\n   - For most other animations, use interpolate:\n     const animatedValue = interpolate(\n       frame,\n       [animStartFrame, animEndFrame],\n       [property.from, property.to],\n       {\n         extrapolateLeft: 'clamp',\n         extrapolateRight: 'clamp',\n         easing: determineEasing(animation.easing)\n       }\n     );\n3. Apply animated values to style properties:\n   - For transform properties (e.g., 'transform.translateX', 'transform.scale'):\n     Extract the specific transform type and apply with appropriate units.\n   - For standard CSS properties (e.g., 'opacity'):\n     Apply directly to the style object.\n   - Example: style={{ opacity: animatedOpacity, transform: `translateX(${animatedX}px) scale(${animatedScale})` }}\n4. For sequence-based timing (startAfter, startWith):\n   - Wrap elements in <Sequence> components with appropriate 'from' and 'durationInFrames' props\n   - Use 'from' attribute based on animation.delayInFrames\n   - Example: <Sequence from={30} durationInFrames={60}>...</Sequence>\n\n### SPECIFIC ELEMENTS TO IMPLEMENT:\n\n#### ELEMENT 1: 3dbf1640-c7f1-4fc4-8793-77e69479bf39 (shape)\n- Initial Layout (CSS equivalent):\n  * x: 960px\n  * y: 540px\n  * width: 1920px\n  * height: 1080px\n  * opacity: 0\n  * rotation: 0deg\n  * scale: 1\n  * backgroundColor: #F8F8F8\n- React style equivalent: style={{ position: 'absolute', left: 960px, top: 540px, width: 1920px, height: 1080px, opacity: 0, transform: 'rotate(0deg) scale(1)', backgroundColor: '#F8F8F8' }}\n\n- Animations for 3dbf1640-c7f1-4fc4-8793-77e69479bf39:\n  * Animation 1: fadeIn\n    - Start frame: 0\n    - Duration: 10 frames\n    - End frame: 10\n    - Easing: easeOutCubic → Implement as: Easing.easeOutCubic\n    - Properties to animate:\n      • opacity: from 0 to 1\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 10], \n          [0, 1], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }\n        );`\n\n#### ELEMENT 2: 8b83686f-552b-43ed-91e5-bd83c18443eb (image)\n- Content: instant_recipes_icon.png\n- Initial Layout (CSS equivalent):\n  * x: 480px\n  * y: 300px\n  * width: 200px\n  * height: 200px\n  * opacity: 0\n  * rotation: 0deg\n  * scale: 0\n- React style equivalent: style={{ position: 'absolute', left: 480px, top: 300px, width: 200px, height: 200px, opacity: 0, transform: 'rotate(0deg) scale(0)' }}\n\n- Animations for 8b83686f-552b-43ed-91e5-bd83c18443eb:\n  * Animation 1: customSpring\n    - Start frame: 0\n    - Duration: 30 frames\n    - End frame: 30\n    - Easing: easeOutBack → Implement as: Easing.easeOutBack\n    - Properties to animate:\n      • scale: from 0 to 1\n        Implementation: `const scaleValue = spring({ \n          frame: frame - 0, \n          fps, \n          from: 0, \n          to: 1, \n          config: {damping: 10, stiffness: 100, mass: 1} \n        })`\n      • opacity: from 0 to 1\n        Implementation: `const opacityValue = spring({ \n          frame: frame - 0, \n          fps, \n          from: 0, \n          to: 1, \n          config: {damping: 10, stiffness: 100, mass: 1} \n        })`\n  * Animation 2: pulse\n    - Start frame: 0\n    - Duration: 10 frames\n    - End frame: 10\n    - Easing: easeInOutQuad → Implement as: Easing.easeInOutQuad\n    - Properties to animate:\n      • scale: from 1.1 to 1\n        Implementation: `const scaleValue = interpolate(\n          frame, \n          [0, 10], \n          [1.1, 1], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInOutQuad }\n        );`\n  * Animation 3: fadeOut\n    - Start frame: 0\n    - Duration: 20 frames\n    - End frame: 20\n    - Easing: easeInCubic → Implement as: Easing.easeInCubic\n    - Properties to animate:\n      • opacity: from 1 to 0\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 20], \n          [1, 0], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInCubic }\n        );`\n\n#### ELEMENT 3: c77dcf4b-5323-41b5-8fc0-d722d9c6476a (text)\n- Content: Instant Recipes\n- Initial Layout (CSS equivalent):\n  * x: 480px\n  * y: 480px\n  * width: 300px\n  * height: 50px\n  * opacity: 0\n  * rotation: 0deg\n  * scale: 1\n- React style equivalent: style={{ position: 'absolute', left: 480px, top: 480px, width: 300px, height: 50px, opacity: 0, transform: 'rotate(0deg) scale(1)' }}\n\n- Animations for c77dcf4b-5323-41b5-8fc0-d722d9c6476a:\n  * Animation 1: fadeIn\n    - Start frame: 0\n    - Duration: 20 frames\n    - End frame: 20\n    - Easing: easeOutCubic → Implement as: Easing.easeOutCubic\n    - Properties to animate:\n      • opacity: from 0 to 1\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 20], \n          [0, 1], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }\n        );`\n  * Animation 2: slideUp\n    - Start frame: 0\n    - Duration: 20 frames\n    - End frame: 20\n    - Easing: easeOutCubic → Implement as: Easing.easeOutCubic\n    - Properties to animate:\n      • y: from 500 to 480\n        Implementation: `const yValue = interpolate(\n          frame, \n          [0, 20], \n          [500, 480], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }\n        );`\n  * Animation 3: fadeOut\n    - Start frame: 0\n    - Duration: 20 frames\n    - End frame: 20\n    - Easing: easeInCubic → Implement as: Easing.easeInCubic\n    - Properties to animate:\n      • opacity: from 1 to 0\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 20], \n          [1, 0], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInCubic }\n        );`\n\n#### ELEMENT 4: bc1d55b7-fc29-4070-9730-3260d05145a8 (image)\n- Content: ingredient_scanner_icon.png\n- Initial Layout (CSS equivalent):\n  * x: 960px\n  * y: 300px\n  * width: 200px\n  * height: 200px\n  * opacity: 0\n  * rotation: 0deg\n  * scale: 0\n- React style equivalent: style={{ position: 'absolute', left: 960px, top: 300px, width: 200px, height: 200px, opacity: 0, transform: 'rotate(0deg) scale(0)' }}\n\n- Animations for bc1d55b7-fc29-4070-9730-3260d05145a8:\n  * Animation 1: customSpring\n    - Start frame: 0\n    - Duration: 30 frames\n    - End frame: 30\n    - Easing: easeOutBack → Implement as: Easing.easeOutBack\n    - Properties to animate:\n      • scale: from 0 to 1\n        Implementation: `const scaleValue = spring({ \n          frame: frame - 0, \n          fps, \n          from: 0, \n          to: 1, \n          config: {damping: 10, stiffness: 100, mass: 1} \n        })`\n      • opacity: from 0 to 1\n        Implementation: `const opacityValue = spring({ \n          frame: frame - 0, \n          fps, \n          from: 0, \n          to: 1, \n          config: {damping: 10, stiffness: 100, mass: 1} \n        })`\n  * Animation 2: pulse\n    - Start frame: 0\n    - Duration: 10 frames\n    - End frame: 10\n    - Easing: easeInOutQuad → Implement as: Easing.easeInOutQuad\n    - Properties to animate:\n      • scale: from 1.1 to 1\n        Implementation: `const scaleValue = interpolate(\n          frame, \n          [0, 10], \n          [1.1, 1], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInOutQuad }\n        );`\n  * Animation 3: fadeOut\n    - Start frame: 0\n    - Duration: 20 frames\n    - End frame: 20\n    - Easing: easeInCubic → Implement as: Easing.easeInCubic\n    - Properties to animate:\n      • opacity: from 1 to 0\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 20], \n          [1, 0], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInCubic }\n        );`\n\n#### ELEMENT 5: 750c8595-e8c5-4564-9ccd-a926217db188 (text)\n- Content: Ingredient Scanner\n- Initial Layout (CSS equivalent):\n  * x: 960px\n  * y: 480px\n  * width: 300px\n  * height: 50px\n  * opacity: 0\n  * rotation: 0deg\n  * scale: 1\n- React style equivalent: style={{ position: 'absolute', left: 960px, top: 480px, width: 300px, height: 50px, opacity: 0, transform: 'rotate(0deg) scale(1)' }}\n\n- Animations for 750c8595-e8c5-4564-9ccd-a926217db188:\n  * Animation 1: fadeIn\n    - Start frame: 0\n    - Duration: 20 frames\n    - End frame: 20\n    - Easing: easeOutCubic → Implement as: Easing.easeOutCubic\n    - Properties to animate:\n      • opacity: from 0 to 1\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 20], \n          [0, 1], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }\n        );`\n  * Animation 2: slideUp\n    - Start frame: 0\n    - Duration: 20 frames\n    - End frame: 20\n    - Easing: easeOutCubic → Implement as: Easing.easeOutCubic\n    - Properties to animate:\n      • y: from 500 to 480\n        Implementation: `const yValue = interpolate(\n          frame, \n          [0, 20], \n          [500, 480], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }\n        );`\n  * Animation 3: fadeOut\n    - Start frame: 0\n    - Duration: 20 frames\n    - End frame: 20\n    - Easing: easeInCubic → Implement as: Easing.easeInCubic\n    - Properties to animate:\n      • opacity: from 1 to 0\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 20], \n          [1, 0], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInCubic }\n        );`\n\n#### ELEMENT 6: 989e20f2-2df0-4025-bb71-c5f37477a8e6 (image)\n- Content: shopping_list_icon.png\n- Initial Layout (CSS equivalent):\n  * x: 1440px\n  * y: 300px\n  * width: 200px\n  * height: 200px\n  * opacity: 0\n  * rotation: 0deg\n  * scale: 0\n- React style equivalent: style={{ position: 'absolute', left: 1440px, top: 300px, width: 200px, height: 200px, opacity: 0, transform: 'rotate(0deg) scale(0)' }}\n\n- Animations for 989e20f2-2df0-4025-bb71-c5f37477a8e6:\n  * Animation 1: customSpring\n    - Start frame: 0\n    - Duration: 30 frames\n    - End frame: 30\n    - Easing: easeOutBack → Implement as: Easing.easeOutBack\n    - Properties to animate:\n      • scale: from 0 to 1\n        Implementation: `const scaleValue = spring({ \n          frame: frame - 0, \n          fps, \n          from: 0, \n          to: 1, \n          config: {damping: 10, stiffness: 100, mass: 1} \n        })`\n      • opacity: from 0 to 1\n        Implementation: `const opacityValue = spring({ \n          frame: frame - 0, \n          fps, \n          from: 0, \n          to: 1, \n          config: {damping: 10, stiffness: 100, mass: 1} \n        })`\n  * Animation 2: pulse\n    - Start frame: 0\n    - Duration: 10 frames\n    - End frame: 10\n    - Easing: easeInOutQuad → Implement as: Easing.easeInOutQuad\n    - Properties to animate:\n      • scale: from 1.1 to 1\n        Implementation: `const scaleValue = interpolate(\n          frame, \n          [0, 10], \n          [1.1, 1], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInOutQuad }\n        );`\n  * Animation 3: fadeOut\n    - Start frame: 0\n    - Duration: 20 frames\n    - End frame: 20\n    - Easing: easeInCubic → Implement as: Easing.easeInCubic\n    - Properties to animate:\n      • opacity: from 1 to 0\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 20], \n          [1, 0], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInCubic }\n        );`\n\n#### ELEMENT 7: f3ddee31-295c-45d7-827c-0a04b460ac91 (text)\n- Content: Shopping List\n- Initial Layout (CSS equivalent):\n  * x: 1440px\n  * y: 480px\n  * width: 300px\n  * height: 50px\n  * opacity: 0\n  * rotation: 0deg\n  * scale: 1\n- React style equivalent: style={{ position: 'absolute', left: 1440px, top: 480px, width: 300px, height: 50px, opacity: 0, transform: 'rotate(0deg) scale(1)' }}\n\n- Animations for f3ddee31-295c-45d7-827c-0a04b460ac91:\n  * Animation 1: fadeIn\n    - Start frame: 0\n    - Duration: 20 frames\n    - End frame: 20\n    - Easing: easeOutCubic → Implement as: Easing.easeOutCubic\n    - Properties to animate:\n      • opacity: from 0 to 1\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 20], \n          [0, 1], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }\n        );`\n  * Animation 2: slideUp\n    - Start frame: 0\n    - Duration: 20 frames\n    - End frame: 20\n    - Easing: easeOutCubic → Implement as: Easing.easeOutCubic\n    - Properties to animate:\n      • y: from 500 to 480\n        Implementation: `const yValue = interpolate(\n          frame, \n          [0, 20], \n          [500, 480], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }\n        );`\n  * Animation 3: fadeOut\n    - Start frame: 0\n    - Duration: 20 frames\n    - End frame: 20\n    - Easing: easeInCubic → Implement as: Easing.easeInCubic\n    - Properties to animate:\n      • opacity: from 1 to 0\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 20], \n          [1, 0], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInCubic }\n        );`\n\n### SEQUENCE ORCHESTRATION & TIMING GUIDELINES:\nWhen implementing multiple animations, carefully orchestrate them to match the design intent:\n1. Use <Sequence> components for elements or animations that should start at specific frames.\n   Example: <Sequence from={30} durationInFrames={60}><YourAnimatedElement /></Sequence>\n2. For animation dependencies between elements (animations that must follow others):\n   - Create a timing map that respects trigger values like 'afterPrevious' by calculating startFrames.\n   - Example: const titleExitFrame = titleStartFrame + titleDuration;\n             const subTitleStartFrame = titleExitFrame; // Starting after title exits\n\n### CODE QUALITY & PERFORMANCE GUIDELINES:\n1. MODULARITY: For complex elements, consider creating sub-components.\n2. PERFORMANCE: Minimize DOM nodes - prefer CSS transforms over creating new elements.\n3. MEMOIZATION: Use React.useMemo() for computationally expensive calculations.\n4. TYPING: Provide proper TypeScript types throughout, including for style objects.\n5. COMMENTS: Add brief comments for complex animation logic or calculations.\n6. ORGANIZATION: Group related animations and separate distinct animation phases.\n7. ERROR HANDLING: Include defensive checks for potentially undefined values.\n\n### CRITICAL REMINDER:\n- PRECISELY follow the AnimationDesignBrief's specifications.\n- RESPECT the timing, durations, and easing specified in the brief.\n- IMPLEMENT ALL elements and animations exactly as detailed above.\n- START with the boilerplate structure provided earlier.\n- REMEMBER the first line MUST be: // src/remotion/components/scenes/FeatureListBurstsScene.tsx","sceneId":"6b9fad66-43e9-421f-a37f-09020e84c573","userData":{"userId":"92256ac9-495a-4ba2-aecc-fa4ce6756baa"},"projectId":"c3ec02e0-5bfd-484a-953b-b35ed645623f","componentName":"FeatureListBurstsScene","durationInFrames":150,"animationDesignBriefId":"8666cea3-5eba-4259-9f85-23ea02bd8dd9"},"statusMessageId":"524a3b99-a6b5-4130-b043-541d80d5142c"},{"id":"5a8942ea-16d0-4df6-9362-c6b313a26bdf","projectId":"c3ec02e0-5bfd-484a-953b-b35ed645623f","effect":"SlowmotionPlatetophoneMorphScene","tsxCode":"\"use client\";\n\n// src/remotion/components/scenes/SlowmotionPlatetophoneMorphScene.tsx\nimport React from 'react';\nimport {\n  AbsoluteFill,\n  Img,\n  useCurrentFrame,\n  useVideoConfig,\n  interpolate,\n  spring,\n  Sequence,\n  Easing,\n} from 'remotion';\n// import { AnimationDesignBrief } from '~/lib/schemas/animationDesignBrief.schema';\n\nexport const SlowmotionPlatetophoneMorphScene: React.FC<{ brief: AnimationDesignBrief }> = ({ brief }) => {\n  const frame = useCurrentFrame();\n  const { fps, width, height, durationInFrames } = useVideoConfig();\n  const { colorPalette = {}, typography = {} } = brief;\n  const backgroundColor = colorPalette.background || '#FFFAF0';\n\n  // Element 2: Plate Image Animations\n  const plateOpacityIn = interpolate(\n    frame,\n    [0, 30],\n    [0, 1],\n    { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }\n  );\n  const plateOpacityOut = interpolate(\n    frame,\n    [0, 20],\n    [1, 0],\n    { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInCubic }\n  );\n  const plateOpacity = Math.min(plateOpacityIn, plateOpacityOut);\n\n  const plateScalePulse = interpolate(\n    frame,\n    [0, 30],\n    [0.8, 0.85],\n    { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInOutSine }\n  );\n  const plateScaleOut = interpolate(\n    frame,\n    [0, 20],\n    [0.85, 0.5],\n    { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInCubic }\n  );\n  const plateScale = Math.min(plateScalePulse, plateScaleOut);\n\n  // Element 3: Phone Mockup Animations\n  const phoneOpacity = interpolate(\n    frame,\n    [0, 30],\n    [0, 1],\n    { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }\n  );\n  const phoneScale = interpolate(\n    frame,\n    [0, 30],\n    [0.5, 1],\n    { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutBack }\n  );\n  const phoneY = interpolate(\n    frame,\n    [0, 15],\n    [580, 540],\n    { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutBounce }\n  );\n\n  // Element 4: Accent Shape Animations\n  const accentFadeIn = interpolate(\n    frame,\n    [0, 20],\n    [0, 1],\n    { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }\n  );\n  const accentPulse = interpolate(\n    frame,\n    [0, 40],\n    [0.7, 1],\n    { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInOutSine }\n  );\n  const accentOpacity = Math.min(accentFadeIn, accentPulse);\n\n  // Element 5: Title Text Animations\n  const titleOpacity = interpolate(\n    frame,\n    [0, 25],\n    [0, 1],\n    { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }\n  );\n\n  return (\n    <AbsoluteFill style={{ backgroundColor, overflow: 'hidden' }}>\n      {/* Background Gradient Shape (Element 1) */}\n      <div\n        style={{\n          position: 'absolute',\n          left: 960,\n          top: 540,\n          width: 1920,\n          height: 1080,\n          opacity: 1,\n          transform: 'translate(-50%, -50%) rotate(0deg) scale(1)',\n          background: 'linear-gradient(180deg, #FFFAF0 0%, #FFC107 100%)',\n        }}\n      />\n\n      {/* Plate Image (Element 2) */}\n      <Sequence from={0} durationInFrames={durationInFrames}>\n        <Img\n          src=\"assets/images/plate.png\"\n          style={{\n            position: 'absolute',\n            left: 960,\n            top: 540,\n            width: 800,\n            height: 800,\n            opacity: plateOpacity,\n            transform: `translate(-50%, -50%) scale(${plateScale})`,\n            willChange: 'opacity, transform',\n          }}\n        />\n      </Sequence>\n\n      {/* Phone Mockup (Element 3) */}\n      <Sequence from={0} durationInFrames={durationInFrames}>\n        <Img\n          src=\"assets/images/phone-mockup.png\"\n          style={{\n            position: 'absolute',\n            left: 960,\n            top: phoneY,\n            width: 400,\n            height: 700,\n            opacity: phoneOpacity,\n            transform: `translate(-50%, -50%) scale(${phoneScale})`,\n            willChange: 'opacity, transform, top',\n          }}\n        />\n      </Sequence>\n\n      {/* Accent Shape Behind Phone (Element 4) */}\n      <Sequence from={0} durationInFrames={durationInFrames}>\n        <div\n          style={{\n            position: 'absolute',\n            left: 960,\n            top: 540,\n            width: 450,\n            height: 750,\n            opacity: accentOpacity,\n            transform: 'translate(-50%, -50%) rotate(0deg) scale(1)',\n            backgroundColor: 'rgba(255,193,7,0.3)',\n            borderRadius: 20,\n            willChange: 'opacity',\n          }}\n        />\n      </Sequence>\n\n      {/* Title Text \"FoodieFlash\" (Element 5) */}\n      <Sequence from={0} durationInFrames={durationInFrames}>\n        <h1\n          style={{\n            position: 'absolute',\n            left: 960,\n            top: 880,\n            width: 800,\n            height: 100,\n            margin: 0,\n            padding: 0,\n            opacity: titleOpacity,\n            transform: 'translate(-50%, -50%) scale(1)',\n            color: colorPalette.textPrimary || '#333333',\n            fontFamily: typography.heading1?.fontFamily || 'Montserrat',\n            fontWeight: 'bold',\n            fontSize: typography.heading1?.fontSize || 48,\n            textAlign: 'center',\n            willChange: 'opacity',\n          }}\n        >\n          {brief.elements?.find((el) => el.id === 'bfc376ef-1c2c-427a-8160-b116c6b2e46b')?.content || 'FoodieFlash'}\n        </h1>\n      </Sequence>\n    </AbsoluteFill>\n  );\n};","status":"building","outputUrl":null,"errorMessage":"TSX code is missing for this job","retryCount":1,"createdAt":"2025-05-10 04:38:19.35236+00","updatedAt":"2025-05-10 04:39:03.476+00","metadata":{"fps":30,"width":1920,"height":1080,"prompt":"### ROLE: You are an Expert Remotion Developer and Senior React Engineer.\n### TASK: Create a production-quality Remotion React functional component in TypeScript.\n### COMPONENT NAME: 'SlowmotionPlatetophoneMorphScene'\n### OBJECTIVE: Generate a component that precisely implements the provided AnimationDesignBrief with professional animations and visual effects.\n### VIDEO CONFIG: Target video is 1920x1080px, 120 frames total duration, at 30 FPS.\n### MANDATORY REQUIREMENTS:\n- The FIRST line MUST be: // src/remotion/components/scenes/SlowmotionPlatetophoneMorphScene.tsx\n- The component MUST be a functional component using TypeScript (.tsx).\n- ALWAYS use the Remotion hooks: useCurrentFrame() and useVideoConfig() for timing and dimensions.\n- Component MUST accept props: { brief: AnimationDesignBrief } (assume this type is imported).\n- Utilize appropriate Remotion animation functions based on each element's needs:\n  * interpolate() - For smooth linear or eased transitions between values\n  * spring() - For physics-based, bouncy animations\n  * Easing module - For specifying animation curves (easeInOut, bezier, etc.)\n- Use Remotion timing components when needed:\n  * <Sequence from={startFrame} durationInFrames={duration}> - For sequential animations\n  * <Series> - For orchestrating complex animation sequences\n  * <Loop> - For repeating animations\n- Apply absolute positioning based on initialLayout coordinates.\n\n### BOILERPLATE STRUCTURE (Follow this pattern):\n```typescript\n// src/remotion/components/scenes/SlowmotionPlatetophoneMorphScene.tsx\nimport { AbsoluteFill, useCurrentFrame, useVideoConfig, interpolate, spring, Sequence, Easing, Img, Audio } from 'remotion';\nimport React from 'react';\n// import { AnimationDesignBrief } from '~/lib/schemas/animationDesignBrief.schema';\n\nexport const SlowmotionPlatetophoneMorphScene: React.FC<{ brief: AnimationDesignBrief }> = ({ brief }) => {\n  const frame = useCurrentFrame();\n  const { fps, width, height, durationInFrames } = useVideoConfig();\n\n  // Extract key brief properties\n  const { elements, colorPalette, typography, overallStyle } = brief;\n\n  // Define background color from brief\n  const backgroundColor = colorPalette?.background || 'transparent';\n\n  return (\n    <AbsoluteFill style={{ backgroundColor }}>\n      {/* Render each element with its animations */}\n    </AbsoluteFill>\n  );\n};\n```\n\n--- Scene Overview ---\nScene Name: SlowmotionPlatetophoneMorphScene\nPurpose: Slow-motion plate-to-phone morph effect, transforming the plate into a smartphone displaying the FoodieFlash app interface.\nOverall Style: Clean, modern with smooth morphing transitions\n\n--- Color Palette ---\n- Primary Color: #FFC107\n- Secondary Color: #FF5722\n- Accent Color: #4CAF50\n- Background Color: #FFFAF0\n- Text Primary Color: #333333\n- Text Secondary Color: #FFFFFF\n\n--- Typography ---\n- Default Font Family: Montserrat\n- Heading1 Style:\n  - Font Family: Montserrat Bold\n  - Font Size: 48\n\n### ELEMENT-BY-ELEMENT IMPLEMENTATION GUIDE:\nEach element from the AnimationDesignBrief must be translated into React/Remotion code following these guidelines:\n\n#### ELEMENT TYPE TRANSLATION:\n- 'text' → Use a <div> or <h1>-<h6> with appropriate styling\n- 'image' → Use Remotion's <Img src={content} /> component\n- 'video' → Use Remotion's <Video src={content} /> component\n- 'shape' → Use appropriate shape elements (div with border-radius for circles/rounded rectangles, SVG for complex shapes)\n- 'container' → Use a positioned <div> that may contain child elements\n\n#### INITIAL LAYOUT TRANSLATION:\nAll initialLayout properties MUST be translated to React inline styles:\n- 'x', 'y' → style={{ position: 'absolute', left: x, top: y }}\n- 'width', 'height' → style={{ width, height }}\n- 'opacity' → style={{ opacity }}\n- 'rotation' → style={{ transform: `rotate(${rotation}deg)` }}\n- 'scale' → style={{ transform: `scale(${scale})` }}\n- 'zIndex' → style={{ zIndex }}\n- Multiple transforms should be combined: transform: `rotate(${rotation}deg) scale(${scale})`\n\n#### ANIMATION IMPLEMENTATION:\nFor each animation, use this approach:\n1. Calculate the active animation frames based on delayInFrames and durationInFrames:\n   const animStartFrame = animation.delayInFrames || 0;\n   const animEndFrame = animStartFrame + (animation.durationInFrames || 30);\n2. Apply the appropriate Remotion animation function:\n   - For 'spring' animations or when remotionFunctionHint is 'spring':\n     const animatedValue = spring({\n       frame: frame - animStartFrame,\n       fps,\n       from: property.from,\n       to: property.to,\n       config: property.springConfig || { damping: 10, mass: 1, stiffness: 100 }\n     });\n   - For most other animations, use interpolate:\n     const animatedValue = interpolate(\n       frame,\n       [animStartFrame, animEndFrame],\n       [property.from, property.to],\n       {\n         extrapolateLeft: 'clamp',\n         extrapolateRight: 'clamp',\n         easing: determineEasing(animation.easing)\n       }\n     );\n3. Apply animated values to style properties:\n   - For transform properties (e.g., 'transform.translateX', 'transform.scale'):\n     Extract the specific transform type and apply with appropriate units.\n   - For standard CSS properties (e.g., 'opacity'):\n     Apply directly to the style object.\n   - Example: style={{ opacity: animatedOpacity, transform: `translateX(${animatedX}px) scale(${animatedScale})` }}\n4. For sequence-based timing (startAfter, startWith):\n   - Wrap elements in <Sequence> components with appropriate 'from' and 'durationInFrames' props\n   - Use 'from' attribute based on animation.delayInFrames\n   - Example: <Sequence from={30} durationInFrames={60}>...</Sequence>\n\n### SPECIFIC ELEMENTS TO IMPLEMENT:\n\n#### ELEMENT 1: 1eb892b0-47bc-41a0-b056-9df565b110c9 (shape)\n- Initial Layout (CSS equivalent):\n  * x: 960px\n  * y: 540px\n  * width: 1920px\n  * height: 1080px\n  * opacity: 1\n  * rotation: 0deg\n  * scale: 1\n  * backgroundColor: linear-gradient(180deg, #FFFAF0 0%, #FFC107 100%)\n- React style equivalent: style={{ position: 'absolute', left: 960px, top: 540px, width: 1920px, height: 1080px, opacity: 1, transform: 'rotate(0deg) scale(1)', backgroundColor: 'linear-gradient(180deg, #FFFAF0 0%, #FFC107 100%)' }}\n\n#### ELEMENT 2: 9c620e26-1107-4568-82a6-7508f69690df (image)\n- Content: assets/images/plate.png\n- Initial Layout (CSS equivalent):\n  * x: 960px\n  * y: 540px\n  * width: 800px\n  * height: 800px\n  * opacity: 0\n  * rotation: 0deg\n  * scale: 0.8\n- React style equivalent: style={{ position: 'absolute', left: 960px, top: 540px, width: 800px, height: 800px, opacity: 0, transform: 'rotate(0deg) scale(0.8)' }}\n\n- Animations for 9c620e26-1107-4568-82a6-7508f69690df:\n  * Animation 1: fadeIn\n    - Start frame: 0\n    - Duration: 30 frames\n    - End frame: 30\n    - Easing: easeOutCubic → Implement as: Easing.easeOutCubic\n    - Properties to animate:\n      • opacity: from 0 to 1\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 30], \n          [0, 1], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }\n        );`\n  * Animation 2: pulse\n    - Start frame: 0\n    - Duration: 30 frames\n    - End frame: 30\n    - Easing: easeInOutSine → Implement as: Easing.easeInOutSine\n    - Properties to animate:\n      • scale: from 0.8 to 0.85\n        Implementation: `const scaleValue = interpolate(\n          frame, \n          [0, 30], \n          [0.8, 0.85], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInOutSine }\n        );`\n  * Animation 3: fadeOut\n    - Start frame: 0\n    - Duration: 20 frames\n    - End frame: 20\n    - Easing: easeInCubic → Implement as: Easing.easeInCubic\n    - Properties to animate:\n      • opacity: from 1 to 0\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 20], \n          [1, 0], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInCubic }\n        );`\n      • scale: from 0.85 to 0.5\n        Implementation: `const scaleValue = interpolate(\n          frame, \n          [0, 20], \n          [0.85, 0.5], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInCubic }\n        );`\n\n#### ELEMENT 3: 1e268b7e-1d40-4ed3-b40d-19d686b2c196 (image)\n- Content: assets/images/phone-mockup.png\n- Initial Layout (CSS equivalent):\n  * x: 960px\n  * y: 540px\n  * width: 400px\n  * height: 700px\n  * opacity: 0\n  * rotation: 0deg\n  * scale: 0.5\n- React style equivalent: style={{ position: 'absolute', left: 960px, top: 540px, width: 400px, height: 700px, opacity: 0, transform: 'rotate(0deg) scale(0.5)' }}\n\n- Animations for 1e268b7e-1d40-4ed3-b40d-19d686b2c196:\n  * Animation 1: fadeIn\n    - Start frame: 0\n    - Duration: 30 frames\n    - End frame: 30\n    - Easing: easeOutCubic → Implement as: Easing.easeOutCubic\n    - Properties to animate:\n      • opacity: from 0 to 1\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 30], \n          [0, 1], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }\n        );`\n  * Animation 2: scale\n    - Start frame: 0\n    - Duration: 30 frames\n    - End frame: 30\n    - Easing: easeOutBack → Implement as: Easing.easeOutBack\n    - Properties to animate:\n      • scale: from 0.5 to 1\n        Implementation: `const scaleValue = interpolate(\n          frame, \n          [0, 30], \n          [0.5, 1], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutBack }\n        );`\n  * Animation 3: slideUp\n    - Start frame: 0\n    - Duration: 15 frames\n    - End frame: 15\n    - Easing: easeOutBounce → Implement as: Easing.easeOutBounce\n    - Properties to animate:\n      • y: from 580 to 540\n        Implementation: `const yValue = interpolate(\n          frame, \n          [0, 15], \n          [580, 540], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutBounce }\n        );`\n\n#### ELEMENT 4: d4bc2ecf-e8e8-40ac-a095-6ef4abaad07b (shape)\n- Initial Layout (CSS equivalent):\n  * x: 960px\n  * y: 540px\n  * width: 450px\n  * height: 750px\n  * opacity: 0\n  * rotation: 0deg\n  * scale: 1\n  * backgroundColor: rgba(255,193,7,0.3)\n- React style equivalent: style={{ position: 'absolute', left: 960px, top: 540px, width: 450px, height: 750px, opacity: 0, transform: 'rotate(0deg) scale(1)', backgroundColor: 'rgba(255,193,7,0.3)' }}\n\n- Animations for d4bc2ecf-e8e8-40ac-a095-6ef4abaad07b:\n  * Animation 1: fadeIn\n    - Start frame: 0\n    - Duration: 20 frames\n    - End frame: 20\n    - Easing: easeOutCubic → Implement as: Easing.easeOutCubic\n    - Properties to animate:\n      • opacity: from 0 to 1\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 20], \n          [0, 1], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }\n        );`\n  * Animation 2: pulse\n    - Start frame: 0\n    - Duration: 40 frames\n    - End frame: 40\n    - Easing: easeInOutSine → Implement as: Easing.easeInOutSine\n    - Properties to animate:\n      • opacity: from 0.7 to 1\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 40], \n          [0.7, 1], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInOutSine }\n        );`\n\n#### ELEMENT 5: bfc376ef-1c2c-427a-8160-b116c6b2e46b (text)\n- Content: FoodieFlash\n- Initial Layout (CSS equivalent):\n  * x: 960px\n  * y: 880px\n  * width: 800px\n  * height: 100px\n  * opacity: 0\n  * rotation: 0deg\n  * scale: 1\n- React style equivalent: style={{ position: 'absolute', left: 960px, top: 880px, width: 800px, height: 100px, opacity: 0, transform: 'rotate(0deg) scale(1)' }}\n\n- Animations for bfc376ef-1c2c-427a-8160-b116c6b2e46b:\n  * Animation 1: fadeIn\n    - Start frame: 0\n    - Duration: 25 frames\n    - End frame: 25\n    - Easing: easeOutCubic → Implement as: Easing.easeOutCubic\n    - Properties to animate:\n      • opacity: from 0 to 1\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 25], \n          [0, 1], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }\n        );`\n\n### SEQUENCE ORCHESTRATION & TIMING GUIDELINES:\nWhen implementing multiple animations, carefully orchestrate them to match the design intent:\n1. Use <Sequence> components for elements or animations that should start at specific frames.\n   Example: <Sequence from={30} durationInFrames={60}><YourAnimatedElement /></Sequence>\n2. For animation dependencies between elements (animations that must follow others):\n   - Create a timing map that respects trigger values like 'afterPrevious' by calculating startFrames.\n   - Example: const titleExitFrame = titleStartFrame + titleDuration;\n             const subTitleStartFrame = titleExitFrame; // Starting after title exits\n\n### CODE QUALITY & PERFORMANCE GUIDELINES:\n1. MODULARITY: For complex elements, consider creating sub-components.\n2. PERFORMANCE: Minimize DOM nodes - prefer CSS transforms over creating new elements.\n3. MEMOIZATION: Use React.useMemo() for computationally expensive calculations.\n4. TYPING: Provide proper TypeScript types throughout, including for style objects.\n5. COMMENTS: Add brief comments for complex animation logic or calculations.\n6. ORGANIZATION: Group related animations and separate distinct animation phases.\n7. ERROR HANDLING: Include defensive checks for potentially undefined values.\n\n### CRITICAL REMINDER:\n- PRECISELY follow the AnimationDesignBrief's specifications.\n- RESPECT the timing, durations, and easing specified in the brief.\n- IMPLEMENT ALL elements and animations exactly as detailed above.\n- START with the boilerplate structure provided earlier.\n- REMEMBER the first line MUST be: // src/remotion/components/scenes/SlowmotionPlatetophoneMorphScene.tsx","sceneId":"77633c6b-55e4-4818-ba48-7efcc41329fc","userData":{"userId":"92256ac9-495a-4ba2-aecc-fa4ce6756baa"},"projectId":"c3ec02e0-5bfd-484a-953b-b35ed645623f","componentName":"SlowmotionPlatetophoneMorphScene","durationInFrames":120,"animationDesignBriefId":"b2862d05-b63b-4e50-bdc4-3d9c665212a7"},"statusMessageId":"524a3b99-a6b5-4130-b043-541d80d5142c"},{"id":"7eef85d9-7e92-4f84-b73d-46c3270d0f67","projectId":"c3ec02e0-5bfd-484a-953b-b35ed645623f","effect":"CloseupOfAScene","tsxCode":"\"use client\";\n\n// src/remotion/components/scenes/CloseupOfAScene.tsx\nimport React from 'react';\nimport {\n  AbsoluteFill,\n  useCurrentFrame,\n  useVideoConfig,\n  interpolate,\n  spring,\n  Sequence,\n  Easing,\n  Img,\n  Audio,\n} from 'remotion';\n\n// import { AnimationDesignBrief } from '~/lib/schemas/animationDesignBrief.schema';\n\ntype AnimationDesignBrief = any; // Replace with actual import\n\nexport const CloseupOfAScene: React.FC<{ brief: AnimationDesignBrief }> = ({ brief }) => {\n  const frame = useCurrentFrame();\n  const { fps, width, height, durationInFrames } = useVideoConfig();\n\n  // Extract key brief properties\n  const { elements, colorPalette, typography, overallStyle } = brief || {};\n\n  // Define background color from brief\n  const backgroundColor = colorPalette?.background || '#1a1a1a';\n\n  /**\n   * ELEMENT 1: Close-up Dish Image (e1a2b3c4-1234-5678-abcd-000000000001)\n   */\n  // Scale animation (1.2 → 1 over 0–30)\n  const dishScale = interpolate(\n    frame,\n    [0, 30],\n    [1.2, 1],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp',\n      easing: Easing.easeOutCubic,\n    }\n  );\n  // Fade-in (0 → 1 over 0–30)\n  const dishFadeIn = interpolate(\n    frame,\n    [0, 30],\n    [0, 1],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp',\n      easing: Easing.easeOutCubic,\n    }\n  );\n  // Fade-out (1 → 0 over 0–10)\n  const dishFadeOut = interpolate(\n    frame,\n    [0, 10],\n    [1, 0],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp',\n      easing: Easing.easeInCubic,\n    }\n  );\n  // Combine fade values: use fade-out first 0–10, then fade-in 10–30, then keep visible\n  const dishOpacity = frame <= 10 ? dishFadeOut : frame <= 30 ? dishFadeIn : 1;\n\n  /**\n   * ELEMENT 2: Fullscreen White Overlay Shape (e2b3c4d5-1234-5678-abcd-000000000002)\n   */\n  // Fade-in (0 → 1 over 0–3)\n  const overlayFadeIn = interpolate(\n    frame,\n    [0, 3],\n    [0, 1],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp',\n      easing: Easing.easeOutCubic,\n    }\n  );\n  // Fade-out (1 → 0 over 0–5)\n  const overlayFadeOut = interpolate(\n    frame,\n    [0, 5],\n    [1, 0],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp',\n      easing: Easing.easeInCubic,\n    }\n  );\n  const overlayOpacity = frame <= 5 ? overlayFadeOut : overlayFadeIn;\n\n  /**\n   * ELEMENT 3: Neon Outline Pulse (e3c4d5e6-1234-5678-abcd-000000000003)\n   */\n  // Fade-in (0 → 1 over 0–15)\n  const neonFadeIn = interpolate(\n    frame,\n    [0, 15],\n    [0, 1],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp',\n      easing: Easing.easeOutCubic,\n    }\n  );\n  // Pulse scale (1 → 1.05 → 1 over 0–30)\n  const neonPulseScale = interpolate(\n    frame,\n    [0, 15, 30],\n    [1, 1.05, 1],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp',\n      easing: Easing.easeInOutSine,\n    }\n  );\n  // Pulse opacity (0.8 → 1 over 0–30)\n  const neonPulseOpacity = interpolate(\n    frame,\n    [0, 30],\n    [0.8, 1],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp',\n      easing: Easing.easeInOutSine,\n    }\n  );\n  // Fade-out (1 → 0 over 0–10)\n  const neonFadeOut = interpolate(\n    frame,\n    [0, 10],\n    [1, 0],\n    {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp',\n      easing: Easing.easeInCubic,\n    }\n  );\n  // Composite neon opacity\n  const neonOpacity = frame <= 10\n    ? neonFadeOut\n    : frame <= 15\n    ? neonFadeIn\n    : neonPulseOpacity;\n\n  return (\n    <AbsoluteFill style={{ backgroundColor }}>\n      {/* Audio shutter effect */}\n      <Audio src={\"audio/shutter.mp3\"} startFrom={5} volume={1} />\n\n      {/* Dish Close-up Image */}\n      <Sequence from={0} durationInFrames={durationInFrames}>\n        <Img\n          src={brief.elements?.['e1a2b3c4-1234-5678-abcd-000000000001']?.content || 'images/dish_closeup.jpg'}\n          style={{\n            position: 'absolute',\n            left: 960,\n            top: 540,\n            width: 1920,\n            height: 1080,\n            opacity: dishOpacity,\n            transform: `translate(-50%, -50%) rotate(0deg) scale(${dishScale})`,\n          }}\n        />\n      </Sequence>\n\n      {/* Fullscreen White Overlay Shape */}\n      <Sequence from={0} durationInFrames={durationInFrames}>\n        <div\n          style={{\n            position: 'absolute',\n            left: 960,\n            top: 540,\n            width: 1920,\n            height: 1080,\n            backgroundColor: '#ffffff',\n            opacity: overlayOpacity,\n            transform: 'translate(-50%, -50%) rotate(0deg) scale(1)',\n          }}\n        />\n      </Sequence>\n\n      {/* Neon Outline Pulse Shape */}\n      <Sequence from={0} durationInFrames={durationInFrames}>\n        <div\n          style={{\n            position: 'absolute',\n            left: 960,\n            top: 540,\n            width: 800,\n            height: 800,\n            border: '4px solid #e63946',\n            borderRadius: '50%',\n            boxShadow: '0 0 20px #e63946',\n            opacity: neonOpacity,\n            transform: `translate(-50%, -50%) rotate(0deg) scale(${neonPulseScale})`,\n            backgroundColor: 'transparent',\n          }}\n        />\n      </Sequence>\n    </AbsoluteFill>\n  );\n};","status":"building","outputUrl":null,"errorMessage":"TSX code is missing for this job","retryCount":1,"createdAt":"2025-05-10 04:37:52.736474+00","updatedAt":"2025-05-10 04:38:26.954+00","metadata":{"fps":30,"width":1920,"height":1080,"prompt":"### ROLE: You are an Expert Remotion Developer and Senior React Engineer.\n### TASK: Create a production-quality Remotion React functional component in TypeScript.\n### COMPONENT NAME: 'CloseupOfAScene'\n### OBJECTIVE: Generate a component that precisely implements the provided AnimationDesignBrief with professional animations and visual effects.\n### VIDEO CONFIG: Target video is 1920x1080px, 90 frames total duration, at 30 FPS.\n### MANDATORY REQUIREMENTS:\n- The FIRST line MUST be: // src/remotion/components/scenes/CloseupOfAScene.tsx\n- The component MUST be a functional component using TypeScript (.tsx).\n- ALWAYS use the Remotion hooks: useCurrentFrame() and useVideoConfig() for timing and dimensions.\n- Component MUST accept props: { brief: AnimationDesignBrief } (assume this type is imported).\n- Utilize appropriate Remotion animation functions based on each element's needs:\n  * interpolate() - For smooth linear or eased transitions between values\n  * spring() - For physics-based, bouncy animations\n  * Easing module - For specifying animation curves (easeInOut, bezier, etc.)\n- Use Remotion timing components when needed:\n  * <Sequence from={startFrame} durationInFrames={duration}> - For sequential animations\n  * <Series> - For orchestrating complex animation sequences\n  * <Loop> - For repeating animations\n- Apply absolute positioning based on initialLayout coordinates.\n\n### BOILERPLATE STRUCTURE (Follow this pattern):\n```typescript\n// src/remotion/components/scenes/CloseupOfAScene.tsx\nimport { AbsoluteFill, useCurrentFrame, useVideoConfig, interpolate, spring, Sequence, Easing, Img, Audio } from 'remotion';\nimport React from 'react';\n// import { AnimationDesignBrief } from '~/lib/schemas/animationDesignBrief.schema';\n\nexport const CloseupOfAScene: React.FC<{ brief: AnimationDesignBrief }> = ({ brief }) => {\n  const frame = useCurrentFrame();\n  const { fps, width, height, durationInFrames } = useVideoConfig();\n\n  // Extract key brief properties\n  const { elements, colorPalette, typography, overallStyle } = brief;\n\n  // Define background color from brief\n  const backgroundColor = colorPalette?.background || 'transparent';\n\n  return (\n    <AbsoluteFill style={{ backgroundColor }}>\n      {/* Render each element with its animations */}\n    </AbsoluteFill>\n  );\n};\n```\n\n--- Scene Overview ---\nScene Name: CloseupOfAScene\nPurpose: Close-up of a delicious dish on a plate. Camera snaps a photo; a neon outline pulses around the plate to highlight the shot.\nOverall Style: Modern neon pop style with vibrant accents to draw attention to the dish\n\n--- Color Palette ---\n- Primary Color: #e63946\n- Secondary Color: #a8dadc\n- Accent Color: #f1faee\n- Background Color: #1a1a1a\n- Text Primary Color: #ffffff\n- Text Secondary Color: #cccccc\n\n### ELEMENT-BY-ELEMENT IMPLEMENTATION GUIDE:\nEach element from the AnimationDesignBrief must be translated into React/Remotion code following these guidelines:\n\n#### ELEMENT TYPE TRANSLATION:\n- 'text' → Use a <div> or <h1>-<h6> with appropriate styling\n- 'image' → Use Remotion's <Img src={content} /> component\n- 'video' → Use Remotion's <Video src={content} /> component\n- 'shape' → Use appropriate shape elements (div with border-radius for circles/rounded rectangles, SVG for complex shapes)\n- 'container' → Use a positioned <div> that may contain child elements\n\n#### INITIAL LAYOUT TRANSLATION:\nAll initialLayout properties MUST be translated to React inline styles:\n- 'x', 'y' → style={{ position: 'absolute', left: x, top: y }}\n- 'width', 'height' → style={{ width, height }}\n- 'opacity' → style={{ opacity }}\n- 'rotation' → style={{ transform: `rotate(${rotation}deg)` }}\n- 'scale' → style={{ transform: `scale(${scale})` }}\n- 'zIndex' → style={{ zIndex }}\n- Multiple transforms should be combined: transform: `rotate(${rotation}deg) scale(${scale})`\n\n#### ANIMATION IMPLEMENTATION:\nFor each animation, use this approach:\n1. Calculate the active animation frames based on delayInFrames and durationInFrames:\n   const animStartFrame = animation.delayInFrames || 0;\n   const animEndFrame = animStartFrame + (animation.durationInFrames || 30);\n2. Apply the appropriate Remotion animation function:\n   - For 'spring' animations or when remotionFunctionHint is 'spring':\n     const animatedValue = spring({\n       frame: frame - animStartFrame,\n       fps,\n       from: property.from,\n       to: property.to,\n       config: property.springConfig || { damping: 10, mass: 1, stiffness: 100 }\n     });\n   - For most other animations, use interpolate:\n     const animatedValue = interpolate(\n       frame,\n       [animStartFrame, animEndFrame],\n       [property.from, property.to],\n       {\n         extrapolateLeft: 'clamp',\n         extrapolateRight: 'clamp',\n         easing: determineEasing(animation.easing)\n       }\n     );\n3. Apply animated values to style properties:\n   - For transform properties (e.g., 'transform.translateX', 'transform.scale'):\n     Extract the specific transform type and apply with appropriate units.\n   - For standard CSS properties (e.g., 'opacity'):\n     Apply directly to the style object.\n   - Example: style={{ opacity: animatedOpacity, transform: `translateX(${animatedX}px) scale(${animatedScale})` }}\n4. For sequence-based timing (startAfter, startWith):\n   - Wrap elements in <Sequence> components with appropriate 'from' and 'durationInFrames' props\n   - Use 'from' attribute based on animation.delayInFrames\n   - Example: <Sequence from={30} durationInFrames={60}>...</Sequence>\n\n### SPECIFIC ELEMENTS TO IMPLEMENT:\n\n#### ELEMENT 1: e1a2b3c4-1234-5678-abcd-000000000001 (image)\n- Content: images/dish_closeup.jpg\n- Initial Layout (CSS equivalent):\n  * x: 960px\n  * y: 540px\n  * width: 1920px\n  * height: 1080px\n  * opacity: 0\n  * rotation: 0deg\n  * scale: 1\n- React style equivalent: style={{ position: 'absolute', left: 960px, top: 540px, width: 1920px, height: 1080px, opacity: 0, transform: 'rotate(0deg) scale(1)' }}\n\n- Animations for e1a2b3c4-1234-5678-abcd-000000000001:\n  * Animation 1: customProperty\n    - Start frame: 0\n    - Duration: 30 frames\n    - End frame: 30\n    - Easing: easeOutCubic → Implement as: Easing.easeOutCubic\n    - Properties to animate:\n      • scale: from 1.2 to 1\n        Implementation: `const scaleValue = interpolate(\n          frame, \n          [0, 30], \n          [1.2, 1], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }\n        );`\n  * Animation 2: fadeIn\n    - Start frame: 0\n    - Duration: 30 frames\n    - End frame: 30\n    - Easing: easeOutCubic → Implement as: Easing.easeOutCubic\n    - Properties to animate:\n      • opacity: from 0 to 1\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 30], \n          [0, 1], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }\n        );`\n  * Animation 3: fadeOut\n    - Start frame: 0\n    - Duration: 10 frames\n    - End frame: 10\n    - Easing: easeInCubic → Implement as: Easing.easeInCubic\n    - Properties to animate:\n      • opacity: from 1 to 0\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 10], \n          [1, 0], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInCubic }\n        );`\n\n#### ELEMENT 2: e2b3c4d5-1234-5678-abcd-000000000002 (shape)\n- Initial Layout (CSS equivalent):\n  * x: 960px\n  * y: 540px\n  * width: 1920px\n  * height: 1080px\n  * opacity: 0\n  * rotation: 0deg\n  * scale: 1\n  * backgroundColor: #ffffff\n- React style equivalent: style={{ position: 'absolute', left: 960px, top: 540px, width: 1920px, height: 1080px, opacity: 0, transform: 'rotate(0deg) scale(1)', backgroundColor: '#ffffff' }}\n\n- Animations for e2b3c4d5-1234-5678-abcd-000000000002:\n  * Animation 1: fadeIn\n    - Start frame: 0\n    - Duration: 3 frames\n    - End frame: 3\n    - Easing: easeOutCubic → Implement as: Easing.easeOutCubic\n    - Properties to animate:\n      • opacity: from 0 to 1\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 3], \n          [0, 1], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }\n        );`\n  * Animation 2: fadeOut\n    - Start frame: 0\n    - Duration: 5 frames\n    - End frame: 5\n    - Easing: easeInCubic → Implement as: Easing.easeInCubic\n    - Properties to animate:\n      • opacity: from 1 to 0\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 5], \n          [1, 0], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInCubic }\n        );`\n\n#### ELEMENT 3: e3c4d5e6-1234-5678-abcd-000000000003 (shape)\n- Initial Layout (CSS equivalent):\n  * x: 960px\n  * y: 540px\n  * width: 800px\n  * height: 800px\n  * opacity: 0\n  * rotation: 0deg\n  * scale: 1\n  * backgroundColor: transparent\n- React style equivalent: style={{ position: 'absolute', left: 960px, top: 540px, width: 800px, height: 800px, opacity: 0, transform: 'rotate(0deg) scale(1)', backgroundColor: 'transparent' }}\n\n- Animations for e3c4d5e6-1234-5678-abcd-000000000003:\n  * Animation 1: fadeIn\n    - Start frame: 0\n    - Duration: 15 frames\n    - End frame: 15\n    - Easing: easeOutCubic → Implement as: Easing.easeOutCubic\n    - Properties to animate:\n      • opacity: from 0 to 1\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 15], \n          [0, 1], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }\n        );`\n  * Animation 2: pulse\n    - Start frame: 0\n    - Duration: 30 frames\n    - End frame: 30\n    - Easing: easeInOutSine → Implement as: Easing.easeInOutSine\n    - Properties to animate:\n      • scale: from 1 to 1.05\n        Implementation: `const scaleValue = interpolate(\n          frame, \n          [0, 30], \n          [1, 1.05], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInOutSine }\n        );`\n      • opacity: from 0.8 to 1\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 30], \n          [0.8, 1], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInOutSine }\n        );`\n  * Animation 3: fadeOut\n    - Start frame: 0\n    - Duration: 10 frames\n    - End frame: 10\n    - Easing: easeInCubic → Implement as: Easing.easeInCubic\n    - Properties to animate:\n      • opacity: from 1 to 0\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 10], \n          [1, 0], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInCubic }\n        );`\n\n### SEQUENCE ORCHESTRATION & TIMING GUIDELINES:\nWhen implementing multiple animations, carefully orchestrate them to match the design intent:\n1. Use <Sequence> components for elements or animations that should start at specific frames.\n   Example: <Sequence from={30} durationInFrames={60}><YourAnimatedElement /></Sequence>\n2. For animation dependencies between elements (animations that must follow others):\n   - Create a timing map that respects trigger values like 'afterPrevious' by calculating startFrames.\n   - Example: const titleExitFrame = titleStartFrame + titleDuration;\n             const subTitleStartFrame = titleExitFrame; // Starting after title exits\n\n### AUDIO IMPLEMENTATION:\nThis scene includes the following audio track(s) to implement:\n- Audio 1: audio-shutter\n  - Source: audio/shutter.mp3\n  - Start at frame: 5\n  - Volume: 1\n  - Implementation: <Audio src={\"audio/shutter.mp3\"} startFrom={5} volume={1} />\n\n### CODE QUALITY & PERFORMANCE GUIDELINES:\n1. MODULARITY: For complex elements, consider creating sub-components.\n2. PERFORMANCE: Minimize DOM nodes - prefer CSS transforms over creating new elements.\n3. MEMOIZATION: Use React.useMemo() for computationally expensive calculations.\n4. TYPING: Provide proper TypeScript types throughout, including for style objects.\n5. COMMENTS: Add brief comments for complex animation logic or calculations.\n6. ORGANIZATION: Group related animations and separate distinct animation phases.\n7. ERROR HANDLING: Include defensive checks for potentially undefined values.\n\n### CRITICAL REMINDER:\n- PRECISELY follow the AnimationDesignBrief's specifications.\n- RESPECT the timing, durations, and easing specified in the brief.\n- IMPLEMENT ALL elements and animations exactly as detailed above.\n- START with the boilerplate structure provided earlier.\n- REMEMBER the first line MUST be: // src/remotion/components/scenes/CloseupOfAScene.tsx","sceneId":"d9250c10-2688-495a-900e-0e37145387ef","userData":{"userId":"92256ac9-495a-4ba2-aecc-fa4ce6756baa"},"projectId":"c3ec02e0-5bfd-484a-953b-b35ed645623f","componentName":"CloseupOfAScene","durationInFrames":90,"animationDesignBriefId":"e7be489d-bdfe-4049-9b0b-f1c4761681a5"},"statusMessageId":"524a3b99-a6b5-4130-b043-541d80d5142c"}]