[{"id":"6ecd9e02-6b92-4759-9d01-5d98d9fd1951","projectId":"c94eefc1-a2ac-49ea-bfb8-ba13864a0a6a","effect":"3dModelsSpinScene","tsxCode":"\"use client\";\n\n// src/remotion/components/scenes/3dModelsSpinScene.tsx\nimport React from 'react';\nimport {\n  AbsoluteFill,\n  useCurrentFrame,\n  useVideoConfig,\n  interpolate,\n  Easing,\n  Audio,\n} from 'remotion';\nimport { AnimationDesignBrief } from '~/lib/schemas/animationDesignBrief.schema';\n\ninterface SpinningModelProps {\n  left: number;\n  top: number;\n  size: number;\n}\n\nconst SpinningModel: React.FC<SpinningModelProps> = ({ left, top, size }) => {\n  const frame = useCurrentFrame();\n  const { fps } = useVideoConfig();\n\n  // Fade In (0-30)\n  const fadeInOpacity = interpolate(\n    frame,\n    [0, 30],\n    [0, 1],\n    { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }\n  );\n\n  // Slide Up (0-30)\n  const slideY = interpolate(\n    frame,\n    [0, 30],\n    [top + 50, top],\n    { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutQuint }\n  );\n\n  // Rotation (0-180)\n  const rotation = interpolate(\n    frame,\n    [0, 180],\n    [0, 360],\n    { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.linear }\n  );\n\n  // Fade Out (0-60)\n  const fadeOut = interpolate(\n    frame,\n    [0, 60],\n    [1, 0],\n    { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInCubic }\n  );\n\n  const opacity = frame <= 60 ? fadeOut : fadeInOpacity;\n\n  const style: React.CSSProperties = {\n    position: 'absolute',\n    left,\n    top: slideY,\n    width: size,\n    height: size,\n    opacity,\n    transform: `rotate(${rotation}deg) scale(1)`,\n    backgroundColor: '#00B5FF',\n    borderRadius: '16px',\n  };\n\n  return <div style={style} />;\n};\n\nexport const 3dModelsSpinScene: React.FC<{ brief: AnimationDesignBrief }> = ({ brief }) => {\n  const frame = useCurrentFrame();\n  const { fps, width, height } = useVideoConfig();\n\n  // Background\n  const backgroundStyle: React.CSSProperties = {\n    position: 'absolute',\n    left: 0,\n    top: 0,\n    width: width,\n    height: height,\n    opacity: 1,\n    transform: 'rotate(0deg) scale(1)',\n    backgroundColor: '#111111',\n  };\n\n  // Bottom overlay\n  const bottomOverlayStyle: React.CSSProperties = {\n    position: 'absolute',\n    left: 0,\n    top: 700,\n    width: width,\n    height: 380,\n    opacity: 0.8,\n    transform: 'rotate(0deg) scale(1)',\n    backgroundColor: '#222222',\n  };\n\n  // Left stripe animations (Element 3)\n  const stripeFadeIn1 = interpolate(\n    frame,\n    [0, 60],\n    [0, 0.2],\n    { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }\n  );\n  const stripeFadeCustom1 = interpolate(\n    frame,\n    [0, 60],\n    [0.2, 0.05],\n    { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInOutSine }\n  );\n  const leftStripeOpacity = stripeFadeCustom1;\n\n  const leftStripeStyle: React.CSSProperties = {\n    position: 'absolute',\n    left: 250,\n    top: 0,\n    width: 100,\n    height: height,\n    opacity: leftStripeOpacity,\n    transform: 'rotate(-15deg) scale(1)',\n    backgroundColor: '#FFFFFF',\n  };\n\n  // Right stripe animations (Element 4)\n  const stripeFadeIn2 = interpolate(\n    frame,\n    [0, 60],\n    [0, 0.15],\n    { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }\n  );\n  const stripeFadeCustom2 = interpolate(\n    frame,\n    [0, 60],\n    [0.15, 0.05],\n    { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInOutSine }\n  );\n  const rightStripeOpacity = stripeFadeCustom2;\n\n  const rightStripeStyle: React.CSSProperties = {\n    position: 'absolute',\n    left: 1570,\n    top: 0,\n    width: 100,\n    height: height,\n    opacity: rightStripeOpacity,\n    transform: 'rotate(15deg) scale(1)',\n    backgroundColor: '#FFFFFF',\n  };\n\n  // Title text animations (Element 8)\n  const titleOpacityIn = interpolate(\n    frame,\n    [0, 30],\n    [0, 1],\n    { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }\n  );\n  const titleY = interpolate(\n    frame,\n    [0, 30],\n    [50, 100],\n    { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutQuint }\n  );\n  const titleOpacityOut = interpolate(\n    frame,\n    [0, 30],\n    [1, 0],\n    { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInCubic }\n  );\n  const titleOpacity = titleOpacityOut;\n\n  const titleStyle: React.CSSProperties = {\n    position: 'absolute',\n    left: 960 - 400,\n    top: titleY,\n    width: 800,\n    height: 80,\n    opacity: titleOpacity,\n    transform: 'rotate(0deg) scale(1)',\n    color: '#FFFFFF',\n    fontFamily: 'Roboto, sans-serif',\n    fontSize: 48,\n    textAlign: 'center',\n  };\n\n  return (\n    <AbsoluteFill>\n      {/* Background and overlays */}\n      <div style={backgroundStyle} />\n      <div style={bottomOverlayStyle} />\n\n      {/* Decorative stripes */}\n      <div style={leftStripeStyle} />\n      <div style={rightStripeStyle} />\n\n      {/* Spinning placeholder boxes */}\n      <SpinningModel left={640} top={540} size={300} />\n      <SpinningModel left={960} top={540} size={300} />\n      <SpinningModel left={1280} top={540} size={300} />\n\n      {/* Title Text */}\n      <h1 style={titleStyle}>Modern Gallery Showcase</h1>\n\n      {/* Ambient Audio */}\n      <Audio src={\"ambient_gallery.mp3\"} startFrom={0} volume={0.6} />\n    </AbsoluteFill>\n  );\n};","status":"error","outputUrl":null,"errorMessage":"Build error: Build failed with 1 error:\n../../../../../../private/var/folders/6n/l8_rdhx56gx3qk8vk9_s_54h0000gn/T/bazaar-components-6ecd9e02-6b92-4759-9d01-5d98d9fd1951/component.tsx:74:14: ERROR: Syntax error \"d\"","retryCount":1,"createdAt":"2025-05-10 14:03:06.854551+00","updatedAt":"2025-05-10 14:03:41.663+00","metadata":{"fps":30,"width":1920,"height":1080,"prompt":"### ROLE: You are an Expert Remotion Developer and Senior React Engineer.\n### TASK: Create a production-quality Remotion React functional component in TypeScript.\n### COMPONENT NAME: '3dModelsSpinScene'\n### OBJECTIVE: Generate a component that precisely implements the provided AnimationDesignBrief with professional animations and visual effects.\n### VIDEO CONFIG: Target video is 1920x1080px, 210 frames total duration, at 30 FPS.\n### MANDATORY REQUIREMENTS:\n- The FIRST line MUST be: // src/remotion/components/scenes/3dModelsSpinScene.tsx\n- The component MUST be a functional component using TypeScript (.tsx).\n- ALWAYS use the Remotion hooks: useCurrentFrame() and useVideoConfig() for timing and dimensions.\n- Component MUST accept props: { brief: AnimationDesignBrief } (assume this type is imported).\n- Utilize appropriate Remotion animation functions based on each element's needs:\n  * interpolate() - For smooth linear or eased transitions between values\n  * spring() - For physics-based, bouncy animations\n  * Easing module - For specifying animation curves (easeInOut, bezier, etc.)\n- Use Remotion timing components when needed:\n  * <Sequence from={startFrame} durationInFrames={duration}> - For sequential animations\n  * <Series> - For orchestrating complex animation sequences\n  * <Loop> - For repeating animations\n- Apply absolute positioning based on initialLayout coordinates.\n\n### BOILERPLATE STRUCTURE (Follow this pattern):\n```typescript\n// src/remotion/components/scenes/3dModelsSpinScene.tsx\nimport { AbsoluteFill, useCurrentFrame, useVideoConfig, interpolate, spring, Sequence, Easing, Img, Audio } from 'remotion';\nimport React from 'react';\n// import { AnimationDesignBrief } from '~/lib/schemas/animationDesignBrief.schema';\n\nexport const 3dModelsSpinScene: React.FC<{ brief: AnimationDesignBrief }> = ({ brief }) => {\n  const frame = useCurrentFrame();\n  const { fps, width, height, durationInFrames } = useVideoConfig();\n\n  // Extract key brief properties\n  const { elements, colorPalette, typography, overallStyle } = brief;\n\n  // Define background color from brief\n  const backgroundColor = colorPalette?.background || 'transparent';\n\n  return (\n    <AbsoluteFill style={{ backgroundColor }}>\n      {/* Render each element with its animations */}\n    </AbsoluteFill>\n  );\n};\n```\n\n--- Scene Overview ---\nScene Name: 3dModelsSpinScene\nPurpose: 3D models spin in a sleek gallery with reflective floor and modern lighting\nOverall Style: Sleek, modern, minimalistic with metallic accents\n\n--- Color Palette ---\n- Primary Color: #222222\n- Secondary Color: #444444\n- Accent Color: #00B5FF\n- Background Color: #111111\n- Text Primary Color: #FFFFFF\n- Text Secondary Color: #BBBBBB\n\n--- Typography ---\n- Default Font Family: Roboto, sans-serif\n- Heading1 Style:\n  - Font Family: Roboto Bold, sans-serif\n  - Font Size: 48\n\n### ELEMENT-BY-ELEMENT IMPLEMENTATION GUIDE:\nEach element from the AnimationDesignBrief must be translated into React/Remotion code following these guidelines:\n\n### IMPORTANT RESTRICTION - NO EXTERNAL ASSETS:\n- DO NOT reference or try to load any external images, videos, or other media files\n- DO NOT use the <Img> component from Remotion to load any image files\n- If the AnimationDesignBrief mentions image elements, implement them as:\n  * Colored rectangles or circles using <div> with backgroundColor and borderRadius\n  * SVG graphics created programmatically (rectangles, circles, paths)\n  * CSS gradients for more visual interest\n- Focus ONLY on animations, shapes, text elements, and colors\n- This temporary restriction ensures component reliability while asset management is being developed\n\n#### ELEMENT TYPE TRANSLATION:\n- 'text' → Use a <div> or <h1>-<h6> with appropriate styling\n- 'image' → DO NOT USE <Img>. Instead, use a <div> with solid background color or gradient\n- 'video' → DO NOT USE <Video>. Instead, use animated <div> elements\n- 'shape' → Use appropriate shape elements (div with border-radius for circles/rounded rectangles, SVG for complex shapes)\n- 'container' → Use a positioned <div> that may contain child elements\n\n#### INITIAL LAYOUT TRANSLATION:\nAll initialLayout properties MUST be translated to React inline styles:\n- 'x', 'y' → style={{ position: 'absolute', left: x, top: y }}\n- 'width', 'height' → style={{ width, height }}\n- 'opacity' → style={{ opacity }}\n- 'rotation' → style={{ transform: `rotate(${rotation}deg)` }}\n- 'scale' → style={{ transform: `scale(${scale})` }}\n- 'zIndex' → style={{ zIndex }}\n- Multiple transforms should be combined: transform: `rotate(${rotation}deg) scale(${scale})`\n\n#### ANIMATION IMPLEMENTATION:\nFor each animation, use this approach:\n1. Calculate the active animation frames based on delayInFrames and durationInFrames:\n   const animStartFrame = animation.delayInFrames || 0;\n   const animEndFrame = animStartFrame + (animation.durationInFrames || 30);\n2. Apply the appropriate Remotion animation function:\n   - For 'spring' animations or when remotionFunctionHint is 'spring':\n     const animatedValue = spring({\n       frame: frame - animStartFrame,\n       fps,\n       from: property.from,\n       to: property.to,\n       config: property.springConfig || { damping: 10, mass: 1, stiffness: 100 }\n     });\n   - For most other animations, use interpolate:\n     const animatedValue = interpolate(\n       frame,\n       [animStartFrame, animEndFrame],\n       [property.from, property.to],\n       {\n         extrapolateLeft: 'clamp',\n         extrapolateRight: 'clamp',\n         easing: determineEasing(animation.easing)\n       }\n     );\n3. Apply animated values to style properties:\n   - For transform properties (e.g., 'transform.translateX', 'transform.scale'):\n     Extract the specific transform type and apply with appropriate units.\n   - For standard CSS properties (e.g., 'opacity'):\n     Apply directly to the style object.\n   - Example: style={{ opacity: animatedOpacity, transform: `translateX(${animatedX}px) scale(${animatedScale})` }}\n4. For sequence-based timing (startAfter, startWith):\n   - Wrap elements in <Sequence> components with appropriate 'from' and 'durationInFrames' props\n   - Use 'from' attribute based on animation.delayInFrames\n   - Example: <Sequence from={30} durationInFrames={60}>...</Sequence>\n\n### SPECIFIC ELEMENTS TO IMPLEMENT:\n\n#### ELEMENT 1: 272165c4-ae60-425d-aa72-d7eeaaa0e76c (shape)\n- Initial Layout (CSS equivalent):\n  * x: 0px\n  * y: 0px\n  * width: 1920px\n  * height: 1080px\n  * opacity: 1\n  * rotation: 0deg\n  * scale: 1\n  * backgroundColor: #111111\n- React style equivalent: style={{ position: 'absolute', left: 0px, top: 0px, width: 1920px, height: 1080px, opacity: 1, transform: 'rotate(0deg) scale(1)', backgroundColor: '#111111' }}\n\n#### ELEMENT 2: f2feb690-69c3-4c05-af2f-187146e88d58 (shape)\n- Initial Layout (CSS equivalent):\n  * x: 0px\n  * y: 700px\n  * width: 1920px\n  * height: 380px\n  * opacity: 0.8\n  * rotation: 0deg\n  * scale: 1\n  * backgroundColor: #222222\n- React style equivalent: style={{ position: 'absolute', left: 0px, top: 700px, width: 1920px, height: 380px, opacity: 0.8, transform: 'rotate(0deg) scale(1)', backgroundColor: '#222222' }}\n\n#### ELEMENT 3: 29316018-7d73-453e-a130-0d381ab1f40c (shape)\n- Initial Layout (CSS equivalent):\n  * x: 250px\n  * y: 0px\n  * width: 100px\n  * height: 1080px\n  * opacity: 0\n  * rotation: -15deg\n  * scale: 1\n  * backgroundColor: #FFFFFF\n- React style equivalent: style={{ position: 'absolute', left: 250px, top: 0px, width: 100px, height: 1080px, opacity: 0, transform: 'rotate(-15deg) scale(1)', backgroundColor: '#FFFFFF' }}\n\n- Animations for 29316018-7d73-453e-a130-0d381ab1f40c:\n  * Animation 1: fadeIn\n    - Start frame: 0\n    - Duration: 60 frames\n    - End frame: 60\n    - Easing: easeOutCubic → Implement as: Easing.easeOutCubic\n    - Properties to animate:\n      • opacity: from 0 to 0.2\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 60], \n          [0, 0.2], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }\n        );`\n  * Animation 2: customProperty\n    - Start frame: 0\n    - Duration: 60 frames\n    - End frame: 60\n    - Easing: easeInOutSine → Implement as: Easing.easeInOutSine\n    - Properties to animate:\n      • opacity: from 0.2 to 0.05\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 60], \n          [0.2, 0.05], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInOutSine }\n        );`\n\n#### ELEMENT 4: 2693f628-0c4b-443d-ade1-4df48b8487bd (shape)\n- Initial Layout (CSS equivalent):\n  * x: 1570px\n  * y: 0px\n  * width: 100px\n  * height: 1080px\n  * opacity: 0\n  * rotation: 15deg\n  * scale: 1\n  * backgroundColor: #FFFFFF\n- React style equivalent: style={{ position: 'absolute', left: 1570px, top: 0px, width: 100px, height: 1080px, opacity: 0, transform: 'rotate(15deg) scale(1)', backgroundColor: '#FFFFFF' }}\n\n- Animations for 2693f628-0c4b-443d-ade1-4df48b8487bd:\n  * Animation 1: fadeIn\n    - Start frame: 0\n    - Duration: 60 frames\n    - End frame: 60\n    - Easing: easeOutCubic → Implement as: Easing.easeOutCubic\n    - Properties to animate:\n      • opacity: from 0 to 0.15\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 60], \n          [0, 0.15], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }\n        );`\n  * Animation 2: customProperty\n    - Start frame: 0\n    - Duration: 60 frames\n    - End frame: 60\n    - Easing: easeInOutSine → Implement as: Easing.easeInOutSine\n    - Properties to animate:\n      • opacity: from 0.15 to 0.05\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 60], \n          [0.15, 0.05], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInOutSine }\n        );`\n\n#### ELEMENT 5: 326ae22f-38bf-4fc0-91a1-12fb56156515 (customComponent)\n- Initial Layout (CSS equivalent):\n  * x: 640px\n  * y: 540px\n  * width: 300px\n  * height: 300px\n  * opacity: 0\n  * rotation: 0deg\n  * scale: 1\n- React style equivalent: style={{ position: 'absolute', left: 640px, top: 540px, width: 300px, height: 300px, opacity: 0, transform: 'rotate(0deg) scale(1)' }}\n\n- Animations for 326ae22f-38bf-4fc0-91a1-12fb56156515:\n  * Animation 1: fadeIn\n    - Start frame: 0\n    - Duration: 30 frames\n    - End frame: 30\n    - Easing: easeOutCubic → Implement as: Easing.easeOutCubic\n    - Properties to animate:\n      • opacity: from 0 to 1\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 30], \n          [0, 1], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }\n        );`\n  * Animation 2: slideUp\n    - Start frame: 0\n    - Duration: 30 frames\n    - End frame: 30\n    - Easing: easeOutQuint → Implement as: Easing.easeOutQuint\n    - Properties to animate:\n      • y: from 590 to 540\n        Implementation: `const yValue = interpolate(\n          frame, \n          [0, 30], \n          [590, 540], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutQuint }\n        );`\n  * Animation 3: customProperty\n    - Start frame: 0\n    - Duration: 180 frames\n    - End frame: 180\n    - Easing: linear → Implement as: Easing.linear\n    - Properties to animate:\n      • rotation: from 0 to 360\n        Implementation: `const rotationValue = interpolate(\n          frame, \n          [0, 180], \n          [0, 360], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.linear }\n        );`\n  * Animation 4: fadeOut\n    - Start frame: 0\n    - Duration: 60 frames\n    - End frame: 60\n    - Easing: easeInCubic → Implement as: Easing.easeInCubic\n    - Properties to animate:\n      • opacity: from 1 to 0\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 60], \n          [1, 0], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInCubic }\n        );`\n\n#### ELEMENT 6: 1ea92aa2-6543-4c4b-a3ea-e5567d7ba1c4 (customComponent)\n- Initial Layout (CSS equivalent):\n  * x: 960px\n  * y: 540px\n  * width: 300px\n  * height: 300px\n  * opacity: 0\n  * rotation: 0deg\n  * scale: 1\n- React style equivalent: style={{ position: 'absolute', left: 960px, top: 540px, width: 300px, height: 300px, opacity: 0, transform: 'rotate(0deg) scale(1)' }}\n\n- Animations for 1ea92aa2-6543-4c4b-a3ea-e5567d7ba1c4:\n  * Animation 1: fadeIn\n    - Start frame: 0\n    - Duration: 30 frames\n    - End frame: 30\n    - Easing: easeOutCubic → Implement as: Easing.easeOutCubic\n    - Properties to animate:\n      • opacity: from 0 to 1\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 30], \n          [0, 1], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }\n        );`\n  * Animation 2: slideUp\n    - Start frame: 0\n    - Duration: 30 frames\n    - End frame: 30\n    - Easing: easeOutQuint → Implement as: Easing.easeOutQuint\n    - Properties to animate:\n      • y: from 590 to 540\n        Implementation: `const yValue = interpolate(\n          frame, \n          [0, 30], \n          [590, 540], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutQuint }\n        );`\n  * Animation 3: customProperty\n    - Start frame: 0\n    - Duration: 180 frames\n    - End frame: 180\n    - Easing: linear → Implement as: Easing.linear\n    - Properties to animate:\n      • rotation: from 0 to 360\n        Implementation: `const rotationValue = interpolate(\n          frame, \n          [0, 180], \n          [0, 360], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.linear }\n        );`\n  * Animation 4: fadeOut\n    - Start frame: 0\n    - Duration: 60 frames\n    - End frame: 60\n    - Easing: easeInCubic → Implement as: Easing.easeInCubic\n    - Properties to animate:\n      • opacity: from 1 to 0\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 60], \n          [1, 0], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInCubic }\n        );`\n\n#### ELEMENT 7: cf650b18-57e8-4728-9e6e-0c3074f69889 (customComponent)\n- Initial Layout (CSS equivalent):\n  * x: 1280px\n  * y: 540px\n  * width: 300px\n  * height: 300px\n  * opacity: 0\n  * rotation: 0deg\n  * scale: 1\n- React style equivalent: style={{ position: 'absolute', left: 1280px, top: 540px, width: 300px, height: 300px, opacity: 0, transform: 'rotate(0deg) scale(1)' }}\n\n- Animations for cf650b18-57e8-4728-9e6e-0c3074f69889:\n  * Animation 1: fadeIn\n    - Start frame: 0\n    - Duration: 30 frames\n    - End frame: 30\n    - Easing: easeOutCubic → Implement as: Easing.easeOutCubic\n    - Properties to animate:\n      • opacity: from 0 to 1\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 30], \n          [0, 1], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }\n        );`\n  * Animation 2: slideUp\n    - Start frame: 0\n    - Duration: 30 frames\n    - End frame: 30\n    - Easing: easeOutQuint → Implement as: Easing.easeOutQuint\n    - Properties to animate:\n      • y: from 590 to 540\n        Implementation: `const yValue = interpolate(\n          frame, \n          [0, 30], \n          [590, 540], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutQuint }\n        );`\n  * Animation 3: customProperty\n    - Start frame: 0\n    - Duration: 180 frames\n    - End frame: 180\n    - Easing: linear → Implement as: Easing.linear\n    - Properties to animate:\n      • rotation: from 0 to 360\n        Implementation: `const rotationValue = interpolate(\n          frame, \n          [0, 180], \n          [0, 360], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.linear }\n        );`\n  * Animation 4: fadeOut\n    - Start frame: 0\n    - Duration: 60 frames\n    - End frame: 60\n    - Easing: easeInCubic → Implement as: Easing.easeInCubic\n    - Properties to animate:\n      • opacity: from 1 to 0\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 60], \n          [1, 0], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInCubic }\n        );`\n\n#### ELEMENT 8: e887eca4-8a61-4b18-a059-f3423b2bb0be (text)\n- Content: Modern Gallery Showcase\n- Initial Layout (CSS equivalent):\n  * x: 960px\n  * y: 100px\n  * width: 800px\n  * height: 80px\n  * opacity: 0\n  * rotation: 0deg\n  * scale: 1\n- React style equivalent: style={{ position: 'absolute', left: 960px, top: 100px, width: 800px, height: 80px, opacity: 0, transform: 'rotate(0deg) scale(1)' }}\n\n- Animations for e887eca4-8a61-4b18-a059-f3423b2bb0be:\n  * Animation 1: fadeIn\n    - Start frame: 0\n    - Duration: 30 frames\n    - End frame: 30\n    - Easing: easeOutCubic → Implement as: Easing.easeOutCubic\n    - Properties to animate:\n      • opacity: from 0 to 1\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 30], \n          [0, 1], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }\n        );`\n  * Animation 2: slideDown\n    - Start frame: 0\n    - Duration: 30 frames\n    - End frame: 30\n    - Easing: easeOutQuint → Implement as: Easing.easeOutQuint\n    - Properties to animate:\n      • y: from 50 to 100\n        Implementation: `const yValue = interpolate(\n          frame, \n          [0, 30], \n          [50, 100], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutQuint }\n        );`\n  * Animation 3: fadeOut\n    - Start frame: 0\n    - Duration: 30 frames\n    - End frame: 30\n    - Easing: easeInCubic → Implement as: Easing.easeInCubic\n    - Properties to animate:\n      • opacity: from 1 to 0\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 30], \n          [1, 0], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInCubic }\n        );`\n\n### SEQUENCE ORCHESTRATION & TIMING GUIDELINES:\nWhen implementing multiple animations, carefully orchestrate them to match the design intent:\n1. Use <Sequence> components for elements or animations that should start at specific frames.\n   Example: <Sequence from={30} durationInFrames={60}><YourAnimatedElement /></Sequence>\n2. For animation dependencies between elements (animations that must follow others):\n   - Create a timing map that respects trigger values like 'afterPrevious' by calculating startFrames.\n   - Example: const titleExitFrame = titleStartFrame + titleDuration;\n             const subTitleStartFrame = titleExitFrame; // Starting after title exits\n\n### AUDIO IMPLEMENTATION:\nThis scene includes the following audio track(s) to implement:\n- Audio 1: ambient-01\n  - Source: ambient_gallery.mp3\n  - Start at frame: 0\n  - Volume: 0.6\n  - Implementation: <Audio src={\"ambient_gallery.mp3\"} startFrom={0} volume={0.6} />\n\n### CODE QUALITY & PERFORMANCE GUIDELINES:\n1. MODULARITY: For complex elements, consider creating sub-components.\n2. PERFORMANCE: Minimize DOM nodes - prefer CSS transforms over creating new elements.\n3. MEMOIZATION: Use React.useMemo() for computationally expensive calculations.\n4. TYPING: Provide proper TypeScript types throughout, including for style objects.\n5. COMMENTS: Add brief comments for complex animation logic or calculations.\n6. ORGANIZATION: Group related animations and separate distinct animation phases.\n7. ERROR HANDLING: Include defensive checks for potentially undefined values.\n\n### CRITICAL REMINDER:\n- PRECISELY follow the AnimationDesignBrief's specifications.\n- RESPECT the timing, durations, and easing specified in the brief.\n- IMPLEMENT ALL elements and animations exactly as detailed above.\n- START with the boilerplate structure provided earlier.\n- REMEMBER the first line MUST be: // src/remotion/components/scenes/3dModelsSpinScene.tsx","sceneId":"e18c8787-30e9-41fa-94f3-1d91eef9497f","userData":{"userId":"92256ac9-495a-4ba2-aecc-fa4ce6756baa"},"projectId":"c94eefc1-a2ac-49ea-bfb8-ba13864a0a6a","componentName":"3dModelsSpinScene","durationInFrames":210,"animationDesignBriefId":"e3f81484-39f7-4e1a-b850-0448a797c239"},"statusMessageId":"afecf2bf-79c5-4903-9f6e-69f913c5c1d2"},{"id":"c6160ac2-7272-4b66-bd77-c2be38409c9e","projectId":"c94eefc1-a2ac-49ea-bfb8-ba13864a0a6a","effect":"CleanUiScreenScene","tsxCode":"\"use client\";\n\n// src/remotion/components/scenes/CleanUiScreenScene.tsx\nimport React from 'react';\nimport { \n\tAbsoluteFill,\n\tuseCurrentFrame,\n\tuseVideoConfig,\n\tinterpolate,\n\tspring,\n\tSequence,\n\tEasing,\n} from 'remotion';\n// import { AnimationDesignBrief } from '~/lib/schemas/animationDesignBrief.schema';\n\nexport const CleanUiScreenScene: React.FC<{ brief: AnimationDesignBrief }> = ({ brief }) => {\n\tconst frame = useCurrentFrame();\n\tconst { fps, width, height, durationInFrames } = useVideoConfig();\n\n\t// Destructure brief\n\tconst { elements, colorPalette, typography, overallStyle } = brief;\n\tconst backgroundColor = colorPalette?.background || '#FFFFFF';\n\n\t// Element 2 fade-out opacity\n\tconst opacity2 = interpolate(\n\t\tframe,\n\t\t[0, 40],\n\t\t[1, 0],\n\t\t{ extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInCubic }\n\t);\n\n\t// Element 3 fade-in then fade-out (0-30 in, 30-50 out)\n\tconst opacity3 = frame <= 30\n\t\t? interpolate(\n\t\t\tframe,\n\t\t\t[0, 30],\n\t\t\t[0, 1],\n\t\t\t{ extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }\n\t\t)\n\t\t: frame <= 50\n\t\t? interpolate(\n\t\t\tframe,\n\t\t\t[30, 50],\n\t\t\t[1, 0],\n\t\t\t{ extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInCubic }\n\t\t)\n\t\t: 0;\n\n\t// Element 4 text fade-in/out (0-20 in, 20-40 out)\n\tconst opacity4 = frame <= 20\n\t\t? interpolate(\n\t\t\tframe,\n\t\t\t[0, 20],\n\t\t\t[0, 1],\n\t\t\t{ extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }\n\t\t)\n\t\t: frame <= 40\n\t\t? interpolate(\n\t\t\tframe,\n\t\t\t[20, 40],\n\t\t\t[1, 0],\n\t\t\t{ extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInCubic }\n\t\t)\n\t\t: 0;\n\n\t// Element 5 slide-in X\n\tconst x5 = frame <= 30\n\t\t? interpolate(\n\t\t\tframe,\n\t\t\t[0, 30],\n\t\t\t[-600, 660],\n\t\t\t{ extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutQuad }\n\t\t)\n\t\t: 660;\n\n\t// Element 7 \"Detail\" text fade-in/out (0-20 in, 20-40 out)\n\tconst opacity7 = frame <= 20\n\t\t? interpolate(\n\t\t\tframe,\n\t\t\t[0, 20],\n\t\t\t[0, 1],\n\t\t\t{ extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }\n\t\t)\n\t\t: frame <= 40\n\t\t? interpolate(\n\t\t\tframe,\n\t\t\t[20, 40],\n\t\t\t[1, 0],\n\t\t\t{ extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInCubic }\n\t\t)\n\t\t: 0;\n\n\t// Element 8 slide-in X (0-40)\n\tconst x8 = frame <= 40\n\t\t? interpolate(\n\t\t\tframe,\n\t\t\t[0, 40],\n\t\t\t[500, 880],\n\t\t\t{ extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }\n\t\t)\n\t\t: 880;\n\n\t// Element 10 \"Texture\" text fade-in/out (0-20 in, 20-40 out)\n\tconst opacity10 = frame <= 20\n\t\t? interpolate(\n\t\t\tframe,\n\t\t\t[0, 20],\n\t\t\t[0, 1],\n\t\t\t{ extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }\n\t\t)\n\t\t: frame <= 40\n\t\t? interpolate(\n\t\t\tframe,\n\t\t\t[20, 40],\n\t\t\t[1, 0],\n\t\t\t{ extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInCubic }\n\t\t)\n\t\t: 0;\n\n\t// Element 11 slide-in X (0-40)\n\tconst x11 = frame <= 40\n\t\t? interpolate(\n\t\t\tframe,\n\t\t\t[0, 40],\n\t\t\t[1100, 1480],\n\t\t\t{ extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }\n\t\t)\n\t\t: 1480;\n\n\treturn (\n\t\t<AbsoluteFill style={{ backgroundColor, overflow: 'hidden' }}>\n\t\t\t{/* Background full-screen */}\n\t\t\t<div\n\t\t\t\tstyle={{\n\t\t\t\t\tposition: 'absolute', left: 0, top: 0,\n\t\t\t\t\twidth: width, height: height,\n\t\t\t\t\topacity: 1,\n\t\t\t\t\ttransform: 'rotate(0deg) scale(1)',\n\t\t\t\t\tbackgroundColor: '#FFFFFF',\n\t\t\t\t}} />\n\n\t\t\t{/* Inner container fade out */}\n\t\t\t<div\n\t\t\t\tstyle={{\n\t\t\t\t\tposition: 'absolute', left: 160, top: 120,\n\t\t\t\t\twidth: 1600, height: 840,\n\t\t\t\t\topacity: opacity2,\n\t\t\t\t\ttransform: 'rotate(0deg) scale(1)',\n\t\t\t\t\tbackgroundColor: '#F5F5F5',\n\t\t\t\t}} />\n\n\t\t\t{/* Main UI panel fade in/out */}\n\t\t\t<div\n\t\t\t\tstyle={{\n\t\t\t\t\tposition: 'absolute', left: 360, top: 200,\n\t\t\t\t\twidth: 1200, height: 500,\n\t\t\t\t\topacity: opacity3,\n\t\t\t\t\ttransform: 'rotate(0deg) scale(1)',\n\t\t\t\t\tbackgroundColor: '#EFEFEF',\n\t\t\t\t}} />\n\n\t\t\t{/* Drag & Drop text */}\n\t\t\t<div\n\t\t\t\tstyle={{\n\t\t\t\t\tposition: 'absolute', left: 960, top: 450,\n\t\t\t\t\twidth: 600, height: 50,\n\t\t\t\t\topacity: opacity4,\n\t\t\t\t\ttransform: 'rotate(0deg) scale(1)',\n\t\t\t\t\tdisplay: 'flex', alignItems: 'center', justifyContent: 'center',\n\t\t\t\t\tfontFamily: 'Inter, sans-serif',\n\t\t\t\t\tfontSize: 24,\n\t\t\t\t\tcolor: '#666666',\n\t\t\t\t}}>\n\t\t\t\tDrag & Drop Photo Here\n\t\t\t</div>\n\n\t\t\t{/* Photo placeholder sliding in */}\n\t\t\t<div\n\t\t\t\tstyle={{\n\t\t\t\t\tposition: 'absolute', left: x5, top: 450,\n\t\t\t\t\twidth: 600, height: 400,\n\t\t\t\t\topacity: 1,\n\t\t\t\t\ttransform: 'rotate(0deg) scale(1)',\n\t\t\t\t\tbackgroundColor: '#DDDDDD',\n\t\t\t\t\tborderRadius: 8,\n\t\t\t\t}} />\n\n\t\t\t{/* Slider track left */}\n\t\t\t<div\n\t\t\t\tstyle={{\n\t\t\t\t\tposition: 'absolute', left: 500, top: 770,\n\t\t\t\t\twidth: 400, height: 6,\n\t\t\t\t\topacity: 1,\n\t\t\t\t\ttransform: 'rotate(0deg) scale(1)',\n\t\t\t\t\tbackgroundColor: '#CCCCCC',\n\t\t\t\t}} />\n\n\t\t\t{/* \"Detail\" label */}\n\t\t\t<div\n\t\t\t\tstyle={{\n\t\t\t\t\tposition: 'absolute', left: 450, top: 750,\n\t\t\t\t\twidth: 100, height: 30,\n\t\t\t\t\topacity: opacity7,\n\t\t\t\t\ttransform: 'rotate(0deg) scale(1)',\n\t\t\t\t\tfontFamily: 'Inter, sans-serif',\n\t\t\t\t\tfontSize: 18,\n\t\t\t\t\tcolor: '#333333',\n\t\t\t\t}}>\n\t\t\t\tDetail\n\t\t\t</div>\n\n\t\t\t{/* Slider thumb left */}\n\t\t\t<div\n\t\t\t\tstyle={{\n\t\t\t\t\tposition: 'absolute', left: x8, top: 767,\n\t\t\t\t\twidth: 20, height: 20,\n\t\t\t\t\topacity: 1,\n\t\t\t\t\ttransform: 'rotate(0deg) scale(1)',\n\t\t\t\t\tbackgroundColor: '#008ED2',\n\t\t\t\t\tborderRadius: 10,\n\t\t\t\t}} />\n\n\t\t\t{/* Slider track right */}\n\t\t\t<div\n\t\t\t\tstyle={{\n\t\t\t\t\tposition: 'absolute', left: 1100, top: 770,\n\t\t\t\t\twidth: 400, height: 6,\n\t\t\t\t\topacity: 1,\n\t\t\t\t\ttransform: 'rotate(0deg) scale(1)',\n\t\t\t\t\tbackgroundColor: '#CCCCCC',\n\t\t\t\t}} />\n\n\t\t\t{/* \"Texture\" label */}\n\t\t\t<div\n\t\t\t\tstyle={{\n\t\t\t\t\tposition: 'absolute', left: 1050, top: 750,\n\t\t\t\t\twidth: 100, height: 30,\n\t\t\t\t\topacity: opacity10,\n\t\t\t\t\ttransform: 'rotate(0deg) scale(1)',\n\t\t\t\t\tfontFamily: 'Inter, sans-serif',\n\t\t\t\t\tfontSize: 18,\n\t\t\t\t\tcolor: '#333333',\n\t\t\t\t}}>\n\t\t\t\tTexture\n\t\t\t</div>\n\n\t\t\t{/* Slider thumb right */}\n\t\t\t<div\n\t\t\t\tstyle={{\n\t\t\t\t\tposition: 'absolute', left: x11, top: 767,\n\t\t\t\t\twidth: 20, height: 20,\n\t\t\t\t\topacity: 1,\n\t\t\t\t\ttransform: 'rotate(0deg) scale(1)',\n\t\t\t\t\tbackgroundColor: '#FFA500',\n\t\t\t\t\tborderRadius: 10,\n\t\t\t\t}} />\n\n\t\t</AbsoluteFill>\n\t);\n};","status":"complete","outputUrl":"https://bazaar-vid-components.3a37cf04c89e7483b59120fb95af6468.r2.dev/custom-components/c6160ac2-7272-4b66-bd77-c2be38409c9e.js","errorMessage":"TSX code is missing for this job","retryCount":1,"createdAt":"2025-05-10 14:02:29.244145+00","updatedAt":"2025-05-10 14:03:10.75+00","metadata":{"fps":30,"width":1920,"height":1080,"prompt":"### ROLE: You are an Expert Remotion Developer and Senior React Engineer.\n### TASK: Create a production-quality Remotion React functional component in TypeScript.\n### COMPONENT NAME: 'CleanUiScreenScene'\n### OBJECTIVE: Generate a component that precisely implements the provided AnimationDesignBrief with professional animations and visual effects.\n### VIDEO CONFIG: Target video is 1920x1080px, 240 frames total duration, at 30 FPS.\n### MANDATORY REQUIREMENTS:\n- The FIRST line MUST be: // src/remotion/components/scenes/CleanUiScreenScene.tsx\n- The component MUST be a functional component using TypeScript (.tsx).\n- ALWAYS use the Remotion hooks: useCurrentFrame() and useVideoConfig() for timing and dimensions.\n- Component MUST accept props: { brief: AnimationDesignBrief } (assume this type is imported).\n- Utilize appropriate Remotion animation functions based on each element's needs:\n  * interpolate() - For smooth linear or eased transitions between values\n  * spring() - For physics-based, bouncy animations\n  * Easing module - For specifying animation curves (easeInOut, bezier, etc.)\n- Use Remotion timing components when needed:\n  * <Sequence from={startFrame} durationInFrames={duration}> - For sequential animations\n  * <Series> - For orchestrating complex animation sequences\n  * <Loop> - For repeating animations\n- Apply absolute positioning based on initialLayout coordinates.\n\n### BOILERPLATE STRUCTURE (Follow this pattern):\n```typescript\n// src/remotion/components/scenes/CleanUiScreenScene.tsx\nimport { AbsoluteFill, useCurrentFrame, useVideoConfig, interpolate, spring, Sequence, Easing, Img, Audio } from 'remotion';\nimport React from 'react';\n// import { AnimationDesignBrief } from '~/lib/schemas/animationDesignBrief.schema';\n\nexport const CleanUiScreenScene: React.FC<{ brief: AnimationDesignBrief }> = ({ brief }) => {\n  const frame = useCurrentFrame();\n  const { fps, width, height, durationInFrames } = useVideoConfig();\n\n  // Extract key brief properties\n  const { elements, colorPalette, typography, overallStyle } = brief;\n\n  // Define background color from brief\n  const backgroundColor = colorPalette?.background || 'transparent';\n\n  return (\n    <AbsoluteFill style={{ backgroundColor }}>\n      {/* Render each element with its animations */}\n    </AbsoluteFill>\n  );\n};\n```\n\n--- Scene Overview ---\nScene Name: CleanUiScreenScene\nPurpose: Clean UI screen recording: drag-and-drop photo, slider adjustments for detail and texture preview\nOverall Style: Minimalistic modern UI with clean colors and smooth animations\n\n--- Color Palette ---\n- Primary Color: #008ED2\n- Secondary Color: #CCCCCC\n- Accent Color: #FFA500\n- Background Color: #FFFFFF\n- Text Primary Color: #333333\n- Text Secondary Color: #666666\n\n--- Typography ---\n- Default Font Family: Inter\n- Heading1 Style:\n  - Font Family: Inter Bold\n  - Font Size: 36\n\n### ELEMENT-BY-ELEMENT IMPLEMENTATION GUIDE:\nEach element from the AnimationDesignBrief must be translated into React/Remotion code following these guidelines:\n\n### IMPORTANT RESTRICTION - NO EXTERNAL ASSETS:\n- DO NOT reference or try to load any external images, videos, or other media files\n- DO NOT use the <Img> component from Remotion to load any image files\n- If the AnimationDesignBrief mentions image elements, implement them as:\n  * Colored rectangles or circles using <div> with backgroundColor and borderRadius\n  * SVG graphics created programmatically (rectangles, circles, paths)\n  * CSS gradients for more visual interest\n- Focus ONLY on animations, shapes, text elements, and colors\n- This temporary restriction ensures component reliability while asset management is being developed\n\n#### ELEMENT TYPE TRANSLATION:\n- 'text' → Use a <div> or <h1>-<h6> with appropriate styling\n- 'image' → DO NOT USE <Img>. Instead, use a <div> with solid background color or gradient\n- 'video' → DO NOT USE <Video>. Instead, use animated <div> elements\n- 'shape' → Use appropriate shape elements (div with border-radius for circles/rounded rectangles, SVG for complex shapes)\n- 'container' → Use a positioned <div> that may contain child elements\n\n#### INITIAL LAYOUT TRANSLATION:\nAll initialLayout properties MUST be translated to React inline styles:\n- 'x', 'y' → style={{ position: 'absolute', left: x, top: y }}\n- 'width', 'height' → style={{ width, height }}\n- 'opacity' → style={{ opacity }}\n- 'rotation' → style={{ transform: `rotate(${rotation}deg)` }}\n- 'scale' → style={{ transform: `scale(${scale})` }}\n- 'zIndex' → style={{ zIndex }}\n- Multiple transforms should be combined: transform: `rotate(${rotation}deg) scale(${scale})`\n\n#### ANIMATION IMPLEMENTATION:\nFor each animation, use this approach:\n1. Calculate the active animation frames based on delayInFrames and durationInFrames:\n   const animStartFrame = animation.delayInFrames || 0;\n   const animEndFrame = animStartFrame + (animation.durationInFrames || 30);\n2. Apply the appropriate Remotion animation function:\n   - For 'spring' animations or when remotionFunctionHint is 'spring':\n     const animatedValue = spring({\n       frame: frame - animStartFrame,\n       fps,\n       from: property.from,\n       to: property.to,\n       config: property.springConfig || { damping: 10, mass: 1, stiffness: 100 }\n     });\n   - For most other animations, use interpolate:\n     const animatedValue = interpolate(\n       frame,\n       [animStartFrame, animEndFrame],\n       [property.from, property.to],\n       {\n         extrapolateLeft: 'clamp',\n         extrapolateRight: 'clamp',\n         easing: determineEasing(animation.easing)\n       }\n     );\n3. Apply animated values to style properties:\n   - For transform properties (e.g., 'transform.translateX', 'transform.scale'):\n     Extract the specific transform type and apply with appropriate units.\n   - For standard CSS properties (e.g., 'opacity'):\n     Apply directly to the style object.\n   - Example: style={{ opacity: animatedOpacity, transform: `translateX(${animatedX}px) scale(${animatedScale})` }}\n4. For sequence-based timing (startAfter, startWith):\n   - Wrap elements in <Sequence> components with appropriate 'from' and 'durationInFrames' props\n   - Use 'from' attribute based on animation.delayInFrames\n   - Example: <Sequence from={30} durationInFrames={60}>...</Sequence>\n\n### SPECIFIC ELEMENTS TO IMPLEMENT:\n\n#### ELEMENT 1: 205edf33-429b-4ed6-aa76-4d127df23087 (shape)\n- Initial Layout (CSS equivalent):\n  * x: 0px\n  * y: 0px\n  * width: 1920px\n  * height: 1080px\n  * opacity: 1\n  * rotation: 0deg\n  * scale: 1\n  * backgroundColor: #FFFFFF\n- React style equivalent: style={{ position: 'absolute', left: 0px, top: 0px, width: 1920px, height: 1080px, opacity: 1, transform: 'rotate(0deg) scale(1)', backgroundColor: '#FFFFFF' }}\n\n#### ELEMENT 2: 939d0f04-6dc0-41b2-9a92-73939a037649 (shape)\n- Initial Layout (CSS equivalent):\n  * x: 160px\n  * y: 120px\n  * width: 1600px\n  * height: 840px\n  * opacity: 1\n  * rotation: 0deg\n  * scale: 1\n  * backgroundColor: #F5F5F5\n- React style equivalent: style={{ position: 'absolute', left: 160px, top: 120px, width: 1600px, height: 840px, opacity: 1, transform: 'rotate(0deg) scale(1)', backgroundColor: '#F5F5F5' }}\n\n- Animations for 939d0f04-6dc0-41b2-9a92-73939a037649:\n  * Animation 1: fadeOut\n    - Start frame: 0\n    - Duration: 40 frames\n    - End frame: 40\n    - Easing: easeInCubic → Implement as: Easing.easeInCubic\n    - Properties to animate:\n      • opacity: from 1 to 0\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 40], \n          [1, 0], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInCubic }\n        );`\n\n#### ELEMENT 3: 3a1dae7b-8578-4fcd-9fe5-bcd394282677 (shape)\n- Initial Layout (CSS equivalent):\n  * x: 360px\n  * y: 200px\n  * width: 1200px\n  * height: 500px\n  * opacity: 0\n  * rotation: 0deg\n  * scale: 1\n  * backgroundColor: #EFEFEF\n- React style equivalent: style={{ position: 'absolute', left: 360px, top: 200px, width: 1200px, height: 500px, opacity: 0, transform: 'rotate(0deg) scale(1)', backgroundColor: '#EFEFEF' }}\n\n- Animations for 3a1dae7b-8578-4fcd-9fe5-bcd394282677:\n  * Animation 1: fadeIn\n    - Start frame: 0\n    - Duration: 30 frames\n    - End frame: 30\n    - Easing: easeOutCubic → Implement as: Easing.easeOutCubic\n    - Properties to animate:\n      • opacity: from 0 to 1\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 30], \n          [0, 1], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }\n        );`\n  * Animation 2: fadeOut\n    - Start frame: 0\n    - Duration: 20 frames\n    - End frame: 20\n    - Easing: easeInCubic → Implement as: Easing.easeInCubic\n    - Properties to animate:\n      • opacity: from 1 to 0\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 20], \n          [1, 0], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInCubic }\n        );`\n\n#### ELEMENT 4: 51ba681d-9233-4078-9c01-f1fab77a4895 (text)\n- Content: Drag & Drop Photo Here\n- Initial Layout (CSS equivalent):\n  * x: 960px\n  * y: 450px\n  * width: 600px\n  * height: 50px\n  * opacity: 0\n  * rotation: 0deg\n  * scale: 1\n- React style equivalent: style={{ position: 'absolute', left: 960px, top: 450px, width: 600px, height: 50px, opacity: 0, transform: 'rotate(0deg) scale(1)' }}\n\n- Animations for 51ba681d-9233-4078-9c01-f1fab77a4895:\n  * Animation 1: fadeIn\n    - Start frame: 0\n    - Duration: 20 frames\n    - End frame: 20\n    - Easing: easeOutCubic → Implement as: Easing.easeOutCubic\n    - Properties to animate:\n      • opacity: from 0 to 1\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 20], \n          [0, 1], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }\n        );`\n  * Animation 2: fadeOut\n    - Start frame: 0\n    - Duration: 20 frames\n    - End frame: 20\n    - Easing: easeInCubic → Implement as: Easing.easeInCubic\n    - Properties to animate:\n      • opacity: from 1 to 0\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 20], \n          [1, 0], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInCubic }\n        );`\n\n#### ELEMENT 5: 19d2337b-9ba5-4a67-a69a-0ebcfb28d970 (image)\n- Content: photo-placeholder.png\n- Initial Layout (CSS equivalent):\n  * x: -600px\n  * y: 450px\n  * width: 600px\n  * height: 400px\n  * opacity: 1\n  * rotation: 0deg\n  * scale: 1\n- React style equivalent: style={{ position: 'absolute', left: -600px, top: 450px, width: 600px, height: 400px, opacity: 1, transform: 'rotate(0deg) scale(1)' }}\n\n- Animations for 19d2337b-9ba5-4a67-a69a-0ebcfb28d970:\n  * Animation 1: slideIn\n    - Start frame: 0\n    - Duration: 30 frames\n    - End frame: 30\n    - Easing: easeOutQuad → Implement as: Easing.easeOutQuad\n    - Properties to animate:\n      • x: from -600 to 660\n        Implementation: `const xValue = interpolate(\n          frame, \n          [0, 30], \n          [-600, 660], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutQuad }\n        );`\n\n#### ELEMENT 6: 81a9adc9-9c42-4b40-8da8-6639b44fc07b (shape)\n- Initial Layout (CSS equivalent):\n  * x: 500px\n  * y: 770px\n  * width: 400px\n  * height: 6px\n  * opacity: 1\n  * rotation: 0deg\n  * scale: 1\n  * backgroundColor: #CCCCCC\n- React style equivalent: style={{ position: 'absolute', left: 500px, top: 770px, width: 400px, height: 6px, opacity: 1, transform: 'rotate(0deg) scale(1)', backgroundColor: '#CCCCCC' }}\n\n#### ELEMENT 7: 7ca3809b-adaa-41dc-9ec4-2ab207ec86e1 (text)\n- Content: Detail\n- Initial Layout (CSS equivalent):\n  * x: 450px\n  * y: 750px\n  * width: 100px\n  * height: 30px\n  * opacity: 0\n  * rotation: 0deg\n  * scale: 1\n- React style equivalent: style={{ position: 'absolute', left: 450px, top: 750px, width: 100px, height: 30px, opacity: 0, transform: 'rotate(0deg) scale(1)' }}\n\n- Animations for 7ca3809b-adaa-41dc-9ec4-2ab207ec86e1:\n  * Animation 1: fadeIn\n    - Start frame: 0\n    - Duration: 20 frames\n    - End frame: 20\n    - Easing: easeOutCubic → Implement as: Easing.easeOutCubic\n    - Properties to animate:\n      • opacity: from 0 to 1\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 20], \n          [0, 1], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }\n        );`\n  * Animation 2: fadeOut\n    - Start frame: 0\n    - Duration: 20 frames\n    - End frame: 20\n    - Easing: easeInCubic → Implement as: Easing.easeInCubic\n    - Properties to animate:\n      • opacity: from 1 to 0\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 20], \n          [1, 0], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInCubic }\n        );`\n\n#### ELEMENT 8: 06ba5476-155e-4215-b0e8-74617e83955b (shape)\n- Initial Layout (CSS equivalent):\n  * x: 500px\n  * y: 767px\n  * width: 20px\n  * height: 20px\n  * opacity: 1\n  * rotation: 0deg\n  * scale: 1\n  * backgroundColor: #008ED2\n- React style equivalent: style={{ position: 'absolute', left: 500px, top: 767px, width: 20px, height: 20px, opacity: 1, transform: 'rotate(0deg) scale(1)', backgroundColor: '#008ED2' }}\n\n- Animations for 06ba5476-155e-4215-b0e8-74617e83955b:\n  * Animation 1: slideIn\n    - Start frame: 0\n    - Duration: 40 frames\n    - End frame: 40\n    - Easing: easeOutCubic → Implement as: Easing.easeOutCubic\n    - Properties to animate:\n      • x: from 500 to 880\n        Implementation: `const xValue = interpolate(\n          frame, \n          [0, 40], \n          [500, 880], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }\n        );`\n\n#### ELEMENT 9: 0ef1d604-7b06-45c8-a5a3-b47ec5e0cffb (shape)\n- Initial Layout (CSS equivalent):\n  * x: 1100px\n  * y: 770px\n  * width: 400px\n  * height: 6px\n  * opacity: 1\n  * rotation: 0deg\n  * scale: 1\n  * backgroundColor: #CCCCCC\n- React style equivalent: style={{ position: 'absolute', left: 1100px, top: 770px, width: 400px, height: 6px, opacity: 1, transform: 'rotate(0deg) scale(1)', backgroundColor: '#CCCCCC' }}\n\n#### ELEMENT 10: 03918672-6b93-4b8d-9465-a7dac1f5c0fc (text)\n- Content: Texture\n- Initial Layout (CSS equivalent):\n  * x: 1050px\n  * y: 750px\n  * width: 100px\n  * height: 30px\n  * opacity: 0\n  * rotation: 0deg\n  * scale: 1\n- React style equivalent: style={{ position: 'absolute', left: 1050px, top: 750px, width: 100px, height: 30px, opacity: 0, transform: 'rotate(0deg) scale(1)' }}\n\n- Animations for 03918672-6b93-4b8d-9465-a7dac1f5c0fc:\n  * Animation 1: fadeIn\n    - Start frame: 0\n    - Duration: 20 frames\n    - End frame: 20\n    - Easing: easeOutCubic → Implement as: Easing.easeOutCubic\n    - Properties to animate:\n      • opacity: from 0 to 1\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 20], \n          [0, 1], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }\n        );`\n  * Animation 2: fadeOut\n    - Start frame: 0\n    - Duration: 20 frames\n    - End frame: 20\n    - Easing: easeInCubic → Implement as: Easing.easeInCubic\n    - Properties to animate:\n      • opacity: from 1 to 0\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 20], \n          [1, 0], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInCubic }\n        );`\n\n#### ELEMENT 11: 17975e4b-9fa5-4429-bec9-e0cddc25bacc (shape)\n- Initial Layout (CSS equivalent):\n  * x: 1100px\n  * y: 767px\n  * width: 20px\n  * height: 20px\n  * opacity: 1\n  * rotation: 0deg\n  * scale: 1\n  * backgroundColor: #FFA500\n- React style equivalent: style={{ position: 'absolute', left: 1100px, top: 767px, width: 20px, height: 20px, opacity: 1, transform: 'rotate(0deg) scale(1)', backgroundColor: '#FFA500' }}\n\n- Animations for 17975e4b-9fa5-4429-bec9-e0cddc25bacc:\n  * Animation 1: slideIn\n    - Start frame: 0\n    - Duration: 40 frames\n    - End frame: 40\n    - Easing: easeOutCubic → Implement as: Easing.easeOutCubic\n    - Properties to animate:\n      • x: from 1100 to 1480\n        Implementation: `const xValue = interpolate(\n          frame, \n          [0, 40], \n          [1100, 1480], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }\n        );`\n\n### SEQUENCE ORCHESTRATION & TIMING GUIDELINES:\nWhen implementing multiple animations, carefully orchestrate them to match the design intent:\n1. Use <Sequence> components for elements or animations that should start at specific frames.\n   Example: <Sequence from={30} durationInFrames={60}><YourAnimatedElement /></Sequence>\n2. For animation dependencies between elements (animations that must follow others):\n   - Create a timing map that respects trigger values like 'afterPrevious' by calculating startFrames.\n   - Example: const titleExitFrame = titleStartFrame + titleDuration;\n             const subTitleStartFrame = titleExitFrame; // Starting after title exits\n\n### CODE QUALITY & PERFORMANCE GUIDELINES:\n1. MODULARITY: For complex elements, consider creating sub-components.\n2. PERFORMANCE: Minimize DOM nodes - prefer CSS transforms over creating new elements.\n3. MEMOIZATION: Use React.useMemo() for computationally expensive calculations.\n4. TYPING: Provide proper TypeScript types throughout, including for style objects.\n5. COMMENTS: Add brief comments for complex animation logic or calculations.\n6. ORGANIZATION: Group related animations and separate distinct animation phases.\n7. ERROR HANDLING: Include defensive checks for potentially undefined values.\n\n### CRITICAL REMINDER:\n- PRECISELY follow the AnimationDesignBrief's specifications.\n- RESPECT the timing, durations, and easing specified in the brief.\n- IMPLEMENT ALL elements and animations exactly as detailed above.\n- START with the boilerplate structure provided earlier.\n- REMEMBER the first line MUST be: // src/remotion/components/scenes/CleanUiScreenScene.tsx","sceneId":"520b4338-18b7-478c-b63a-053909942700","userData":{"userId":"92256ac9-495a-4ba2-aecc-fa4ce6756baa"},"projectId":"c94eefc1-a2ac-49ea-bfb8-ba13864a0a6a","componentName":"CleanUiScreenScene","durationInFrames":240,"animationDesignBriefId":"12698aaf-a8e5-4bc2-ab72-144eade4d2c6"},"statusMessageId":"afecf2bf-79c5-4903-9f6e-69f913c5c1d2"},{"id":"3de870d7-8502-431f-9fda-1618d18344a5","projectId":"c94eefc1-a2ac-49ea-bfb8-ba13864a0a6a","effect":"QuickcutMontageUserScene","tsxCode":"\"use client\";\n\n// src/remotion/components/scenes/QuickcutMontageUserScene.tsx\nimport React from 'react';\nimport {\n\tAbsoluteFill,\n\tuseCurrentFrame,\n\tuseVideoConfig,\n\tinterpolate,\n\tspring,\n\tSequence,\n\tEasing,\n\tAudio,\n} from 'remotion';\nimport type { AnimationDesignBrief } from '~/lib/schemas/animationDesignBrief.schema';\n\nexport const QuickcutMontageUserScene: React.FC<{ brief: AnimationDesignBrief }> = ({ brief }) => {\n\tconst frame = useCurrentFrame();\n\tconst { fps, width, height, durationInFrames } = useVideoConfig();\n\n\t// Extract brief values\n\tconst { colorPalette } = brief;\n\tconst backgroundColor = colorPalette?.background || '#111111';\n\n\t// ELEMENT 1: Full-screen shape (fadeIn 0–5, fadeOut 5–10)\n\tconst shapeFadeIn = interpolate(\n\t\tframe,\n\t\t[0, 5],\n\t\t[0, 1],\n\t\t{ extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }\n\t);\n\tconst shapeFadeOut = interpolate(\n\t\tframe,\n\t\t[5, 10],\n\t\t[1, 0],\n\t\t{ extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInCubic }\n\t);\n\tconst shapeOpacity = frame <= 5 ? shapeFadeIn : frame <= 10 ? shapeFadeOut : 0;\n\n\t// ELEMENT 2: Simulated image (fadeIn 0–20, scale 0–30, fadeOut 20–35)\n\tconst imgOpacityIn = interpolate(\n\t\tframe,\n\t\t[0, 20],\n\t\t[0, 1],\n\t\t{ extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }\n\t);\n\tconst imgOpacityOut = interpolate(\n\t\tframe,\n\t\t[20, 35],\n\t\t[1, 0],\n\t\t{ extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInCubic }\n\t);\n\tconst imgOpacity = frame <= 20 ? imgOpacityIn : frame <= 35 ? imgOpacityOut : 0;\n\tconst imgScale = interpolate(\n\t\tframe,\n\t\t[0, 30],\n\t\t[1.2, 1],\n\t\t{ extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutBack }\n\t);\n\n\t// ELEMENT 3: Custom mesh (fadeIn 0–30, scale 0–40, rotate 0–120, fadeOut 120–140)\n\tconst meshOpacityIn = interpolate(\n\t\tframe,\n\t\t[0, 30],\n\t\t[0, 1],\n\t\t{ extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }\n\t);\n\tconst meshOpacityOut = interpolate(\n\t\tframe,\n\t\t[120, 140],\n\t\t[1, 0],\n\t\t{ extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInCubic }\n\t);\n\tconst meshOpacity = frame <= 30 ? meshOpacityIn : frame <= 120 ? 1 : frame <= 140 ? meshOpacityOut : 0;\n\tconst meshScale = interpolate(\n\t\tframe,\n\t\t[0, 40],\n\t\t[0.2, 1],\n\t\t{ extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutBack }\n\t);\n\tconst meshRotation = interpolate(\n\t\tframe,\n\t\t[0, 120],\n\t\t[0, 360],\n\t\t{ extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.linear }\n\t);\n\n\t// ELEMENT 4: Title text (slideInDown 0–30, fadeOut 30–45)\n\tconst titleY = interpolate(\n\t\tframe,\n\t\t[0, 30],\n\t\t[100, 200],\n\t\t{ extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutBack }\n\t);\n\tconst titleOpacityIn = interpolate(\n\t\tframe,\n\t\t[0, 30],\n\t\t[0, 1],\n\t\t{ extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutBack }\n\t);\n\tconst titleOpacityOut = interpolate(\n\t\tframe,\n\t\t[30, 45],\n\t\t[1, 0],\n\t\t{ extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInCubic }\n\t);\n\tconst titleOpacity = frame <= 30 ? titleOpacityIn : frame <= 45 ? titleOpacityOut : 0;\n\n\treturn (\n\t\t<AbsoluteFill style={{ backgroundColor }}>\n\t\t\t{/* Audio cues */}\n\t\t\t<Audio src=\"assets/snap.wav\" startFrom={0} volume={1} />\n\t\t\t<Sequence from={75} durationInFrames={durationInFrames - 75}>\n\t\t\t\t<Audio src=\"assets/ambient_tech.mp3\" volume={0.7} loop />\n\t\t\t</Sequence>\n\n\t\t\t{/* Full-screen white overlay shape */}\n\t\t\t<div\n\t\t\t\tstyle={{\n\t\t\t\t\tposition: 'absolute',\n\t\t\t\t\tleft: 0,\n\t\t\t\t\ttop: 0,\n\t\t\t\t\twidth: width,\n\t\t\t\t\theight: height,\n\t\t\t\t\tbackgroundColor: '#FFFFFF',\n\t\t\t\t\topacity: shapeOpacity,\n\t\t\t\t\ttransform: 'rotate(0deg) scale(1)',\n\t\t\t\t\tzIndex: 1,\n\t\t\t\t}}\n\t\t\t/>  \n\n\t\t\t{/* Simulated user photo */}\n\t\t\t<div\n\t\t\t\tstyle={{\n\t\t\t\t\tposition: 'absolute',\n\t\t\t\t\tleft: 960,\n\t\t\t\t\ttop: 540,\n\t\t\t\t\twidth: 1600,\n\t\t\t\t\theight: 900,\n\t\t\t\t\topacity: imgOpacity,\n\t\t\t\t\ttransform: `translate(-50%, -50%) scale(${imgScale})`,\n\t\t\t\t\tbackgroundColor: '#888888', // placeholder gray\n\t\t\t\t\tborderRadius: 20,\n\t\t\t\t\tzIndex: 2,\n\t\t\t\t}}\n\t\t\t/>\n\n\t\t\t{/* Futuristic mesh simulation */}\n\t\t\t<div\n\t\t\t\tstyle={{\n\t\t\t\t\tposition: 'absolute',\n\t\t\t\t\tleft: 960,\n\t\t\t\t\ttop: 540,\n\t\t\t\t\twidth: 800,\n\t\t\t\t\theight: 800,\n\t\t\t\t\topacity: meshOpacity,\n\t\t\t\t\ttransform: `translate(-50%, -50%) rotate(${meshRotation}deg) scale(${meshScale})`,\n\t\t\t\t\tborder: `4px dashed ${colorPalette?.accent || '#AA00FF'}`,\n\t\t\t\t\tborderRadius: '50%',\n\t\t\t\t\tbackgroundColor: 'transparent',\n\t\t\t\t\tzIndex: 3,\n\t\t\t\t}}\n\t\t\t/>\n\n\t\t\t{/* Scene Title */}\n\t\t\t<div\n\t\t\t\tstyle={{\n\t\t\t\t\tposition: 'absolute',\n\t\t\t\t\tleft: 960,\n\t\t\t\t\ttop: titleY,\n\t\t\t\t\twidth: 800,\n\t\t\t\t\theight: 60,\n\t\t\t\t\topacity: titleOpacity,\n\t\t\t\t\ttransform: 'translateX(-50%)',\n\t\t\t\t\tcolor: '#FFFFFF',\n\t\t\t\t\tfontFamily: 'Roboto, sans-serif',\n\t\t\t\t\tfontWeight: 700,\n\t\t\t\t\tfontSize: 48,\n\t\t\t\t\ttextAlign: 'center',\n\t\t\t\t\tzIndex: 4,\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\tCapturing Reality\n\t\t\t</div>\n\t\t</AbsoluteFill>\n\t);\n};","status":"complete","outputUrl":"https://bazaar-vid-components.3a37cf04c89e7483b59120fb95af6468.r2.dev/custom-components/3de870d7-8502-431f-9fda-1618d18344a5.js","errorMessage":"TSX code is missing for this job","retryCount":1,"createdAt":"2025-05-10 14:01:40.613042+00","updatedAt":"2025-05-10 14:02:28.493+00","metadata":{"fps":30,"width":1920,"height":1080,"prompt":"### ROLE: You are an Expert Remotion Developer and Senior React Engineer.\n### TASK: Create a production-quality Remotion React functional component in TypeScript.\n### COMPONENT NAME: 'QuickcutMontageUserScene'\n### OBJECTIVE: Generate a component that precisely implements the provided AnimationDesignBrief with professional animations and visual effects.\n### VIDEO CONFIG: Target video is 1920x1080px, 240 frames total duration, at 30 FPS.\n### MANDATORY REQUIREMENTS:\n- The FIRST line MUST be: // src/remotion/components/scenes/QuickcutMontageUserScene.tsx\n- The component MUST be a functional component using TypeScript (.tsx).\n- ALWAYS use the Remotion hooks: useCurrentFrame() and useVideoConfig() for timing and dimensions.\n- Component MUST accept props: { brief: AnimationDesignBrief } (assume this type is imported).\n- Utilize appropriate Remotion animation functions based on each element's needs:\n  * interpolate() - For smooth linear or eased transitions between values\n  * spring() - For physics-based, bouncy animations\n  * Easing module - For specifying animation curves (easeInOut, bezier, etc.)\n- Use Remotion timing components when needed:\n  * <Sequence from={startFrame} durationInFrames={duration}> - For sequential animations\n  * <Series> - For orchestrating complex animation sequences\n  * <Loop> - For repeating animations\n- Apply absolute positioning based on initialLayout coordinates.\n\n### BOILERPLATE STRUCTURE (Follow this pattern):\n```typescript\n// src/remotion/components/scenes/QuickcutMontageUserScene.tsx\nimport { AbsoluteFill, useCurrentFrame, useVideoConfig, interpolate, spring, Sequence, Easing, Img, Audio } from 'remotion';\nimport React from 'react';\n// import { AnimationDesignBrief } from '~/lib/schemas/animationDesignBrief.schema';\n\nexport const QuickcutMontageUserScene: React.FC<{ brief: AnimationDesignBrief }> = ({ brief }) => {\n  const frame = useCurrentFrame();\n  const { fps, width, height, durationInFrames } = useVideoConfig();\n\n  // Extract key brief properties\n  const { elements, colorPalette, typography, overallStyle } = brief;\n\n  // Define background color from brief\n  const backgroundColor = colorPalette?.background || 'transparent';\n\n  return (\n    <AbsoluteFill style={{ backgroundColor }}>\n      {/* Render each element with its animations */}\n    </AbsoluteFill>\n  );\n};\n```\n\n--- Scene Overview ---\nScene Name: QuickcutMontageUserScene\nPurpose: Quick-cut montage: user snaps a real-world image, then cut to a wireframe 3D mesh forming\nOverall Style: Futuristic Tech Montage\n\n--- Color Palette ---\n- Primary Color: #00FFEE\n- Secondary Color: #FF5500\n- Accent Color: #AA00FF\n- Background Color: #111111\n- Text Primary Color: #FFFFFF\n- Text Secondary Color: #CCCCCC\n\n--- Typography ---\n- Default Font Family: Roboto\n- Heading1 Style:\n  - Font Family: Roboto Bold\n  - Font Size: 48\n\n### ELEMENT-BY-ELEMENT IMPLEMENTATION GUIDE:\nEach element from the AnimationDesignBrief must be translated into React/Remotion code following these guidelines:\n\n### IMPORTANT RESTRICTION - NO EXTERNAL ASSETS:\n- DO NOT reference or try to load any external images, videos, or other media files\n- DO NOT use the <Img> component from Remotion to load any image files\n- If the AnimationDesignBrief mentions image elements, implement them as:\n  * Colored rectangles or circles using <div> with backgroundColor and borderRadius\n  * SVG graphics created programmatically (rectangles, circles, paths)\n  * CSS gradients for more visual interest\n- Focus ONLY on animations, shapes, text elements, and colors\n- This temporary restriction ensures component reliability while asset management is being developed\n\n#### ELEMENT TYPE TRANSLATION:\n- 'text' → Use a <div> or <h1>-<h6> with appropriate styling\n- 'image' → DO NOT USE <Img>. Instead, use a <div> with solid background color or gradient\n- 'video' → DO NOT USE <Video>. Instead, use animated <div> elements\n- 'shape' → Use appropriate shape elements (div with border-radius for circles/rounded rectangles, SVG for complex shapes)\n- 'container' → Use a positioned <div> that may contain child elements\n\n#### INITIAL LAYOUT TRANSLATION:\nAll initialLayout properties MUST be translated to React inline styles:\n- 'x', 'y' → style={{ position: 'absolute', left: x, top: y }}\n- 'width', 'height' → style={{ width, height }}\n- 'opacity' → style={{ opacity }}\n- 'rotation' → style={{ transform: `rotate(${rotation}deg)` }}\n- 'scale' → style={{ transform: `scale(${scale})` }}\n- 'zIndex' → style={{ zIndex }}\n- Multiple transforms should be combined: transform: `rotate(${rotation}deg) scale(${scale})`\n\n#### ANIMATION IMPLEMENTATION:\nFor each animation, use this approach:\n1. Calculate the active animation frames based on delayInFrames and durationInFrames:\n   const animStartFrame = animation.delayInFrames || 0;\n   const animEndFrame = animStartFrame + (animation.durationInFrames || 30);\n2. Apply the appropriate Remotion animation function:\n   - For 'spring' animations or when remotionFunctionHint is 'spring':\n     const animatedValue = spring({\n       frame: frame - animStartFrame,\n       fps,\n       from: property.from,\n       to: property.to,\n       config: property.springConfig || { damping: 10, mass: 1, stiffness: 100 }\n     });\n   - For most other animations, use interpolate:\n     const animatedValue = interpolate(\n       frame,\n       [animStartFrame, animEndFrame],\n       [property.from, property.to],\n       {\n         extrapolateLeft: 'clamp',\n         extrapolateRight: 'clamp',\n         easing: determineEasing(animation.easing)\n       }\n     );\n3. Apply animated values to style properties:\n   - For transform properties (e.g., 'transform.translateX', 'transform.scale'):\n     Extract the specific transform type and apply with appropriate units.\n   - For standard CSS properties (e.g., 'opacity'):\n     Apply directly to the style object.\n   - Example: style={{ opacity: animatedOpacity, transform: `translateX(${animatedX}px) scale(${animatedScale})` }}\n4. For sequence-based timing (startAfter, startWith):\n   - Wrap elements in <Sequence> components with appropriate 'from' and 'durationInFrames' props\n   - Use 'from' attribute based on animation.delayInFrames\n   - Example: <Sequence from={30} durationInFrames={60}>...</Sequence>\n\n### SPECIFIC ELEMENTS TO IMPLEMENT:\n\n#### ELEMENT 1: 8519f86e-d3ee-4e01-a644-805c4c76fd0a (shape)\n- Initial Layout (CSS equivalent):\n  * x: 0px\n  * y: 0px\n  * width: 1920px\n  * height: 1080px\n  * opacity: 0\n  * rotation: 0deg\n  * scale: 1\n  * backgroundColor: #FFFFFF\n- React style equivalent: style={{ position: 'absolute', left: 0px, top: 0px, width: 1920px, height: 1080px, opacity: 0, transform: 'rotate(0deg) scale(1)', backgroundColor: '#FFFFFF' }}\n\n- Animations for 8519f86e-d3ee-4e01-a644-805c4c76fd0a:\n  * Animation 1: fadeIn\n    - Start frame: 0\n    - Duration: 5 frames\n    - End frame: 5\n    - Easing: easeOutCubic → Implement as: Easing.easeOutCubic\n    - Properties to animate:\n      • opacity: from 0 to 1\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 5], \n          [0, 1], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }\n        );`\n  * Animation 2: fadeOut\n    - Start frame: 0\n    - Duration: 5 frames\n    - End frame: 5\n    - Easing: easeInCubic → Implement as: Easing.easeInCubic\n    - Properties to animate:\n      • opacity: from 1 to 0\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 5], \n          [1, 0], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInCubic }\n        );`\n\n#### ELEMENT 2: 3b2aa851-dee6-411c-9aaf-d9bdaf490fcf (image)\n- Content: assets/user_photo.jpg\n- Initial Layout (CSS equivalent):\n  * x: 960px\n  * y: 540px\n  * width: 1600px\n  * height: 900px\n  * opacity: 0\n  * rotation: 0deg\n  * scale: 1.2\n- React style equivalent: style={{ position: 'absolute', left: 960px, top: 540px, width: 1600px, height: 900px, opacity: 0, transform: 'rotate(0deg) scale(1.2)' }}\n\n- Animations for 3b2aa851-dee6-411c-9aaf-d9bdaf490fcf:\n  * Animation 1: fadeIn\n    - Start frame: 0\n    - Duration: 20 frames\n    - End frame: 20\n    - Easing: easeOutCubic → Implement as: Easing.easeOutCubic\n    - Properties to animate:\n      • opacity: from 0 to 1\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 20], \n          [0, 1], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }\n        );`\n  * Animation 2: customProperty\n    - Start frame: 0\n    - Duration: 30 frames\n    - End frame: 30\n    - Easing: easeOutBack → Implement as: Easing.easeOutBack\n    - Properties to animate:\n      • scale: from 1.2 to 1\n        Implementation: `const scaleValue = interpolate(\n          frame, \n          [0, 30], \n          [1.2, 1], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutBack }\n        );`\n  * Animation 3: fadeOut\n    - Start frame: 0\n    - Duration: 15 frames\n    - End frame: 15\n    - Easing: easeInCubic → Implement as: Easing.easeInCubic\n    - Properties to animate:\n      • opacity: from 1 to 0\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 15], \n          [1, 0], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInCubic }\n        );`\n\n#### ELEMENT 3: a14a23fc-678b-4ca5-98c3-368c42271930 (customComponent)\n- Initial Layout (CSS equivalent):\n  * x: 960px\n  * y: 540px\n  * width: 800px\n  * height: 800px\n  * opacity: 0\n  * rotation: 0deg\n  * scale: 0.2\n- React style equivalent: style={{ position: 'absolute', left: 960px, top: 540px, width: 800px, height: 800px, opacity: 0, transform: 'rotate(0deg) scale(0.2)' }}\n\n- Animations for a14a23fc-678b-4ca5-98c3-368c42271930:\n  * Animation 1: fadeIn\n    - Start frame: 0\n    - Duration: 30 frames\n    - End frame: 30\n    - Easing: easeOutCubic → Implement as: Easing.easeOutCubic\n    - Properties to animate:\n      • opacity: from 0 to 1\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 30], \n          [0, 1], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutCubic }\n        );`\n  * Animation 2: customProperty\n    - Start frame: 0\n    - Duration: 40 frames\n    - End frame: 40\n    - Easing: easeOutBack → Implement as: Easing.easeOutBack\n    - Properties to animate:\n      • scale: from 0.2 to 1\n        Implementation: `const scaleValue = interpolate(\n          frame, \n          [0, 40], \n          [0.2, 1], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutBack }\n        );`\n  * Animation 3: customProperty\n    - Start frame: 0\n    - Duration: 120 frames\n    - End frame: 120\n    - Easing: linear → Implement as: Easing.linear\n    - Properties to animate:\n      • rotation: from 0 to 360\n        Implementation: `const rotationValue = interpolate(\n          frame, \n          [0, 120], \n          [0, 360], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.linear }\n        );`\n  * Animation 4: fadeOut\n    - Start frame: 0\n    - Duration: 20 frames\n    - End frame: 20\n    - Easing: easeInCubic → Implement as: Easing.easeInCubic\n    - Properties to animate:\n      • opacity: from 1 to 0\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 20], \n          [1, 0], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInCubic }\n        );`\n\n#### ELEMENT 4: 1399becf-8fa9-424d-99fe-a9d7c56b5bf0 (text)\n- Content: Capturing Reality\n- Initial Layout (CSS equivalent):\n  * x: 960px\n  * y: 200px\n  * width: 800px\n  * height: 60px\n  * opacity: 0\n  * rotation: 0deg\n  * scale: 1\n- React style equivalent: style={{ position: 'absolute', left: 960px, top: 200px, width: 800px, height: 60px, opacity: 0, transform: 'rotate(0deg) scale(1)' }}\n\n- Animations for 1399becf-8fa9-424d-99fe-a9d7c56b5bf0:\n  * Animation 1: slideInDown\n    - Start frame: 0\n    - Duration: 30 frames\n    - End frame: 30\n    - Easing: easeOutBack → Implement as: Easing.easeOutBack\n    - Properties to animate:\n      • y: from 100 to 200\n        Implementation: `const yValue = interpolate(\n          frame, \n          [0, 30], \n          [100, 200], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutBack }\n        );`\n      • opacity: from 0 to 1\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 30], \n          [0, 1], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeOutBack }\n        );`\n  * Animation 2: fadeOut\n    - Start frame: 0\n    - Duration: 15 frames\n    - End frame: 15\n    - Easing: easeInCubic → Implement as: Easing.easeInCubic\n    - Properties to animate:\n      • opacity: from 1 to 0\n        Implementation: `const opacityValue = interpolate(\n          frame, \n          [0, 15], \n          [1, 0], \n          { extrapolateLeft: 'clamp', extrapolateRight: 'clamp', easing: Easing.easeInCubic }\n        );`\n\n### SEQUENCE ORCHESTRATION & TIMING GUIDELINES:\nWhen implementing multiple animations, carefully orchestrate them to match the design intent:\n1. Use <Sequence> components for elements or animations that should start at specific frames.\n   Example: <Sequence from={30} durationInFrames={60}><YourAnimatedElement /></Sequence>\n2. For animation dependencies between elements (animations that must follow others):\n   - Create a timing map that respects trigger values like 'afterPrevious' by calculating startFrames.\n   - Example: const titleExitFrame = titleStartFrame + titleDuration;\n             const subTitleStartFrame = titleExitFrame; // Starting after title exits\n\n### AUDIO IMPLEMENTATION:\nThis scene includes the following audio track(s) to implement:\n- Audio 1: audio1\n  - Source: assets/snap.wav\n  - Start at frame: 0\n  - Volume: 1\n  - Implementation: <Audio src={\"assets/snap.wav\"} startFrom={0} volume={1} />\n- Audio 2: audio2\n  - Source: assets/ambient_tech.mp3\n  - Start at frame: 75\n  - Loop: true\n  - Volume: 0.7\n  - Implementation: <Audio src={\"assets/ambient_tech.mp3\"} startFrom={75} volume={0.7} loop/>\n\n### CODE QUALITY & PERFORMANCE GUIDELINES:\n1. MODULARITY: For complex elements, consider creating sub-components.\n2. PERFORMANCE: Minimize DOM nodes - prefer CSS transforms over creating new elements.\n3. MEMOIZATION: Use React.useMemo() for computationally expensive calculations.\n4. TYPING: Provide proper TypeScript types throughout, including for style objects.\n5. COMMENTS: Add brief comments for complex animation logic or calculations.\n6. ORGANIZATION: Group related animations and separate distinct animation phases.\n7. ERROR HANDLING: Include defensive checks for potentially undefined values.\n\n### CRITICAL REMINDER:\n- PRECISELY follow the AnimationDesignBrief's specifications.\n- RESPECT the timing, durations, and easing specified in the brief.\n- IMPLEMENT ALL elements and animations exactly as detailed above.\n- START with the boilerplate structure provided earlier.\n- REMEMBER the first line MUST be: // src/remotion/components/scenes/QuickcutMontageUserScene.tsx","sceneId":"b37a1c5f-90e4-4f3b-9a19-12b3d8e2f123","userData":{"userId":"92256ac9-495a-4ba2-aecc-fa4ce6756baa"},"projectId":"c94eefc1-a2ac-49ea-bfb8-ba13864a0a6a","componentName":"QuickcutMontageUserScene","durationInFrames":240,"animationDesignBriefId":"07f7c436-46c4-4cc0-b953-ddde5ef1a71e"},"statusMessageId":"afecf2bf-79c5-4903-9f6e-69f913c5c1d2"}]